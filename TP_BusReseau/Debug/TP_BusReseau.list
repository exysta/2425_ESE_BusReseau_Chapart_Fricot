
TP_BusReseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080054a4  080054a4  000064a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005590  08005590  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005590  08005590  00006590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005598  08005598  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005598  08005598  00006598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800559c  0800559c  0000659c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080055a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000006c  0800560c  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  0800560c  00007308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e752  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ef  00000000  00000000  000157ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00017de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009af  00000000  00000000  00018a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232ce  00000000  00000000  0001941f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a85  00000000  00000000  0003c6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf790  00000000  00000000  0004d172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c902  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b14  00000000  00000000  0011c948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012045c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800548c 	.word	0x0800548c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800548c 	.word	0x0800548c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_ldivmod>:
 80002d0:	b97b      	cbnz	r3, 80002f2 <__aeabi_ldivmod+0x22>
 80002d2:	b972      	cbnz	r2, 80002f2 <__aeabi_ldivmod+0x22>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bfbe      	ittt	lt
 80002d8:	2000      	movlt	r0, #0
 80002da:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002de:	e006      	blt.n	80002ee <__aeabi_ldivmod+0x1e>
 80002e0:	bf08      	it	eq
 80002e2:	2800      	cmpeq	r0, #0
 80002e4:	bf1c      	itt	ne
 80002e6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ea:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ee:	f000 b9b5 	b.w	800065c <__aeabi_idiv0>
 80002f2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002fa:	2900      	cmp	r1, #0
 80002fc:	db09      	blt.n	8000312 <__aeabi_ldivmod+0x42>
 80002fe:	2b00      	cmp	r3, #0
 8000300:	db1a      	blt.n	8000338 <__aeabi_ldivmod+0x68>
 8000302:	f000 f84d 	bl	80003a0 <__udivmoddi4>
 8000306:	f8dd e004 	ldr.w	lr, [sp, #4]
 800030a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030e:	b004      	add	sp, #16
 8000310:	4770      	bx	lr
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	2b00      	cmp	r3, #0
 800031a:	db1b      	blt.n	8000354 <__aeabi_ldivmod+0x84>
 800031c:	f000 f840 	bl	80003a0 <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	4252      	negs	r2, r2
 8000332:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000336:	4770      	bx	lr
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	f000 f82f 	bl	80003a0 <__udivmoddi4>
 8000342:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034a:	b004      	add	sp, #16
 800034c:	4240      	negs	r0, r0
 800034e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000352:	4770      	bx	lr
 8000354:	4252      	negs	r2, r2
 8000356:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035a:	f000 f821 	bl	80003a0 <__udivmoddi4>
 800035e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000366:	b004      	add	sp, #16
 8000368:	4252      	negs	r2, r2
 800036a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036e:	4770      	bx	lr

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000380:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000384:	f000 b96a 	b.w	800065c <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f000 f806 	bl	80003a0 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__udivmoddi4>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	9d08      	ldr	r5, [sp, #32]
 80003a6:	460c      	mov	r4, r1
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d14e      	bne.n	800044a <__udivmoddi4+0xaa>
 80003ac:	4694      	mov	ip, r2
 80003ae:	458c      	cmp	ip, r1
 80003b0:	4686      	mov	lr, r0
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	d962      	bls.n	800047e <__udivmoddi4+0xde>
 80003b8:	b14a      	cbz	r2, 80003ce <__udivmoddi4+0x2e>
 80003ba:	f1c2 0320 	rsb	r3, r2, #32
 80003be:	4091      	lsls	r1, r2
 80003c0:	fa20 f303 	lsr.w	r3, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	4319      	orrs	r1, r3
 80003ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f f68c 	uxth.w	r6, ip
 80003d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003de:	fb07 1114 	mls	r1, r7, r4, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb04 f106 	mul.w	r1, r4, r6
 80003ea:	4299      	cmp	r1, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x64>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003f6:	f080 8112 	bcs.w	800061e <__udivmoddi4+0x27e>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 810f 	bls.w	800061e <__udivmoddi4+0x27e>
 8000400:	3c02      	subs	r4, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb1 f0f7 	udiv	r0, r1, r7
 800040e:	fb07 1110 	mls	r1, r7, r0, r1
 8000412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000416:	fb00 f606 	mul.w	r6, r0, r6
 800041a:	429e      	cmp	r6, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x94>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000426:	f080 80fc 	bcs.w	8000622 <__udivmoddi4+0x282>
 800042a:	429e      	cmp	r6, r3
 800042c:	f240 80f9 	bls.w	8000622 <__udivmoddi4+0x282>
 8000430:	4463      	add	r3, ip
 8000432:	3802      	subs	r0, #2
 8000434:	1b9b      	subs	r3, r3, r6
 8000436:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043a:	2100      	movs	r1, #0
 800043c:	b11d      	cbz	r5, 8000446 <__udivmoddi4+0xa6>
 800043e:	40d3      	lsrs	r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	e9c5 3200 	strd	r3, r2, [r5]
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	428b      	cmp	r3, r1
 800044c:	d905      	bls.n	800045a <__udivmoddi4+0xba>
 800044e:	b10d      	cbz	r5, 8000454 <__udivmoddi4+0xb4>
 8000450:	e9c5 0100 	strd	r0, r1, [r5]
 8000454:	2100      	movs	r1, #0
 8000456:	4608      	mov	r0, r1
 8000458:	e7f5      	b.n	8000446 <__udivmoddi4+0xa6>
 800045a:	fab3 f183 	clz	r1, r3
 800045e:	2900      	cmp	r1, #0
 8000460:	d146      	bne.n	80004f0 <__udivmoddi4+0x150>
 8000462:	42a3      	cmp	r3, r4
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0xcc>
 8000466:	4290      	cmp	r0, r2
 8000468:	f0c0 80f0 	bcc.w	800064c <__udivmoddi4+0x2ac>
 800046c:	1a86      	subs	r6, r0, r2
 800046e:	eb64 0303 	sbc.w	r3, r4, r3
 8000472:	2001      	movs	r0, #1
 8000474:	2d00      	cmp	r5, #0
 8000476:	d0e6      	beq.n	8000446 <__udivmoddi4+0xa6>
 8000478:	e9c5 6300 	strd	r6, r3, [r5]
 800047c:	e7e3      	b.n	8000446 <__udivmoddi4+0xa6>
 800047e:	2a00      	cmp	r2, #0
 8000480:	f040 8090 	bne.w	80005a4 <__udivmoddi4+0x204>
 8000484:	eba1 040c 	sub.w	r4, r1, ip
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa1f f78c 	uxth.w	r7, ip
 8000490:	2101      	movs	r1, #1
 8000492:	fbb4 f6f8 	udiv	r6, r4, r8
 8000496:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800049a:	fb08 4416 	mls	r4, r8, r6, r4
 800049e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004a2:	fb07 f006 	mul.w	r0, r7, r6
 80004a6:	4298      	cmp	r0, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x11c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x11a>
 80004b4:	4298      	cmp	r0, r3
 80004b6:	f200 80cd 	bhi.w	8000654 <__udivmoddi4+0x2b4>
 80004ba:	4626      	mov	r6, r4
 80004bc:	1a1c      	subs	r4, r3, r0
 80004be:	fa1f f38e 	uxth.w	r3, lr
 80004c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004c6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ce:	fb00 f707 	mul.w	r7, r0, r7
 80004d2:	429f      	cmp	r7, r3
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x148>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004de:	d202      	bcs.n	80004e6 <__udivmoddi4+0x146>
 80004e0:	429f      	cmp	r7, r3
 80004e2:	f200 80b0 	bhi.w	8000646 <__udivmoddi4+0x2a6>
 80004e6:	4620      	mov	r0, r4
 80004e8:	1bdb      	subs	r3, r3, r7
 80004ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ee:	e7a5      	b.n	800043c <__udivmoddi4+0x9c>
 80004f0:	f1c1 0620 	rsb	r6, r1, #32
 80004f4:	408b      	lsls	r3, r1
 80004f6:	fa22 f706 	lsr.w	r7, r2, r6
 80004fa:	431f      	orrs	r7, r3
 80004fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000500:	fa04 f301 	lsl.w	r3, r4, r1
 8000504:	ea43 030c 	orr.w	r3, r3, ip
 8000508:	40f4      	lsrs	r4, r6
 800050a:	fa00 f801 	lsl.w	r8, r0, r1
 800050e:	0c38      	lsrs	r0, r7, #16
 8000510:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000514:	fbb4 fef0 	udiv	lr, r4, r0
 8000518:	fa1f fc87 	uxth.w	ip, r7
 800051c:	fb00 441e 	mls	r4, r0, lr, r4
 8000520:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000524:	fb0e f90c 	mul.w	r9, lr, ip
 8000528:	45a1      	cmp	r9, r4
 800052a:	fa02 f201 	lsl.w	r2, r2, r1
 800052e:	d90a      	bls.n	8000546 <__udivmoddi4+0x1a6>
 8000530:	193c      	adds	r4, r7, r4
 8000532:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000536:	f080 8084 	bcs.w	8000642 <__udivmoddi4+0x2a2>
 800053a:	45a1      	cmp	r9, r4
 800053c:	f240 8081 	bls.w	8000642 <__udivmoddi4+0x2a2>
 8000540:	f1ae 0e02 	sub.w	lr, lr, #2
 8000544:	443c      	add	r4, r7
 8000546:	eba4 0409 	sub.w	r4, r4, r9
 800054a:	fa1f f983 	uxth.w	r9, r3
 800054e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000552:	fb00 4413 	mls	r4, r0, r3, r4
 8000556:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800055a:	fb03 fc0c 	mul.w	ip, r3, ip
 800055e:	45a4      	cmp	ip, r4
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0x1d2>
 8000562:	193c      	adds	r4, r7, r4
 8000564:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000568:	d267      	bcs.n	800063a <__udivmoddi4+0x29a>
 800056a:	45a4      	cmp	ip, r4
 800056c:	d965      	bls.n	800063a <__udivmoddi4+0x29a>
 800056e:	3b02      	subs	r3, #2
 8000570:	443c      	add	r4, r7
 8000572:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000576:	fba0 9302 	umull	r9, r3, r0, r2
 800057a:	eba4 040c 	sub.w	r4, r4, ip
 800057e:	429c      	cmp	r4, r3
 8000580:	46ce      	mov	lr, r9
 8000582:	469c      	mov	ip, r3
 8000584:	d351      	bcc.n	800062a <__udivmoddi4+0x28a>
 8000586:	d04e      	beq.n	8000626 <__udivmoddi4+0x286>
 8000588:	b155      	cbz	r5, 80005a0 <__udivmoddi4+0x200>
 800058a:	ebb8 030e 	subs.w	r3, r8, lr
 800058e:	eb64 040c 	sbc.w	r4, r4, ip
 8000592:	fa04 f606 	lsl.w	r6, r4, r6
 8000596:	40cb      	lsrs	r3, r1
 8000598:	431e      	orrs	r6, r3
 800059a:	40cc      	lsrs	r4, r1
 800059c:	e9c5 6400 	strd	r6, r4, [r5]
 80005a0:	2100      	movs	r1, #0
 80005a2:	e750      	b.n	8000446 <__udivmoddi4+0xa6>
 80005a4:	f1c2 0320 	rsb	r3, r2, #32
 80005a8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80005b0:	fa24 f303 	lsr.w	r3, r4, r3
 80005b4:	4094      	lsls	r4, r2
 80005b6:	430c      	orrs	r4, r1
 80005b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005c0:	fa1f f78c 	uxth.w	r7, ip
 80005c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005c8:	fb08 3110 	mls	r1, r8, r0, r3
 80005cc:	0c23      	lsrs	r3, r4, #16
 80005ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005d2:	fb00 f107 	mul.w	r1, r0, r7
 80005d6:	4299      	cmp	r1, r3
 80005d8:	d908      	bls.n	80005ec <__udivmoddi4+0x24c>
 80005da:	eb1c 0303 	adds.w	r3, ip, r3
 80005de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005e2:	d22c      	bcs.n	800063e <__udivmoddi4+0x29e>
 80005e4:	4299      	cmp	r1, r3
 80005e6:	d92a      	bls.n	800063e <__udivmoddi4+0x29e>
 80005e8:	3802      	subs	r0, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	1a5b      	subs	r3, r3, r1
 80005ee:	b2a4      	uxth	r4, r4
 80005f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005f4:	fb08 3311 	mls	r3, r8, r1, r3
 80005f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005fc:	fb01 f307 	mul.w	r3, r1, r7
 8000600:	42a3      	cmp	r3, r4
 8000602:	d908      	bls.n	8000616 <__udivmoddi4+0x276>
 8000604:	eb1c 0404 	adds.w	r4, ip, r4
 8000608:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800060c:	d213      	bcs.n	8000636 <__udivmoddi4+0x296>
 800060e:	42a3      	cmp	r3, r4
 8000610:	d911      	bls.n	8000636 <__udivmoddi4+0x296>
 8000612:	3902      	subs	r1, #2
 8000614:	4464      	add	r4, ip
 8000616:	1ae4      	subs	r4, r4, r3
 8000618:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800061c:	e739      	b.n	8000492 <__udivmoddi4+0xf2>
 800061e:	4604      	mov	r4, r0
 8000620:	e6f0      	b.n	8000404 <__udivmoddi4+0x64>
 8000622:	4608      	mov	r0, r1
 8000624:	e706      	b.n	8000434 <__udivmoddi4+0x94>
 8000626:	45c8      	cmp	r8, r9
 8000628:	d2ae      	bcs.n	8000588 <__udivmoddi4+0x1e8>
 800062a:	ebb9 0e02 	subs.w	lr, r9, r2
 800062e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000632:	3801      	subs	r0, #1
 8000634:	e7a8      	b.n	8000588 <__udivmoddi4+0x1e8>
 8000636:	4631      	mov	r1, r6
 8000638:	e7ed      	b.n	8000616 <__udivmoddi4+0x276>
 800063a:	4603      	mov	r3, r0
 800063c:	e799      	b.n	8000572 <__udivmoddi4+0x1d2>
 800063e:	4630      	mov	r0, r6
 8000640:	e7d4      	b.n	80005ec <__udivmoddi4+0x24c>
 8000642:	46d6      	mov	lr, sl
 8000644:	e77f      	b.n	8000546 <__udivmoddi4+0x1a6>
 8000646:	4463      	add	r3, ip
 8000648:	3802      	subs	r0, #2
 800064a:	e74d      	b.n	80004e8 <__udivmoddi4+0x148>
 800064c:	4606      	mov	r6, r0
 800064e:	4623      	mov	r3, r4
 8000650:	4608      	mov	r0, r1
 8000652:	e70f      	b.n	8000474 <__udivmoddi4+0xd4>
 8000654:	3e02      	subs	r6, #2
 8000656:	4463      	add	r3, ip
 8000658:	e730      	b.n	80004bc <__udivmoddi4+0x11c>
 800065a:	bf00      	nop

0800065c <__aeabi_idiv0>:
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000664:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_CAN1_Init+0x64>)
 8000666:	4a18      	ldr	r2, [pc, #96]	@ (80006c8 <MX_CAN1_Init+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800066a:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <MX_CAN1_Init+0x64>)
 800066c:	2206      	movs	r2, #6
 800066e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_CAN1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_CAN1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800067c:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_CAN1_Init+0x64>)
 800067e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000682:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_CAN1_Init+0x64>)
 8000686:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800068a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800068c:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <MX_CAN1_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_CAN1_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_CAN1_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_CAN1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_CAN1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_CAN1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_CAN1_Init+0x64>)
 80006b2:	f001 f913 	bl	80018dc <HAL_CAN_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006bc:	f000 fe7c 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000088 	.word	0x20000088
 80006c8:	40006400 	.word	0x40006400

080006cc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a19      	ldr	r2, [pc, #100]	@ (8000750 <HAL_CAN_MspInit+0x84>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d12c      	bne.n	8000748 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f6:	4a17      	ldr	r2, [pc, #92]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 80006f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000726:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000738:	2309      	movs	r3, #9
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <HAL_CAN_MspInit+0x8c>)
 8000744:	f001 faf0 	bl	8001d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40006400 	.word	0x40006400
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a2c      	ldr	r2, [pc, #176]	@ (800082c <MX_GPIO_Init+0xd0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b26      	ldr	r3, [pc, #152]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a25      	ldr	r2, [pc, #148]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a1e      	ldr	r2, [pc, #120]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a17      	ldr	r2, [pc, #92]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4812      	ldr	r0, [pc, #72]	@ (8000830 <MX_GPIO_Init+0xd4>)
 80007e8:	f001 fc32 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_GPIO_Init+0xd8>)
 8000804:	f001 fa90 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000808:	2320      	movs	r3, #32
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_GPIO_Init+0xd4>)
 8000820:	f001 fa82 	bl	8001d28 <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	@ 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	40020800 	.word	0x40020800

08000838 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_I2C3_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	@ (800088c <MX_I2C3_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000844:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <MX_I2C3_Init+0x58>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_I2C3_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000856:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <MX_I2C3_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <MX_I2C3_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000876:	f001 fc05 	bl	8002084 <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 fd9a 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000b0 	.word	0x200000b0
 800088c:	40005c00 	.word	0x40005c00
 8000890:	000186a0 	.word	0x000186a0

08000894 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a28      	ldr	r2, [pc, #160]	@ (8000954 <HAL_I2C_MspInit+0xc0>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d14a      	bne.n	800094c <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a26      	ldr	r2, [pc, #152]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a1f      	ldr	r2, [pc, #124]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f4:	2312      	movs	r3, #18
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000900:	2304      	movs	r3, #4
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4814      	ldr	r0, [pc, #80]	@ (800095c <HAL_I2C_MspInit+0xc8>)
 800090c:	f001 fa0c 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000910:	2310      	movs	r3, #16
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000914:	2312      	movs	r3, #18
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000920:	2304      	movs	r3, #4
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <HAL_I2C_MspInit+0xcc>)
 800092c:	f001 f9fc 	bl	8001d28 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	4a07      	ldr	r2, [pc, #28]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 800093a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800093e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	@ 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40005c00 	.word	0x40005c00
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000
 8000960:	40020400 	.word	0x40020400

08000964 <convertBufferToUint32>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t convertBufferToUint32(uint8_t buffer[3]) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	return (uint32_t)buffer[0] << 16 | (uint32_t)buffer[1] << 8 | (uint32_t)buffer[2];
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	041a      	lsls	r2, r3, #16
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3301      	adds	r3, #1
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	4313      	orrs	r3, r2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	3202      	adds	r2, #2
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	4313      	orrs	r3, r2
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <bmp280_config>:

int bmp280_config()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af02      	add	r7, sp, #8
	// on config

	uint8_t bmp280_addr_ctrl_meas = 0xF4; // l'adresse du registre contenant le control des mesures
 8000996:	23f4      	movs	r3, #244	@ 0xf4
 8000998:	71fb      	strb	r3, [r7, #7]
	uint8_t bmp280_config_ctrl_meas = 0x57; // la valuer de la config a appliqué
 800099a:	2357      	movs	r3, #87	@ 0x57
 800099c:	71bb      	strb	r3, [r7, #6]
	uint8_t bmp280_ctrl_meas_buffer[2] = {bmp280_addr_ctrl_meas, bmp280_config_ctrl_meas};
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	713b      	strb	r3, [r7, #4]
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	717b      	strb	r3, [r7, #5]
	uint8_t value = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	70fb      	strb	r3, [r7, #3]
	//on envoie la config
	//on envoie buffer avec adresse du registre
	//puis valeur à y écrire
	if( HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, bmp280_addr_shifted, bmp280_ctrl_meas_buffer, 2, 1000))
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <bmp280_config+0x58>)
 80009ac:	8819      	ldrh	r1, [r3, #0]
 80009ae:	1d3a      	adds	r2, r7, #4
 80009b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2302      	movs	r3, #2
 80009b8:	480c      	ldr	r0, [pc, #48]	@ (80009ec <bmp280_config+0x5c>)
 80009ba:	f001 fca7 	bl	800230c <HAL_I2C_Master_Transmit>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <bmp280_config+0x38>
	{
		return 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	e00a      	b.n	80009de <bmp280_config+0x4e>
	}
	//pour vérification
	HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &value, 1, 1000);
 80009c8:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <bmp280_config+0x58>)
 80009ca:	8819      	ldrh	r1, [r3, #0]
 80009cc:	1cfa      	adds	r2, r7, #3
 80009ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <bmp280_config+0x5c>)
 80009d8:	f001 fd96 	bl	8002508 <HAL_I2C_Master_Receive>
	return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000000 	.word	0x20000000
 80009ec:	200000b0 	.word	0x200000b0

080009f0 <bmp280_etalonnage>:

int bmp280_etalonnage()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af02      	add	r7, sp, #8
	//--------------------------------------------------------------------------------------
	//Récupération de létalonnage
	uint8_t first_calibration_addr = 0x88; // valeur de la première adresse du registre calibration
 80009f6:	2388      	movs	r3, #136	@ 0x88
 80009f8:	70fb      	strb	r3, [r7, #3]
	uint8_t current_calibration_addr = first_calibration_addr; // variable que l'on va incrémenter pour récupérer toutes les adresses
 80009fa:	78fb      	ldrb	r3, [r7, #3]
 80009fc:	70bb      	strb	r3, [r7, #2]
	uint8_t calibration_value;
	for(int i = 0; i <BMP280_CALIBRATION_BUFFER_SIZE;i++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	e02a      	b.n	8000a5a <bmp280_etalonnage+0x6a>
	{
		if( HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, bmp280_addr_shifted, &current_calibration_addr, 1, 1000))  // on demande à récup valeur de l'adresse courante
 8000a04:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <bmp280_etalonnage+0x7c>)
 8000a06:	8819      	ldrh	r1, [r3, #0]
 8000a08:	1cba      	adds	r2, r7, #2
 8000a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2301      	movs	r3, #1
 8000a12:	4817      	ldr	r0, [pc, #92]	@ (8000a70 <bmp280_etalonnage+0x80>)
 8000a14:	f001 fc7a 	bl	800230c <HAL_I2C_Master_Transmit>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <bmp280_etalonnage+0x32>

		{
			return 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e01f      	b.n	8000a62 <bmp280_etalonnage+0x72>
		}
		if( HAL_OK != HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &calibration_value, 1, 1000))  // on demande à récup valeur de l'adresse courante
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <bmp280_etalonnage+0x7c>)
 8000a24:	8819      	ldrh	r1, [r3, #0]
 8000a26:	1c7a      	adds	r2, r7, #1
 8000a28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	480f      	ldr	r0, [pc, #60]	@ (8000a70 <bmp280_etalonnage+0x80>)
 8000a32:	f001 fd69 	bl	8002508 <HAL_I2C_Master_Receive>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <bmp280_etalonnage+0x50>
		{
			return 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e010      	b.n	8000a62 <bmp280_etalonnage+0x72>
		}
		 // on récupère la valeur de calibration de l'adresse courante
		calibration_buffer[i] = calibration_value; // on la range dans le buffer
 8000a40:	7879      	ldrb	r1, [r7, #1]
 8000a42:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <bmp280_etalonnage+0x84>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4413      	add	r3, r2
 8000a48:	460a      	mov	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]
		current_calibration_addr++; // on incrémente l'adresse
 8000a4c:	78bb      	ldrb	r3, [r7, #2]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	70bb      	strb	r3, [r7, #2]
	for(int i = 0; i <BMP280_CALIBRATION_BUFFER_SIZE;i++)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b18      	cmp	r3, #24
 8000a5e:	ddd1      	ble.n	8000a04 <bmp280_etalonnage+0x14>
	}
	return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	200000b0 	.word	0x200000b0
 8000a74:	20000104 	.word	0x20000104

08000a78 <bmp280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)calibration_buffer[0]<<1))) * ((int32_t)calibration_buffer[1])) >> 11;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	10da      	asrs	r2, r3, #3
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <bmp280_compensate_T_int32+0x70>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	4a16      	ldr	r2, [pc, #88]	@ (8000ae8 <bmp280_compensate_T_int32+0x70>)
 8000a8e:	7852      	ldrb	r2, [r2, #1]
 8000a90:	fb02 f303 	mul.w	r3, r2, r3
 8000a94:	12db      	asrs	r3, r3, #11
 8000a96:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)calibration_buffer[0])) * ((adc_T>>4) - ((int32_t)calibration_buffer[0]))) >> 12) *
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	111b      	asrs	r3, r3, #4
 8000a9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <bmp280_compensate_T_int32+0x70>)
 8000a9e:	7812      	ldrb	r2, [r2, #0]
 8000aa0:	1a9b      	subs	r3, r3, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	1112      	asrs	r2, r2, #4
 8000aa6:	4910      	ldr	r1, [pc, #64]	@ (8000ae8 <bmp280_compensate_T_int32+0x70>)
 8000aa8:	7809      	ldrb	r1, [r1, #0]
 8000aaa:	1a52      	subs	r2, r2, r1
 8000aac:	fb02 f303 	mul.w	r3, r2, r3
 8000ab0:	131b      	asrs	r3, r3, #12
			((int32_t)calibration_buffer[2])) >> 14;
 8000ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <bmp280_compensate_T_int32+0x70>)
 8000ab4:	7892      	ldrb	r2, [r2, #2]
	var2 = (((((adc_T>>4) - ((int32_t)calibration_buffer[0])) * ((adc_T>>4) - ((int32_t)calibration_buffer[0]))) >> 12) *
 8000ab6:	fb02 f303 	mul.w	r3, r2, r3
 8000aba:	139b      	asrs	r3, r3, #14
 8000abc:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a09      	ldr	r2, [pc, #36]	@ (8000aec <bmp280_compensate_T_int32+0x74>)
 8000ac6:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <bmp280_compensate_T_int32+0x74>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	3380      	adds	r3, #128	@ 0x80
 8000ad4:	121b      	asrs	r3, r3, #8
 8000ad6:	60fb      	str	r3, [r7, #12]
	return T;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	371c      	adds	r7, #28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000104 	.word	0x20000104
 8000aec:	20000120 	.word	0x20000120

08000af0 <bmp280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t bmp280_compensate_P_int64(int32_t adc_P)
{
 8000af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000af4:	b0ca      	sub	sp, #296	@ 0x128
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000afc:	4bac      	ldr	r3, [pc, #688]	@ (8000db0 <bmp280_compensate_P_int64+0x2c0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	17da      	asrs	r2, r3, #31
 8000b02:	461c      	mov	r4, r3
 8000b04:	4615      	mov	r5, r2
 8000b06:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000b0a:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8000b0e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)calibration_buffer[8];
 8000b12:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b1a:	fb03 f102 	mul.w	r1, r3, r2
 8000b1e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b26:	fb02 f303 	mul.w	r3, r2, r3
 8000b2a:	18ca      	adds	r2, r1, r3
 8000b2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b30:	fba3 8903 	umull	r8, r9, r3, r3
 8000b34:	eb02 0309 	add.w	r3, r2, r9
 8000b38:	4699      	mov	r9, r3
 8000b3a:	4b9e      	ldr	r3, [pc, #632]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000b3c:	7a1b      	ldrb	r3, [r3, #8]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2200      	movs	r2, #0
 8000b42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000b46:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000b4a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000b4e:	4603      	mov	r3, r0
 8000b50:	fb03 f209 	mul.w	r2, r3, r9
 8000b54:	460b      	mov	r3, r1
 8000b56:	fb08 f303 	mul.w	r3, r8, r3
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	fba8 1202 	umull	r1, r2, r8, r2
 8000b62:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000b66:	460a      	mov	r2, r1
 8000b68:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000b6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000b70:	4413      	add	r3, r2
 8000b72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000b76:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000b7a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000b7e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)calibration_buffer[7])<<17);
 8000b82:	4b8c      	ldr	r3, [pc, #560]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000b84:	79db      	ldrb	r3, [r3, #7]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000b8e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000b92:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b96:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000b9a:	462a      	mov	r2, r5
 8000b9c:	fb02 f203 	mul.w	r2, r2, r3
 8000ba0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ba4:	4621      	mov	r1, r4
 8000ba6:	fb01 f303 	mul.w	r3, r1, r3
 8000baa:	441a      	add	r2, r3
 8000bac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bb0:	4621      	mov	r1, r4
 8000bb2:	fba3 1301 	umull	r1, r3, r3, r1
 8000bb6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000bba:	460b      	mov	r3, r1
 8000bbc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	f04f 0100 	mov.w	r1, #0
 8000bd2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000bd6:	462b      	mov	r3, r5
 8000bd8:	0459      	lsls	r1, r3, #17
 8000bda:	4623      	mov	r3, r4
 8000bdc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000be0:	4623      	mov	r3, r4
 8000be2:	0458      	lsls	r0, r3, #17
 8000be4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000be8:	1814      	adds	r4, r2, r0
 8000bea:	643c      	str	r4, [r7, #64]	@ 0x40
 8000bec:	414b      	adcs	r3, r1
 8000bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8000bf0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000bf4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)calibration_buffer[6])<<35);
 8000bf8:	4b6e      	ldr	r3, [pc, #440]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000bfa:	799b      	ldrb	r3, [r3, #6]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000c04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	f04f 0100 	mov.w	r1, #0
 8000c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c14:	00d9      	lsls	r1, r3, #3
 8000c16:	2000      	movs	r0, #0
 8000c18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000c1c:	1814      	adds	r4, r2, r0
 8000c1e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000c20:	414b      	adcs	r3, r1
 8000c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c24:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000c28:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)calibration_buffer[5])>>8) + ((var1 * (int64_t)calibration_buffer[4])<<12);
 8000c2c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000c30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c34:	fb03 f102 	mul.w	r1, r3, r2
 8000c38:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000c3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	18ca      	adds	r2, r1, r3
 8000c46:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c4a:	fba3 1303 	umull	r1, r3, r3, r3
 8000c4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000c52:	460b      	mov	r3, r1
 8000c54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000c62:	4b54      	ldr	r3, [pc, #336]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000c64:	795b      	ldrb	r3, [r3, #5]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000c72:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000c76:	462b      	mov	r3, r5
 8000c78:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	fb02 f203 	mul.w	r2, r2, r3
 8000c82:	464b      	mov	r3, r9
 8000c84:	4621      	mov	r1, r4
 8000c86:	fb01 f303 	mul.w	r3, r1, r3
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4622      	mov	r2, r4
 8000c8e:	4641      	mov	r1, r8
 8000c90:	fba2 1201 	umull	r1, r2, r2, r1
 8000c94:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000c98:	460a      	mov	r2, r1
 8000c9a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000c9e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000ca2:	4413      	add	r3, r2
 8000ca4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	f04f 0100 	mov.w	r1, #0
 8000cb0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000cb4:	4623      	mov	r3, r4
 8000cb6:	0a18      	lsrs	r0, r3, #8
 8000cb8:	462b      	mov	r3, r5
 8000cba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cbe:	462b      	mov	r3, r5
 8000cc0:	1219      	asrs	r1, r3, #8
 8000cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000cce:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000cd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000cd6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000cda:	464a      	mov	r2, r9
 8000cdc:	fb02 f203 	mul.w	r2, r2, r3
 8000ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ce4:	4644      	mov	r4, r8
 8000ce6:	fb04 f303 	mul.w	r3, r4, r3
 8000cea:	441a      	add	r2, r3
 8000cec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000cf0:	4644      	mov	r4, r8
 8000cf2:	fba3 4304 	umull	r4, r3, r3, r4
 8000cf6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000d00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000d16:	464c      	mov	r4, r9
 8000d18:	0323      	lsls	r3, r4, #12
 8000d1a:	4644      	mov	r4, r8
 8000d1c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000d20:	4644      	mov	r4, r8
 8000d22:	0322      	lsls	r2, r4, #12
 8000d24:	1884      	adds	r4, r0, r2
 8000d26:	633c      	str	r4, [r7, #48]	@ 0x30
 8000d28:	eb41 0303 	adc.w	r3, r1, r3
 8000d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d2e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000d32:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)calibration_buffer[3])>>33;
 8000d36:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000d3a:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000d3e:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000d42:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000d46:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000d48:	78db      	ldrb	r3, [r3, #3]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000d52:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000d5a:	462b      	mov	r3, r5
 8000d5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000d60:	4642      	mov	r2, r8
 8000d62:	fb02 f203 	mul.w	r2, r2, r3
 8000d66:	464b      	mov	r3, r9
 8000d68:	4621      	mov	r1, r4
 8000d6a:	fb01 f303 	mul.w	r3, r1, r3
 8000d6e:	4413      	add	r3, r2
 8000d70:	4622      	mov	r2, r4
 8000d72:	4641      	mov	r1, r8
 8000d74:	fba2 1201 	umull	r1, r2, r2, r1
 8000d78:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000d82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000d86:	4413      	add	r3, r2
 8000d88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000d98:	4629      	mov	r1, r5
 8000d9a:	104a      	asrs	r2, r1, #1
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	17cb      	asrs	r3, r1, #31
 8000da0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000da4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da8:	4313      	orrs	r3, r2
 8000daa:	d105      	bne.n	8000db8 <bmp280_compensate_P_int64+0x2c8>
	{
		return 0; // avoid exception caused by division by zero
 8000dac:	2300      	movs	r3, #0
 8000dae:	e146      	b.n	800103e <bmp280_compensate_P_int64+0x54e>
 8000db0:	20000120 	.word	0x20000120
 8000db4:	20000104 	.word	0x20000104
	}
	p = 1048576-adc_P;
 8000db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000dbc:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000dc0:	17da      	asrs	r2, r3, #31
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000dc6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000dca:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000dce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000dd2:	105b      	asrs	r3, r3, #1
 8000dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000dd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ddc:	07db      	lsls	r3, r3, #31
 8000dde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000de2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000de6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000dea:	4621      	mov	r1, r4
 8000dec:	1a89      	subs	r1, r1, r2
 8000dee:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000df0:	4629      	mov	r1, r5
 8000df2:	eb61 0303 	sbc.w	r3, r1, r3
 8000df6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000df8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000dfc:	4622      	mov	r2, r4
 8000dfe:	462b      	mov	r3, r5
 8000e00:	1891      	adds	r1, r2, r2
 8000e02:	6239      	str	r1, [r7, #32]
 8000e04:	415b      	adcs	r3, r3
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e08:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	1851      	adds	r1, r2, r1
 8000e10:	61b9      	str	r1, [r7, #24]
 8000e12:	4629      	mov	r1, r5
 8000e14:	414b      	adcs	r3, r1
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000e24:	4649      	mov	r1, r9
 8000e26:	018b      	lsls	r3, r1, #6
 8000e28:	4641      	mov	r1, r8
 8000e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000e2e:	4641      	mov	r1, r8
 8000e30:	018a      	lsls	r2, r1, #6
 8000e32:	4641      	mov	r1, r8
 8000e34:	1889      	adds	r1, r1, r2
 8000e36:	6139      	str	r1, [r7, #16]
 8000e38:	4649      	mov	r1, r9
 8000e3a:	eb43 0101 	adc.w	r1, r3, r1
 8000e3e:	6179      	str	r1, [r7, #20]
 8000e40:	f04f 0200 	mov.w	r2, #0
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000e4c:	4649      	mov	r1, r9
 8000e4e:	008b      	lsls	r3, r1, #2
 8000e50:	4641      	mov	r1, r8
 8000e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e56:	4641      	mov	r1, r8
 8000e58:	008a      	lsls	r2, r1, #2
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4622      	mov	r2, r4
 8000e62:	189b      	adds	r3, r3, r2
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	460b      	mov	r3, r1
 8000e68:	462a      	mov	r2, r5
 8000e6a:	eb42 0303 	adc.w	r3, r2, r3
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000e7c:	4649      	mov	r1, r9
 8000e7e:	008b      	lsls	r3, r1, #2
 8000e80:	4641      	mov	r1, r8
 8000e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e86:	4641      	mov	r1, r8
 8000e88:	008a      	lsls	r2, r1, #2
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4622      	mov	r2, r4
 8000e92:	189b      	adds	r3, r3, r2
 8000e94:	673b      	str	r3, [r7, #112]	@ 0x70
 8000e96:	462b      	mov	r3, r5
 8000e98:	460a      	mov	r2, r1
 8000e9a:	eb42 0303 	adc.w	r3, r2, r3
 8000e9e:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ea0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ea4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000ea8:	f7ff fa12 	bl	80002d0 <__aeabi_ldivmod>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)calibration_buffer[11]) * (p>>13) * (p>>13)) >> 25;
 8000eb4:	4b65      	ldr	r3, [pc, #404]	@ (800104c <bmp280_compensate_P_int64+0x55c>)
 8000eb6:	7adb      	ldrb	r3, [r3, #11]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2200      	movs	r2, #0
 8000ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000ebe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000ec0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000ec4:	f04f 0000 	mov.w	r0, #0
 8000ec8:	f04f 0100 	mov.w	r1, #0
 8000ecc:	0b50      	lsrs	r0, r2, #13
 8000ece:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000ed2:	1359      	asrs	r1, r3, #13
 8000ed4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000ed8:	462b      	mov	r3, r5
 8000eda:	fb00 f203 	mul.w	r2, r0, r3
 8000ede:	4623      	mov	r3, r4
 8000ee0:	fb03 f301 	mul.w	r3, r3, r1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4622      	mov	r2, r4
 8000ee8:	fba2 1200 	umull	r1, r2, r2, r0
 8000eec:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000ef6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000efa:	4413      	add	r3, r2
 8000efc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000f00:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000f04:	f04f 0000 	mov.w	r0, #0
 8000f08:	f04f 0100 	mov.w	r1, #0
 8000f0c:	0b50      	lsrs	r0, r2, #13
 8000f0e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000f12:	1359      	asrs	r1, r3, #13
 8000f14:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000f18:	462b      	mov	r3, r5
 8000f1a:	fb00 f203 	mul.w	r2, r0, r3
 8000f1e:	4623      	mov	r3, r4
 8000f20:	fb03 f301 	mul.w	r3, r3, r1
 8000f24:	4413      	add	r3, r2
 8000f26:	4622      	mov	r2, r4
 8000f28:	fba2 1200 	umull	r1, r2, r2, r0
 8000f2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000f30:	460a      	mov	r2, r1
 8000f32:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000f36:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	0e4a      	lsrs	r2, r1, #25
 8000f50:	4629      	mov	r1, r5
 8000f52:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000f56:	4629      	mov	r1, r5
 8000f58:	164b      	asrs	r3, r1, #25
 8000f5a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)calibration_buffer[10]) * p) >> 19;
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <bmp280_compensate_P_int64+0x55c>)
 8000f60:	7a9b      	ldrb	r3, [r3, #10]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000f6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000f72:	462a      	mov	r2, r5
 8000f74:	fb02 f203 	mul.w	r2, r2, r3
 8000f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	fb01 f303 	mul.w	r3, r1, r3
 8000f82:	4413      	add	r3, r2
 8000f84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000f88:	4621      	mov	r1, r4
 8000f8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000f8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000f92:	460a      	mov	r2, r1
 8000f94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000f98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000fae:	4621      	mov	r1, r4
 8000fb0:	0cca      	lsrs	r2, r1, #19
 8000fb2:	4629      	mov	r1, r5
 8000fb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000fb8:	4629      	mov	r1, r5
 8000fba:	14cb      	asrs	r3, r1, #19
 8000fbc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)calibration_buffer[9])<<4);
 8000fc0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000fc4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000fc8:	1884      	adds	r4, r0, r2
 8000fca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000fcc:	eb41 0303 	adc.w	r3, r1, r3
 8000fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000fd2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000fd6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000fda:	4621      	mov	r1, r4
 8000fdc:	1889      	adds	r1, r1, r2
 8000fde:	6539      	str	r1, [r7, #80]	@ 0x50
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	eb43 0101 	adc.w	r1, r3, r1
 8000fe6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000fe8:	f04f 0000 	mov.w	r0, #0
 8000fec:	f04f 0100 	mov.w	r1, #0
 8000ff0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	0a18      	lsrs	r0, r3, #8
 8000ff8:	462b      	mov	r3, r5
 8000ffa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ffe:	462b      	mov	r3, r5
 8001000:	1219      	asrs	r1, r3, #8
 8001002:	4b12      	ldr	r3, [pc, #72]	@ (800104c <bmp280_compensate_P_int64+0x55c>)
 8001004:	7a5b      	ldrb	r3, [r3, #9]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2200      	movs	r2, #0
 800100a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800100c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800101a:	464c      	mov	r4, r9
 800101c:	0123      	lsls	r3, r4, #4
 800101e:	4644      	mov	r4, r8
 8001020:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001024:	4644      	mov	r4, r8
 8001026:	0122      	lsls	r2, r4, #4
 8001028:	1884      	adds	r4, r0, r2
 800102a:	603c      	str	r4, [r7, #0]
 800102c:	eb41 0303 	adc.w	r3, r1, r3
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001036:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 800103a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800103e:	4618      	mov	r0, r3
 8001040:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001044:	46bd      	mov	sp, r7
 8001046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800104a:	bf00      	nop
 800104c:	20000104 	.word	0x20000104

08001050 <GET_T>:

	int GET_T()
	{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af02      	add	r7, sp, #8
		//récupération de la température
		uint8_t temp_start_addr = 0xFA; // l'adresse de départ du registre température
 8001056:	23fa      	movs	r3, #250	@ 0xfa
 8001058:	76fb      	strb	r3, [r7, #27]
		uint8_t temp_value_buffer[3]; //chaque adresse sera stocké dans un byte puis on combinera les bytes
		uint8_t current_temp_addr = temp_start_addr;
 800105a:	7efb      	ldrb	r3, [r7, #27]
 800105c:	71fb      	strb	r3, [r7, #7]
		uint8_t temp_value; //chaque adresse sera stocké dans un byte puis on combinera les bytes

		for(int i = 0; i <3;i++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e021      	b.n	80010a8 <GET_T+0x58>
		{

			HAL_I2C_Master_Transmit(&hi2c3, bmp280_addr_shifted, &current_temp_addr, 1, 1000); // on demande à récup valeur de l'adresse courante
 8001064:	4b27      	ldr	r3, [pc, #156]	@ (8001104 <GET_T+0xb4>)
 8001066:	8819      	ldrh	r1, [r3, #0]
 8001068:	1dfa      	adds	r2, r7, #7
 800106a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	4825      	ldr	r0, [pc, #148]	@ (8001108 <GET_T+0xb8>)
 8001074:	f001 f94a 	bl	800230c <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &temp_value, 1, 1000); // on récupère la valeur de calibration de l'adresse courante
 8001078:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <GET_T+0xb4>)
 800107a:	8819      	ldrh	r1, [r3, #0]
 800107c:	1dba      	adds	r2, r7, #6
 800107e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	4820      	ldr	r0, [pc, #128]	@ (8001108 <GET_T+0xb8>)
 8001088:	f001 fa3e 	bl	8002508 <HAL_I2C_Master_Receive>
			temp_value_buffer[i] = temp_value; // on la range dans le buffer
 800108c:	79b9      	ldrb	r1, [r7, #6]
 800108e:	f107 0208 	add.w	r2, r7, #8
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	4413      	add	r3, r2
 8001096:	460a      	mov	r2, r1
 8001098:	701a      	strb	r2, [r3, #0]
			current_temp_addr++; // on incrémente l'adresse
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	3301      	adds	r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	71fb      	strb	r3, [r7, #7]
		for(int i = 0; i <3;i++)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3301      	adds	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	ddda      	ble.n	8001064 <GET_T+0x14>
		}
		uint32_t temp_value_32  =	convertBufferToUint32(temp_value_buffer);
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fc56 	bl	8000964 <convertBufferToUint32>
 80010b8:	6178      	str	r0, [r7, #20]
		temp_value_32 = bmp280_compensate_T_int32(temp_value_32);
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fcdb 	bl	8000a78 <bmp280_compensate_T_int32>
 80010c2:	4603      	mov	r3, r0
 80010c4:	617b      	str	r3, [r7, #20]
		float temp_value_c = temp_value_32 * 0.0025f;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800110c <GET_T+0xbc>
 80010d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d8:	edc7 7a04 	vstr	s15, [r7, #16]
		uint32_t temp_value_c_scaled = (int)(temp_value_c * 100); //1234 = 12.34 degrés celsius
 80010dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80010e0:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001110 <GET_T+0xc0>
 80010e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ec:	ee17 3a90 	vmov	r3, s15
 80010f0:	60fb      	str	r3, [r7, #12]

		printf("Temperature (à divisé par 100 ): %lu \r\n", temp_value_c_scaled);
 80010f2:	68f9      	ldr	r1, [r7, #12]
 80010f4:	4807      	ldr	r0, [pc, #28]	@ (8001114 <GET_T+0xc4>)
 80010f6:	f003 fb5b 	bl	80047b0 <iprintf>
		return 0;
 80010fa:	2300      	movs	r3, #0
	}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	200000b0 	.word	0x200000b0
 800110c:	3b23d70a 	.word	0x3b23d70a
 8001110:	42c80000 	.word	0x42c80000
 8001114:	080054a4 	.word	0x080054a4

08001118 <GET_P>:

	int GET_P()
	{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af02      	add	r7, sp, #8
		//récupération de la pression
		uint8_t pressure_start_addr = 0xF7; // l'adresse de départ du registre pression
 800111e:	23f7      	movs	r3, #247	@ 0xf7
 8001120:	74fb      	strb	r3, [r7, #19]
		uint8_t pressure_value_buffer[3]; //chaque adresse sera stocké dans un byte puis on combinera les bytes
		uint8_t current_pressure_addr = pressure_start_addr;
 8001122:	7cfb      	ldrb	r3, [r7, #19]
 8001124:	71fb      	strb	r3, [r7, #7]
		uint8_t pressure_value; //chaque adresse sera stocké dans un byte puis on combinera les bytes

		for(int i = 0; i <3;i++)
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e02b      	b.n	8001184 <GET_P+0x6c>
		{

			if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, bmp280_addr_shifted, &current_pressure_addr, 1, 1000)) // on demande à récup valeur de l'adresse courante
 800112c:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <GET_P+0x9c>)
 800112e:	8819      	ldrh	r1, [r3, #0]
 8001130:	1dfa      	adds	r2, r7, #7
 8001132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	481f      	ldr	r0, [pc, #124]	@ (80011b8 <GET_P+0xa0>)
 800113c:	f001 f8e6 	bl	800230c <HAL_I2C_Master_Transmit>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <GET_P+0x32>
			{
				return 1;
 8001146:	2301      	movs	r3, #1
 8001148:	e02f      	b.n	80011aa <GET_P+0x92>
			}
			if(HAL_OK != HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &pressure_value, 1, 1000)) // on demande à récup valeur de l'adresse courante
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <GET_P+0x9c>)
 800114c:	8819      	ldrh	r1, [r3, #0]
 800114e:	1dba      	adds	r2, r7, #6
 8001150:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	4817      	ldr	r0, [pc, #92]	@ (80011b8 <GET_P+0xa0>)
 800115a:	f001 f9d5 	bl	8002508 <HAL_I2C_Master_Receive>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <GET_P+0x50>
			{
				return 1;
 8001164:	2301      	movs	r3, #1
 8001166:	e020      	b.n	80011aa <GET_P+0x92>
			}
			// on récupère la valeur de calibration de l'adresse courante
			pressure_value_buffer[i] = pressure_value; // on la range dans le buffer
 8001168:	79b9      	ldrb	r1, [r7, #6]
 800116a:	f107 0208 	add.w	r2, r7, #8
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	4413      	add	r3, r2
 8001172:	460a      	mov	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]
			current_pressure_addr++; // on incrémente l'adresse
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	3301      	adds	r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	71fb      	strb	r3, [r7, #7]
		for(int i = 0; i <3;i++)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2b02      	cmp	r3, #2
 8001188:	ddd0      	ble.n	800112c <GET_P+0x14>
		}
		//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
		uint32_t pressure_value_32 = convertBufferToUint32(pressure_value_buffer);
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fbe8 	bl	8000964 <convertBufferToUint32>
 8001194:	60f8      	str	r0, [r7, #12]
		pressure_value_32 = bmp280_compensate_P_int64(pressure_value_32);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fca9 	bl	8000af0 <bmp280_compensate_P_int64>
 800119e:	60f8      	str	r0, [r7, #12]
		printf("pression non compensée %lu \r\n",pressure_value_32);
 80011a0:	68f9      	ldr	r1, [r7, #12]
 80011a2:	4806      	ldr	r0, [pc, #24]	@ (80011bc <GET_P+0xa4>)
 80011a4:	f003 fb04 	bl	80047b0 <iprintf>
		return 0;
 80011a8:	2300      	movs	r3, #0
	}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000000 	.word	0x20000000
 80011b8:	200000b0 	.word	0x200000b0
 80011bc:	080054d0 	.word	0x080054d0

080011c0 <main>:
	/**
	 * @brief  The application entry point.
	 * @retval int
	 */
	int main(void)
	{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
		/* USER CODE END 1 */

		/* MCU Configuration--------------------------------------------------------*/

		/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
		HAL_Init();
 80011c6:	f000 fb17 	bl	80017f8 <HAL_Init>
		/* USER CODE BEGIN Init */

		/* USER CODE END Init */

		/* Configure the system clock */
		SystemClock_Config();
 80011ca:	f000 f883 	bl	80012d4 <SystemClock_Config>
		/* USER CODE BEGIN SysInit */

		/* USER CODE END SysInit */

		/* Initialize all configured peripherals */
		MX_GPIO_Init();
 80011ce:	f7ff fac5 	bl	800075c <MX_GPIO_Init>
		MX_USART2_UART_Init();
 80011d2:	f000 fa15 	bl	8001600 <MX_USART2_UART_Init>
		MX_CAN1_Init();
 80011d6:	f7ff fa43 	bl	8000660 <MX_CAN1_Init>
		MX_USART3_UART_Init();
 80011da:	f000 fa3b 	bl	8001654 <MX_USART3_UART_Init>
		MX_I2C3_Init();
 80011de:	f7ff fb2b 	bl	8000838 <MX_I2C3_Init>



#endif

		uint8_t uart_transmission_end_flag = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	77fb      	strb	r3, [r7, #31]
		uint8_t received_char;
		uint8_t receive_buffer[10];
		memset(receive_buffer, 0, sizeof(receive_buffer));
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	220a      	movs	r2, #10
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fb33 	bl	800485a <memset>

		bmp280_config();
 80011f4:	f7ff fbcc 	bl	8000990 <bmp280_config>
		bmp280_etalonnage();
 80011f8:	f7ff fbfa 	bl	80009f0 <bmp280_etalonnage>

		uint8_t prompt[] = ">>> \r\n";
 80011fc:	4a2e      	ldr	r2, [pc, #184]	@ (80012b8 <main+0xf8>)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001204:	6018      	str	r0, [r3, #0]
 8001206:	3304      	adds	r3, #4
 8001208:	8019      	strh	r1, [r3, #0]
 800120a:	3302      	adds	r3, #2
 800120c:	0c0a      	lsrs	r2, r1, #16
 800120e:	701a      	strb	r2, [r3, #0]
#ifdef CAN

		HAL_CAN_Start(&hcan1);
 8001210:	482a      	ldr	r0, [pc, #168]	@ (80012bc <main+0xfc>)
 8001212:	f000 fc5e 	bl	8001ad2 <HAL_CAN_Start>
			//		CAN_Send_AutomaticMode(0x54,0x01);
			//		HAL_Delay(1000);
			//		CAN_Send_AutomaticMode(0x54,0x00);
			//
			//		HAL_Delay(1000);
			printf(prompt);
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4618      	mov	r0, r3
 800121a:	f003 fac9 	bl	80047b0 <iprintf>
			int buffer_index = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
			uart_transmission_end_flag = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	77fb      	strb	r3, [r7, #31]

			while(uart_transmission_end_flag == 0)
 8001226:	e043      	b.n	80012b0 <main+0xf0>
			{
				HAL_UART_Receive(&huart2, &received_char, 1, HAL_MAX_DELAY);// pour raspberry
 8001228:	f107 0117 	add.w	r1, r7, #23
 800122c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001230:	2201      	movs	r2, #1
 8001232:	4823      	ldr	r0, [pc, #140]	@ (80012c0 <main+0x100>)
 8001234:	f002 fe33 	bl	8003e9e <HAL_UART_Receive>
				if((received_char != '\r') && (received_char != '\n') )
 8001238:	7dfb      	ldrb	r3, [r7, #23]
 800123a:	2b0d      	cmp	r3, #13
 800123c:	d00d      	beq.n	800125a <main+0x9a>
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	2b0a      	cmp	r3, #10
 8001242:	d00a      	beq.n	800125a <main+0x9a>
				{
					receive_buffer[buffer_index] = received_char;
 8001244:	7df9      	ldrb	r1, [r7, #23]
 8001246:	f107 020c 	add.w	r2, r7, #12
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4413      	add	r3, r2
 800124e:	460a      	mov	r2, r1
 8001250:	701a      	strb	r2, [r3, #0]
					buffer_index++;
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	3301      	adds	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	e02a      	b.n	80012b0 <main+0xf0>
				}
				else
				{
					if(strcmp((const char*)receive_buffer,"GET_T") == 0)
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4919      	ldr	r1, [pc, #100]	@ (80012c4 <main+0x104>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ffd5 	bl	8000210 <strcmp>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d107      	bne.n	800127c <main+0xbc>
					{
						if(GET_T() != NO_PROBLEMO)
 800126c:	f7ff fef0 	bl	8001050 <GET_T>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <main+0xbc>
						{
							printf("problem while reading temp");
 8001276:	4814      	ldr	r0, [pc, #80]	@ (80012c8 <main+0x108>)
 8001278:	f003 fa9a 	bl	80047b0 <iprintf>
						}
					}
					if(strcmp((const char*)receive_buffer,"GET_P") == 0)
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4912      	ldr	r1, [pc, #72]	@ (80012cc <main+0x10c>)
 8001282:	4618      	mov	r0, r3
 8001284:	f7fe ffc4 	bl	8000210 <strcmp>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d107      	bne.n	800129e <main+0xde>
					{
						if(GET_P() != NO_PROBLEMO)
 800128e:	f7ff ff43 	bl	8001118 <GET_P>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <main+0xde>
						{
							printf("problem while reading pressure");
 8001298:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <main+0x110>)
 800129a:	f003 fa89 	bl	80047b0 <iprintf>
						}
					}
					memset(receive_buffer, 0, sizeof(receive_buffer));
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	220a      	movs	r2, #10
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fad7 	bl	800485a <memset>
					uart_transmission_end_flag = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	77fb      	strb	r3, [r7, #31]
			while(uart_transmission_end_flag == 0)
 80012b0:	7ffb      	ldrb	r3, [r7, #31]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0b8      	beq.n	8001228 <main+0x68>
		{
 80012b6:	e7ae      	b.n	8001216 <main+0x56>
 80012b8:	0800553c 	.word	0x0800553c
 80012bc:	20000088 	.word	0x20000088
 80012c0:	20000128 	.word	0x20000128
 80012c4:	080054f0 	.word	0x080054f0
 80012c8:	080054f8 	.word	0x080054f8
 80012cc:	08005514 	.word	0x08005514
 80012d0:	0800551c 	.word	0x0800551c

080012d4 <SystemClock_Config>:
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void)
	{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	@ 0x50
 80012d8:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	2234      	movs	r2, #52	@ 0x34
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fab9 	bl	800485a <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	f107 0308 	add.w	r3, r7, #8
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		__HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	4b2c      	ldr	r3, [pc, #176]	@ (80013b0 <SystemClock_Config+0xdc>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	4a2b      	ldr	r2, [pc, #172]	@ (80013b0 <SystemClock_Config+0xdc>)
 8001302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001306:	6413      	str	r3, [r2, #64]	@ 0x40
 8001308:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <SystemClock_Config+0xdc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <SystemClock_Config+0xe0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a25      	ldr	r2, [pc, #148]	@ (80013b4 <SystemClock_Config+0xe0>)
 800131e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <SystemClock_Config+0xe0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	683b      	ldr	r3, [r7, #0]

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001330:	2301      	movs	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001334:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001338:	623b      	str	r3, [r7, #32]
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133a:	2302      	movs	r3, #2
 800133c:	637b      	str	r3, [r7, #52]	@ 0x34
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001342:	63bb      	str	r3, [r7, #56]	@ 0x38
		RCC_OscInitStruct.PLL.PLLM = 4;
 8001344:	2304      	movs	r3, #4
 8001346:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RCC_OscInitStruct.PLL.PLLN = 180;
 8001348:	23b4      	movs	r3, #180	@ 0xb4
 800134a:	643b      	str	r3, [r7, #64]	@ 0x40
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	647b      	str	r3, [r7, #68]	@ 0x44
		RCC_OscInitStruct.PLL.PLLQ = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	64bb      	str	r3, [r7, #72]	@ 0x48
		RCC_OscInitStruct.PLL.PLLR = 2;
 8001354:	2302      	movs	r3, #2
 8001356:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fa25 	bl	80037ac <HAL_RCC_OscConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SystemClock_Config+0x98>
		{
			Error_Handler();
 8001368:	f000 f826 	bl	80013b8 <Error_Handler>
		}

		/** Activate the Over-Drive mode
		 */
		if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800136c:	f001 fe84 	bl	8003078 <HAL_PWREx_EnableOverDrive>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xa6>
		{
			Error_Handler();
 8001376:	f000 f81f 	bl	80013b8 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137a:	230f      	movs	r3, #15
 800137c:	60bb      	str	r3, [r7, #8]
				|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137e:	2302      	movs	r3, #2
 8001380:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001386:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800138a:	617b      	str	r3, [r7, #20]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800138c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001390:	61bb      	str	r3, [r7, #24]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	2105      	movs	r1, #5
 8001398:	4618      	mov	r0, r3
 800139a:	f001 febd 	bl	8003118 <HAL_RCC_ClockConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0xd4>
		{
			Error_Handler();
 80013a4:	f000 f808 	bl	80013b8 <Error_Handler>
		}
	}
 80013a8:	bf00      	nop
 80013aa:	3750      	adds	r7, #80	@ 0x50
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <Error_Handler>:
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void)
	{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <Error_Handler+0x8>

080013c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001410 <HAL_MspInit+0x4c>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013da:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <HAL_MspInit+0x4c>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <HAL_MspInit+0x4c>)
 80013f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <HAL_MspInit+0x4c>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800141c:	1d39      	adds	r1, r7, #4
 800141e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001422:	2201      	movs	r2, #1
 8001424:	4803      	ldr	r0, [pc, #12]	@ (8001434 <__io_putchar+0x20>)
 8001426:	f002 fcaf 	bl	8003d88 <HAL_UART_Transmit>

  return ch;
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000128 	.word	0x20000128

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <NMI_Handler+0x4>

08001440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <MemManage_Handler+0x4>

08001450 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <UsageFault_Handler+0x4>

08001460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148e:	f000 fa05 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}

08001496 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e00a      	b.n	80014be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a8:	f3af 8000 	nop.w
 80014ac:	4601      	mov	r1, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	60ba      	str	r2, [r7, #8]
 80014b4:	b2ca      	uxtb	r2, r1
 80014b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbf0      	blt.n	80014a8 <_read+0x12>
  }

  return len;
 80014c6:	687b      	ldr	r3, [r7, #4]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e009      	b.n	80014f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	60ba      	str	r2, [r7, #8]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff92 	bl	8001414 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3301      	adds	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbf1      	blt.n	80014e2 <_write+0x12>
  }
  return len;
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_close>:

int _close(int file)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001530:	605a      	str	r2, [r3, #4]
  return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_isatty>:

int _isatty(int file)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f003 f9aa 	bl	80048f8 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20020000 	.word	0x20020000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	20000124 	.word	0x20000124
 80015d8:	20000308 	.word	0x20000308

080015dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001604:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001606:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <MX_USART2_UART_Init+0x50>)
 8001608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_USART2_UART_Init+0x4c>)
 8001638:	f002 fb56 	bl	8003ce8 <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001642:	f7ff feb9 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000128 	.word	0x20000128
 8001650:	40004400 	.word	0x40004400

08001654 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_USART3_UART_Init+0x4c>)
 800165a:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <MX_USART3_UART_Init+0x50>)
 800165c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <MX_USART3_UART_Init+0x4c>)
 8001660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001664:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_USART3_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_USART3_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_USART3_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_USART3_UART_Init+0x4c>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_USART3_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_USART3_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_USART3_UART_Init+0x4c>)
 800168c:	f002 fb2c 	bl	8003ce8 <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001696:	f7ff fe8f 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000170 	.word	0x20000170
 80016a4:	40004800 	.word	0x40004800

080016a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	@ 0x30
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a32      	ldr	r2, [pc, #200]	@ (8001790 <HAL_UART_MspInit+0xe8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d12c      	bne.n	8001724 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <HAL_UART_MspInit+0xec>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a30      	ldr	r2, [pc, #192]	@ (8001794 <HAL_UART_MspInit+0xec>)
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016da:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <HAL_UART_MspInit+0xec>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001794 <HAL_UART_MspInit+0xec>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a29      	ldr	r2, [pc, #164]	@ (8001794 <HAL_UART_MspInit+0xec>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <HAL_UART_MspInit+0xec>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001702:	230c      	movs	r3, #12
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001712:	2307      	movs	r3, #7
 8001714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4619      	mov	r1, r3
 800171c:	481e      	ldr	r0, [pc, #120]	@ (8001798 <HAL_UART_MspInit+0xf0>)
 800171e:	f000 fb03 	bl	8001d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001722:	e031      	b.n	8001788 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1c      	ldr	r2, [pc, #112]	@ (800179c <HAL_UART_MspInit+0xf4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d12c      	bne.n	8001788 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b18      	ldr	r3, [pc, #96]	@ (8001794 <HAL_UART_MspInit+0xec>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4a17      	ldr	r2, [pc, #92]	@ (8001794 <HAL_UART_MspInit+0xec>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <HAL_UART_MspInit+0xec>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_UART_MspInit+0xec>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a10      	ldr	r2, [pc, #64]	@ (8001794 <HAL_UART_MspInit+0xec>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_UART_MspInit+0xec>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001766:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001778:	2307      	movs	r3, #7
 800177a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	4807      	ldr	r0, [pc, #28]	@ (80017a0 <HAL_UART_MspInit+0xf8>)
 8001784:	f000 fad0 	bl	8001d28 <HAL_GPIO_Init>
}
 8001788:	bf00      	nop
 800178a:	3730      	adds	r7, #48	@ 0x30
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40004400 	.word	0x40004400
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40004800 	.word	0x40004800
 80017a0:	40020800 	.word	0x40020800

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017a8:	f7ff ff18 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	@ (80017e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	@ (80017e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	@ (80017e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	@ (80017f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f003 f897 	bl	8004904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7ff fcf3 	bl	80011c0 <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80017e8:	080055a0 	.word	0x080055a0
  ldr r2, =_sbss
 80017ec:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80017f0:	20000308 	.word	0x20000308

080017f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	@ (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 fa4d 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	200f      	movs	r0, #15
 8001828:	f000 f808 	bl	800183c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fdca 	bl	80013c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_InitTick+0x54>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_InitTick+0x58>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f000 fa57 	bl	8001d0e <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00e      	b.n	8001888 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d80a      	bhi.n	8001886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001870:	2200      	movs	r2, #0
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001878:	f000 fa2d 	bl	8001cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800187c:	4a06      	ldr	r2, [pc, #24]	@ (8001898 <HAL_InitTick+0x5c>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
}
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000004 	.word	0x20000004
 8001894:	2000000c 	.word	0x2000000c
 8001898:	20000008 	.word	0x20000008

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2000000c 	.word	0x2000000c
 80018c0:	200001b8 	.word	0x200001b8

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	200001b8 	.word	0x200001b8

080018dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e0ed      	b.n	8001aca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe fee6 	bl	80006cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001910:	f7ff ffd8 	bl	80018c4 <HAL_GetTick>
 8001914:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001916:	e012      	b.n	800193e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001918:	f7ff ffd4 	bl	80018c4 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b0a      	cmp	r3, #10
 8001924:	d90b      	bls.n	800193e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2205      	movs	r2, #5
 8001936:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0c5      	b.n	8001aca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0e5      	beq.n	8001918 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0202 	bic.w	r2, r2, #2
 800195a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800195c:	f7ff ffb2 	bl	80018c4 <HAL_GetTick>
 8001960:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001962:	e012      	b.n	800198a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001964:	f7ff ffae 	bl	80018c4 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b0a      	cmp	r3, #10
 8001970:	d90b      	bls.n	800198a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001976:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2205      	movs	r2, #5
 8001982:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e09f      	b.n	8001aca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1e5      	bne.n	8001964 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7e1b      	ldrb	r3, [r3, #24]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d108      	bne.n	80019b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e007      	b.n	80019c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7e5b      	ldrb	r3, [r3, #25]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	e007      	b.n	80019ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7e9b      	ldrb	r3, [r3, #26]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d108      	bne.n	8001a06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0220 	orr.w	r2, r2, #32
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e007      	b.n	8001a16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0220 	bic.w	r2, r2, #32
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7edb      	ldrb	r3, [r3, #27]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d108      	bne.n	8001a30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0210 	bic.w	r2, r2, #16
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	e007      	b.n	8001a40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0210 	orr.w	r2, r2, #16
 8001a3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7f1b      	ldrb	r3, [r3, #28]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d108      	bne.n	8001a5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0208 	orr.w	r2, r2, #8
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e007      	b.n	8001a6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 0208 	bic.w	r2, r2, #8
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7f5b      	ldrb	r3, [r3, #29]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0204 	orr.w	r2, r2, #4
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e007      	b.n	8001a94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0204 	bic.w	r2, r2, #4
 8001a92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	ea42 0103 	orr.w	r1, r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	1e5a      	subs	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d12e      	bne.n	8001b44 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001afe:	f7ff fee1 	bl	80018c4 <HAL_GetTick>
 8001b02:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b04:	e012      	b.n	8001b2c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b06:	f7ff fedd 	bl	80018c4 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b0a      	cmp	r3, #10
 8001b12:	d90b      	bls.n	8001b2c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2205      	movs	r2, #5
 8001b24:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e012      	b.n	8001b52 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1e5      	bne.n	8001b06 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e006      	b.n	8001b52 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
  }
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	@ (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	@ (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	@ 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ca0:	f7ff ff8e 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff47 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce8:	f7ff ff5c 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff8e 	bl	8001c14 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5d 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffb0 	bl	8001c7c <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	e165      	b.n	8002010 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d44:	2201      	movs	r2, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 8154 	bne.w	800200a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d005      	beq.n	8001d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d130      	bne.n	8001ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db0:	2201      	movs	r2, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 0201 	and.w	r2, r3, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d017      	beq.n	8001e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d123      	bne.n	8001e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	08da      	lsrs	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3208      	adds	r2, #8
 8001e66:	69b9      	ldr	r1, [r7, #24]
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80ae 	beq.w	800200a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002028 <HAL_GPIO_Init+0x300>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	4a5c      	ldr	r2, [pc, #368]	@ (8002028 <HAL_GPIO_Init+0x300>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8002028 <HAL_GPIO_Init+0x300>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eca:	4a58      	ldr	r2, [pc, #352]	@ (800202c <HAL_GPIO_Init+0x304>)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8002030 <HAL_GPIO_Init+0x308>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x21a>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4e      	ldr	r2, [pc, #312]	@ (8002034 <HAL_GPIO_Init+0x30c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x216>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4d      	ldr	r2, [pc, #308]	@ (8002038 <HAL_GPIO_Init+0x310>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x212>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4c      	ldr	r2, [pc, #304]	@ (800203c <HAL_GPIO_Init+0x314>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x20e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4b      	ldr	r2, [pc, #300]	@ (8002040 <HAL_GPIO_Init+0x318>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x20a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4a      	ldr	r2, [pc, #296]	@ (8002044 <HAL_GPIO_Init+0x31c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x206>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a49      	ldr	r2, [pc, #292]	@ (8002048 <HAL_GPIO_Init+0x320>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x202>
 8001f26:	2306      	movs	r3, #6
 8001f28:	e00c      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e00a      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f2e:	2305      	movs	r3, #5
 8001f30:	e008      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f36:	2303      	movs	r3, #3
 8001f38:	e004      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <HAL_GPIO_Init+0x21c>
 8001f42:	2300      	movs	r3, #0
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	f002 0203 	and.w	r2, r2, #3
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	4093      	lsls	r3, r2
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f54:	4935      	ldr	r1, [pc, #212]	@ (800202c <HAL_GPIO_Init+0x304>)
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f62:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f86:	4a31      	ldr	r2, [pc, #196]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb0:	4a26      	ldr	r2, [pc, #152]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb6:	4b25      	ldr	r3, [pc, #148]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fda:	4a1c      	ldr	r2, [pc, #112]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002004:	4a11      	ldr	r2, [pc, #68]	@ (800204c <HAL_GPIO_Init+0x324>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3301      	adds	r3, #1
 800200e:	61fb      	str	r3, [r7, #28]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	2b0f      	cmp	r3, #15
 8002014:	f67f ae96 	bls.w	8001d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40013800 	.word	0x40013800
 8002030:	40020000 	.word	0x40020000
 8002034:	40020400 	.word	0x40020400
 8002038:	40020800 	.word	0x40020800
 800203c:	40020c00 	.word	0x40020c00
 8002040:	40021000 	.word	0x40021000
 8002044:	40021400 	.word	0x40021400
 8002048:	40021800 	.word	0x40021800
 800204c:	40013c00 	.word	0x40013c00

08002050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
 800205c:	4613      	mov	r3, r2
 800205e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002060:	787b      	ldrb	r3, [r7, #1]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800206c:	e003      	b.n	8002076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	041a      	lsls	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	619a      	str	r2, [r3, #24]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e12b      	b.n	80022ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fbf2 	bl	8000894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2224      	movs	r2, #36	@ 0x24
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020e8:	f001 f908 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80020ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4a81      	ldr	r2, [pc, #516]	@ (80022f8 <HAL_I2C_Init+0x274>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d807      	bhi.n	8002108 <HAL_I2C_Init+0x84>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4a80      	ldr	r2, [pc, #512]	@ (80022fc <HAL_I2C_Init+0x278>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	bf94      	ite	ls
 8002100:	2301      	movls	r3, #1
 8002102:	2300      	movhi	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	e006      	b.n	8002116 <HAL_I2C_Init+0x92>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4a7d      	ldr	r2, [pc, #500]	@ (8002300 <HAL_I2C_Init+0x27c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	bf94      	ite	ls
 8002110:	2301      	movls	r3, #1
 8002112:	2300      	movhi	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e0e7      	b.n	80022ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4a78      	ldr	r2, [pc, #480]	@ (8002304 <HAL_I2C_Init+0x280>)
 8002122:	fba2 2303 	umull	r2, r3, r2, r3
 8002126:	0c9b      	lsrs	r3, r3, #18
 8002128:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a6a      	ldr	r2, [pc, #424]	@ (80022f8 <HAL_I2C_Init+0x274>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d802      	bhi.n	8002158 <HAL_I2C_Init+0xd4>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3301      	adds	r3, #1
 8002156:	e009      	b.n	800216c <HAL_I2C_Init+0xe8>
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	4a69      	ldr	r2, [pc, #420]	@ (8002308 <HAL_I2C_Init+0x284>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	3301      	adds	r3, #1
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	430b      	orrs	r3, r1
 8002172:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800217e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	495c      	ldr	r1, [pc, #368]	@ (80022f8 <HAL_I2C_Init+0x274>)
 8002188:	428b      	cmp	r3, r1
 800218a:	d819      	bhi.n	80021c0 <HAL_I2C_Init+0x13c>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1e59      	subs	r1, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fbb1 f3f3 	udiv	r3, r1, r3
 800219a:	1c59      	adds	r1, r3, #1
 800219c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021a0:	400b      	ands	r3, r1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_I2C_Init+0x138>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1e59      	subs	r1, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ba:	e051      	b.n	8002260 <HAL_I2C_Init+0x1dc>
 80021bc:	2304      	movs	r3, #4
 80021be:	e04f      	b.n	8002260 <HAL_I2C_Init+0x1dc>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d111      	bne.n	80021ec <HAL_I2C_Init+0x168>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1e58      	subs	r0, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	440b      	add	r3, r1
 80021d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	e012      	b.n	8002212 <HAL_I2C_Init+0x18e>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	0099      	lsls	r1, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002202:	3301      	adds	r3, #1
 8002204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Init+0x196>
 8002216:	2301      	movs	r3, #1
 8002218:	e022      	b.n	8002260 <HAL_I2C_Init+0x1dc>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10e      	bne.n	8002240 <HAL_I2C_Init+0x1bc>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1e58      	subs	r0, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6859      	ldr	r1, [r3, #4]
 800222a:	460b      	mov	r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	440b      	add	r3, r1
 8002230:	fbb0 f3f3 	udiv	r3, r0, r3
 8002234:	3301      	adds	r3, #1
 8002236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800223e:	e00f      	b.n	8002260 <HAL_I2C_Init+0x1dc>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1e58      	subs	r0, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	0099      	lsls	r1, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	fbb0 f3f3 	udiv	r3, r0, r3
 8002256:	3301      	adds	r3, #1
 8002258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	6809      	ldr	r1, [r1, #0]
 8002264:	4313      	orrs	r3, r2
 8002266:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69da      	ldr	r2, [r3, #28]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800228e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6911      	ldr	r1, [r2, #16]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68d2      	ldr	r2, [r2, #12]
 800229a:	4311      	orrs	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	000186a0 	.word	0x000186a0
 80022fc:	001e847f 	.word	0x001e847f
 8002300:	003d08ff 	.word	0x003d08ff
 8002304:	431bde83 	.word	0x431bde83
 8002308:	10624dd3 	.word	0x10624dd3

0800230c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	461a      	mov	r2, r3
 8002318:	460b      	mov	r3, r1
 800231a:	817b      	strh	r3, [r7, #10]
 800231c:	4613      	mov	r3, r2
 800231e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff fad0 	bl	80018c4 <HAL_GetTick>
 8002324:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	f040 80e0 	bne.w	80024f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2319      	movs	r3, #25
 800233a:	2201      	movs	r2, #1
 800233c:	4970      	ldr	r1, [pc, #448]	@ (8002500 <HAL_I2C_Master_Transmit+0x1f4>)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fc64 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800234a:	2302      	movs	r3, #2
 800234c:	e0d3      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_I2C_Master_Transmit+0x50>
 8002358:	2302      	movs	r3, #2
 800235a:	e0cc      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d007      	beq.n	8002382 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002390:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2221      	movs	r2, #33	@ 0x21
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2210      	movs	r2, #16
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	893a      	ldrh	r2, [r7, #8]
 80023b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a50      	ldr	r2, [pc, #320]	@ (8002504 <HAL_I2C_Master_Transmit+0x1f8>)
 80023c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023c4:	8979      	ldrh	r1, [r7, #10]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	6a3a      	ldr	r2, [r7, #32]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 face 	bl	800296c <I2C_MasterRequestWrite>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e08d      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023f0:	e066      	b.n	80024c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	6a39      	ldr	r1, [r7, #32]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fd22 	bl	8002e40 <I2C_WaitOnTXEFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00d      	beq.n	800241e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	2b04      	cmp	r3, #4
 8002408:	d107      	bne.n	800241a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002418:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e06b      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002446:	3b01      	subs	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b04      	cmp	r3, #4
 800245a:	d11b      	bne.n	8002494 <HAL_I2C_Master_Transmit+0x188>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002460:	2b00      	cmp	r3, #0
 8002462:	d017      	beq.n	8002494 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	1c5a      	adds	r2, r3, #1
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	6a39      	ldr	r1, [r7, #32]
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 fd19 	bl	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00d      	beq.n	80024c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d107      	bne.n	80024bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e01a      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d194      	bne.n	80023f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	00100002 	.word	0x00100002
 8002504:	ffff0000 	.word	0xffff0000

08002508 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08c      	sub	sp, #48	@ 0x30
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	461a      	mov	r2, r3
 8002514:	460b      	mov	r3, r1
 8002516:	817b      	strh	r3, [r7, #10]
 8002518:	4613      	mov	r3, r2
 800251a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff f9d2 	bl	80018c4 <HAL_GetTick>
 8002520:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b20      	cmp	r3, #32
 800252c:	f040 8217 	bne.w	800295e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2319      	movs	r3, #25
 8002536:	2201      	movs	r2, #1
 8002538:	497c      	ldr	r1, [pc, #496]	@ (800272c <HAL_I2C_Master_Receive+0x224>)
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fb66 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002546:	2302      	movs	r3, #2
 8002548:	e20a      	b.n	8002960 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_I2C_Master_Receive+0x50>
 8002554:	2302      	movs	r3, #2
 8002556:	e203      	b.n	8002960 <HAL_I2C_Master_Receive+0x458>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d007      	beq.n	800257e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0201 	orr.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800258c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2222      	movs	r2, #34	@ 0x22
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2210      	movs	r2, #16
 800259a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	893a      	ldrh	r2, [r7, #8]
 80025ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a5c      	ldr	r2, [pc, #368]	@ (8002730 <HAL_I2C_Master_Receive+0x228>)
 80025be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025c0:	8979      	ldrh	r1, [r7, #10]
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fa52 	bl	8002a70 <I2C_MasterRequestRead>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e1c4      	b.n	8002960 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d113      	bne.n	8002606 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025de:	2300      	movs	r3, #0
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	623b      	str	r3, [r7, #32]
 80025f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e198      	b.n	8002938 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260a:	2b01      	cmp	r3, #1
 800260c:	d11b      	bne.n	8002646 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800261c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e178      	b.n	8002938 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264a:	2b02      	cmp	r3, #2
 800264c:	d11b      	bne.n	8002686 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800266c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	e158      	b.n	8002938 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002694:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026ac:	e144      	b.n	8002938 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	f200 80f1 	bhi.w	800289a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d123      	bne.n	8002708 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fc4b 	bl	8002f60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e145      	b.n	8002960 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002706:	e117      	b.n	8002938 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270c:	2b02      	cmp	r3, #2
 800270e:	d14e      	bne.n	80027ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002716:	2200      	movs	r2, #0
 8002718:	4906      	ldr	r1, [pc, #24]	@ (8002734 <HAL_I2C_Master_Receive+0x22c>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 fa76 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d008      	beq.n	8002738 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e11a      	b.n	8002960 <HAL_I2C_Master_Receive+0x458>
 800272a:	bf00      	nop
 800272c:	00100002 	.word	0x00100002
 8002730:	ffff0000 	.word	0xffff0000
 8002734:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027ac:	e0c4      	b.n	8002938 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b4:	2200      	movs	r2, #0
 80027b6:	496c      	ldr	r1, [pc, #432]	@ (8002968 <HAL_I2C_Master_Receive+0x460>)
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fa27 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0cb      	b.n	8002960 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002810:	2200      	movs	r2, #0
 8002812:	4955      	ldr	r1, [pc, #340]	@ (8002968 <HAL_I2C_Master_Receive+0x460>)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f9f9 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e09d      	b.n	8002960 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288e:	b29b      	uxth	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002898:	e04e      	b.n	8002938 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800289a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fb5e 	bl	8002f60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e058      	b.n	8002960 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d124      	bne.n	8002938 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d107      	bne.n	8002906 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002904:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f aeb6 	bne.w	80026ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3728      	adds	r7, #40	@ 0x28
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	00010004 	.word	0x00010004

0800296c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	460b      	mov	r3, r1
 800297a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002980:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d006      	beq.n	8002996 <I2C_MasterRequestWrite+0x2a>
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d003      	beq.n	8002996 <I2C_MasterRequestWrite+0x2a>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002994:	d108      	bne.n	80029a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	e00b      	b.n	80029c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	2b12      	cmp	r3, #18
 80029ae:	d107      	bne.n	80029c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f91d 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029e6:	d103      	bne.n	80029f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e035      	b.n	8002a60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029fc:	d108      	bne.n	8002a10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029fe:	897b      	ldrh	r3, [r7, #10]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a0c:	611a      	str	r2, [r3, #16]
 8002a0e:	e01b      	b.n	8002a48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a10:	897b      	ldrh	r3, [r7, #10]
 8002a12:	11db      	asrs	r3, r3, #7
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	f003 0306 	and.w	r3, r3, #6
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f063 030f 	orn	r3, r3, #15
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	490e      	ldr	r1, [pc, #56]	@ (8002a68 <I2C_MasterRequestWrite+0xfc>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f966 	bl	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e010      	b.n	8002a60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a3e:	897b      	ldrh	r3, [r7, #10]
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	4907      	ldr	r1, [pc, #28]	@ (8002a6c <I2C_MasterRequestWrite+0x100>)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f956 	bl	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	00010008 	.word	0x00010008
 8002a6c:	00010002 	.word	0x00010002

08002a70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d006      	beq.n	8002aaa <I2C_MasterRequestRead+0x3a>
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d003      	beq.n	8002aaa <I2C_MasterRequestRead+0x3a>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002aa8:	d108      	bne.n	8002abc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e00b      	b.n	8002ad4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	2b11      	cmp	r3, #17
 8002ac2:	d107      	bne.n	8002ad4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ad2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f893 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00d      	beq.n	8002b08 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002afa:	d103      	bne.n	8002b04 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e079      	b.n	8002bfc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b10:	d108      	bne.n	8002b24 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	611a      	str	r2, [r3, #16]
 8002b22:	e05f      	b.n	8002be4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b24:	897b      	ldrh	r3, [r7, #10]
 8002b26:	11db      	asrs	r3, r3, #7
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	f003 0306 	and.w	r3, r3, #6
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f063 030f 	orn	r3, r3, #15
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	4930      	ldr	r1, [pc, #192]	@ (8002c04 <I2C_MasterRequestRead+0x194>)
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f8dc 	bl	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e054      	b.n	8002bfc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4929      	ldr	r1, [pc, #164]	@ (8002c08 <I2C_MasterRequestRead+0x198>)
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f8cc 	bl	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e044      	b.n	8002bfc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b96:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f831 	bl	8002c0c <I2C_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00d      	beq.n	8002bcc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bbe:	d103      	bne.n	8002bc8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bc6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e017      	b.n	8002bfc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002bcc:	897b      	ldrh	r3, [r7, #10]
 8002bce:	11db      	asrs	r3, r3, #7
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	f003 0306 	and.w	r3, r3, #6
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f063 030e 	orn	r3, r3, #14
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	4907      	ldr	r1, [pc, #28]	@ (8002c08 <I2C_MasterRequestRead+0x198>)
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f888 	bl	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	00010008 	.word	0x00010008
 8002c08:	00010002 	.word	0x00010002

08002c0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c1c:	e048      	b.n	8002cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c24:	d044      	beq.n	8002cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c26:	f7fe fe4d 	bl	80018c4 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d302      	bcc.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d139      	bne.n	8002cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10d      	bne.n	8002c62 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	43da      	mvns	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4013      	ands	r3, r2
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	bf0c      	ite	eq
 8002c58:	2301      	moveq	r3, #1
 8002c5a:	2300      	movne	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	e00c      	b.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d116      	bne.n	8002cb0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	f043 0220 	orr.w	r2, r3, #32
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e023      	b.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d10d      	bne.n	8002cd6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	e00c      	b.n	8002cf0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	43da      	mvns	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bf0c      	ite	eq
 8002ce8:	2301      	moveq	r3, #1
 8002cea:	2300      	movne	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d093      	beq.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d0e:	e071      	b.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d1e:	d123      	bne.n	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d2e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e067      	b.n	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d6e:	d041      	beq.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d70:	f7fe fda8 	bl	80018c4 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d302      	bcc.n	8002d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d136      	bne.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	0c1b      	lsrs	r3, r3, #16
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d10c      	bne.n	8002daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf14      	ite	ne
 8002da2:	2301      	movne	r3, #1
 8002da4:	2300      	moveq	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	e00b      	b.n	8002dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	43da      	mvns	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4013      	ands	r3, r2
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e021      	b.n	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	0c1b      	lsrs	r3, r3, #16
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d10c      	bne.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	43da      	mvns	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e00b      	b.n	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4013      	ands	r3, r2
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bf14      	ite	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	2300      	moveq	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f47f af6d 	bne.w	8002d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e4c:	e034      	b.n	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f8e3 	bl	800301a <I2C_IsAcknowledgeFailed>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e034      	b.n	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e64:	d028      	beq.n	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e66:	f7fe fd2d 	bl	80018c4 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d302      	bcc.n	8002e7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d11d      	bne.n	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e86:	2b80      	cmp	r3, #128	@ 0x80
 8002e88:	d016      	beq.n	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e007      	b.n	8002ec8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec2:	2b80      	cmp	r3, #128	@ 0x80
 8002ec4:	d1c3      	bne.n	8002e4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002edc:	e034      	b.n	8002f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f89b 	bl	800301a <I2C_IsAcknowledgeFailed>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e034      	b.n	8002f58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ef4:	d028      	beq.n	8002f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7fe fce5 	bl	80018c4 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d11d      	bne.n	8002f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d016      	beq.n	8002f48 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e007      	b.n	8002f58 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d1c3      	bne.n	8002ede <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f6c:	e049      	b.n	8003002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b10      	cmp	r3, #16
 8002f7a:	d119      	bne.n	8002fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0210 	mvn.w	r2, #16
 8002f84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e030      	b.n	8003012 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb0:	f7fe fc88 	bl	80018c4 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d302      	bcc.n	8002fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d11d      	bne.n	8003002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd0:	2b40      	cmp	r3, #64	@ 0x40
 8002fd2:	d016      	beq.n	8003002 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	f043 0220 	orr.w	r2, r3, #32
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e007      	b.n	8003012 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300c:	2b40      	cmp	r3, #64	@ 0x40
 800300e:	d1ae      	bne.n	8002f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003030:	d11b      	bne.n	800306a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800303a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	f043 0204 	orr.w	r2, r3, #4
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <HAL_PWREx_EnableOverDrive+0x90>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	4a1f      	ldr	r2, [pc, #124]	@ (8003108 <HAL_PWREx_EnableOverDrive+0x90>)
 800308c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003090:	6413      	str	r3, [r2, #64]	@ 0x40
 8003092:	4b1d      	ldr	r3, [pc, #116]	@ (8003108 <HAL_PWREx_EnableOverDrive+0x90>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800309e:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <HAL_PWREx_EnableOverDrive+0x94>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a4:	f7fe fc0e 	bl	80018c4 <HAL_GetTick>
 80030a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030aa:	e009      	b.n	80030c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030ac:	f7fe fc0a 	bl	80018c4 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030ba:	d901      	bls.n	80030c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e01f      	b.n	8003100 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030c0:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <HAL_PWREx_EnableOverDrive+0x98>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030cc:	d1ee      	bne.n	80030ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030ce:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030d4:	f7fe fbf6 	bl	80018c4 <HAL_GetTick>
 80030d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030da:	e009      	b.n	80030f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030dc:	f7fe fbf2 	bl	80018c4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030ea:	d901      	bls.n	80030f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e007      	b.n	8003100 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030f0:	4b07      	ldr	r3, [pc, #28]	@ (8003110 <HAL_PWREx_EnableOverDrive+0x98>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030fc:	d1ee      	bne.n	80030dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	420e0040 	.word	0x420e0040
 8003110:	40007000 	.word	0x40007000
 8003114:	420e0044 	.word	0x420e0044

08003118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0cc      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b68      	ldr	r3, [pc, #416]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 030f 	and.w	r3, r3, #15
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d90c      	bls.n	8003154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b65      	ldr	r3, [pc, #404]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b63      	ldr	r3, [pc, #396]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0b8      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800316c:	4b59      	ldr	r3, [pc, #356]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a58      	ldr	r2, [pc, #352]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003176:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003184:	4b53      	ldr	r3, [pc, #332]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a52      	ldr	r2, [pc, #328]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800318e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b50      	ldr	r3, [pc, #320]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	494d      	ldr	r1, [pc, #308]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d044      	beq.n	8003238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b47      	ldr	r3, [pc, #284]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d119      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e07f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	4b3f      	ldr	r3, [pc, #252]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e06f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e067      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b37      	ldr	r3, [pc, #220]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4934      	ldr	r1, [pc, #208]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003208:	f7fe fb5c 	bl	80018c4 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fe fb58 	bl	80018c4 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e04f      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b2b      	ldr	r3, [pc, #172]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d20c      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b22      	ldr	r3, [pc, #136]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b20      	ldr	r3, [pc, #128]	@ (80032d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e032      	b.n	80032c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800326c:	4b19      	ldr	r3, [pc, #100]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4916      	ldr	r1, [pc, #88]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328a:	4b12      	ldr	r3, [pc, #72]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	490e      	ldr	r1, [pc, #56]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800329e:	f000 f855 	bl	800334c <HAL_RCC_GetSysClockFreq>
 80032a2:	4602      	mov	r2, r0
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	490a      	ldr	r1, [pc, #40]	@ (80032d8 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	5ccb      	ldrb	r3, [r1, r3]
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	4a09      	ldr	r2, [pc, #36]	@ (80032dc <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032ba:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <HAL_RCC_ClockConfig+0x1c8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fabc 	bl	800183c <HAL_InitTick>

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023c00 	.word	0x40023c00
 80032d4:	40023800 	.word	0x40023800
 80032d8:	08005544 	.word	0x08005544
 80032dc:	20000004 	.word	0x20000004
 80032e0:	20000008 	.word	0x20000008

080032e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032e8:	4b03      	ldr	r3, [pc, #12]	@ (80032f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000004 	.word	0x20000004

080032fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003300:	f7ff fff0 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003304:	4602      	mov	r2, r0
 8003306:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	0a9b      	lsrs	r3, r3, #10
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	4903      	ldr	r1, [pc, #12]	@ (8003320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003312:	5ccb      	ldrb	r3, [r1, r3]
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	08005554 	.word	0x08005554

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003328:	f7ff ffdc 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0b5b      	lsrs	r3, r3, #13
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4903      	ldr	r1, [pc, #12]	@ (8003348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	08005554 	.word	0x08005554

0800334c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800334c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003350:	b0ae      	sub	sp, #184	@ 0xb8
 8003352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003372:	4bcb      	ldr	r3, [pc, #812]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b0c      	cmp	r3, #12
 800337c:	f200 8206 	bhi.w	800378c <HAL_RCC_GetSysClockFreq+0x440>
 8003380:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	080033bd 	.word	0x080033bd
 800338c:	0800378d 	.word	0x0800378d
 8003390:	0800378d 	.word	0x0800378d
 8003394:	0800378d 	.word	0x0800378d
 8003398:	080033c5 	.word	0x080033c5
 800339c:	0800378d 	.word	0x0800378d
 80033a0:	0800378d 	.word	0x0800378d
 80033a4:	0800378d 	.word	0x0800378d
 80033a8:	080033cd 	.word	0x080033cd
 80033ac:	0800378d 	.word	0x0800378d
 80033b0:	0800378d 	.word	0x0800378d
 80033b4:	0800378d 	.word	0x0800378d
 80033b8:	080035bd 	.word	0x080035bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033bc:	4bb9      	ldr	r3, [pc, #740]	@ (80036a4 <HAL_RCC_GetSysClockFreq+0x358>)
 80033be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033c2:	e1e7      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033c4:	4bb8      	ldr	r3, [pc, #736]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80033c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033ca:	e1e3      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033cc:	4bb4      	ldr	r3, [pc, #720]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d8:	4bb1      	ldr	r3, [pc, #708]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d071      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e4:	4bae      	ldr	r3, [pc, #696]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	099b      	lsrs	r3, r3, #6
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80033f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80033f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800340a:	4622      	mov	r2, r4
 800340c:	462b      	mov	r3, r5
 800340e:	f04f 0000 	mov.w	r0, #0
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	0159      	lsls	r1, r3, #5
 8003418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800341c:	0150      	lsls	r0, r2, #5
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4621      	mov	r1, r4
 8003424:	1a51      	subs	r1, r2, r1
 8003426:	6439      	str	r1, [r7, #64]	@ 0x40
 8003428:	4629      	mov	r1, r5
 800342a:	eb63 0301 	sbc.w	r3, r3, r1
 800342e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800343c:	4649      	mov	r1, r9
 800343e:	018b      	lsls	r3, r1, #6
 8003440:	4641      	mov	r1, r8
 8003442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003446:	4641      	mov	r1, r8
 8003448:	018a      	lsls	r2, r1, #6
 800344a:	4641      	mov	r1, r8
 800344c:	1a51      	subs	r1, r2, r1
 800344e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003450:	4649      	mov	r1, r9
 8003452:	eb63 0301 	sbc.w	r3, r3, r1
 8003456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003464:	4649      	mov	r1, r9
 8003466:	00cb      	lsls	r3, r1, #3
 8003468:	4641      	mov	r1, r8
 800346a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800346e:	4641      	mov	r1, r8
 8003470:	00ca      	lsls	r2, r1, #3
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	4603      	mov	r3, r0
 8003478:	4622      	mov	r2, r4
 800347a:	189b      	adds	r3, r3, r2
 800347c:	633b      	str	r3, [r7, #48]	@ 0x30
 800347e:	462b      	mov	r3, r5
 8003480:	460a      	mov	r2, r1
 8003482:	eb42 0303 	adc.w	r3, r2, r3
 8003486:	637b      	str	r3, [r7, #52]	@ 0x34
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003494:	4629      	mov	r1, r5
 8003496:	024b      	lsls	r3, r1, #9
 8003498:	4621      	mov	r1, r4
 800349a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800349e:	4621      	mov	r1, r4
 80034a0:	024a      	lsls	r2, r1, #9
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034b4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80034b8:	f7fc ff5a 	bl	8000370 <__aeabi_uldivmod>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4613      	mov	r3, r2
 80034c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034c6:	e067      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c8:	4b75      	ldr	r3, [pc, #468]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	099b      	lsrs	r3, r3, #6
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034d4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80034d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034e2:	2300      	movs	r3, #0
 80034e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034e6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80034ea:	4622      	mov	r2, r4
 80034ec:	462b      	mov	r3, r5
 80034ee:	f04f 0000 	mov.w	r0, #0
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	0159      	lsls	r1, r3, #5
 80034f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fc:	0150      	lsls	r0, r2, #5
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4621      	mov	r1, r4
 8003504:	1a51      	subs	r1, r2, r1
 8003506:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003508:	4629      	mov	r1, r5
 800350a:	eb63 0301 	sbc.w	r3, r3, r1
 800350e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800351c:	4649      	mov	r1, r9
 800351e:	018b      	lsls	r3, r1, #6
 8003520:	4641      	mov	r1, r8
 8003522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003526:	4641      	mov	r1, r8
 8003528:	018a      	lsls	r2, r1, #6
 800352a:	4641      	mov	r1, r8
 800352c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003530:	4649      	mov	r1, r9
 8003532:	eb63 0b01 	sbc.w	fp, r3, r1
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003542:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003546:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800354a:	4692      	mov	sl, r2
 800354c:	469b      	mov	fp, r3
 800354e:	4623      	mov	r3, r4
 8003550:	eb1a 0303 	adds.w	r3, sl, r3
 8003554:	623b      	str	r3, [r7, #32]
 8003556:	462b      	mov	r3, r5
 8003558:	eb4b 0303 	adc.w	r3, fp, r3
 800355c:	627b      	str	r3, [r7, #36]	@ 0x24
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800356a:	4629      	mov	r1, r5
 800356c:	028b      	lsls	r3, r1, #10
 800356e:	4621      	mov	r1, r4
 8003570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003574:	4621      	mov	r1, r4
 8003576:	028a      	lsls	r2, r1, #10
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003580:	2200      	movs	r2, #0
 8003582:	673b      	str	r3, [r7, #112]	@ 0x70
 8003584:	677a      	str	r2, [r7, #116]	@ 0x74
 8003586:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800358a:	f7fc fef1 	bl	8000370 <__aeabi_uldivmod>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4613      	mov	r3, r2
 8003594:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003598:	4b41      	ldr	r3, [pc, #260]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x354>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	3301      	adds	r3, #1
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80035aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035ba:	e0eb      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035bc:	4b38      	ldr	r3, [pc, #224]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035c8:	4b35      	ldr	r3, [pc, #212]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d06b      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d4:	4b32      	ldr	r3, [pc, #200]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x354>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	099b      	lsrs	r3, r3, #6
 80035da:	2200      	movs	r2, #0
 80035dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80035e8:	2300      	movs	r3, #0
 80035ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80035ec:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80035f0:	4622      	mov	r2, r4
 80035f2:	462b      	mov	r3, r5
 80035f4:	f04f 0000 	mov.w	r0, #0
 80035f8:	f04f 0100 	mov.w	r1, #0
 80035fc:	0159      	lsls	r1, r3, #5
 80035fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003602:	0150      	lsls	r0, r2, #5
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4621      	mov	r1, r4
 800360a:	1a51      	subs	r1, r2, r1
 800360c:	61b9      	str	r1, [r7, #24]
 800360e:	4629      	mov	r1, r5
 8003610:	eb63 0301 	sbc.w	r3, r3, r1
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003622:	4659      	mov	r1, fp
 8003624:	018b      	lsls	r3, r1, #6
 8003626:	4651      	mov	r1, sl
 8003628:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800362c:	4651      	mov	r1, sl
 800362e:	018a      	lsls	r2, r1, #6
 8003630:	4651      	mov	r1, sl
 8003632:	ebb2 0801 	subs.w	r8, r2, r1
 8003636:	4659      	mov	r1, fp
 8003638:	eb63 0901 	sbc.w	r9, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003648:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800364c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003650:	4690      	mov	r8, r2
 8003652:	4699      	mov	r9, r3
 8003654:	4623      	mov	r3, r4
 8003656:	eb18 0303 	adds.w	r3, r8, r3
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	462b      	mov	r3, r5
 800365e:	eb49 0303 	adc.w	r3, r9, r3
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003670:	4629      	mov	r1, r5
 8003672:	024b      	lsls	r3, r1, #9
 8003674:	4621      	mov	r1, r4
 8003676:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800367a:	4621      	mov	r1, r4
 800367c:	024a      	lsls	r2, r1, #9
 800367e:	4610      	mov	r0, r2
 8003680:	4619      	mov	r1, r3
 8003682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003686:	2200      	movs	r2, #0
 8003688:	65bb      	str	r3, [r7, #88]	@ 0x58
 800368a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800368c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003690:	f7fc fe6e 	bl	8000370 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4613      	mov	r3, r2
 800369a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800369e:	e065      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x420>
 80036a0:	40023800 	.word	0x40023800
 80036a4:	00f42400 	.word	0x00f42400
 80036a8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ac:	4b3d      	ldr	r3, [pc, #244]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x458>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	099b      	lsrs	r3, r3, #6
 80036b2:	2200      	movs	r2, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	4611      	mov	r1, r2
 80036b8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80036be:	2300      	movs	r3, #0
 80036c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80036c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80036c6:	4642      	mov	r2, r8
 80036c8:	464b      	mov	r3, r9
 80036ca:	f04f 0000 	mov.w	r0, #0
 80036ce:	f04f 0100 	mov.w	r1, #0
 80036d2:	0159      	lsls	r1, r3, #5
 80036d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d8:	0150      	lsls	r0, r2, #5
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4641      	mov	r1, r8
 80036e0:	1a51      	subs	r1, r2, r1
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	4649      	mov	r1, r9
 80036e6:	eb63 0301 	sbc.w	r3, r3, r1
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80036f8:	4659      	mov	r1, fp
 80036fa:	018b      	lsls	r3, r1, #6
 80036fc:	4651      	mov	r1, sl
 80036fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003702:	4651      	mov	r1, sl
 8003704:	018a      	lsls	r2, r1, #6
 8003706:	4651      	mov	r1, sl
 8003708:	1a54      	subs	r4, r2, r1
 800370a:	4659      	mov	r1, fp
 800370c:	eb63 0501 	sbc.w	r5, r3, r1
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	00eb      	lsls	r3, r5, #3
 800371a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800371e:	00e2      	lsls	r2, r4, #3
 8003720:	4614      	mov	r4, r2
 8003722:	461d      	mov	r5, r3
 8003724:	4643      	mov	r3, r8
 8003726:	18e3      	adds	r3, r4, r3
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	464b      	mov	r3, r9
 800372c:	eb45 0303 	adc.w	r3, r5, r3
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800373e:	4629      	mov	r1, r5
 8003740:	028b      	lsls	r3, r1, #10
 8003742:	4621      	mov	r1, r4
 8003744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003748:	4621      	mov	r1, r4
 800374a:	028a      	lsls	r2, r1, #10
 800374c:	4610      	mov	r0, r2
 800374e:	4619      	mov	r1, r3
 8003750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003754:	2200      	movs	r2, #0
 8003756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003758:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800375a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800375e:	f7fc fe07 	bl	8000370 <__aeabi_uldivmod>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4613      	mov	r3, r2
 8003768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800376c:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <HAL_RCC_GetSysClockFreq+0x458>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	0f1b      	lsrs	r3, r3, #28
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800377a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800377e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800378a:	e003      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800378e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003792:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003794:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003798:	4618      	mov	r0, r3
 800379a:	37b8      	adds	r7, #184	@ 0xb8
 800379c:	46bd      	mov	sp, r7
 800379e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	00f42400 	.word	0x00f42400

080037ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e28d      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8083 	beq.w	80038d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037cc:	4b94      	ldr	r3, [pc, #592]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d019      	beq.n	800380c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037d8:	4b91      	ldr	r3, [pc, #580]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 030c 	and.w	r3, r3, #12
        || \
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d106      	bne.n	80037f2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037f0:	d00c      	beq.n	800380c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037fa:	2b0c      	cmp	r3, #12
 80037fc:	d112      	bne.n	8003824 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fe:	4b88      	ldr	r3, [pc, #544]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800380a:	d10b      	bne.n	8003824 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	4b84      	ldr	r3, [pc, #528]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d05b      	beq.n	80038d0 <HAL_RCC_OscConfig+0x124>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d157      	bne.n	80038d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e25a      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382c:	d106      	bne.n	800383c <HAL_RCC_OscConfig+0x90>
 800382e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a7b      	ldr	r2, [pc, #492]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e01d      	b.n	8003878 <HAL_RCC_OscConfig+0xcc>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0xb4>
 8003846:	4b76      	ldr	r3, [pc, #472]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a75      	ldr	r2, [pc, #468]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b73      	ldr	r3, [pc, #460]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a72      	ldr	r2, [pc, #456]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0xcc>
 8003860:	4b6f      	ldr	r3, [pc, #444]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6e      	ldr	r2, [pc, #440]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b6c      	ldr	r3, [pc, #432]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a6b      	ldr	r2, [pc, #428]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7fe f820 	bl	80018c4 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fe f81c 	bl	80018c4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	@ 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e21f      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b61      	ldr	r3, [pc, #388]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0xdc>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fe f80c 	bl	80018c4 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe f808 	bl	80018c4 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	@ 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e20b      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	4b57      	ldr	r3, [pc, #348]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x104>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d06f      	beq.n	80039be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038de:	4b50      	ldr	r3, [pc, #320]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d017      	beq.n	800391a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
        || \
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d105      	bne.n	8003902 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003902:	4b47      	ldr	r3, [pc, #284]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800390a:	2b0c      	cmp	r3, #12
 800390c:	d11c      	bne.n	8003948 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390e:	4b44      	ldr	r3, [pc, #272]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d116      	bne.n	8003948 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391a:	4b41      	ldr	r3, [pc, #260]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_RCC_OscConfig+0x186>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d001      	beq.n	8003932 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e1d3      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003932:	4b3b      	ldr	r3, [pc, #236]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4937      	ldr	r1, [pc, #220]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	e03a      	b.n	80039be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003950:	4b34      	ldr	r3, [pc, #208]	@ (8003a24 <HAL_RCC_OscConfig+0x278>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fd ffb5 	bl	80018c4 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395e:	f7fd ffb1 	bl	80018c4 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e1b4      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003970:	4b2b      	ldr	r3, [pc, #172]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397c:	4b28      	ldr	r3, [pc, #160]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4925      	ldr	r1, [pc, #148]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]
 8003990:	e015      	b.n	80039be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003992:	4b24      	ldr	r3, [pc, #144]	@ (8003a24 <HAL_RCC_OscConfig+0x278>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd ff94 	bl	80018c4 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a0:	f7fd ff90 	bl	80018c4 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e193      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d036      	beq.n	8003a38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d016      	beq.n	8003a00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d2:	4b15      	ldr	r3, [pc, #84]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fd ff74 	bl	80018c4 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e0:	f7fd ff70 	bl	80018c4 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e173      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <HAL_RCC_OscConfig+0x274>)
 80039f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x234>
 80039fe:	e01b      	b.n	8003a38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a00:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <HAL_RCC_OscConfig+0x27c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fd ff5d 	bl	80018c4 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0c:	e00e      	b.n	8003a2c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0e:	f7fd ff59 	bl	80018c4 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d907      	bls.n	8003a2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e15c      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
 8003a20:	40023800 	.word	0x40023800
 8003a24:	42470000 	.word	0x42470000
 8003a28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a2c:	4b8a      	ldr	r3, [pc, #552]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1ea      	bne.n	8003a0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8097 	beq.w	8003b74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4a:	4b83      	ldr	r3, [pc, #524]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10f      	bne.n	8003a76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	60bb      	str	r3, [r7, #8]
 8003a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a66:	4b7c      	ldr	r3, [pc, #496]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	4b79      	ldr	r3, [pc, #484]	@ (8003c5c <HAL_RCC_OscConfig+0x4b0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d118      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a82:	4b76      	ldr	r3, [pc, #472]	@ (8003c5c <HAL_RCC_OscConfig+0x4b0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a75      	ldr	r2, [pc, #468]	@ (8003c5c <HAL_RCC_OscConfig+0x4b0>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8e:	f7fd ff19 	bl	80018c4 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a96:	f7fd ff15 	bl	80018c4 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e118      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa8:	4b6c      	ldr	r3, [pc, #432]	@ (8003c5c <HAL_RCC_OscConfig+0x4b0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x31e>
 8003abc:	4b66      	ldr	r3, [pc, #408]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac0:	4a65      	ldr	r2, [pc, #404]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac8:	e01c      	b.n	8003b04 <HAL_RCC_OscConfig+0x358>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x340>
 8003ad2:	4b61      	ldr	r3, [pc, #388]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad6:	4a60      	ldr	r2, [pc, #384]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003ad8:	f043 0304 	orr.w	r3, r3, #4
 8003adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ade:	4b5e      	ldr	r3, [pc, #376]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae2:	4a5d      	ldr	r2, [pc, #372]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aea:	e00b      	b.n	8003b04 <HAL_RCC_OscConfig+0x358>
 8003aec:	4b5a      	ldr	r3, [pc, #360]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af0:	4a59      	ldr	r2, [pc, #356]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003af2:	f023 0301 	bic.w	r3, r3, #1
 8003af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af8:	4b57      	ldr	r3, [pc, #348]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afc:	4a56      	ldr	r2, [pc, #344]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003afe:	f023 0304 	bic.w	r3, r3, #4
 8003b02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d015      	beq.n	8003b38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fd feda 	bl	80018c4 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b14:	f7fd fed6 	bl	80018c4 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e0d7      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0ee      	beq.n	8003b14 <HAL_RCC_OscConfig+0x368>
 8003b36:	e014      	b.n	8003b62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fd fec4 	bl	80018c4 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fd fec0 	bl	80018c4 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0c1      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b56:	4b40      	ldr	r3, [pc, #256]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1ee      	bne.n	8003b40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d105      	bne.n	8003b74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b68:	4b3b      	ldr	r3, [pc, #236]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80ad 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b7e:	4b36      	ldr	r3, [pc, #216]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d060      	beq.n	8003c4c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d145      	bne.n	8003c1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b92:	4b33      	ldr	r3, [pc, #204]	@ (8003c60 <HAL_RCC_OscConfig+0x4b4>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd fe94 	bl	80018c4 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd fe90 	bl	80018c4 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e093      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb2:	4b29      	ldr	r3, [pc, #164]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd4:	085b      	lsrs	r3, r3, #1
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be8:	071b      	lsls	r3, r3, #28
 8003bea:	491b      	ldr	r1, [pc, #108]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c60 <HAL_RCC_OscConfig+0x4b4>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7fd fe65 	bl	80018c4 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfe:	f7fd fe61 	bl	80018c4 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e064      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c10:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x452>
 8003c1c:	e05c      	b.n	8003cd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1e:	4b10      	ldr	r3, [pc, #64]	@ (8003c60 <HAL_RCC_OscConfig+0x4b4>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fd fe4e 	bl	80018c4 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fd fe4a 	bl	80018c4 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e04d      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_RCC_OscConfig+0x4ac>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x480>
 8003c4a:	e045      	b.n	8003cd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d107      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e040      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c64:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce4 <HAL_RCC_OscConfig+0x538>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d030      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d129      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d122      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c94:	4013      	ands	r3, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d119      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003caa:	085b      	lsrs	r3, r3, #1
 8003cac:	3b01      	subs	r3, #1
 8003cae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d10f      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023800 	.word	0x40023800

08003ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e042      	b.n	8003d80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd fcca 	bl	80016a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2224      	movs	r2, #36	@ 0x24
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fa09 	bl	8004144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	@ 0x28
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	4613      	mov	r3, r2
 8003d96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d175      	bne.n	8003e94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_UART_Transmit+0x2c>
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e06e      	b.n	8003e96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2221      	movs	r2, #33	@ 0x21
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dc6:	f7fd fd7d 	bl	80018c4 <HAL_GetTick>
 8003dca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	88fa      	ldrh	r2, [r7, #6]
 8003dd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de0:	d108      	bne.n	8003df4 <HAL_UART_Transmit+0x6c>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d104      	bne.n	8003df4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	e003      	b.n	8003dfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dfc:	e02e      	b.n	8003e5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2200      	movs	r2, #0
 8003e06:	2180      	movs	r1, #128	@ 0x80
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f8df 	bl	8003fcc <UART_WaitOnFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e03a      	b.n	8003e96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	3302      	adds	r3, #2
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	e007      	b.n	8003e4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	781a      	ldrb	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1cb      	bne.n	8003dfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2140      	movs	r1, #64	@ 0x40
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f8ab 	bl	8003fcc <UART_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e006      	b.n	8003e96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b08a      	sub	sp, #40	@ 0x28
 8003ea2:	af02      	add	r7, sp, #8
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	f040 8081 	bne.w	8003fc2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_UART_Receive+0x2e>
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e079      	b.n	8003fc4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2222      	movs	r2, #34	@ 0x22
 8003eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ee4:	f7fd fcee 	bl	80018c4 <HAL_GetTick>
 8003ee8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efe:	d108      	bne.n	8003f12 <HAL_UART_Receive+0x74>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d104      	bne.n	8003f12 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	e003      	b.n	8003f1a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003f1a:	e047      	b.n	8003fac <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2200      	movs	r2, #0
 8003f24:	2120      	movs	r1, #32
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f850 	bl	8003fcc <UART_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e042      	b.n	8003fc4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10c      	bne.n	8003f5e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	3302      	adds	r3, #2
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	e01f      	b.n	8003f9e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f66:	d007      	beq.n	8003f78 <HAL_UART_Receive+0xda>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10a      	bne.n	8003f86 <HAL_UART_Receive+0xe8>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e008      	b.n	8003f98 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1b2      	bne.n	8003f1c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2220      	movs	r2, #32
 8003fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
  }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fdc:	e03b      	b.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fe4:	d037      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe6:	f7fd fc6d 	bl	80018c4 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d302      	bcc.n	8003ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e03a      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d023      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b80      	cmp	r3, #128	@ 0x80
 8004012:	d020      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b40      	cmp	r3, #64	@ 0x40
 8004018:	d01d      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d116      	bne.n	8004056 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f81d 	bl	800407e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2208      	movs	r2, #8
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e00f      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	429a      	cmp	r2, r3
 8004064:	bf0c      	ite	eq
 8004066:	2301      	moveq	r3, #1
 8004068:	2300      	movne	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	429a      	cmp	r2, r3
 8004072:	d0b4      	beq.n	8003fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800407e:	b480      	push	{r7}
 8004080:	b095      	sub	sp, #84	@ 0x54
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800409c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80040a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3314      	adds	r3, #20
 80040c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3314      	adds	r3, #20
 80040d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e5      	bne.n	80040ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d119      	bne.n	800412a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	330c      	adds	r3, #12
 80040fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	60bb      	str	r3, [r7, #8]
   return(result);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f023 0310 	bic.w	r3, r3, #16
 800410c:	647b      	str	r3, [r7, #68]	@ 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004116:	61ba      	str	r2, [r7, #24]
 8004118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6979      	ldr	r1, [r7, #20]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	613b      	str	r3, [r7, #16]
   return(result);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004138:	bf00      	nop
 800413a:	3754      	adds	r7, #84	@ 0x54
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004148:	b0c0      	sub	sp, #256	@ 0x100
 800414a:	af00      	add	r7, sp, #0
 800414c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004160:	68d9      	ldr	r1, [r3, #12]
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	ea40 0301 	orr.w	r3, r0, r1
 800416c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	431a      	orrs	r2, r3
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	431a      	orrs	r2, r3
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800419c:	f021 010c 	bic.w	r1, r1, #12
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041aa:	430b      	orrs	r3, r1
 80041ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041be:	6999      	ldr	r1, [r3, #24]
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	ea40 0301 	orr.w	r3, r0, r1
 80041ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b8f      	ldr	r3, [pc, #572]	@ (8004410 <UART_SetConfig+0x2cc>)
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d005      	beq.n	80041e4 <UART_SetConfig+0xa0>
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b8d      	ldr	r3, [pc, #564]	@ (8004414 <UART_SetConfig+0x2d0>)
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d104      	bne.n	80041ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041e4:	f7ff f89e 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 80041e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041ec:	e003      	b.n	80041f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ee:	f7ff f885 	bl	80032fc <HAL_RCC_GetPCLK1Freq>
 80041f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004200:	f040 810c 	bne.w	800441c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004208:	2200      	movs	r2, #0
 800420a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800420e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004212:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004216:	4622      	mov	r2, r4
 8004218:	462b      	mov	r3, r5
 800421a:	1891      	adds	r1, r2, r2
 800421c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800421e:	415b      	adcs	r3, r3
 8004220:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004222:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004226:	4621      	mov	r1, r4
 8004228:	eb12 0801 	adds.w	r8, r2, r1
 800422c:	4629      	mov	r1, r5
 800422e:	eb43 0901 	adc.w	r9, r3, r1
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800423e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004242:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004246:	4690      	mov	r8, r2
 8004248:	4699      	mov	r9, r3
 800424a:	4623      	mov	r3, r4
 800424c:	eb18 0303 	adds.w	r3, r8, r3
 8004250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004254:	462b      	mov	r3, r5
 8004256:	eb49 0303 	adc.w	r3, r9, r3
 800425a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800426a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800426e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004272:	460b      	mov	r3, r1
 8004274:	18db      	adds	r3, r3, r3
 8004276:	653b      	str	r3, [r7, #80]	@ 0x50
 8004278:	4613      	mov	r3, r2
 800427a:	eb42 0303 	adc.w	r3, r2, r3
 800427e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004280:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004284:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004288:	f7fc f872 	bl	8000370 <__aeabi_uldivmod>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4b61      	ldr	r3, [pc, #388]	@ (8004418 <UART_SetConfig+0x2d4>)
 8004292:	fba3 2302 	umull	r2, r3, r3, r2
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	011c      	lsls	r4, r3, #4
 800429a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042ac:	4642      	mov	r2, r8
 80042ae:	464b      	mov	r3, r9
 80042b0:	1891      	adds	r1, r2, r2
 80042b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042b4:	415b      	adcs	r3, r3
 80042b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042bc:	4641      	mov	r1, r8
 80042be:	eb12 0a01 	adds.w	sl, r2, r1
 80042c2:	4649      	mov	r1, r9
 80042c4:	eb43 0b01 	adc.w	fp, r3, r1
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042dc:	4692      	mov	sl, r2
 80042de:	469b      	mov	fp, r3
 80042e0:	4643      	mov	r3, r8
 80042e2:	eb1a 0303 	adds.w	r3, sl, r3
 80042e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042ea:	464b      	mov	r3, r9
 80042ec:	eb4b 0303 	adc.w	r3, fp, r3
 80042f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004300:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004304:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004308:	460b      	mov	r3, r1
 800430a:	18db      	adds	r3, r3, r3
 800430c:	643b      	str	r3, [r7, #64]	@ 0x40
 800430e:	4613      	mov	r3, r2
 8004310:	eb42 0303 	adc.w	r3, r2, r3
 8004314:	647b      	str	r3, [r7, #68]	@ 0x44
 8004316:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800431a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800431e:	f7fc f827 	bl	8000370 <__aeabi_uldivmod>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	4611      	mov	r1, r2
 8004328:	4b3b      	ldr	r3, [pc, #236]	@ (8004418 <UART_SetConfig+0x2d4>)
 800432a:	fba3 2301 	umull	r2, r3, r3, r1
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2264      	movs	r2, #100	@ 0x64
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	1acb      	subs	r3, r1, r3
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800433e:	4b36      	ldr	r3, [pc, #216]	@ (8004418 <UART_SetConfig+0x2d4>)
 8004340:	fba3 2302 	umull	r2, r3, r3, r2
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800434c:	441c      	add	r4, r3
 800434e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004358:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800435c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	1891      	adds	r1, r2, r2
 8004366:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004368:	415b      	adcs	r3, r3
 800436a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800436c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004370:	4641      	mov	r1, r8
 8004372:	1851      	adds	r1, r2, r1
 8004374:	6339      	str	r1, [r7, #48]	@ 0x30
 8004376:	4649      	mov	r1, r9
 8004378:	414b      	adcs	r3, r1
 800437a:	637b      	str	r3, [r7, #52]	@ 0x34
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004388:	4659      	mov	r1, fp
 800438a:	00cb      	lsls	r3, r1, #3
 800438c:	4651      	mov	r1, sl
 800438e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004392:	4651      	mov	r1, sl
 8004394:	00ca      	lsls	r2, r1, #3
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	4603      	mov	r3, r0
 800439c:	4642      	mov	r2, r8
 800439e:	189b      	adds	r3, r3, r2
 80043a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043a4:	464b      	mov	r3, r9
 80043a6:	460a      	mov	r2, r1
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043c4:	460b      	mov	r3, r1
 80043c6:	18db      	adds	r3, r3, r3
 80043c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043ca:	4613      	mov	r3, r2
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043da:	f7fb ffc9 	bl	8000370 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004418 <UART_SetConfig+0x2d4>)
 80043e4:	fba3 1302 	umull	r1, r3, r3, r2
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	2164      	movs	r1, #100	@ 0x64
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	3332      	adds	r3, #50	@ 0x32
 80043f6:	4a08      	ldr	r2, [pc, #32]	@ (8004418 <UART_SetConfig+0x2d4>)
 80043f8:	fba2 2303 	umull	r2, r3, r2, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 0207 	and.w	r2, r3, #7
 8004402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4422      	add	r2, r4
 800440a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800440c:	e106      	b.n	800461c <UART_SetConfig+0x4d8>
 800440e:	bf00      	nop
 8004410:	40011000 	.word	0x40011000
 8004414:	40011400 	.word	0x40011400
 8004418:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800441c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004420:	2200      	movs	r2, #0
 8004422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004426:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800442a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800442e:	4642      	mov	r2, r8
 8004430:	464b      	mov	r3, r9
 8004432:	1891      	adds	r1, r2, r2
 8004434:	6239      	str	r1, [r7, #32]
 8004436:	415b      	adcs	r3, r3
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
 800443a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800443e:	4641      	mov	r1, r8
 8004440:	1854      	adds	r4, r2, r1
 8004442:	4649      	mov	r1, r9
 8004444:	eb43 0501 	adc.w	r5, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	00eb      	lsls	r3, r5, #3
 8004452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004456:	00e2      	lsls	r2, r4, #3
 8004458:	4614      	mov	r4, r2
 800445a:	461d      	mov	r5, r3
 800445c:	4643      	mov	r3, r8
 800445e:	18e3      	adds	r3, r4, r3
 8004460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004464:	464b      	mov	r3, r9
 8004466:	eb45 0303 	adc.w	r3, r5, r3
 800446a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800447a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800448a:	4629      	mov	r1, r5
 800448c:	008b      	lsls	r3, r1, #2
 800448e:	4621      	mov	r1, r4
 8004490:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004494:	4621      	mov	r1, r4
 8004496:	008a      	lsls	r2, r1, #2
 8004498:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800449c:	f7fb ff68 	bl	8000370 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4b60      	ldr	r3, [pc, #384]	@ (8004628 <UART_SetConfig+0x4e4>)
 80044a6:	fba3 2302 	umull	r2, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	011c      	lsls	r4, r3, #4
 80044ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	61b9      	str	r1, [r7, #24]
 80044c8:	415b      	adcs	r3, r3
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044d0:	4641      	mov	r1, r8
 80044d2:	1851      	adds	r1, r2, r1
 80044d4:	6139      	str	r1, [r7, #16]
 80044d6:	4649      	mov	r1, r9
 80044d8:	414b      	adcs	r3, r1
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044e8:	4659      	mov	r1, fp
 80044ea:	00cb      	lsls	r3, r1, #3
 80044ec:	4651      	mov	r1, sl
 80044ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044f2:	4651      	mov	r1, sl
 80044f4:	00ca      	lsls	r2, r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	4603      	mov	r3, r0
 80044fc:	4642      	mov	r2, r8
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004504:	464b      	mov	r3, r9
 8004506:	460a      	mov	r2, r1
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	67bb      	str	r3, [r7, #120]	@ 0x78
 800451a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004528:	4649      	mov	r1, r9
 800452a:	008b      	lsls	r3, r1, #2
 800452c:	4641      	mov	r1, r8
 800452e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004532:	4641      	mov	r1, r8
 8004534:	008a      	lsls	r2, r1, #2
 8004536:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800453a:	f7fb ff19 	bl	8000370 <__aeabi_uldivmod>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	4611      	mov	r1, r2
 8004544:	4b38      	ldr	r3, [pc, #224]	@ (8004628 <UART_SetConfig+0x4e4>)
 8004546:	fba3 2301 	umull	r2, r3, r3, r1
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2264      	movs	r2, #100	@ 0x64
 800454e:	fb02 f303 	mul.w	r3, r2, r3
 8004552:	1acb      	subs	r3, r1, r3
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	3332      	adds	r3, #50	@ 0x32
 8004558:	4a33      	ldr	r2, [pc, #204]	@ (8004628 <UART_SetConfig+0x4e4>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004564:	441c      	add	r4, r3
 8004566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800456a:	2200      	movs	r2, #0
 800456c:	673b      	str	r3, [r7, #112]	@ 0x70
 800456e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004570:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004574:	4642      	mov	r2, r8
 8004576:	464b      	mov	r3, r9
 8004578:	1891      	adds	r1, r2, r2
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	415b      	adcs	r3, r3
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004584:	4641      	mov	r1, r8
 8004586:	1851      	adds	r1, r2, r1
 8004588:	6039      	str	r1, [r7, #0]
 800458a:	4649      	mov	r1, r9
 800458c:	414b      	adcs	r3, r1
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800459c:	4659      	mov	r1, fp
 800459e:	00cb      	lsls	r3, r1, #3
 80045a0:	4651      	mov	r1, sl
 80045a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a6:	4651      	mov	r1, sl
 80045a8:	00ca      	lsls	r2, r1, #3
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	4642      	mov	r2, r8
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045b6:	464b      	mov	r3, r9
 80045b8:	460a      	mov	r2, r1
 80045ba:	eb42 0303 	adc.w	r3, r2, r3
 80045be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80045ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045d8:	4649      	mov	r1, r9
 80045da:	008b      	lsls	r3, r1, #2
 80045dc:	4641      	mov	r1, r8
 80045de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045e2:	4641      	mov	r1, r8
 80045e4:	008a      	lsls	r2, r1, #2
 80045e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045ea:	f7fb fec1 	bl	8000370 <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004628 <UART_SetConfig+0x4e4>)
 80045f4:	fba3 1302 	umull	r1, r3, r3, r2
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	2164      	movs	r1, #100	@ 0x64
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	3332      	adds	r3, #50	@ 0x32
 8004606:	4a08      	ldr	r2, [pc, #32]	@ (8004628 <UART_SetConfig+0x4e4>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	f003 020f 	and.w	r2, r3, #15
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4422      	add	r2, r4
 800461a:	609a      	str	r2, [r3, #8]
}
 800461c:	bf00      	nop
 800461e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004622:	46bd      	mov	sp, r7
 8004624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004628:	51eb851f 	.word	0x51eb851f

0800462c <std>:
 800462c:	2300      	movs	r3, #0
 800462e:	b510      	push	{r4, lr}
 8004630:	4604      	mov	r4, r0
 8004632:	e9c0 3300 	strd	r3, r3, [r0]
 8004636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800463a:	6083      	str	r3, [r0, #8]
 800463c:	8181      	strh	r1, [r0, #12]
 800463e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004640:	81c2      	strh	r2, [r0, #14]
 8004642:	6183      	str	r3, [r0, #24]
 8004644:	4619      	mov	r1, r3
 8004646:	2208      	movs	r2, #8
 8004648:	305c      	adds	r0, #92	@ 0x5c
 800464a:	f000 f906 	bl	800485a <memset>
 800464e:	4b0d      	ldr	r3, [pc, #52]	@ (8004684 <std+0x58>)
 8004650:	6263      	str	r3, [r4, #36]	@ 0x24
 8004652:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <std+0x5c>)
 8004654:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004656:	4b0d      	ldr	r3, [pc, #52]	@ (800468c <std+0x60>)
 8004658:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800465a:	4b0d      	ldr	r3, [pc, #52]	@ (8004690 <std+0x64>)
 800465c:	6323      	str	r3, [r4, #48]	@ 0x30
 800465e:	4b0d      	ldr	r3, [pc, #52]	@ (8004694 <std+0x68>)
 8004660:	6224      	str	r4, [r4, #32]
 8004662:	429c      	cmp	r4, r3
 8004664:	d006      	beq.n	8004674 <std+0x48>
 8004666:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800466a:	4294      	cmp	r4, r2
 800466c:	d002      	beq.n	8004674 <std+0x48>
 800466e:	33d0      	adds	r3, #208	@ 0xd0
 8004670:	429c      	cmp	r4, r3
 8004672:	d105      	bne.n	8004680 <std+0x54>
 8004674:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800467c:	f000 b966 	b.w	800494c <__retarget_lock_init_recursive>
 8004680:	bd10      	pop	{r4, pc}
 8004682:	bf00      	nop
 8004684:	080047d5 	.word	0x080047d5
 8004688:	080047f7 	.word	0x080047f7
 800468c:	0800482f 	.word	0x0800482f
 8004690:	08004853 	.word	0x08004853
 8004694:	200001bc 	.word	0x200001bc

08004698 <stdio_exit_handler>:
 8004698:	4a02      	ldr	r2, [pc, #8]	@ (80046a4 <stdio_exit_handler+0xc>)
 800469a:	4903      	ldr	r1, [pc, #12]	@ (80046a8 <stdio_exit_handler+0x10>)
 800469c:	4803      	ldr	r0, [pc, #12]	@ (80046ac <stdio_exit_handler+0x14>)
 800469e:	f000 b869 	b.w	8004774 <_fwalk_sglue>
 80046a2:	bf00      	nop
 80046a4:	20000010 	.word	0x20000010
 80046a8:	080051ed 	.word	0x080051ed
 80046ac:	20000020 	.word	0x20000020

080046b0 <cleanup_stdio>:
 80046b0:	6841      	ldr	r1, [r0, #4]
 80046b2:	4b0c      	ldr	r3, [pc, #48]	@ (80046e4 <cleanup_stdio+0x34>)
 80046b4:	4299      	cmp	r1, r3
 80046b6:	b510      	push	{r4, lr}
 80046b8:	4604      	mov	r4, r0
 80046ba:	d001      	beq.n	80046c0 <cleanup_stdio+0x10>
 80046bc:	f000 fd96 	bl	80051ec <_fflush_r>
 80046c0:	68a1      	ldr	r1, [r4, #8]
 80046c2:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <cleanup_stdio+0x38>)
 80046c4:	4299      	cmp	r1, r3
 80046c6:	d002      	beq.n	80046ce <cleanup_stdio+0x1e>
 80046c8:	4620      	mov	r0, r4
 80046ca:	f000 fd8f 	bl	80051ec <_fflush_r>
 80046ce:	68e1      	ldr	r1, [r4, #12]
 80046d0:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <cleanup_stdio+0x3c>)
 80046d2:	4299      	cmp	r1, r3
 80046d4:	d004      	beq.n	80046e0 <cleanup_stdio+0x30>
 80046d6:	4620      	mov	r0, r4
 80046d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046dc:	f000 bd86 	b.w	80051ec <_fflush_r>
 80046e0:	bd10      	pop	{r4, pc}
 80046e2:	bf00      	nop
 80046e4:	200001bc 	.word	0x200001bc
 80046e8:	20000224 	.word	0x20000224
 80046ec:	2000028c 	.word	0x2000028c

080046f0 <global_stdio_init.part.0>:
 80046f0:	b510      	push	{r4, lr}
 80046f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <global_stdio_init.part.0+0x30>)
 80046f4:	4c0b      	ldr	r4, [pc, #44]	@ (8004724 <global_stdio_init.part.0+0x34>)
 80046f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004728 <global_stdio_init.part.0+0x38>)
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	4620      	mov	r0, r4
 80046fc:	2200      	movs	r2, #0
 80046fe:	2104      	movs	r1, #4
 8004700:	f7ff ff94 	bl	800462c <std>
 8004704:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004708:	2201      	movs	r2, #1
 800470a:	2109      	movs	r1, #9
 800470c:	f7ff ff8e 	bl	800462c <std>
 8004710:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004714:	2202      	movs	r2, #2
 8004716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800471a:	2112      	movs	r1, #18
 800471c:	f7ff bf86 	b.w	800462c <std>
 8004720:	200002f4 	.word	0x200002f4
 8004724:	200001bc 	.word	0x200001bc
 8004728:	08004699 	.word	0x08004699

0800472c <__sfp_lock_acquire>:
 800472c:	4801      	ldr	r0, [pc, #4]	@ (8004734 <__sfp_lock_acquire+0x8>)
 800472e:	f000 b90e 	b.w	800494e <__retarget_lock_acquire_recursive>
 8004732:	bf00      	nop
 8004734:	200002fd 	.word	0x200002fd

08004738 <__sfp_lock_release>:
 8004738:	4801      	ldr	r0, [pc, #4]	@ (8004740 <__sfp_lock_release+0x8>)
 800473a:	f000 b909 	b.w	8004950 <__retarget_lock_release_recursive>
 800473e:	bf00      	nop
 8004740:	200002fd 	.word	0x200002fd

08004744 <__sinit>:
 8004744:	b510      	push	{r4, lr}
 8004746:	4604      	mov	r4, r0
 8004748:	f7ff fff0 	bl	800472c <__sfp_lock_acquire>
 800474c:	6a23      	ldr	r3, [r4, #32]
 800474e:	b11b      	cbz	r3, 8004758 <__sinit+0x14>
 8004750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004754:	f7ff bff0 	b.w	8004738 <__sfp_lock_release>
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <__sinit+0x28>)
 800475a:	6223      	str	r3, [r4, #32]
 800475c:	4b04      	ldr	r3, [pc, #16]	@ (8004770 <__sinit+0x2c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f5      	bne.n	8004750 <__sinit+0xc>
 8004764:	f7ff ffc4 	bl	80046f0 <global_stdio_init.part.0>
 8004768:	e7f2      	b.n	8004750 <__sinit+0xc>
 800476a:	bf00      	nop
 800476c:	080046b1 	.word	0x080046b1
 8004770:	200002f4 	.word	0x200002f4

08004774 <_fwalk_sglue>:
 8004774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004778:	4607      	mov	r7, r0
 800477a:	4688      	mov	r8, r1
 800477c:	4614      	mov	r4, r2
 800477e:	2600      	movs	r6, #0
 8004780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004784:	f1b9 0901 	subs.w	r9, r9, #1
 8004788:	d505      	bpl.n	8004796 <_fwalk_sglue+0x22>
 800478a:	6824      	ldr	r4, [r4, #0]
 800478c:	2c00      	cmp	r4, #0
 800478e:	d1f7      	bne.n	8004780 <_fwalk_sglue+0xc>
 8004790:	4630      	mov	r0, r6
 8004792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004796:	89ab      	ldrh	r3, [r5, #12]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d907      	bls.n	80047ac <_fwalk_sglue+0x38>
 800479c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047a0:	3301      	adds	r3, #1
 80047a2:	d003      	beq.n	80047ac <_fwalk_sglue+0x38>
 80047a4:	4629      	mov	r1, r5
 80047a6:	4638      	mov	r0, r7
 80047a8:	47c0      	blx	r8
 80047aa:	4306      	orrs	r6, r0
 80047ac:	3568      	adds	r5, #104	@ 0x68
 80047ae:	e7e9      	b.n	8004784 <_fwalk_sglue+0x10>

080047b0 <iprintf>:
 80047b0:	b40f      	push	{r0, r1, r2, r3}
 80047b2:	b507      	push	{r0, r1, r2, lr}
 80047b4:	4906      	ldr	r1, [pc, #24]	@ (80047d0 <iprintf+0x20>)
 80047b6:	ab04      	add	r3, sp, #16
 80047b8:	6808      	ldr	r0, [r1, #0]
 80047ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80047be:	6881      	ldr	r1, [r0, #8]
 80047c0:	9301      	str	r3, [sp, #4]
 80047c2:	f000 f9e9 	bl	8004b98 <_vfiprintf_r>
 80047c6:	b003      	add	sp, #12
 80047c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047cc:	b004      	add	sp, #16
 80047ce:	4770      	bx	lr
 80047d0:	2000001c 	.word	0x2000001c

080047d4 <__sread>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	460c      	mov	r4, r1
 80047d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047dc:	f000 f868 	bl	80048b0 <_read_r>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	bfab      	itete	ge
 80047e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047e6:	89a3      	ldrhlt	r3, [r4, #12]
 80047e8:	181b      	addge	r3, r3, r0
 80047ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047ee:	bfac      	ite	ge
 80047f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047f2:	81a3      	strhlt	r3, [r4, #12]
 80047f4:	bd10      	pop	{r4, pc}

080047f6 <__swrite>:
 80047f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fa:	461f      	mov	r7, r3
 80047fc:	898b      	ldrh	r3, [r1, #12]
 80047fe:	05db      	lsls	r3, r3, #23
 8004800:	4605      	mov	r5, r0
 8004802:	460c      	mov	r4, r1
 8004804:	4616      	mov	r6, r2
 8004806:	d505      	bpl.n	8004814 <__swrite+0x1e>
 8004808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800480c:	2302      	movs	r3, #2
 800480e:	2200      	movs	r2, #0
 8004810:	f000 f83c 	bl	800488c <_lseek_r>
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800481a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800481e:	81a3      	strh	r3, [r4, #12]
 8004820:	4632      	mov	r2, r6
 8004822:	463b      	mov	r3, r7
 8004824:	4628      	mov	r0, r5
 8004826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800482a:	f000 b853 	b.w	80048d4 <_write_r>

0800482e <__sseek>:
 800482e:	b510      	push	{r4, lr}
 8004830:	460c      	mov	r4, r1
 8004832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004836:	f000 f829 	bl	800488c <_lseek_r>
 800483a:	1c43      	adds	r3, r0, #1
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	bf15      	itete	ne
 8004840:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004842:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004846:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800484a:	81a3      	strheq	r3, [r4, #12]
 800484c:	bf18      	it	ne
 800484e:	81a3      	strhne	r3, [r4, #12]
 8004850:	bd10      	pop	{r4, pc}

08004852 <__sclose>:
 8004852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004856:	f000 b809 	b.w	800486c <_close_r>

0800485a <memset>:
 800485a:	4402      	add	r2, r0
 800485c:	4603      	mov	r3, r0
 800485e:	4293      	cmp	r3, r2
 8004860:	d100      	bne.n	8004864 <memset+0xa>
 8004862:	4770      	bx	lr
 8004864:	f803 1b01 	strb.w	r1, [r3], #1
 8004868:	e7f9      	b.n	800485e <memset+0x4>
	...

0800486c <_close_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4d06      	ldr	r5, [pc, #24]	@ (8004888 <_close_r+0x1c>)
 8004870:	2300      	movs	r3, #0
 8004872:	4604      	mov	r4, r0
 8004874:	4608      	mov	r0, r1
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	f7fc fe46 	bl	8001508 <_close>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_close_r+0x1a>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_close_r+0x1a>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	200002f8 	.word	0x200002f8

0800488c <_lseek_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4d07      	ldr	r5, [pc, #28]	@ (80048ac <_lseek_r+0x20>)
 8004890:	4604      	mov	r4, r0
 8004892:	4608      	mov	r0, r1
 8004894:	4611      	mov	r1, r2
 8004896:	2200      	movs	r2, #0
 8004898:	602a      	str	r2, [r5, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	f7fc fe5b 	bl	8001556 <_lseek>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_lseek_r+0x1e>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_lseek_r+0x1e>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	200002f8 	.word	0x200002f8

080048b0 <_read_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4d07      	ldr	r5, [pc, #28]	@ (80048d0 <_read_r+0x20>)
 80048b4:	4604      	mov	r4, r0
 80048b6:	4608      	mov	r0, r1
 80048b8:	4611      	mov	r1, r2
 80048ba:	2200      	movs	r2, #0
 80048bc:	602a      	str	r2, [r5, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f7fc fde9 	bl	8001496 <_read>
 80048c4:	1c43      	adds	r3, r0, #1
 80048c6:	d102      	bne.n	80048ce <_read_r+0x1e>
 80048c8:	682b      	ldr	r3, [r5, #0]
 80048ca:	b103      	cbz	r3, 80048ce <_read_r+0x1e>
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	200002f8 	.word	0x200002f8

080048d4 <_write_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4d07      	ldr	r5, [pc, #28]	@ (80048f4 <_write_r+0x20>)
 80048d8:	4604      	mov	r4, r0
 80048da:	4608      	mov	r0, r1
 80048dc:	4611      	mov	r1, r2
 80048de:	2200      	movs	r2, #0
 80048e0:	602a      	str	r2, [r5, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	f7fc fdf4 	bl	80014d0 <_write>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	d102      	bne.n	80048f2 <_write_r+0x1e>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	b103      	cbz	r3, 80048f2 <_write_r+0x1e>
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	200002f8 	.word	0x200002f8

080048f8 <__errno>:
 80048f8:	4b01      	ldr	r3, [pc, #4]	@ (8004900 <__errno+0x8>)
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	2000001c 	.word	0x2000001c

08004904 <__libc_init_array>:
 8004904:	b570      	push	{r4, r5, r6, lr}
 8004906:	4d0d      	ldr	r5, [pc, #52]	@ (800493c <__libc_init_array+0x38>)
 8004908:	4c0d      	ldr	r4, [pc, #52]	@ (8004940 <__libc_init_array+0x3c>)
 800490a:	1b64      	subs	r4, r4, r5
 800490c:	10a4      	asrs	r4, r4, #2
 800490e:	2600      	movs	r6, #0
 8004910:	42a6      	cmp	r6, r4
 8004912:	d109      	bne.n	8004928 <__libc_init_array+0x24>
 8004914:	4d0b      	ldr	r5, [pc, #44]	@ (8004944 <__libc_init_array+0x40>)
 8004916:	4c0c      	ldr	r4, [pc, #48]	@ (8004948 <__libc_init_array+0x44>)
 8004918:	f000 fdb8 	bl	800548c <_init>
 800491c:	1b64      	subs	r4, r4, r5
 800491e:	10a4      	asrs	r4, r4, #2
 8004920:	2600      	movs	r6, #0
 8004922:	42a6      	cmp	r6, r4
 8004924:	d105      	bne.n	8004932 <__libc_init_array+0x2e>
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	f855 3b04 	ldr.w	r3, [r5], #4
 800492c:	4798      	blx	r3
 800492e:	3601      	adds	r6, #1
 8004930:	e7ee      	b.n	8004910 <__libc_init_array+0xc>
 8004932:	f855 3b04 	ldr.w	r3, [r5], #4
 8004936:	4798      	blx	r3
 8004938:	3601      	adds	r6, #1
 800493a:	e7f2      	b.n	8004922 <__libc_init_array+0x1e>
 800493c:	08005598 	.word	0x08005598
 8004940:	08005598 	.word	0x08005598
 8004944:	08005598 	.word	0x08005598
 8004948:	0800559c 	.word	0x0800559c

0800494c <__retarget_lock_init_recursive>:
 800494c:	4770      	bx	lr

0800494e <__retarget_lock_acquire_recursive>:
 800494e:	4770      	bx	lr

08004950 <__retarget_lock_release_recursive>:
 8004950:	4770      	bx	lr
	...

08004954 <_free_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4605      	mov	r5, r0
 8004958:	2900      	cmp	r1, #0
 800495a:	d041      	beq.n	80049e0 <_free_r+0x8c>
 800495c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004960:	1f0c      	subs	r4, r1, #4
 8004962:	2b00      	cmp	r3, #0
 8004964:	bfb8      	it	lt
 8004966:	18e4      	addlt	r4, r4, r3
 8004968:	f000 f8e0 	bl	8004b2c <__malloc_lock>
 800496c:	4a1d      	ldr	r2, [pc, #116]	@ (80049e4 <_free_r+0x90>)
 800496e:	6813      	ldr	r3, [r2, #0]
 8004970:	b933      	cbnz	r3, 8004980 <_free_r+0x2c>
 8004972:	6063      	str	r3, [r4, #4]
 8004974:	6014      	str	r4, [r2, #0]
 8004976:	4628      	mov	r0, r5
 8004978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800497c:	f000 b8dc 	b.w	8004b38 <__malloc_unlock>
 8004980:	42a3      	cmp	r3, r4
 8004982:	d908      	bls.n	8004996 <_free_r+0x42>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	1821      	adds	r1, r4, r0
 8004988:	428b      	cmp	r3, r1
 800498a:	bf01      	itttt	eq
 800498c:	6819      	ldreq	r1, [r3, #0]
 800498e:	685b      	ldreq	r3, [r3, #4]
 8004990:	1809      	addeq	r1, r1, r0
 8004992:	6021      	streq	r1, [r4, #0]
 8004994:	e7ed      	b.n	8004972 <_free_r+0x1e>
 8004996:	461a      	mov	r2, r3
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	b10b      	cbz	r3, 80049a0 <_free_r+0x4c>
 800499c:	42a3      	cmp	r3, r4
 800499e:	d9fa      	bls.n	8004996 <_free_r+0x42>
 80049a0:	6811      	ldr	r1, [r2, #0]
 80049a2:	1850      	adds	r0, r2, r1
 80049a4:	42a0      	cmp	r0, r4
 80049a6:	d10b      	bne.n	80049c0 <_free_r+0x6c>
 80049a8:	6820      	ldr	r0, [r4, #0]
 80049aa:	4401      	add	r1, r0
 80049ac:	1850      	adds	r0, r2, r1
 80049ae:	4283      	cmp	r3, r0
 80049b0:	6011      	str	r1, [r2, #0]
 80049b2:	d1e0      	bne.n	8004976 <_free_r+0x22>
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	6053      	str	r3, [r2, #4]
 80049ba:	4408      	add	r0, r1
 80049bc:	6010      	str	r0, [r2, #0]
 80049be:	e7da      	b.n	8004976 <_free_r+0x22>
 80049c0:	d902      	bls.n	80049c8 <_free_r+0x74>
 80049c2:	230c      	movs	r3, #12
 80049c4:	602b      	str	r3, [r5, #0]
 80049c6:	e7d6      	b.n	8004976 <_free_r+0x22>
 80049c8:	6820      	ldr	r0, [r4, #0]
 80049ca:	1821      	adds	r1, r4, r0
 80049cc:	428b      	cmp	r3, r1
 80049ce:	bf04      	itt	eq
 80049d0:	6819      	ldreq	r1, [r3, #0]
 80049d2:	685b      	ldreq	r3, [r3, #4]
 80049d4:	6063      	str	r3, [r4, #4]
 80049d6:	bf04      	itt	eq
 80049d8:	1809      	addeq	r1, r1, r0
 80049da:	6021      	streq	r1, [r4, #0]
 80049dc:	6054      	str	r4, [r2, #4]
 80049de:	e7ca      	b.n	8004976 <_free_r+0x22>
 80049e0:	bd38      	pop	{r3, r4, r5, pc}
 80049e2:	bf00      	nop
 80049e4:	20000304 	.word	0x20000304

080049e8 <sbrk_aligned>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	4e0f      	ldr	r6, [pc, #60]	@ (8004a28 <sbrk_aligned+0x40>)
 80049ec:	460c      	mov	r4, r1
 80049ee:	6831      	ldr	r1, [r6, #0]
 80049f0:	4605      	mov	r5, r0
 80049f2:	b911      	cbnz	r1, 80049fa <sbrk_aligned+0x12>
 80049f4:	f000 fcb6 	bl	8005364 <_sbrk_r>
 80049f8:	6030      	str	r0, [r6, #0]
 80049fa:	4621      	mov	r1, r4
 80049fc:	4628      	mov	r0, r5
 80049fe:	f000 fcb1 	bl	8005364 <_sbrk_r>
 8004a02:	1c43      	adds	r3, r0, #1
 8004a04:	d103      	bne.n	8004a0e <sbrk_aligned+0x26>
 8004a06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	bd70      	pop	{r4, r5, r6, pc}
 8004a0e:	1cc4      	adds	r4, r0, #3
 8004a10:	f024 0403 	bic.w	r4, r4, #3
 8004a14:	42a0      	cmp	r0, r4
 8004a16:	d0f8      	beq.n	8004a0a <sbrk_aligned+0x22>
 8004a18:	1a21      	subs	r1, r4, r0
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 fca2 	bl	8005364 <_sbrk_r>
 8004a20:	3001      	adds	r0, #1
 8004a22:	d1f2      	bne.n	8004a0a <sbrk_aligned+0x22>
 8004a24:	e7ef      	b.n	8004a06 <sbrk_aligned+0x1e>
 8004a26:	bf00      	nop
 8004a28:	20000300 	.word	0x20000300

08004a2c <_malloc_r>:
 8004a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a30:	1ccd      	adds	r5, r1, #3
 8004a32:	f025 0503 	bic.w	r5, r5, #3
 8004a36:	3508      	adds	r5, #8
 8004a38:	2d0c      	cmp	r5, #12
 8004a3a:	bf38      	it	cc
 8004a3c:	250c      	movcc	r5, #12
 8004a3e:	2d00      	cmp	r5, #0
 8004a40:	4606      	mov	r6, r0
 8004a42:	db01      	blt.n	8004a48 <_malloc_r+0x1c>
 8004a44:	42a9      	cmp	r1, r5
 8004a46:	d904      	bls.n	8004a52 <_malloc_r+0x26>
 8004a48:	230c      	movs	r3, #12
 8004a4a:	6033      	str	r3, [r6, #0]
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b28 <_malloc_r+0xfc>
 8004a56:	f000 f869 	bl	8004b2c <__malloc_lock>
 8004a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a5e:	461c      	mov	r4, r3
 8004a60:	bb44      	cbnz	r4, 8004ab4 <_malloc_r+0x88>
 8004a62:	4629      	mov	r1, r5
 8004a64:	4630      	mov	r0, r6
 8004a66:	f7ff ffbf 	bl	80049e8 <sbrk_aligned>
 8004a6a:	1c43      	adds	r3, r0, #1
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	d158      	bne.n	8004b22 <_malloc_r+0xf6>
 8004a70:	f8d8 4000 	ldr.w	r4, [r8]
 8004a74:	4627      	mov	r7, r4
 8004a76:	2f00      	cmp	r7, #0
 8004a78:	d143      	bne.n	8004b02 <_malloc_r+0xd6>
 8004a7a:	2c00      	cmp	r4, #0
 8004a7c:	d04b      	beq.n	8004b16 <_malloc_r+0xea>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	4639      	mov	r1, r7
 8004a82:	4630      	mov	r0, r6
 8004a84:	eb04 0903 	add.w	r9, r4, r3
 8004a88:	f000 fc6c 	bl	8005364 <_sbrk_r>
 8004a8c:	4581      	cmp	r9, r0
 8004a8e:	d142      	bne.n	8004b16 <_malloc_r+0xea>
 8004a90:	6821      	ldr	r1, [r4, #0]
 8004a92:	1a6d      	subs	r5, r5, r1
 8004a94:	4629      	mov	r1, r5
 8004a96:	4630      	mov	r0, r6
 8004a98:	f7ff ffa6 	bl	80049e8 <sbrk_aligned>
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	d03a      	beq.n	8004b16 <_malloc_r+0xea>
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	442b      	add	r3, r5
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	bb62      	cbnz	r2, 8004b08 <_malloc_r+0xdc>
 8004aae:	f8c8 7000 	str.w	r7, [r8]
 8004ab2:	e00f      	b.n	8004ad4 <_malloc_r+0xa8>
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	1b52      	subs	r2, r2, r5
 8004ab8:	d420      	bmi.n	8004afc <_malloc_r+0xd0>
 8004aba:	2a0b      	cmp	r2, #11
 8004abc:	d917      	bls.n	8004aee <_malloc_r+0xc2>
 8004abe:	1961      	adds	r1, r4, r5
 8004ac0:	42a3      	cmp	r3, r4
 8004ac2:	6025      	str	r5, [r4, #0]
 8004ac4:	bf18      	it	ne
 8004ac6:	6059      	strne	r1, [r3, #4]
 8004ac8:	6863      	ldr	r3, [r4, #4]
 8004aca:	bf08      	it	eq
 8004acc:	f8c8 1000 	streq.w	r1, [r8]
 8004ad0:	5162      	str	r2, [r4, r5]
 8004ad2:	604b      	str	r3, [r1, #4]
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f000 f82f 	bl	8004b38 <__malloc_unlock>
 8004ada:	f104 000b 	add.w	r0, r4, #11
 8004ade:	1d23      	adds	r3, r4, #4
 8004ae0:	f020 0007 	bic.w	r0, r0, #7
 8004ae4:	1ac2      	subs	r2, r0, r3
 8004ae6:	bf1c      	itt	ne
 8004ae8:	1a1b      	subne	r3, r3, r0
 8004aea:	50a3      	strne	r3, [r4, r2]
 8004aec:	e7af      	b.n	8004a4e <_malloc_r+0x22>
 8004aee:	6862      	ldr	r2, [r4, #4]
 8004af0:	42a3      	cmp	r3, r4
 8004af2:	bf0c      	ite	eq
 8004af4:	f8c8 2000 	streq.w	r2, [r8]
 8004af8:	605a      	strne	r2, [r3, #4]
 8004afa:	e7eb      	b.n	8004ad4 <_malloc_r+0xa8>
 8004afc:	4623      	mov	r3, r4
 8004afe:	6864      	ldr	r4, [r4, #4]
 8004b00:	e7ae      	b.n	8004a60 <_malloc_r+0x34>
 8004b02:	463c      	mov	r4, r7
 8004b04:	687f      	ldr	r7, [r7, #4]
 8004b06:	e7b6      	b.n	8004a76 <_malloc_r+0x4a>
 8004b08:	461a      	mov	r2, r3
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	42a3      	cmp	r3, r4
 8004b0e:	d1fb      	bne.n	8004b08 <_malloc_r+0xdc>
 8004b10:	2300      	movs	r3, #0
 8004b12:	6053      	str	r3, [r2, #4]
 8004b14:	e7de      	b.n	8004ad4 <_malloc_r+0xa8>
 8004b16:	230c      	movs	r3, #12
 8004b18:	6033      	str	r3, [r6, #0]
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f000 f80c 	bl	8004b38 <__malloc_unlock>
 8004b20:	e794      	b.n	8004a4c <_malloc_r+0x20>
 8004b22:	6005      	str	r5, [r0, #0]
 8004b24:	e7d6      	b.n	8004ad4 <_malloc_r+0xa8>
 8004b26:	bf00      	nop
 8004b28:	20000304 	.word	0x20000304

08004b2c <__malloc_lock>:
 8004b2c:	4801      	ldr	r0, [pc, #4]	@ (8004b34 <__malloc_lock+0x8>)
 8004b2e:	f7ff bf0e 	b.w	800494e <__retarget_lock_acquire_recursive>
 8004b32:	bf00      	nop
 8004b34:	200002fc 	.word	0x200002fc

08004b38 <__malloc_unlock>:
 8004b38:	4801      	ldr	r0, [pc, #4]	@ (8004b40 <__malloc_unlock+0x8>)
 8004b3a:	f7ff bf09 	b.w	8004950 <__retarget_lock_release_recursive>
 8004b3e:	bf00      	nop
 8004b40:	200002fc 	.word	0x200002fc

08004b44 <__sfputc_r>:
 8004b44:	6893      	ldr	r3, [r2, #8]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	b410      	push	{r4}
 8004b4c:	6093      	str	r3, [r2, #8]
 8004b4e:	da08      	bge.n	8004b62 <__sfputc_r+0x1e>
 8004b50:	6994      	ldr	r4, [r2, #24]
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	db01      	blt.n	8004b5a <__sfputc_r+0x16>
 8004b56:	290a      	cmp	r1, #10
 8004b58:	d103      	bne.n	8004b62 <__sfputc_r+0x1e>
 8004b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b5e:	f000 bb6d 	b.w	800523c <__swbuf_r>
 8004b62:	6813      	ldr	r3, [r2, #0]
 8004b64:	1c58      	adds	r0, r3, #1
 8004b66:	6010      	str	r0, [r2, #0]
 8004b68:	7019      	strb	r1, [r3, #0]
 8004b6a:	4608      	mov	r0, r1
 8004b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <__sfputs_r>:
 8004b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b74:	4606      	mov	r6, r0
 8004b76:	460f      	mov	r7, r1
 8004b78:	4614      	mov	r4, r2
 8004b7a:	18d5      	adds	r5, r2, r3
 8004b7c:	42ac      	cmp	r4, r5
 8004b7e:	d101      	bne.n	8004b84 <__sfputs_r+0x12>
 8004b80:	2000      	movs	r0, #0
 8004b82:	e007      	b.n	8004b94 <__sfputs_r+0x22>
 8004b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b88:	463a      	mov	r2, r7
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f7ff ffda 	bl	8004b44 <__sfputc_r>
 8004b90:	1c43      	adds	r3, r0, #1
 8004b92:	d1f3      	bne.n	8004b7c <__sfputs_r+0xa>
 8004b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b98 <_vfiprintf_r>:
 8004b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9c:	460d      	mov	r5, r1
 8004b9e:	b09d      	sub	sp, #116	@ 0x74
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	4698      	mov	r8, r3
 8004ba4:	4606      	mov	r6, r0
 8004ba6:	b118      	cbz	r0, 8004bb0 <_vfiprintf_r+0x18>
 8004ba8:	6a03      	ldr	r3, [r0, #32]
 8004baa:	b90b      	cbnz	r3, 8004bb0 <_vfiprintf_r+0x18>
 8004bac:	f7ff fdca 	bl	8004744 <__sinit>
 8004bb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bb2:	07d9      	lsls	r1, r3, #31
 8004bb4:	d405      	bmi.n	8004bc2 <_vfiprintf_r+0x2a>
 8004bb6:	89ab      	ldrh	r3, [r5, #12]
 8004bb8:	059a      	lsls	r2, r3, #22
 8004bba:	d402      	bmi.n	8004bc2 <_vfiprintf_r+0x2a>
 8004bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bbe:	f7ff fec6 	bl	800494e <__retarget_lock_acquire_recursive>
 8004bc2:	89ab      	ldrh	r3, [r5, #12]
 8004bc4:	071b      	lsls	r3, r3, #28
 8004bc6:	d501      	bpl.n	8004bcc <_vfiprintf_r+0x34>
 8004bc8:	692b      	ldr	r3, [r5, #16]
 8004bca:	b99b      	cbnz	r3, 8004bf4 <_vfiprintf_r+0x5c>
 8004bcc:	4629      	mov	r1, r5
 8004bce:	4630      	mov	r0, r6
 8004bd0:	f000 fb72 	bl	80052b8 <__swsetup_r>
 8004bd4:	b170      	cbz	r0, 8004bf4 <_vfiprintf_r+0x5c>
 8004bd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bd8:	07dc      	lsls	r4, r3, #31
 8004bda:	d504      	bpl.n	8004be6 <_vfiprintf_r+0x4e>
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004be0:	b01d      	add	sp, #116	@ 0x74
 8004be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be6:	89ab      	ldrh	r3, [r5, #12]
 8004be8:	0598      	lsls	r0, r3, #22
 8004bea:	d4f7      	bmi.n	8004bdc <_vfiprintf_r+0x44>
 8004bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bee:	f7ff feaf 	bl	8004950 <__retarget_lock_release_recursive>
 8004bf2:	e7f3      	b.n	8004bdc <_vfiprintf_r+0x44>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bf8:	2320      	movs	r3, #32
 8004bfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c02:	2330      	movs	r3, #48	@ 0x30
 8004c04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004db4 <_vfiprintf_r+0x21c>
 8004c08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c0c:	f04f 0901 	mov.w	r9, #1
 8004c10:	4623      	mov	r3, r4
 8004c12:	469a      	mov	sl, r3
 8004c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c18:	b10a      	cbz	r2, 8004c1e <_vfiprintf_r+0x86>
 8004c1a:	2a25      	cmp	r2, #37	@ 0x25
 8004c1c:	d1f9      	bne.n	8004c12 <_vfiprintf_r+0x7a>
 8004c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8004c22:	d00b      	beq.n	8004c3c <_vfiprintf_r+0xa4>
 8004c24:	465b      	mov	r3, fp
 8004c26:	4622      	mov	r2, r4
 8004c28:	4629      	mov	r1, r5
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f7ff ffa1 	bl	8004b72 <__sfputs_r>
 8004c30:	3001      	adds	r0, #1
 8004c32:	f000 80a7 	beq.w	8004d84 <_vfiprintf_r+0x1ec>
 8004c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c38:	445a      	add	r2, fp
 8004c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 809f 	beq.w	8004d84 <_vfiprintf_r+0x1ec>
 8004c46:	2300      	movs	r3, #0
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c50:	f10a 0a01 	add.w	sl, sl, #1
 8004c54:	9304      	str	r3, [sp, #16]
 8004c56:	9307      	str	r3, [sp, #28]
 8004c58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c5e:	4654      	mov	r4, sl
 8004c60:	2205      	movs	r2, #5
 8004c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c66:	4853      	ldr	r0, [pc, #332]	@ (8004db4 <_vfiprintf_r+0x21c>)
 8004c68:	f7fb fae2 	bl	8000230 <memchr>
 8004c6c:	9a04      	ldr	r2, [sp, #16]
 8004c6e:	b9d8      	cbnz	r0, 8004ca8 <_vfiprintf_r+0x110>
 8004c70:	06d1      	lsls	r1, r2, #27
 8004c72:	bf44      	itt	mi
 8004c74:	2320      	movmi	r3, #32
 8004c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c7a:	0713      	lsls	r3, r2, #28
 8004c7c:	bf44      	itt	mi
 8004c7e:	232b      	movmi	r3, #43	@ 0x2b
 8004c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c84:	f89a 3000 	ldrb.w	r3, [sl]
 8004c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c8a:	d015      	beq.n	8004cb8 <_vfiprintf_r+0x120>
 8004c8c:	9a07      	ldr	r2, [sp, #28]
 8004c8e:	4654      	mov	r4, sl
 8004c90:	2000      	movs	r0, #0
 8004c92:	f04f 0c0a 	mov.w	ip, #10
 8004c96:	4621      	mov	r1, r4
 8004c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c9c:	3b30      	subs	r3, #48	@ 0x30
 8004c9e:	2b09      	cmp	r3, #9
 8004ca0:	d94b      	bls.n	8004d3a <_vfiprintf_r+0x1a2>
 8004ca2:	b1b0      	cbz	r0, 8004cd2 <_vfiprintf_r+0x13a>
 8004ca4:	9207      	str	r2, [sp, #28]
 8004ca6:	e014      	b.n	8004cd2 <_vfiprintf_r+0x13a>
 8004ca8:	eba0 0308 	sub.w	r3, r0, r8
 8004cac:	fa09 f303 	lsl.w	r3, r9, r3
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	9304      	str	r3, [sp, #16]
 8004cb4:	46a2      	mov	sl, r4
 8004cb6:	e7d2      	b.n	8004c5e <_vfiprintf_r+0xc6>
 8004cb8:	9b03      	ldr	r3, [sp, #12]
 8004cba:	1d19      	adds	r1, r3, #4
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	9103      	str	r1, [sp, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bfbb      	ittet	lt
 8004cc4:	425b      	neglt	r3, r3
 8004cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8004cca:	9307      	strge	r3, [sp, #28]
 8004ccc:	9307      	strlt	r3, [sp, #28]
 8004cce:	bfb8      	it	lt
 8004cd0:	9204      	strlt	r2, [sp, #16]
 8004cd2:	7823      	ldrb	r3, [r4, #0]
 8004cd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cd6:	d10a      	bne.n	8004cee <_vfiprintf_r+0x156>
 8004cd8:	7863      	ldrb	r3, [r4, #1]
 8004cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cdc:	d132      	bne.n	8004d44 <_vfiprintf_r+0x1ac>
 8004cde:	9b03      	ldr	r3, [sp, #12]
 8004ce0:	1d1a      	adds	r2, r3, #4
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	9203      	str	r2, [sp, #12]
 8004ce6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cea:	3402      	adds	r4, #2
 8004cec:	9305      	str	r3, [sp, #20]
 8004cee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004dc4 <_vfiprintf_r+0x22c>
 8004cf2:	7821      	ldrb	r1, [r4, #0]
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	4650      	mov	r0, sl
 8004cf8:	f7fb fa9a 	bl	8000230 <memchr>
 8004cfc:	b138      	cbz	r0, 8004d0e <_vfiprintf_r+0x176>
 8004cfe:	9b04      	ldr	r3, [sp, #16]
 8004d00:	eba0 000a 	sub.w	r0, r0, sl
 8004d04:	2240      	movs	r2, #64	@ 0x40
 8004d06:	4082      	lsls	r2, r0
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	3401      	adds	r4, #1
 8004d0c:	9304      	str	r3, [sp, #16]
 8004d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d12:	4829      	ldr	r0, [pc, #164]	@ (8004db8 <_vfiprintf_r+0x220>)
 8004d14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d18:	2206      	movs	r2, #6
 8004d1a:	f7fb fa89 	bl	8000230 <memchr>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d03f      	beq.n	8004da2 <_vfiprintf_r+0x20a>
 8004d22:	4b26      	ldr	r3, [pc, #152]	@ (8004dbc <_vfiprintf_r+0x224>)
 8004d24:	bb1b      	cbnz	r3, 8004d6e <_vfiprintf_r+0x1d6>
 8004d26:	9b03      	ldr	r3, [sp, #12]
 8004d28:	3307      	adds	r3, #7
 8004d2a:	f023 0307 	bic.w	r3, r3, #7
 8004d2e:	3308      	adds	r3, #8
 8004d30:	9303      	str	r3, [sp, #12]
 8004d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d34:	443b      	add	r3, r7
 8004d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d38:	e76a      	b.n	8004c10 <_vfiprintf_r+0x78>
 8004d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d3e:	460c      	mov	r4, r1
 8004d40:	2001      	movs	r0, #1
 8004d42:	e7a8      	b.n	8004c96 <_vfiprintf_r+0xfe>
 8004d44:	2300      	movs	r3, #0
 8004d46:	3401      	adds	r4, #1
 8004d48:	9305      	str	r3, [sp, #20]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	f04f 0c0a 	mov.w	ip, #10
 8004d50:	4620      	mov	r0, r4
 8004d52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d56:	3a30      	subs	r2, #48	@ 0x30
 8004d58:	2a09      	cmp	r2, #9
 8004d5a:	d903      	bls.n	8004d64 <_vfiprintf_r+0x1cc>
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0c6      	beq.n	8004cee <_vfiprintf_r+0x156>
 8004d60:	9105      	str	r1, [sp, #20]
 8004d62:	e7c4      	b.n	8004cee <_vfiprintf_r+0x156>
 8004d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d68:	4604      	mov	r4, r0
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e7f0      	b.n	8004d50 <_vfiprintf_r+0x1b8>
 8004d6e:	ab03      	add	r3, sp, #12
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	462a      	mov	r2, r5
 8004d74:	4b12      	ldr	r3, [pc, #72]	@ (8004dc0 <_vfiprintf_r+0x228>)
 8004d76:	a904      	add	r1, sp, #16
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f3af 8000 	nop.w
 8004d7e:	4607      	mov	r7, r0
 8004d80:	1c78      	adds	r0, r7, #1
 8004d82:	d1d6      	bne.n	8004d32 <_vfiprintf_r+0x19a>
 8004d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d86:	07d9      	lsls	r1, r3, #31
 8004d88:	d405      	bmi.n	8004d96 <_vfiprintf_r+0x1fe>
 8004d8a:	89ab      	ldrh	r3, [r5, #12]
 8004d8c:	059a      	lsls	r2, r3, #22
 8004d8e:	d402      	bmi.n	8004d96 <_vfiprintf_r+0x1fe>
 8004d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d92:	f7ff fddd 	bl	8004950 <__retarget_lock_release_recursive>
 8004d96:	89ab      	ldrh	r3, [r5, #12]
 8004d98:	065b      	lsls	r3, r3, #25
 8004d9a:	f53f af1f 	bmi.w	8004bdc <_vfiprintf_r+0x44>
 8004d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004da0:	e71e      	b.n	8004be0 <_vfiprintf_r+0x48>
 8004da2:	ab03      	add	r3, sp, #12
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	462a      	mov	r2, r5
 8004da8:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <_vfiprintf_r+0x228>)
 8004daa:	a904      	add	r1, sp, #16
 8004dac:	4630      	mov	r0, r6
 8004dae:	f000 f879 	bl	8004ea4 <_printf_i>
 8004db2:	e7e4      	b.n	8004d7e <_vfiprintf_r+0x1e6>
 8004db4:	0800555c 	.word	0x0800555c
 8004db8:	08005566 	.word	0x08005566
 8004dbc:	00000000 	.word	0x00000000
 8004dc0:	08004b73 	.word	0x08004b73
 8004dc4:	08005562 	.word	0x08005562

08004dc8 <_printf_common>:
 8004dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dcc:	4616      	mov	r6, r2
 8004dce:	4698      	mov	r8, r3
 8004dd0:	688a      	ldr	r2, [r1, #8]
 8004dd2:	690b      	ldr	r3, [r1, #16]
 8004dd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bfb8      	it	lt
 8004ddc:	4613      	movlt	r3, r2
 8004dde:	6033      	str	r3, [r6, #0]
 8004de0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004de4:	4607      	mov	r7, r0
 8004de6:	460c      	mov	r4, r1
 8004de8:	b10a      	cbz	r2, 8004dee <_printf_common+0x26>
 8004dea:	3301      	adds	r3, #1
 8004dec:	6033      	str	r3, [r6, #0]
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	0699      	lsls	r1, r3, #26
 8004df2:	bf42      	ittt	mi
 8004df4:	6833      	ldrmi	r3, [r6, #0]
 8004df6:	3302      	addmi	r3, #2
 8004df8:	6033      	strmi	r3, [r6, #0]
 8004dfa:	6825      	ldr	r5, [r4, #0]
 8004dfc:	f015 0506 	ands.w	r5, r5, #6
 8004e00:	d106      	bne.n	8004e10 <_printf_common+0x48>
 8004e02:	f104 0a19 	add.w	sl, r4, #25
 8004e06:	68e3      	ldr	r3, [r4, #12]
 8004e08:	6832      	ldr	r2, [r6, #0]
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	42ab      	cmp	r3, r5
 8004e0e:	dc26      	bgt.n	8004e5e <_printf_common+0x96>
 8004e10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e14:	6822      	ldr	r2, [r4, #0]
 8004e16:	3b00      	subs	r3, #0
 8004e18:	bf18      	it	ne
 8004e1a:	2301      	movne	r3, #1
 8004e1c:	0692      	lsls	r2, r2, #26
 8004e1e:	d42b      	bmi.n	8004e78 <_printf_common+0xb0>
 8004e20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e24:	4641      	mov	r1, r8
 8004e26:	4638      	mov	r0, r7
 8004e28:	47c8      	blx	r9
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d01e      	beq.n	8004e6c <_printf_common+0xa4>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	6922      	ldr	r2, [r4, #16]
 8004e32:	f003 0306 	and.w	r3, r3, #6
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	bf02      	ittt	eq
 8004e3a:	68e5      	ldreq	r5, [r4, #12]
 8004e3c:	6833      	ldreq	r3, [r6, #0]
 8004e3e:	1aed      	subeq	r5, r5, r3
 8004e40:	68a3      	ldr	r3, [r4, #8]
 8004e42:	bf0c      	ite	eq
 8004e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e48:	2500      	movne	r5, #0
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	bfc4      	itt	gt
 8004e4e:	1a9b      	subgt	r3, r3, r2
 8004e50:	18ed      	addgt	r5, r5, r3
 8004e52:	2600      	movs	r6, #0
 8004e54:	341a      	adds	r4, #26
 8004e56:	42b5      	cmp	r5, r6
 8004e58:	d11a      	bne.n	8004e90 <_printf_common+0xc8>
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	e008      	b.n	8004e70 <_printf_common+0xa8>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	4652      	mov	r2, sl
 8004e62:	4641      	mov	r1, r8
 8004e64:	4638      	mov	r0, r7
 8004e66:	47c8      	blx	r9
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d103      	bne.n	8004e74 <_printf_common+0xac>
 8004e6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e74:	3501      	adds	r5, #1
 8004e76:	e7c6      	b.n	8004e06 <_printf_common+0x3e>
 8004e78:	18e1      	adds	r1, r4, r3
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	2030      	movs	r0, #48	@ 0x30
 8004e7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e82:	4422      	add	r2, r4
 8004e84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e8c:	3302      	adds	r3, #2
 8004e8e:	e7c7      	b.n	8004e20 <_printf_common+0x58>
 8004e90:	2301      	movs	r3, #1
 8004e92:	4622      	mov	r2, r4
 8004e94:	4641      	mov	r1, r8
 8004e96:	4638      	mov	r0, r7
 8004e98:	47c8      	blx	r9
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d0e6      	beq.n	8004e6c <_printf_common+0xa4>
 8004e9e:	3601      	adds	r6, #1
 8004ea0:	e7d9      	b.n	8004e56 <_printf_common+0x8e>
	...

08004ea4 <_printf_i>:
 8004ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea8:	7e0f      	ldrb	r7, [r1, #24]
 8004eaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004eac:	2f78      	cmp	r7, #120	@ 0x78
 8004eae:	4691      	mov	r9, r2
 8004eb0:	4680      	mov	r8, r0
 8004eb2:	460c      	mov	r4, r1
 8004eb4:	469a      	mov	sl, r3
 8004eb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004eba:	d807      	bhi.n	8004ecc <_printf_i+0x28>
 8004ebc:	2f62      	cmp	r7, #98	@ 0x62
 8004ebe:	d80a      	bhi.n	8004ed6 <_printf_i+0x32>
 8004ec0:	2f00      	cmp	r7, #0
 8004ec2:	f000 80d2 	beq.w	800506a <_printf_i+0x1c6>
 8004ec6:	2f58      	cmp	r7, #88	@ 0x58
 8004ec8:	f000 80b9 	beq.w	800503e <_printf_i+0x19a>
 8004ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ed0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ed4:	e03a      	b.n	8004f4c <_printf_i+0xa8>
 8004ed6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004eda:	2b15      	cmp	r3, #21
 8004edc:	d8f6      	bhi.n	8004ecc <_printf_i+0x28>
 8004ede:	a101      	add	r1, pc, #4	@ (adr r1, 8004ee4 <_printf_i+0x40>)
 8004ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ee4:	08004f3d 	.word	0x08004f3d
 8004ee8:	08004f51 	.word	0x08004f51
 8004eec:	08004ecd 	.word	0x08004ecd
 8004ef0:	08004ecd 	.word	0x08004ecd
 8004ef4:	08004ecd 	.word	0x08004ecd
 8004ef8:	08004ecd 	.word	0x08004ecd
 8004efc:	08004f51 	.word	0x08004f51
 8004f00:	08004ecd 	.word	0x08004ecd
 8004f04:	08004ecd 	.word	0x08004ecd
 8004f08:	08004ecd 	.word	0x08004ecd
 8004f0c:	08004ecd 	.word	0x08004ecd
 8004f10:	08005051 	.word	0x08005051
 8004f14:	08004f7b 	.word	0x08004f7b
 8004f18:	0800500b 	.word	0x0800500b
 8004f1c:	08004ecd 	.word	0x08004ecd
 8004f20:	08004ecd 	.word	0x08004ecd
 8004f24:	08005073 	.word	0x08005073
 8004f28:	08004ecd 	.word	0x08004ecd
 8004f2c:	08004f7b 	.word	0x08004f7b
 8004f30:	08004ecd 	.word	0x08004ecd
 8004f34:	08004ecd 	.word	0x08004ecd
 8004f38:	08005013 	.word	0x08005013
 8004f3c:	6833      	ldr	r3, [r6, #0]
 8004f3e:	1d1a      	adds	r2, r3, #4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6032      	str	r2, [r6, #0]
 8004f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e09d      	b.n	800508c <_printf_i+0x1e8>
 8004f50:	6833      	ldr	r3, [r6, #0]
 8004f52:	6820      	ldr	r0, [r4, #0]
 8004f54:	1d19      	adds	r1, r3, #4
 8004f56:	6031      	str	r1, [r6, #0]
 8004f58:	0606      	lsls	r6, r0, #24
 8004f5a:	d501      	bpl.n	8004f60 <_printf_i+0xbc>
 8004f5c:	681d      	ldr	r5, [r3, #0]
 8004f5e:	e003      	b.n	8004f68 <_printf_i+0xc4>
 8004f60:	0645      	lsls	r5, r0, #25
 8004f62:	d5fb      	bpl.n	8004f5c <_printf_i+0xb8>
 8004f64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f68:	2d00      	cmp	r5, #0
 8004f6a:	da03      	bge.n	8004f74 <_printf_i+0xd0>
 8004f6c:	232d      	movs	r3, #45	@ 0x2d
 8004f6e:	426d      	negs	r5, r5
 8004f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f74:	4859      	ldr	r0, [pc, #356]	@ (80050dc <_printf_i+0x238>)
 8004f76:	230a      	movs	r3, #10
 8004f78:	e011      	b.n	8004f9e <_printf_i+0xfa>
 8004f7a:	6821      	ldr	r1, [r4, #0]
 8004f7c:	6833      	ldr	r3, [r6, #0]
 8004f7e:	0608      	lsls	r0, r1, #24
 8004f80:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f84:	d402      	bmi.n	8004f8c <_printf_i+0xe8>
 8004f86:	0649      	lsls	r1, r1, #25
 8004f88:	bf48      	it	mi
 8004f8a:	b2ad      	uxthmi	r5, r5
 8004f8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f8e:	4853      	ldr	r0, [pc, #332]	@ (80050dc <_printf_i+0x238>)
 8004f90:	6033      	str	r3, [r6, #0]
 8004f92:	bf14      	ite	ne
 8004f94:	230a      	movne	r3, #10
 8004f96:	2308      	moveq	r3, #8
 8004f98:	2100      	movs	r1, #0
 8004f9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f9e:	6866      	ldr	r6, [r4, #4]
 8004fa0:	60a6      	str	r6, [r4, #8]
 8004fa2:	2e00      	cmp	r6, #0
 8004fa4:	bfa2      	ittt	ge
 8004fa6:	6821      	ldrge	r1, [r4, #0]
 8004fa8:	f021 0104 	bicge.w	r1, r1, #4
 8004fac:	6021      	strge	r1, [r4, #0]
 8004fae:	b90d      	cbnz	r5, 8004fb4 <_printf_i+0x110>
 8004fb0:	2e00      	cmp	r6, #0
 8004fb2:	d04b      	beq.n	800504c <_printf_i+0x1a8>
 8004fb4:	4616      	mov	r6, r2
 8004fb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fba:	fb03 5711 	mls	r7, r3, r1, r5
 8004fbe:	5dc7      	ldrb	r7, [r0, r7]
 8004fc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fc4:	462f      	mov	r7, r5
 8004fc6:	42bb      	cmp	r3, r7
 8004fc8:	460d      	mov	r5, r1
 8004fca:	d9f4      	bls.n	8004fb6 <_printf_i+0x112>
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d10b      	bne.n	8004fe8 <_printf_i+0x144>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	07df      	lsls	r7, r3, #31
 8004fd4:	d508      	bpl.n	8004fe8 <_printf_i+0x144>
 8004fd6:	6923      	ldr	r3, [r4, #16]
 8004fd8:	6861      	ldr	r1, [r4, #4]
 8004fda:	4299      	cmp	r1, r3
 8004fdc:	bfde      	ittt	le
 8004fde:	2330      	movle	r3, #48	@ 0x30
 8004fe0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fe4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004fe8:	1b92      	subs	r2, r2, r6
 8004fea:	6122      	str	r2, [r4, #16]
 8004fec:	f8cd a000 	str.w	sl, [sp]
 8004ff0:	464b      	mov	r3, r9
 8004ff2:	aa03      	add	r2, sp, #12
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	f7ff fee6 	bl	8004dc8 <_printf_common>
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d14a      	bne.n	8005096 <_printf_i+0x1f2>
 8005000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005004:	b004      	add	sp, #16
 8005006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500a:	6823      	ldr	r3, [r4, #0]
 800500c:	f043 0320 	orr.w	r3, r3, #32
 8005010:	6023      	str	r3, [r4, #0]
 8005012:	4833      	ldr	r0, [pc, #204]	@ (80050e0 <_printf_i+0x23c>)
 8005014:	2778      	movs	r7, #120	@ 0x78
 8005016:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	6831      	ldr	r1, [r6, #0]
 800501e:	061f      	lsls	r7, r3, #24
 8005020:	f851 5b04 	ldr.w	r5, [r1], #4
 8005024:	d402      	bmi.n	800502c <_printf_i+0x188>
 8005026:	065f      	lsls	r7, r3, #25
 8005028:	bf48      	it	mi
 800502a:	b2ad      	uxthmi	r5, r5
 800502c:	6031      	str	r1, [r6, #0]
 800502e:	07d9      	lsls	r1, r3, #31
 8005030:	bf44      	itt	mi
 8005032:	f043 0320 	orrmi.w	r3, r3, #32
 8005036:	6023      	strmi	r3, [r4, #0]
 8005038:	b11d      	cbz	r5, 8005042 <_printf_i+0x19e>
 800503a:	2310      	movs	r3, #16
 800503c:	e7ac      	b.n	8004f98 <_printf_i+0xf4>
 800503e:	4827      	ldr	r0, [pc, #156]	@ (80050dc <_printf_i+0x238>)
 8005040:	e7e9      	b.n	8005016 <_printf_i+0x172>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	f023 0320 	bic.w	r3, r3, #32
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	e7f6      	b.n	800503a <_printf_i+0x196>
 800504c:	4616      	mov	r6, r2
 800504e:	e7bd      	b.n	8004fcc <_printf_i+0x128>
 8005050:	6833      	ldr	r3, [r6, #0]
 8005052:	6825      	ldr	r5, [r4, #0]
 8005054:	6961      	ldr	r1, [r4, #20]
 8005056:	1d18      	adds	r0, r3, #4
 8005058:	6030      	str	r0, [r6, #0]
 800505a:	062e      	lsls	r6, r5, #24
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	d501      	bpl.n	8005064 <_printf_i+0x1c0>
 8005060:	6019      	str	r1, [r3, #0]
 8005062:	e002      	b.n	800506a <_printf_i+0x1c6>
 8005064:	0668      	lsls	r0, r5, #25
 8005066:	d5fb      	bpl.n	8005060 <_printf_i+0x1bc>
 8005068:	8019      	strh	r1, [r3, #0]
 800506a:	2300      	movs	r3, #0
 800506c:	6123      	str	r3, [r4, #16]
 800506e:	4616      	mov	r6, r2
 8005070:	e7bc      	b.n	8004fec <_printf_i+0x148>
 8005072:	6833      	ldr	r3, [r6, #0]
 8005074:	1d1a      	adds	r2, r3, #4
 8005076:	6032      	str	r2, [r6, #0]
 8005078:	681e      	ldr	r6, [r3, #0]
 800507a:	6862      	ldr	r2, [r4, #4]
 800507c:	2100      	movs	r1, #0
 800507e:	4630      	mov	r0, r6
 8005080:	f7fb f8d6 	bl	8000230 <memchr>
 8005084:	b108      	cbz	r0, 800508a <_printf_i+0x1e6>
 8005086:	1b80      	subs	r0, r0, r6
 8005088:	6060      	str	r0, [r4, #4]
 800508a:	6863      	ldr	r3, [r4, #4]
 800508c:	6123      	str	r3, [r4, #16]
 800508e:	2300      	movs	r3, #0
 8005090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005094:	e7aa      	b.n	8004fec <_printf_i+0x148>
 8005096:	6923      	ldr	r3, [r4, #16]
 8005098:	4632      	mov	r2, r6
 800509a:	4649      	mov	r1, r9
 800509c:	4640      	mov	r0, r8
 800509e:	47d0      	blx	sl
 80050a0:	3001      	adds	r0, #1
 80050a2:	d0ad      	beq.n	8005000 <_printf_i+0x15c>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	079b      	lsls	r3, r3, #30
 80050a8:	d413      	bmi.n	80050d2 <_printf_i+0x22e>
 80050aa:	68e0      	ldr	r0, [r4, #12]
 80050ac:	9b03      	ldr	r3, [sp, #12]
 80050ae:	4298      	cmp	r0, r3
 80050b0:	bfb8      	it	lt
 80050b2:	4618      	movlt	r0, r3
 80050b4:	e7a6      	b.n	8005004 <_printf_i+0x160>
 80050b6:	2301      	movs	r3, #1
 80050b8:	4632      	mov	r2, r6
 80050ba:	4649      	mov	r1, r9
 80050bc:	4640      	mov	r0, r8
 80050be:	47d0      	blx	sl
 80050c0:	3001      	adds	r0, #1
 80050c2:	d09d      	beq.n	8005000 <_printf_i+0x15c>
 80050c4:	3501      	adds	r5, #1
 80050c6:	68e3      	ldr	r3, [r4, #12]
 80050c8:	9903      	ldr	r1, [sp, #12]
 80050ca:	1a5b      	subs	r3, r3, r1
 80050cc:	42ab      	cmp	r3, r5
 80050ce:	dcf2      	bgt.n	80050b6 <_printf_i+0x212>
 80050d0:	e7eb      	b.n	80050aa <_printf_i+0x206>
 80050d2:	2500      	movs	r5, #0
 80050d4:	f104 0619 	add.w	r6, r4, #25
 80050d8:	e7f5      	b.n	80050c6 <_printf_i+0x222>
 80050da:	bf00      	nop
 80050dc:	0800556d 	.word	0x0800556d
 80050e0:	0800557e 	.word	0x0800557e

080050e4 <__sflush_r>:
 80050e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ec:	0716      	lsls	r6, r2, #28
 80050ee:	4605      	mov	r5, r0
 80050f0:	460c      	mov	r4, r1
 80050f2:	d454      	bmi.n	800519e <__sflush_r+0xba>
 80050f4:	684b      	ldr	r3, [r1, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	dc02      	bgt.n	8005100 <__sflush_r+0x1c>
 80050fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	dd48      	ble.n	8005192 <__sflush_r+0xae>
 8005100:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005102:	2e00      	cmp	r6, #0
 8005104:	d045      	beq.n	8005192 <__sflush_r+0xae>
 8005106:	2300      	movs	r3, #0
 8005108:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800510c:	682f      	ldr	r7, [r5, #0]
 800510e:	6a21      	ldr	r1, [r4, #32]
 8005110:	602b      	str	r3, [r5, #0]
 8005112:	d030      	beq.n	8005176 <__sflush_r+0x92>
 8005114:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	0759      	lsls	r1, r3, #29
 800511a:	d505      	bpl.n	8005128 <__sflush_r+0x44>
 800511c:	6863      	ldr	r3, [r4, #4]
 800511e:	1ad2      	subs	r2, r2, r3
 8005120:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005122:	b10b      	cbz	r3, 8005128 <__sflush_r+0x44>
 8005124:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005126:	1ad2      	subs	r2, r2, r3
 8005128:	2300      	movs	r3, #0
 800512a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800512c:	6a21      	ldr	r1, [r4, #32]
 800512e:	4628      	mov	r0, r5
 8005130:	47b0      	blx	r6
 8005132:	1c43      	adds	r3, r0, #1
 8005134:	89a3      	ldrh	r3, [r4, #12]
 8005136:	d106      	bne.n	8005146 <__sflush_r+0x62>
 8005138:	6829      	ldr	r1, [r5, #0]
 800513a:	291d      	cmp	r1, #29
 800513c:	d82b      	bhi.n	8005196 <__sflush_r+0xb2>
 800513e:	4a2a      	ldr	r2, [pc, #168]	@ (80051e8 <__sflush_r+0x104>)
 8005140:	410a      	asrs	r2, r1
 8005142:	07d6      	lsls	r6, r2, #31
 8005144:	d427      	bmi.n	8005196 <__sflush_r+0xb2>
 8005146:	2200      	movs	r2, #0
 8005148:	6062      	str	r2, [r4, #4]
 800514a:	04d9      	lsls	r1, r3, #19
 800514c:	6922      	ldr	r2, [r4, #16]
 800514e:	6022      	str	r2, [r4, #0]
 8005150:	d504      	bpl.n	800515c <__sflush_r+0x78>
 8005152:	1c42      	adds	r2, r0, #1
 8005154:	d101      	bne.n	800515a <__sflush_r+0x76>
 8005156:	682b      	ldr	r3, [r5, #0]
 8005158:	b903      	cbnz	r3, 800515c <__sflush_r+0x78>
 800515a:	6560      	str	r0, [r4, #84]	@ 0x54
 800515c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800515e:	602f      	str	r7, [r5, #0]
 8005160:	b1b9      	cbz	r1, 8005192 <__sflush_r+0xae>
 8005162:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005166:	4299      	cmp	r1, r3
 8005168:	d002      	beq.n	8005170 <__sflush_r+0x8c>
 800516a:	4628      	mov	r0, r5
 800516c:	f7ff fbf2 	bl	8004954 <_free_r>
 8005170:	2300      	movs	r3, #0
 8005172:	6363      	str	r3, [r4, #52]	@ 0x34
 8005174:	e00d      	b.n	8005192 <__sflush_r+0xae>
 8005176:	2301      	movs	r3, #1
 8005178:	4628      	mov	r0, r5
 800517a:	47b0      	blx	r6
 800517c:	4602      	mov	r2, r0
 800517e:	1c50      	adds	r0, r2, #1
 8005180:	d1c9      	bne.n	8005116 <__sflush_r+0x32>
 8005182:	682b      	ldr	r3, [r5, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0c6      	beq.n	8005116 <__sflush_r+0x32>
 8005188:	2b1d      	cmp	r3, #29
 800518a:	d001      	beq.n	8005190 <__sflush_r+0xac>
 800518c:	2b16      	cmp	r3, #22
 800518e:	d11e      	bne.n	80051ce <__sflush_r+0xea>
 8005190:	602f      	str	r7, [r5, #0]
 8005192:	2000      	movs	r0, #0
 8005194:	e022      	b.n	80051dc <__sflush_r+0xf8>
 8005196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800519a:	b21b      	sxth	r3, r3
 800519c:	e01b      	b.n	80051d6 <__sflush_r+0xf2>
 800519e:	690f      	ldr	r7, [r1, #16]
 80051a0:	2f00      	cmp	r7, #0
 80051a2:	d0f6      	beq.n	8005192 <__sflush_r+0xae>
 80051a4:	0793      	lsls	r3, r2, #30
 80051a6:	680e      	ldr	r6, [r1, #0]
 80051a8:	bf08      	it	eq
 80051aa:	694b      	ldreq	r3, [r1, #20]
 80051ac:	600f      	str	r7, [r1, #0]
 80051ae:	bf18      	it	ne
 80051b0:	2300      	movne	r3, #0
 80051b2:	eba6 0807 	sub.w	r8, r6, r7
 80051b6:	608b      	str	r3, [r1, #8]
 80051b8:	f1b8 0f00 	cmp.w	r8, #0
 80051bc:	dde9      	ble.n	8005192 <__sflush_r+0xae>
 80051be:	6a21      	ldr	r1, [r4, #32]
 80051c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80051c2:	4643      	mov	r3, r8
 80051c4:	463a      	mov	r2, r7
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b0      	blx	r6
 80051ca:	2800      	cmp	r0, #0
 80051cc:	dc08      	bgt.n	80051e0 <__sflush_r+0xfc>
 80051ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051d6:	81a3      	strh	r3, [r4, #12]
 80051d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051e0:	4407      	add	r7, r0
 80051e2:	eba8 0800 	sub.w	r8, r8, r0
 80051e6:	e7e7      	b.n	80051b8 <__sflush_r+0xd4>
 80051e8:	dfbffffe 	.word	0xdfbffffe

080051ec <_fflush_r>:
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	690b      	ldr	r3, [r1, #16]
 80051f0:	4605      	mov	r5, r0
 80051f2:	460c      	mov	r4, r1
 80051f4:	b913      	cbnz	r3, 80051fc <_fflush_r+0x10>
 80051f6:	2500      	movs	r5, #0
 80051f8:	4628      	mov	r0, r5
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	b118      	cbz	r0, 8005206 <_fflush_r+0x1a>
 80051fe:	6a03      	ldr	r3, [r0, #32]
 8005200:	b90b      	cbnz	r3, 8005206 <_fflush_r+0x1a>
 8005202:	f7ff fa9f 	bl	8004744 <__sinit>
 8005206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f3      	beq.n	80051f6 <_fflush_r+0xa>
 800520e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005210:	07d0      	lsls	r0, r2, #31
 8005212:	d404      	bmi.n	800521e <_fflush_r+0x32>
 8005214:	0599      	lsls	r1, r3, #22
 8005216:	d402      	bmi.n	800521e <_fflush_r+0x32>
 8005218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800521a:	f7ff fb98 	bl	800494e <__retarget_lock_acquire_recursive>
 800521e:	4628      	mov	r0, r5
 8005220:	4621      	mov	r1, r4
 8005222:	f7ff ff5f 	bl	80050e4 <__sflush_r>
 8005226:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005228:	07da      	lsls	r2, r3, #31
 800522a:	4605      	mov	r5, r0
 800522c:	d4e4      	bmi.n	80051f8 <_fflush_r+0xc>
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	059b      	lsls	r3, r3, #22
 8005232:	d4e1      	bmi.n	80051f8 <_fflush_r+0xc>
 8005234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005236:	f7ff fb8b 	bl	8004950 <__retarget_lock_release_recursive>
 800523a:	e7dd      	b.n	80051f8 <_fflush_r+0xc>

0800523c <__swbuf_r>:
 800523c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523e:	460e      	mov	r6, r1
 8005240:	4614      	mov	r4, r2
 8005242:	4605      	mov	r5, r0
 8005244:	b118      	cbz	r0, 800524e <__swbuf_r+0x12>
 8005246:	6a03      	ldr	r3, [r0, #32]
 8005248:	b90b      	cbnz	r3, 800524e <__swbuf_r+0x12>
 800524a:	f7ff fa7b 	bl	8004744 <__sinit>
 800524e:	69a3      	ldr	r3, [r4, #24]
 8005250:	60a3      	str	r3, [r4, #8]
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	071a      	lsls	r2, r3, #28
 8005256:	d501      	bpl.n	800525c <__swbuf_r+0x20>
 8005258:	6923      	ldr	r3, [r4, #16]
 800525a:	b943      	cbnz	r3, 800526e <__swbuf_r+0x32>
 800525c:	4621      	mov	r1, r4
 800525e:	4628      	mov	r0, r5
 8005260:	f000 f82a 	bl	80052b8 <__swsetup_r>
 8005264:	b118      	cbz	r0, 800526e <__swbuf_r+0x32>
 8005266:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800526a:	4638      	mov	r0, r7
 800526c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	6922      	ldr	r2, [r4, #16]
 8005272:	1a98      	subs	r0, r3, r2
 8005274:	6963      	ldr	r3, [r4, #20]
 8005276:	b2f6      	uxtb	r6, r6
 8005278:	4283      	cmp	r3, r0
 800527a:	4637      	mov	r7, r6
 800527c:	dc05      	bgt.n	800528a <__swbuf_r+0x4e>
 800527e:	4621      	mov	r1, r4
 8005280:	4628      	mov	r0, r5
 8005282:	f7ff ffb3 	bl	80051ec <_fflush_r>
 8005286:	2800      	cmp	r0, #0
 8005288:	d1ed      	bne.n	8005266 <__swbuf_r+0x2a>
 800528a:	68a3      	ldr	r3, [r4, #8]
 800528c:	3b01      	subs	r3, #1
 800528e:	60a3      	str	r3, [r4, #8]
 8005290:	6823      	ldr	r3, [r4, #0]
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	6022      	str	r2, [r4, #0]
 8005296:	701e      	strb	r6, [r3, #0]
 8005298:	6962      	ldr	r2, [r4, #20]
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	429a      	cmp	r2, r3
 800529e:	d004      	beq.n	80052aa <__swbuf_r+0x6e>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	07db      	lsls	r3, r3, #31
 80052a4:	d5e1      	bpl.n	800526a <__swbuf_r+0x2e>
 80052a6:	2e0a      	cmp	r6, #10
 80052a8:	d1df      	bne.n	800526a <__swbuf_r+0x2e>
 80052aa:	4621      	mov	r1, r4
 80052ac:	4628      	mov	r0, r5
 80052ae:	f7ff ff9d 	bl	80051ec <_fflush_r>
 80052b2:	2800      	cmp	r0, #0
 80052b4:	d0d9      	beq.n	800526a <__swbuf_r+0x2e>
 80052b6:	e7d6      	b.n	8005266 <__swbuf_r+0x2a>

080052b8 <__swsetup_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4b29      	ldr	r3, [pc, #164]	@ (8005360 <__swsetup_r+0xa8>)
 80052bc:	4605      	mov	r5, r0
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	460c      	mov	r4, r1
 80052c2:	b118      	cbz	r0, 80052cc <__swsetup_r+0x14>
 80052c4:	6a03      	ldr	r3, [r0, #32]
 80052c6:	b90b      	cbnz	r3, 80052cc <__swsetup_r+0x14>
 80052c8:	f7ff fa3c 	bl	8004744 <__sinit>
 80052cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052d0:	0719      	lsls	r1, r3, #28
 80052d2:	d422      	bmi.n	800531a <__swsetup_r+0x62>
 80052d4:	06da      	lsls	r2, r3, #27
 80052d6:	d407      	bmi.n	80052e8 <__swsetup_r+0x30>
 80052d8:	2209      	movs	r2, #9
 80052da:	602a      	str	r2, [r5, #0]
 80052dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80052e6:	e033      	b.n	8005350 <__swsetup_r+0x98>
 80052e8:	0758      	lsls	r0, r3, #29
 80052ea:	d512      	bpl.n	8005312 <__swsetup_r+0x5a>
 80052ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052ee:	b141      	cbz	r1, 8005302 <__swsetup_r+0x4a>
 80052f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052f4:	4299      	cmp	r1, r3
 80052f6:	d002      	beq.n	80052fe <__swsetup_r+0x46>
 80052f8:	4628      	mov	r0, r5
 80052fa:	f7ff fb2b 	bl	8004954 <_free_r>
 80052fe:	2300      	movs	r3, #0
 8005300:	6363      	str	r3, [r4, #52]	@ 0x34
 8005302:	89a3      	ldrh	r3, [r4, #12]
 8005304:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005308:	81a3      	strh	r3, [r4, #12]
 800530a:	2300      	movs	r3, #0
 800530c:	6063      	str	r3, [r4, #4]
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	89a3      	ldrh	r3, [r4, #12]
 8005314:	f043 0308 	orr.w	r3, r3, #8
 8005318:	81a3      	strh	r3, [r4, #12]
 800531a:	6923      	ldr	r3, [r4, #16]
 800531c:	b94b      	cbnz	r3, 8005332 <__swsetup_r+0x7a>
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005328:	d003      	beq.n	8005332 <__swsetup_r+0x7a>
 800532a:	4621      	mov	r1, r4
 800532c:	4628      	mov	r0, r5
 800532e:	f000 f84f 	bl	80053d0 <__smakebuf_r>
 8005332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005336:	f013 0201 	ands.w	r2, r3, #1
 800533a:	d00a      	beq.n	8005352 <__swsetup_r+0x9a>
 800533c:	2200      	movs	r2, #0
 800533e:	60a2      	str	r2, [r4, #8]
 8005340:	6962      	ldr	r2, [r4, #20]
 8005342:	4252      	negs	r2, r2
 8005344:	61a2      	str	r2, [r4, #24]
 8005346:	6922      	ldr	r2, [r4, #16]
 8005348:	b942      	cbnz	r2, 800535c <__swsetup_r+0xa4>
 800534a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800534e:	d1c5      	bne.n	80052dc <__swsetup_r+0x24>
 8005350:	bd38      	pop	{r3, r4, r5, pc}
 8005352:	0799      	lsls	r1, r3, #30
 8005354:	bf58      	it	pl
 8005356:	6962      	ldrpl	r2, [r4, #20]
 8005358:	60a2      	str	r2, [r4, #8]
 800535a:	e7f4      	b.n	8005346 <__swsetup_r+0x8e>
 800535c:	2000      	movs	r0, #0
 800535e:	e7f7      	b.n	8005350 <__swsetup_r+0x98>
 8005360:	2000001c 	.word	0x2000001c

08005364 <_sbrk_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4d06      	ldr	r5, [pc, #24]	@ (8005380 <_sbrk_r+0x1c>)
 8005368:	2300      	movs	r3, #0
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	602b      	str	r3, [r5, #0]
 8005370:	f7fc f8fe 	bl	8001570 <_sbrk>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_sbrk_r+0x1a>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b103      	cbz	r3, 800537e <_sbrk_r+0x1a>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	200002f8 	.word	0x200002f8

08005384 <__swhatbuf_r>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	460c      	mov	r4, r1
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	2900      	cmp	r1, #0
 800538e:	b096      	sub	sp, #88	@ 0x58
 8005390:	4615      	mov	r5, r2
 8005392:	461e      	mov	r6, r3
 8005394:	da0d      	bge.n	80053b2 <__swhatbuf_r+0x2e>
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800539c:	f04f 0100 	mov.w	r1, #0
 80053a0:	bf14      	ite	ne
 80053a2:	2340      	movne	r3, #64	@ 0x40
 80053a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053a8:	2000      	movs	r0, #0
 80053aa:	6031      	str	r1, [r6, #0]
 80053ac:	602b      	str	r3, [r5, #0]
 80053ae:	b016      	add	sp, #88	@ 0x58
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
 80053b2:	466a      	mov	r2, sp
 80053b4:	f000 f848 	bl	8005448 <_fstat_r>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	dbec      	blt.n	8005396 <__swhatbuf_r+0x12>
 80053bc:	9901      	ldr	r1, [sp, #4]
 80053be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80053c6:	4259      	negs	r1, r3
 80053c8:	4159      	adcs	r1, r3
 80053ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053ce:	e7eb      	b.n	80053a8 <__swhatbuf_r+0x24>

080053d0 <__smakebuf_r>:
 80053d0:	898b      	ldrh	r3, [r1, #12]
 80053d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053d4:	079d      	lsls	r5, r3, #30
 80053d6:	4606      	mov	r6, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	d507      	bpl.n	80053ec <__smakebuf_r+0x1c>
 80053dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	6123      	str	r3, [r4, #16]
 80053e4:	2301      	movs	r3, #1
 80053e6:	6163      	str	r3, [r4, #20]
 80053e8:	b003      	add	sp, #12
 80053ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ec:	ab01      	add	r3, sp, #4
 80053ee:	466a      	mov	r2, sp
 80053f0:	f7ff ffc8 	bl	8005384 <__swhatbuf_r>
 80053f4:	9f00      	ldr	r7, [sp, #0]
 80053f6:	4605      	mov	r5, r0
 80053f8:	4639      	mov	r1, r7
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7ff fb16 	bl	8004a2c <_malloc_r>
 8005400:	b948      	cbnz	r0, 8005416 <__smakebuf_r+0x46>
 8005402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005406:	059a      	lsls	r2, r3, #22
 8005408:	d4ee      	bmi.n	80053e8 <__smakebuf_r+0x18>
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	f043 0302 	orr.w	r3, r3, #2
 8005412:	81a3      	strh	r3, [r4, #12]
 8005414:	e7e2      	b.n	80053dc <__smakebuf_r+0xc>
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	6020      	str	r0, [r4, #0]
 800541a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	9b01      	ldr	r3, [sp, #4]
 8005422:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005426:	b15b      	cbz	r3, 8005440 <__smakebuf_r+0x70>
 8005428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800542c:	4630      	mov	r0, r6
 800542e:	f000 f81d 	bl	800546c <_isatty_r>
 8005432:	b128      	cbz	r0, 8005440 <__smakebuf_r+0x70>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	431d      	orrs	r5, r3
 8005444:	81a5      	strh	r5, [r4, #12]
 8005446:	e7cf      	b.n	80053e8 <__smakebuf_r+0x18>

08005448 <_fstat_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4d07      	ldr	r5, [pc, #28]	@ (8005468 <_fstat_r+0x20>)
 800544c:	2300      	movs	r3, #0
 800544e:	4604      	mov	r4, r0
 8005450:	4608      	mov	r0, r1
 8005452:	4611      	mov	r1, r2
 8005454:	602b      	str	r3, [r5, #0]
 8005456:	f7fc f863 	bl	8001520 <_fstat>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	d102      	bne.n	8005464 <_fstat_r+0x1c>
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	b103      	cbz	r3, 8005464 <_fstat_r+0x1c>
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	bd38      	pop	{r3, r4, r5, pc}
 8005466:	bf00      	nop
 8005468:	200002f8 	.word	0x200002f8

0800546c <_isatty_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	4d06      	ldr	r5, [pc, #24]	@ (8005488 <_isatty_r+0x1c>)
 8005470:	2300      	movs	r3, #0
 8005472:	4604      	mov	r4, r0
 8005474:	4608      	mov	r0, r1
 8005476:	602b      	str	r3, [r5, #0]
 8005478:	f7fc f862 	bl	8001540 <_isatty>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_isatty_r+0x1a>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	b103      	cbz	r3, 8005486 <_isatty_r+0x1a>
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	200002f8 	.word	0x200002f8

0800548c <_init>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr

08005498 <_fini>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr
