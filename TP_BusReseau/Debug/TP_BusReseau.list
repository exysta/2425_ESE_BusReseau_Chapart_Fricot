
TP_BusReseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003da8  08003da8  00004da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc0  08003dc0  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003dc0  08003dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dc8  08003dc8  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc8  08003dc8  00004dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003dcc  08003dcc  00004dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003dd0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000010  08003de0  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003de0  00005184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125d6  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000294f  00000000  00000000  00017616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00019f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d20  00000000  00000000  0001b018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002311f  00000000  00000000  0001bd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e97  00000000  00000000  0003ee57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5c3b  00000000  00000000  00053cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129929  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b8  00000000  00000000  0012996c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012e024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003d90 	.word	0x08003d90

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003d90 	.word	0x08003d90

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80004f8:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <MX_CAN1_Init+0x60>)
 80004fa:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <MX_CAN1_Init+0x64>)
 80004fc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80004fe:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <MX_CAN1_Init+0x60>)
 8000500:	2210      	movs	r2, #16
 8000502:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000504:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <MX_CAN1_Init+0x60>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800050a:	4b12      	ldr	r3, [pc, #72]	@ (8000554 <MX_CAN1_Init+0x60>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000510:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <MX_CAN1_Init+0x60>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <MX_CAN1_Init+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800051c:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <MX_CAN1_Init+0x60>)
 800051e:	2200      	movs	r2, #0
 8000520:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <MX_CAN1_Init+0x60>)
 8000524:	2200      	movs	r2, #0
 8000526:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <MX_CAN1_Init+0x60>)
 800052a:	2200      	movs	r2, #0
 800052c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <MX_CAN1_Init+0x60>)
 8000530:	2200      	movs	r2, #0
 8000532:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000534:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <MX_CAN1_Init+0x60>)
 8000536:	2200      	movs	r2, #0
 8000538:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <MX_CAN1_Init+0x60>)
 800053c:	2200      	movs	r2, #0
 800053e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <MX_CAN1_Init+0x60>)
 8000542:	f000 fcf3 	bl	8000f2c <HAL_CAN_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800054c:	f000 faba 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000002c 	.word	0x2000002c
 8000558:	40006400 	.word	0x40006400

0800055c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a19      	ldr	r2, [pc, #100]	@ (80005e0 <HAL_CAN_MspInit+0x84>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d12c      	bne.n	80005d8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	4b18      	ldr	r3, [pc, #96]	@ (80005e4 <HAL_CAN_MspInit+0x88>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000586:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <HAL_CAN_MspInit+0x88>)
 8000588:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800058c:	6413      	str	r3, [r2, #64]	@ 0x40
 800058e:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <HAL_CAN_MspInit+0x88>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <HAL_CAN_MspInit+0x88>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a10      	ldr	r2, [pc, #64]	@ (80005e4 <HAL_CAN_MspInit+0x88>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <HAL_CAN_MspInit+0x88>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80005ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005bc:	2302      	movs	r3, #2
 80005be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005c8:	2309      	movs	r3, #9
 80005ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4619      	mov	r1, r3
 80005d2:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <HAL_CAN_MspInit+0x8c>)
 80005d4:	f000 fe88 	bl	80012e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005d8:	bf00      	nop
 80005da:	3728      	adds	r7, #40	@ 0x28
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40006400 	.word	0x40006400
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40020000 	.word	0x40020000

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b2d      	ldr	r3, [pc, #180]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a2c      	ldr	r2, [pc, #176]	@ (80006bc <MX_GPIO_Init+0xd0>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b2a      	ldr	r3, [pc, #168]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b26      	ldr	r3, [pc, #152]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a25      	ldr	r2, [pc, #148]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a1e      	ldr	r2, [pc, #120]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b1c      	ldr	r3, [pc, #112]	@ (80006bc <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_GPIO_Init+0xd0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065e:	4a17      	ldr	r2, [pc, #92]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	@ 0x30
 8000666:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	4812      	ldr	r0, [pc, #72]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 8000678:	f000 ffca 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000682:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <MX_GPIO_Init+0xd8>)
 8000694:	f000 fe28 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000698:	2320      	movs	r3, #32
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_GPIO_Init+0xd4>)
 80006b0:	f000 fe1a 	bl	80012e8 <HAL_GPIO_Init>

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	@ 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020800 	.word	0x40020800

080006c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	@ (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f000 ff9d 	bl	8001644 <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f9d8 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000054 	.word	0x20000054
 800071c:	40005400 	.word	0x40005400
 8000720:	000186a0 	.word	0x000186a0

08000724 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a19      	ldr	r2, [pc, #100]	@ (80007a8 <HAL_I2C_MspInit+0x84>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d12c      	bne.n	80007a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b18      	ldr	r3, [pc, #96]	@ (80007ac <HAL_I2C_MspInit+0x88>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a17      	ldr	r2, [pc, #92]	@ (80007ac <HAL_I2C_MspInit+0x88>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <HAL_I2C_MspInit+0x88>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000762:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000768:	2312      	movs	r3, #18
 800076a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000774:	2304      	movs	r3, #4
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <HAL_I2C_MspInit+0x8c>)
 8000780:	f000 fdb2 	bl	80012e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <HAL_I2C_MspInit+0x88>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	4a07      	ldr	r2, [pc, #28]	@ (80007ac <HAL_I2C_MspInit+0x88>)
 800078e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000792:	6413      	str	r3, [r2, #64]	@ 0x40
 8000794:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <HAL_I2C_MspInit+0x88>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	@ 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40005400 	.word	0x40005400
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020400 	.word	0x40020400

080007b4 <convertBufferToUint32>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t convertBufferToUint32(uint8_t buffer[3]) {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    return (uint32_t)buffer[0] << 16 | (uint32_t)buffer[1] << 8 | (uint32_t)buffer[2];
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	041a      	lsls	r2, r3, #16
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3301      	adds	r3, #1
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	4313      	orrs	r3, r2
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	3202      	adds	r2, #2
 80007d0:	7812      	ldrb	r2, [r2, #0]
 80007d2:	4313      	orrs	r3, r2
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b096      	sub	sp, #88	@ 0x58
 80007e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e6:	f000 fb5f 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ea:	f000 f8eb 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ee:	f7ff fefd 	bl	80005ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007f2:	f000 fa5d 	bl	8000cb0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80007f6:	f7ff fe7d 	bl	80004f4 <MX_CAN1_Init>
  MX_I2C1_Init();
 80007fa:	f7ff ff65 	bl	80006c8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80007fe:	f000 fa81 	bl	8000d04 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


	// on récupère ID
	uint8_t bmp280_id = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t bmp280_addr_id = 0xD0; // l'adresse du registre contenant l'ID
 8000808:	23d0      	movs	r3, #208	@ 0xd0
 800080a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	HAL_I2C_Master_Transmit(&hi2c1, bmp280_addr_shifted, &bmp280_addr_id, 1, 1000); //on envoie l'adresse du registre qu'on veut récupérer
 800080e:	4b6b      	ldr	r3, [pc, #428]	@ (80009bc <main+0x1dc>)
 8000810:	8819      	ldrh	r1, [r3, #0]
 8000812:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2301      	movs	r3, #1
 800081e:	4868      	ldr	r0, [pc, #416]	@ (80009c0 <main+0x1e0>)
 8000820:	f001 f854 	bl	80018cc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, bmp280_addr_shifted, &bmp280_id, 1, 1000);
 8000824:	4b65      	ldr	r3, [pc, #404]	@ (80009bc <main+0x1dc>)
 8000826:	8819      	ldrh	r1, [r3, #0]
 8000828:	f107 0233 	add.w	r2, r7, #51	@ 0x33
 800082c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2301      	movs	r3, #1
 8000834:	4862      	ldr	r0, [pc, #392]	@ (80009c0 <main+0x1e0>)
 8000836:	f001 f947 	bl	8001ac8 <HAL_I2C_Master_Receive>
	//--------------------------------------------------------------------------------------

	// on config

	uint8_t bmp280_addr_ctrl_meas = 0xF4; // l'adresse du registre contenant le control des mesures
 800083a:	23f4      	movs	r3, #244	@ 0xf4
 800083c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t bmp280_config_ctrl_meas = 0x57; // la valuer de la config a appliqué
 8000840:	2357      	movs	r3, #87	@ 0x57
 8000842:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	uint8_t bmp280_ctrl_meas_buffer[2] = {bmp280_addr_ctrl_meas, bmp280_config_ctrl_meas};
 8000846:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800084a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800084e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000852:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint8_t value = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	//on envoie la config
	HAL_I2C_Master_Transmit(&hi2c1, bmp280_addr_shifted, bmp280_ctrl_meas_buffer, 2, 1000); //on envoie buffer avec adresse du registre
 800085c:	4b57      	ldr	r3, [pc, #348]	@ (80009bc <main+0x1dc>)
 800085e:	8819      	ldrh	r1, [r3, #0]
 8000860:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000864:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2302      	movs	r3, #2
 800086c:	4854      	ldr	r0, [pc, #336]	@ (80009c0 <main+0x1e0>)
 800086e:	f001 f82d 	bl	80018cc <HAL_I2C_Master_Transmit>
																							//puis valeur à y écrire
	//pour vérification
	HAL_I2C_Master_Receive(&hi2c1, bmp280_addr_shifted, &value, 1, 1000);
 8000872:	4b52      	ldr	r3, [pc, #328]	@ (80009bc <main+0x1dc>)
 8000874:	8819      	ldrh	r1, [r3, #0]
 8000876:	f107 022f 	add.w	r2, r7, #47	@ 0x2f
 800087a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2301      	movs	r3, #1
 8000882:	484f      	ldr	r0, [pc, #316]	@ (80009c0 <main+0x1e0>)
 8000884:	f001 f920 	bl	8001ac8 <HAL_I2C_Master_Receive>

	//--------------------------------------------------------------------------------------
	//Récupération de létalonnage
	uint8_t calibration_buffer[BMP280_CALIBRATION_BUFFER_SIZE];
	uint8_t first_calibration_addr = 0x88; // valeur de la première adresse du registre calibration
 8000888:	2388      	movs	r3, #136	@ 0x88
 800088a:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	uint8_t current_calibration_addr = first_calibration_addr; // variable que l'on va incrémenter pour récupérer toutes les adresses
 800088e:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000892:	74fb      	strb	r3, [r7, #19]
	uint8_t calibration_value;
	for(int i = 0; i <BMP280_CALIBRATION_BUFFER_SIZE;i++)
 8000894:	2300      	movs	r3, #0
 8000896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000898:	e023      	b.n	80008e2 <main+0x102>
	{

		HAL_I2C_Master_Transmit(&hi2c1, bmp280_addr_shifted, &current_calibration_addr, 1, 1000); // on demande à récup valeur de l'adresse courante
 800089a:	4b48      	ldr	r3, [pc, #288]	@ (80009bc <main+0x1dc>)
 800089c:	8819      	ldrh	r1, [r3, #0]
 800089e:	f107 0213 	add.w	r2, r7, #19
 80008a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2301      	movs	r3, #1
 80008aa:	4845      	ldr	r0, [pc, #276]	@ (80009c0 <main+0x1e0>)
 80008ac:	f001 f80e 	bl	80018cc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, bmp280_addr_shifted, &calibration_value, 1, 1000); // on récupère la valeur de calibration de l'adresse courante
 80008b0:	4b42      	ldr	r3, [pc, #264]	@ (80009bc <main+0x1dc>)
 80008b2:	8819      	ldrh	r1, [r3, #0]
 80008b4:	f107 0212 	add.w	r2, r7, #18
 80008b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	483f      	ldr	r0, [pc, #252]	@ (80009c0 <main+0x1e0>)
 80008c2:	f001 f901 	bl	8001ac8 <HAL_I2C_Master_Receive>
		calibration_buffer[i] = calibration_value; // on la range dans le buffer
 80008c6:	7cb9      	ldrb	r1, [r7, #18]
 80008c8:	f107 0214 	add.w	r2, r7, #20
 80008cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008ce:	4413      	add	r3, r2
 80008d0:	460a      	mov	r2, r1
 80008d2:	701a      	strb	r2, [r3, #0]
		current_calibration_addr++; // on incrémente l'adresse
 80008d4:	7cfb      	ldrb	r3, [r7, #19]
 80008d6:	3301      	adds	r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	74fb      	strb	r3, [r7, #19]
	for(int i = 0; i <BMP280_CALIBRATION_BUFFER_SIZE;i++)
 80008dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008de:	3301      	adds	r3, #1
 80008e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80008e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008e4:	2b18      	cmp	r3, #24
 80008e6:	ddd8      	ble.n	800089a <main+0xba>
	}

	//récupération de la pression
	uint8_t pressure_start_addr = 0xF7; // l'adresse de départ du registre pression
 80008e8:	23f7      	movs	r3, #247	@ 0xf7
 80008ea:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	uint8_t pressure_value_buffer[3]; //chaque adresse sera stocké dans un byte puis on combinera les bytes
	uint8_t current_pressure_addr = pressure_start_addr;
 80008ee:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80008f2:	72fb      	strb	r3, [r7, #11]
	uint8_t pressure_value; //chaque adresse sera stocké dans un byte puis on combinera les bytes

	for(int i = 0; i <3;i++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80008f8:	e023      	b.n	8000942 <main+0x162>
	{

		HAL_I2C_Master_Transmit(&hi2c1, bmp280_addr_shifted, &current_pressure_addr, 1, 1000); // on demande à récup valeur de l'adresse courante
 80008fa:	4b30      	ldr	r3, [pc, #192]	@ (80009bc <main+0x1dc>)
 80008fc:	8819      	ldrh	r1, [r3, #0]
 80008fe:	f107 020b 	add.w	r2, r7, #11
 8000902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2301      	movs	r3, #1
 800090a:	482d      	ldr	r0, [pc, #180]	@ (80009c0 <main+0x1e0>)
 800090c:	f000 ffde 	bl	80018cc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, bmp280_addr_shifted, &pressure_value, 1, 1000); // on récupère la valeur de calibration de l'adresse courante
 8000910:	4b2a      	ldr	r3, [pc, #168]	@ (80009bc <main+0x1dc>)
 8000912:	8819      	ldrh	r1, [r3, #0]
 8000914:	f107 020a 	add.w	r2, r7, #10
 8000918:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2301      	movs	r3, #1
 8000920:	4827      	ldr	r0, [pc, #156]	@ (80009c0 <main+0x1e0>)
 8000922:	f001 f8d1 	bl	8001ac8 <HAL_I2C_Master_Receive>
		pressure_value_buffer[i] = pressure_value; // on la range dans le buffer
 8000926:	7ab9      	ldrb	r1, [r7, #10]
 8000928:	f107 020c 	add.w	r2, r7, #12
 800092c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800092e:	4413      	add	r3, r2
 8000930:	460a      	mov	r2, r1
 8000932:	701a      	strb	r2, [r3, #0]
		current_pressure_addr++; // on incrémente l'adresse
 8000934:	7afb      	ldrb	r3, [r7, #11]
 8000936:	3301      	adds	r3, #1
 8000938:	b2db      	uxtb	r3, r3
 800093a:	72fb      	strb	r3, [r7, #11]
	for(int i = 0; i <3;i++)
 800093c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800093e:	3301      	adds	r3, #1
 8000940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000942:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000944:	2b02      	cmp	r3, #2
 8000946:	ddd8      	ble.n	80008fa <main+0x11a>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
	uint32_t pressure_value_32 = convertBufferToUint32(pressure_value_buffer);
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff31 	bl	80007b4 <convertBufferToUint32>
 8000952:	63f8      	str	r0, [r7, #60]	@ 0x3c
	//--------------------------------------------------------------------------------------
	//récupération de la température
	uint8_t temp_start_addr = 0xFA; // l'adresse de départ du registre température
 8000954:	23fa      	movs	r3, #250	@ 0xfa
 8000956:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t temp_value_buffer[3]; //chaque adresse sera stocké dans un byte puis on combinera les bytes
	uint8_t current_temp_addr = temp_start_addr;
 800095a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800095e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp_value; //chaque adresse sera stocké dans un byte puis on combinera les bytes

	for(int i = 0; i <3;i++)
 8000960:	2300      	movs	r3, #0
 8000962:	647b      	str	r3, [r7, #68]	@ 0x44
 8000964:	e020      	b.n	80009a8 <main+0x1c8>
	{

		HAL_I2C_Master_Transmit(&hi2c1, bmp280_addr_shifted, &current_temp_addr, 1, 1000); // on demande à récup valeur de l'adresse courante
 8000966:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <main+0x1dc>)
 8000968:	8819      	ldrh	r1, [r3, #0]
 800096a:	1cfa      	adds	r2, r7, #3
 800096c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000970:	9300      	str	r3, [sp, #0]
 8000972:	2301      	movs	r3, #1
 8000974:	4812      	ldr	r0, [pc, #72]	@ (80009c0 <main+0x1e0>)
 8000976:	f000 ffa9 	bl	80018cc <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, bmp280_addr_shifted, &temp_value, 1, 1000); // on récupère la valeur de calibration de l'adresse courante
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <main+0x1dc>)
 800097c:	8819      	ldrh	r1, [r3, #0]
 800097e:	1cba      	adds	r2, r7, #2
 8000980:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2301      	movs	r3, #1
 8000988:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <main+0x1e0>)
 800098a:	f001 f89d 	bl	8001ac8 <HAL_I2C_Master_Receive>
		temp_value_buffer[i] = temp_value; // on la range dans le buffer
 800098e:	78b9      	ldrb	r1, [r7, #2]
 8000990:	1d3a      	adds	r2, r7, #4
 8000992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000994:	4413      	add	r3, r2
 8000996:	460a      	mov	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
		current_temp_addr++; // on incrémente l'adresse
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	3301      	adds	r3, #1
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i <3;i++)
 80009a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009a4:	3301      	adds	r3, #1
 80009a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80009a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	dddb      	ble.n	8000966 <main+0x186>
	}
	uint32_t temp_value_32  =	convertBufferToUint32(temp_value_buffer);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff feff 	bl	80007b4 <convertBufferToUint32>
 80009b6:	6378      	str	r0, [r7, #52]	@ 0x34
	//--------------------------------------------------------------------------------------
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <main+0x1d8>
 80009bc:	20000000 	.word	0x20000000
 80009c0:	20000054 	.word	0x20000054

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	@ 0x50
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2234      	movs	r2, #52	@ 0x34
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 f9b0 	bl	8003d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000a98 <SystemClock_Config+0xd4>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	4a29      	ldr	r2, [pc, #164]	@ (8000a98 <SystemClock_Config+0xd4>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <SystemClock_Config+0xd4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a04:	2300      	movs	r3, #0
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	4b24      	ldr	r3, [pc, #144]	@ (8000a9c <SystemClock_Config+0xd8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a10:	4a22      	ldr	r2, [pc, #136]	@ (8000a9c <SystemClock_Config+0xd8>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <SystemClock_Config+0xd8>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2302      	movs	r3, #2
 8000a32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a3c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a42:	2304      	movs	r3, #4
 8000a44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 f96c 	bl	8002d30 <HAL_RCC_OscConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a5e:	f000 f831 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2302      	movs	r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fdda 	bl	8002638 <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a8a:	f000 f81b 	bl	8000ac4 <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	@ 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d101      	bne.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab2:	f000 fa1b 	bl	8000eec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40001000 	.word	0x40001000

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08e      	sub	sp, #56	@ 0x38
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4b33      	ldr	r3, [pc, #204]	@ (8000c04 <HAL_InitTick+0xe4>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	4a32      	ldr	r2, [pc, #200]	@ (8000c04 <HAL_InitTick+0xe4>)
 8000b3a:	f043 0310 	orr.w	r3, r3, #16
 8000b3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b40:	4b30      	ldr	r3, [pc, #192]	@ (8000c04 <HAL_InitTick+0xe4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	f003 0310 	and.w	r3, r3, #16
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b4c:	f107 0210 	add.w	r2, r7, #16
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fe88 	bl	800286c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d103      	bne.n	8000b6e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b66:	f001 fe59 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8000b6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b6c:	e004      	b.n	8000b78 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b6e:	f001 fe55 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8000b72:	4603      	mov	r3, r0
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b7a:	4a23      	ldr	r2, [pc, #140]	@ (8000c08 <HAL_InitTick+0xe8>)
 8000b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b80:	0c9b      	lsrs	r3, r3, #18
 8000b82:	3b01      	subs	r3, #1
 8000b84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <HAL_InitTick+0xec>)
 8000b88:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <HAL_InitTick+0xf0>)
 8000b8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <HAL_InitTick+0xec>)
 8000b8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b92:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b94:	4a1d      	ldr	r2, [pc, #116]	@ (8000c0c <HAL_InitTick+0xec>)
 8000b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b98:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <HAL_InitTick+0xec>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <HAL_InitTick+0xec>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <HAL_InitTick+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bac:	4817      	ldr	r0, [pc, #92]	@ (8000c0c <HAL_InitTick+0xec>)
 8000bae:	f002 fb5d 	bl	800326c <HAL_TIM_Base_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d11b      	bne.n	8000bf8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bc0:	4812      	ldr	r0, [pc, #72]	@ (8000c0c <HAL_InitTick+0xec>)
 8000bc2:	f002 fbad 	bl	8003320 <HAL_TIM_Base_Start_IT>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d111      	bne.n	8000bf8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bd4:	2036      	movs	r0, #54	@ 0x36
 8000bd6:	f000 fb79 	bl	80012cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d808      	bhi.n	8000bf2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	2036      	movs	r0, #54	@ 0x36
 8000be6:	f000 fb55 	bl	8001294 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <HAL_InitTick+0xf4>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	e002      	b.n	8000bf8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3738      	adds	r7, #56	@ 0x38
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	431bde83 	.word	0x431bde83
 8000c0c:	200000a8 	.word	0x200000a8
 8000c10:	40001000 	.word	0x40001000
 8000c14:	20000008 	.word	0x20000008

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <NMI_Handler+0x4>

08000c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <MemManage_Handler+0x4>

08000c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <TIM6_DAC_IRQHandler+0x10>)
 8000c7e:	f002 fbbf 	bl	8003400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000a8 	.word	0x200000a8

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <MX_USART2_UART_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000ce8:	f002 fd62 	bl	80037b0 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cf2:	f7ff fee7 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000f0 	.word	0x200000f0
 8000d00:	40004400 	.word	0x40004400

08000d04 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	@ (8000d54 <MX_USART3_UART_Init+0x50>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	@ (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b09      	ldr	r3, [pc, #36]	@ (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	@ (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d3c:	f002 fd38 	bl	80037b0 <HAL_UART_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d46:	f7ff febd 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000138 	.word	0x20000138
 8000d54:	40004800 	.word	0x40004800

08000d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	@ 0x30
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a32      	ldr	r2, [pc, #200]	@ (8000e40 <HAL_UART_MspInit+0xe8>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12c      	bne.n	8000dd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	4b31      	ldr	r3, [pc, #196]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	4a30      	ldr	r2, [pc, #192]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a29      	ldr	r2, [pc, #164]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b27      	ldr	r3, [pc, #156]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000db2:	230c      	movs	r3, #12
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481e      	ldr	r0, [pc, #120]	@ (8000e48 <HAL_UART_MspInit+0xf0>)
 8000dce:	f000 fa8b 	bl	80012e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dd2:	e031      	b.n	8000e38 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8000e4c <HAL_UART_MspInit+0xf4>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12c      	bne.n	8000e38 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b18      	ldr	r3, [pc, #96]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	4a17      	ldr	r2, [pc, #92]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a10      	ldr	r2, [pc, #64]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <HAL_UART_MspInit+0xec>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0304 	and.w	r3, r3, #4
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <HAL_UART_MspInit+0xf8>)
 8000e34:	f000 fa58 	bl	80012e8 <HAL_GPIO_Init>
}
 8000e38:	bf00      	nop
 8000e3a:	3730      	adds	r7, #48	@ 0x30
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	40004800 	.word	0x40004800
 8000e50:	40020800 	.word	0x40020800

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e58:	f7ff ff18 	bl	8000c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f002 ff61 	bl	8003d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fcab 	bl	80007e0 <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e98:	08003dd0 	.word	0x08003dd0
  ldr r2, =_sbss
 8000e9c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ea0:	20000184 	.word	0x20000184

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f9d4 	bl	800127e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f7ff fe22 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fdf8 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000000c 	.word	0x2000000c
 8000f10:	20000180 	.word	0x20000180

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000180 	.word	0x20000180

08000f2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0ed      	b.n	800111a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff fb06 	bl	800055c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0201 	orr.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f60:	f7ff ffd8 	bl	8000f14 <HAL_GetTick>
 8000f64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f66:	e012      	b.n	8000f8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f68:	f7ff ffd4 	bl	8000f14 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b0a      	cmp	r3, #10
 8000f74:	d90b      	bls.n	8000f8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2205      	movs	r2, #5
 8000f86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e0c5      	b.n	800111a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0e5      	beq.n	8000f68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0202 	bic.w	r2, r2, #2
 8000faa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fac:	f7ff ffb2 	bl	8000f14 <HAL_GetTick>
 8000fb0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fb2:	e012      	b.n	8000fda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fb4:	f7ff ffae 	bl	8000f14 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b0a      	cmp	r3, #10
 8000fc0:	d90b      	bls.n	8000fda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e09f      	b.n	800111a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1e5      	bne.n	8000fb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7e1b      	ldrb	r3, [r3, #24]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d108      	bne.n	8001002 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	e007      	b.n	8001012 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7e5b      	ldrb	r3, [r3, #25]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d108      	bne.n	800102c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	e007      	b.n	800103c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800103a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7e9b      	ldrb	r3, [r3, #26]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d108      	bne.n	8001056 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0220 	orr.w	r2, r2, #32
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	e007      	b.n	8001066 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0220 	bic.w	r2, r2, #32
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7edb      	ldrb	r3, [r3, #27]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d108      	bne.n	8001080 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0210 	bic.w	r2, r2, #16
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	e007      	b.n	8001090 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0210 	orr.w	r2, r2, #16
 800108e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7f1b      	ldrb	r3, [r3, #28]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d108      	bne.n	80010aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0208 	orr.w	r2, r2, #8
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e007      	b.n	80010ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0208 	bic.w	r2, r2, #8
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7f5b      	ldrb	r3, [r3, #29]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d108      	bne.n	80010d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0204 	orr.w	r2, r2, #4
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	e007      	b.n	80010e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f022 0204 	bic.w	r2, r2, #4
 80010e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	431a      	orrs	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	ea42 0103 	orr.w	r1, r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	@ (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	@ (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	@ 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff4c 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a6:	f7ff ff61 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	68b9      	ldr	r1, [r7, #8]
 80012b0:	6978      	ldr	r0, [r7, #20]
 80012b2:	f7ff ffb1 	bl	8001218 <NVIC_EncodePriority>
 80012b6:	4602      	mov	r2, r0
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff80 	bl	80011c4 <__NVIC_SetPriority>
}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff54 	bl	8001188 <__NVIC_EnableIRQ>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e165      	b.n	80015d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001304:	2201      	movs	r2, #1
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	f040 8154 	bne.w	80015ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d005      	beq.n	800133a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001336:	2b02      	cmp	r3, #2
 8001338:	d130      	bne.n	800139c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001370:	2201      	movs	r2, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 0201 	and.w	r2, r3, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d017      	beq.n	80013d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d123      	bne.n	800142c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	08da      	lsrs	r2, r3, #3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3208      	adds	r2, #8
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	220f      	movs	r2, #15
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	08da      	lsrs	r2, r3, #3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3208      	adds	r2, #8
 8001426:	69b9      	ldr	r1, [r7, #24]
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0203 	and.w	r2, r3, #3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80ae 	beq.w	80015ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b5d      	ldr	r3, [pc, #372]	@ (80015e8 <HAL_GPIO_Init+0x300>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a5c      	ldr	r2, [pc, #368]	@ (80015e8 <HAL_GPIO_Init+0x300>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b5a      	ldr	r3, [pc, #360]	@ (80015e8 <HAL_GPIO_Init+0x300>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148a:	4a58      	ldr	r2, [pc, #352]	@ (80015ec <HAL_GPIO_Init+0x304>)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	220f      	movs	r2, #15
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4f      	ldr	r2, [pc, #316]	@ (80015f0 <HAL_GPIO_Init+0x308>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d025      	beq.n	8001502 <HAL_GPIO_Init+0x21a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4e      	ldr	r2, [pc, #312]	@ (80015f4 <HAL_GPIO_Init+0x30c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d01f      	beq.n	80014fe <HAL_GPIO_Init+0x216>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4d      	ldr	r2, [pc, #308]	@ (80015f8 <HAL_GPIO_Init+0x310>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x212>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	@ (80015fc <HAL_GPIO_Init+0x314>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x20e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001600 <HAL_GPIO_Init+0x318>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x20a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001604 <HAL_GPIO_Init+0x31c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x206>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a49      	ldr	r2, [pc, #292]	@ (8001608 <HAL_GPIO_Init+0x320>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x202>
 80014e6:	2306      	movs	r3, #6
 80014e8:	e00c      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e00a      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014ee:	2305      	movs	r3, #5
 80014f0:	e008      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e004      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x21c>
 8001502:	2300      	movs	r3, #0
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	f002 0203 	and.w	r2, r2, #3
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	4093      	lsls	r3, r2
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001514:	4935      	ldr	r1, [pc, #212]	@ (80015ec <HAL_GPIO_Init+0x304>)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001522:	4b3a      	ldr	r3, [pc, #232]	@ (800160c <HAL_GPIO_Init+0x324>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001546:	4a31      	ldr	r2, [pc, #196]	@ (800160c <HAL_GPIO_Init+0x324>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800154c:	4b2f      	ldr	r3, [pc, #188]	@ (800160c <HAL_GPIO_Init+0x324>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001570:	4a26      	ldr	r2, [pc, #152]	@ (800160c <HAL_GPIO_Init+0x324>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001576:	4b25      	ldr	r3, [pc, #148]	@ (800160c <HAL_GPIO_Init+0x324>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800159a:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <HAL_GPIO_Init+0x324>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <HAL_GPIO_Init+0x324>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015c4:	4a11      	ldr	r2, [pc, #68]	@ (800160c <HAL_GPIO_Init+0x324>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	f67f ae96 	bls.w	8001304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3724      	adds	r7, #36	@ 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40013800 	.word	0x40013800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020400 	.word	0x40020400
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40021000 	.word	0x40021000
 8001604:	40021400 	.word	0x40021400
 8001608:	40021800 	.word	0x40021800
 800160c:	40013c00 	.word	0x40013c00

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800162c:	e003      	b.n	8001636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e12b      	b.n	80018ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff f85a 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2224      	movs	r2, #36	@ 0x24
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 0201 	bic.w	r2, r2, #1
 8001686:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001696:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016a8:	f001 f8b8 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 80016ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a81      	ldr	r2, [pc, #516]	@ (80018b8 <HAL_I2C_Init+0x274>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d807      	bhi.n	80016c8 <HAL_I2C_Init+0x84>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4a80      	ldr	r2, [pc, #512]	@ (80018bc <HAL_I2C_Init+0x278>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	bf94      	ite	ls
 80016c0:	2301      	movls	r3, #1
 80016c2:	2300      	movhi	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	e006      	b.n	80016d6 <HAL_I2C_Init+0x92>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4a7d      	ldr	r2, [pc, #500]	@ (80018c0 <HAL_I2C_Init+0x27c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	bf94      	ite	ls
 80016d0:	2301      	movls	r3, #1
 80016d2:	2300      	movhi	r3, #0
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0e7      	b.n	80018ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4a78      	ldr	r2, [pc, #480]	@ (80018c4 <HAL_I2C_Init+0x280>)
 80016e2:	fba2 2303 	umull	r2, r3, r2, r3
 80016e6:	0c9b      	lsrs	r3, r3, #18
 80016e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a6a      	ldr	r2, [pc, #424]	@ (80018b8 <HAL_I2C_Init+0x274>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d802      	bhi.n	8001718 <HAL_I2C_Init+0xd4>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	3301      	adds	r3, #1
 8001716:	e009      	b.n	800172c <HAL_I2C_Init+0xe8>
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	4a69      	ldr	r2, [pc, #420]	@ (80018c8 <HAL_I2C_Init+0x284>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	3301      	adds	r3, #1
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	430b      	orrs	r3, r1
 8001732:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800173e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	495c      	ldr	r1, [pc, #368]	@ (80018b8 <HAL_I2C_Init+0x274>)
 8001748:	428b      	cmp	r3, r1
 800174a:	d819      	bhi.n	8001780 <HAL_I2C_Init+0x13c>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1e59      	subs	r1, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fbb1 f3f3 	udiv	r3, r1, r3
 800175a:	1c59      	adds	r1, r3, #1
 800175c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001760:	400b      	ands	r3, r1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00a      	beq.n	800177c <HAL_I2C_Init+0x138>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1e59      	subs	r1, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fbb1 f3f3 	udiv	r3, r1, r3
 8001774:	3301      	adds	r3, #1
 8001776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177a:	e051      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 800177c:	2304      	movs	r3, #4
 800177e:	e04f      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d111      	bne.n	80017ac <HAL_I2C_Init+0x168>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1e58      	subs	r0, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	440b      	add	r3, r1
 8001796:	fbb0 f3f3 	udiv	r3, r0, r3
 800179a:	3301      	adds	r3, #1
 800179c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	e012      	b.n	80017d2 <HAL_I2C_Init+0x18e>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	0099      	lsls	r1, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf0c      	ite	eq
 80017cc:	2301      	moveq	r3, #1
 80017ce:	2300      	movne	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Init+0x196>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e022      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10e      	bne.n	8001800 <HAL_I2C_Init+0x1bc>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1e58      	subs	r0, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	440b      	add	r3, r1
 80017f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f4:	3301      	adds	r3, #1
 80017f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017fe:	e00f      	b.n	8001820 <HAL_I2C_Init+0x1dc>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1e58      	subs	r0, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	0099      	lsls	r1, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	fbb0 f3f3 	udiv	r3, r0, r3
 8001816:	3301      	adds	r3, #1
 8001818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	6809      	ldr	r1, [r1, #0]
 8001824:	4313      	orrs	r3, r2
 8001826:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800184e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6911      	ldr	r1, [r2, #16]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68d2      	ldr	r2, [r2, #12]
 800185a:	4311      	orrs	r1, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	430b      	orrs	r3, r1
 8001862:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695a      	ldr	r2, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	000186a0 	.word	0x000186a0
 80018bc:	001e847f 	.word	0x001e847f
 80018c0:	003d08ff 	.word	0x003d08ff
 80018c4:	431bde83 	.word	0x431bde83
 80018c8:	10624dd3 	.word	0x10624dd3

080018cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	461a      	mov	r2, r3
 80018d8:	460b      	mov	r3, r1
 80018da:	817b      	strh	r3, [r7, #10]
 80018dc:	4613      	mov	r3, r2
 80018de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018e0:	f7ff fb18 	bl	8000f14 <HAL_GetTick>
 80018e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b20      	cmp	r3, #32
 80018f0:	f040 80e0 	bne.w	8001ab4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2319      	movs	r3, #25
 80018fa:	2201      	movs	r2, #1
 80018fc:	4970      	ldr	r1, [pc, #448]	@ (8001ac0 <HAL_I2C_Master_Transmit+0x1f4>)
 80018fe:	68f8      	ldr	r0, [r7, #12]
 8001900:	f000 fc64 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800190a:	2302      	movs	r3, #2
 800190c:	e0d3      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_I2C_Master_Transmit+0x50>
 8001918:	2302      	movs	r3, #2
 800191a:	e0cc      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b01      	cmp	r3, #1
 8001930:	d007      	beq.n	8001942 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001950:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2221      	movs	r2, #33	@ 0x21
 8001956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2210      	movs	r2, #16
 800195e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	893a      	ldrh	r2, [r7, #8]
 8001972:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4a50      	ldr	r2, [pc, #320]	@ (8001ac4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001982:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001984:	8979      	ldrh	r1, [r7, #10]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 face 	bl	8001f2c <I2C_MasterRequestWrite>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e08d      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019b0:	e066      	b.n	8001a80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	6a39      	ldr	r1, [r7, #32]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 fd22 	bl	8002400 <I2C_WaitOnTXEFlagUntilTimeout>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00d      	beq.n	80019de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d107      	bne.n	80019da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06b      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d11b      	bne.n	8001a54 <HAL_I2C_Master_Transmit+0x188>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d017      	beq.n	8001a54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	6a39      	ldr	r1, [r7, #32]
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fd19 	bl	8002490 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00d      	beq.n	8001a80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d107      	bne.n	8001a7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e01a      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d194      	bne.n	80019b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	e000      	b.n	8001ab6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ab4:	2302      	movs	r3, #2
  }
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	00100002 	.word	0x00100002
 8001ac4:	ffff0000 	.word	0xffff0000

08001ac8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	@ 0x30
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	817b      	strh	r3, [r7, #10]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fa1a 	bl	8000f14 <HAL_GetTick>
 8001ae0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b20      	cmp	r3, #32
 8001aec:	f040 8217 	bne.w	8001f1e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2319      	movs	r3, #25
 8001af6:	2201      	movs	r2, #1
 8001af8:	497c      	ldr	r1, [pc, #496]	@ (8001cec <HAL_I2C_Master_Receive+0x224>)
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fb66 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001b06:	2302      	movs	r3, #2
 8001b08:	e20a      	b.n	8001f20 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_I2C_Master_Receive+0x50>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e203      	b.n	8001f20 <HAL_I2C_Master_Receive+0x458>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d007      	beq.n	8001b3e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2222      	movs	r2, #34	@ 0x22
 8001b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2210      	movs	r2, #16
 8001b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	893a      	ldrh	r2, [r7, #8]
 8001b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4a5c      	ldr	r2, [pc, #368]	@ (8001cf0 <HAL_I2C_Master_Receive+0x228>)
 8001b7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b80:	8979      	ldrh	r1, [r7, #10]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 fa52 	bl	8002030 <I2C_MasterRequestRead>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e1c4      	b.n	8001f20 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d113      	bne.n	8001bc6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	623b      	str	r3, [r7, #32]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	623b      	str	r3, [r7, #32]
 8001bb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e198      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d11b      	bne.n	8001c06 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e178      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d11b      	bne.n	8001c46 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	e158      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c6c:	e144      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	f200 80f1 	bhi.w	8001e5a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d123      	bne.n	8001cc8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 fc4b 	bl	8002520 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e145      	b.n	8001f20 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cc6:	e117      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d14e      	bne.n	8001d6e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4906      	ldr	r1, [pc, #24]	@ (8001cf4 <HAL_I2C_Master_Receive+0x22c>)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 fa76 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e11a      	b.n	8001f20 <HAL_I2C_Master_Receive+0x458>
 8001cea:	bf00      	nop
 8001cec:	00100002 	.word	0x00100002
 8001cf0:	ffff0000 	.word	0xffff0000
 8001cf4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d6c:	e0c4      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d74:	2200      	movs	r2, #0
 8001d76:	496c      	ldr	r1, [pc, #432]	@ (8001f28 <HAL_I2C_Master_Receive+0x460>)
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 fa27 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0cb      	b.n	8001f20 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4955      	ldr	r1, [pc, #340]	@ (8001f28 <HAL_I2C_Master_Receive+0x460>)
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 f9f9 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e09d      	b.n	8001f20 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e58:	e04e      	b.n	8001ef8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fb5e 	bl	8002520 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e058      	b.n	8001f20 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d124      	bne.n	8001ef8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d107      	bne.n	8001ec6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ec4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f47f aeb6 	bne.w	8001c6e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e000      	b.n	8001f20 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001f1e:	2302      	movs	r3, #2
  }
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3728      	adds	r7, #40	@ 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	00010004 	.word	0x00010004

08001f2c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f40:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d006      	beq.n	8001f56 <I2C_MasterRequestWrite+0x2a>
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d003      	beq.n	8001f56 <I2C_MasterRequestWrite+0x2a>
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f54:	d108      	bne.n	8001f68 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e00b      	b.n	8001f80 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d107      	bne.n	8001f80 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f91d 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fa6:	d103      	bne.n	8001fb0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e035      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fbc:	d108      	bne.n	8001fd0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	e01b      	b.n	8002008 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fd0:	897b      	ldrh	r3, [r7, #10]
 8001fd2:	11db      	asrs	r3, r3, #7
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f003 0306 	and.w	r3, r3, #6
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f063 030f 	orn	r3, r3, #15
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	490e      	ldr	r1, [pc, #56]	@ (8002028 <I2C_MasterRequestWrite+0xfc>)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f966 	bl	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e010      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4907      	ldr	r1, [pc, #28]	@ (800202c <I2C_MasterRequestWrite+0x100>)
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f956 	bl	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	00010008 	.word	0x00010008
 800202c:	00010002 	.word	0x00010002

08002030 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af02      	add	r7, sp, #8
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	603b      	str	r3, [r7, #0]
 800203c:	460b      	mov	r3, r1
 800203e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002044:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002054:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d006      	beq.n	800206a <I2C_MasterRequestRead+0x3a>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d003      	beq.n	800206a <I2C_MasterRequestRead+0x3a>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002068:	d108      	bne.n	800207c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e00b      	b.n	8002094 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	2b11      	cmp	r3, #17
 8002082:	d107      	bne.n	8002094 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002092:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f893 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020ba:	d103      	bne.n	80020c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e079      	b.n	80021bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80020d0:	d108      	bne.n	80020e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020d2:	897b      	ldrh	r3, [r7, #10]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	611a      	str	r2, [r3, #16]
 80020e2:	e05f      	b.n	80021a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020e4:	897b      	ldrh	r3, [r7, #10]
 80020e6:	11db      	asrs	r3, r3, #7
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f003 0306 	and.w	r3, r3, #6
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f063 030f 	orn	r3, r3, #15
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4930      	ldr	r1, [pc, #192]	@ (80021c4 <I2C_MasterRequestRead+0x194>)
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f8dc 	bl	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e054      	b.n	80021bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002112:	897b      	ldrh	r3, [r7, #10]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4929      	ldr	r1, [pc, #164]	@ (80021c8 <I2C_MasterRequestRead+0x198>)
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 f8cc 	bl	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e044      	b.n	80021bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002156:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f831 	bl	80021cc <I2C_WaitOnFlagUntilTimeout>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00d      	beq.n	800218c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800217e:	d103      	bne.n	8002188 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002186:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e017      	b.n	80021bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800218c:	897b      	ldrh	r3, [r7, #10]
 800218e:	11db      	asrs	r3, r3, #7
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f003 0306 	and.w	r3, r3, #6
 8002196:	b2db      	uxtb	r3, r3
 8002198:	f063 030e 	orn	r3, r3, #14
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4907      	ldr	r1, [pc, #28]	@ (80021c8 <I2C_MasterRequestRead+0x198>)
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f888 	bl	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	00010008 	.word	0x00010008
 80021c8:	00010002 	.word	0x00010002

080021cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021dc:	e048      	b.n	8002270 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021e4:	d044      	beq.n	8002270 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e6:	f7fe fe95 	bl	8000f14 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d302      	bcc.n	80021fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d139      	bne.n	8002270 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	0c1b      	lsrs	r3, r3, #16
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d10d      	bne.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	43da      	mvns	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4013      	ands	r3, r2
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	e00c      	b.n	800223c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	43da      	mvns	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	4013      	ands	r3, r2
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	429a      	cmp	r2, r3
 8002240:	d116      	bne.n	8002270 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e023      	b.n	80022b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	0c1b      	lsrs	r3, r3, #16
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b01      	cmp	r3, #1
 8002278:	d10d      	bne.n	8002296 <I2C_WaitOnFlagUntilTimeout+0xca>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	43da      	mvns	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4013      	ands	r3, r2
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf0c      	ite	eq
 800228c:	2301      	moveq	r3, #1
 800228e:	2300      	movne	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	e00c      	b.n	80022b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	43da      	mvns	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4013      	ands	r3, r2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d093      	beq.n	80021de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022ce:	e071      	b.n	80023b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022de:	d123      	bne.n	8002328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	f043 0204 	orr.w	r2, r3, #4
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e067      	b.n	80023f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800232e:	d041      	beq.n	80023b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002330:	f7fe fdf0 	bl	8000f14 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	429a      	cmp	r2, r3
 800233e:	d302      	bcc.n	8002346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d136      	bne.n	80023b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d10c      	bne.n	800236a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	4013      	ands	r3, r2
 800235c:	b29b      	uxth	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	e00b      	b.n	8002382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	43da      	mvns	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4013      	ands	r3, r2
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf14      	ite	ne
 800237c:	2301      	movne	r3, #1
 800237e:	2300      	moveq	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	f043 0220 	orr.w	r2, r3, #32
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e021      	b.n	80023f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	0c1b      	lsrs	r3, r3, #16
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d10c      	bne.n	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	43da      	mvns	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	4013      	ands	r3, r2
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e00b      	b.n	80023f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4013      	ands	r3, r2
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bf14      	ite	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	2300      	moveq	r3, #0
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f47f af6d 	bne.w	80022d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800240c:	e034      	b.n	8002478 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f8e3 	bl	80025da <I2C_IsAcknowledgeFailed>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e034      	b.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002424:	d028      	beq.n	8002478 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002426:	f7fe fd75 	bl	8000f14 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	d302      	bcc.n	800243c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d11d      	bne.n	8002478 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002446:	2b80      	cmp	r3, #128	@ 0x80
 8002448:	d016      	beq.n	8002478 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2220      	movs	r2, #32
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	f043 0220 	orr.w	r2, r3, #32
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e007      	b.n	8002488 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002482:	2b80      	cmp	r3, #128	@ 0x80
 8002484:	d1c3      	bne.n	800240e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800249c:	e034      	b.n	8002508 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f89b 	bl	80025da <I2C_IsAcknowledgeFailed>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e034      	b.n	8002518 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024b4:	d028      	beq.n	8002508 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b6:	f7fe fd2d 	bl	8000f14 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d302      	bcc.n	80024cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11d      	bne.n	8002508 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d016      	beq.n	8002508 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e007      	b.n	8002518 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b04      	cmp	r3, #4
 8002514:	d1c3      	bne.n	800249e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800252c:	e049      	b.n	80025c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b10      	cmp	r3, #16
 800253a:	d119      	bne.n	8002570 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0210 	mvn.w	r2, #16
 8002544:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e030      	b.n	80025d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002570:	f7fe fcd0 	bl	8000f14 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	429a      	cmp	r2, r3
 800257e:	d302      	bcc.n	8002586 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d11d      	bne.n	80025c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	d016      	beq.n	80025c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e007      	b.n	80025d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025cc:	2b40      	cmp	r3, #64	@ 0x40
 80025ce:	d1ae      	bne.n	800252e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f0:	d11b      	bne.n	800262a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f043 0204 	orr.w	r2, r3, #4
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0cc      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800264c:	4b68      	ldr	r3, [pc, #416]	@ (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d90c      	bls.n	8002674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b65      	ldr	r3, [pc, #404]	@ (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b63      	ldr	r3, [pc, #396]	@ (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0b8      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800268c:	4b59      	ldr	r3, [pc, #356]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a58      	ldr	r2, [pc, #352]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002696:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a4:	4b53      	ldr	r3, [pc, #332]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b0:	4b50      	ldr	r3, [pc, #320]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	494d      	ldr	r1, [pc, #308]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d044      	beq.n	8002758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b47      	ldr	r3, [pc, #284]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d119      	bne.n	8002716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e07f      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f6:	4b3f      	ldr	r3, [pc, #252]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d109      	bne.n	8002716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e06f      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	4b3b      	ldr	r3, [pc, #236]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e067      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b37      	ldr	r3, [pc, #220]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4934      	ldr	r1, [pc, #208]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002728:	f7fe fbf4 	bl	8000f14 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fe fbf0 	bl	8000f14 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e04f      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b2b      	ldr	r3, [pc, #172]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002758:	4b25      	ldr	r3, [pc, #148]	@ (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d20c      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e032      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4916      	ldr	r1, [pc, #88]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027aa:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	490e      	ldr	r1, [pc, #56]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027be:	f000 f887 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	490a      	ldr	r1, [pc, #40]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	5ccb      	ldrb	r3, [r1, r3]
 80027d2:	fa22 f303 	lsr.w	r3, r2, r3
 80027d6:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027da:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <HAL_RCC_ClockConfig+0x1c8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe f99e 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40023c00 	.word	0x40023c00
 80027f4:	40023800 	.word	0x40023800
 80027f8:	08003da8 	.word	0x08003da8
 80027fc:	20000004 	.word	0x20000004
 8002800:	20000008 	.word	0x20000008

08002804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	@ (800283c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	@ (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	08003db8 	.word	0x08003db8

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002848:	f7ff ffdc 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0b5b      	lsrs	r3, r3, #13
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	@ (8002868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	08003db8 	.word	0x08003db8

0800286c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	220f      	movs	r2, #15
 800287a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <HAL_RCC_GetClockConfig+0x5c>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002888:	4b0f      	ldr	r3, [pc, #60]	@ (80028c8 <HAL_RCC_GetClockConfig+0x5c>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002894:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <HAL_RCC_GetClockConfig+0x5c>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028a0:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <HAL_RCC_GetClockConfig+0x5c>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	08db      	lsrs	r3, r3, #3
 80028a6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <HAL_RCC_GetClockConfig+0x60>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 020f 	and.w	r2, r3, #15
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	601a      	str	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40023c00 	.word	0x40023c00

080028d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d4:	b0ae      	sub	sp, #184	@ 0xb8
 80028d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f6:	4bcb      	ldr	r3, [pc, #812]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x354>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	f200 8206 	bhi.w	8002d10 <HAL_RCC_GetSysClockFreq+0x440>
 8002904:	a201      	add	r2, pc, #4	@ (adr r2, 800290c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	08002941 	.word	0x08002941
 8002910:	08002d11 	.word	0x08002d11
 8002914:	08002d11 	.word	0x08002d11
 8002918:	08002d11 	.word	0x08002d11
 800291c:	08002949 	.word	0x08002949
 8002920:	08002d11 	.word	0x08002d11
 8002924:	08002d11 	.word	0x08002d11
 8002928:	08002d11 	.word	0x08002d11
 800292c:	08002951 	.word	0x08002951
 8002930:	08002d11 	.word	0x08002d11
 8002934:	08002d11 	.word	0x08002d11
 8002938:	08002d11 	.word	0x08002d11
 800293c:	08002b41 	.word	0x08002b41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002940:	4bb9      	ldr	r3, [pc, #740]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x358>)
 8002942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002946:	e1e7      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002948:	4bb8      	ldr	r3, [pc, #736]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x35c>)
 800294a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800294e:	e1e3      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002950:	4bb4      	ldr	r3, [pc, #720]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800295c:	4bb1      	ldr	r3, [pc, #708]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x354>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d071      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002968:	4bae      	ldr	r3, [pc, #696]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x354>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	099b      	lsrs	r3, r3, #6
 800296e:	2200      	movs	r2, #0
 8002970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002974:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002978:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800297c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002980:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800298a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800298e:	4622      	mov	r2, r4
 8002990:	462b      	mov	r3, r5
 8002992:	f04f 0000 	mov.w	r0, #0
 8002996:	f04f 0100 	mov.w	r1, #0
 800299a:	0159      	lsls	r1, r3, #5
 800299c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a0:	0150      	lsls	r0, r2, #5
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4621      	mov	r1, r4
 80029a8:	1a51      	subs	r1, r2, r1
 80029aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80029ac:	4629      	mov	r1, r5
 80029ae:	eb63 0301 	sbc.w	r3, r3, r1
 80029b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80029c0:	4649      	mov	r1, r9
 80029c2:	018b      	lsls	r3, r1, #6
 80029c4:	4641      	mov	r1, r8
 80029c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ca:	4641      	mov	r1, r8
 80029cc:	018a      	lsls	r2, r1, #6
 80029ce:	4641      	mov	r1, r8
 80029d0:	1a51      	subs	r1, r2, r1
 80029d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029d4:	4649      	mov	r1, r9
 80029d6:	eb63 0301 	sbc.w	r3, r3, r1
 80029da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80029e8:	4649      	mov	r1, r9
 80029ea:	00cb      	lsls	r3, r1, #3
 80029ec:	4641      	mov	r1, r8
 80029ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029f2:	4641      	mov	r1, r8
 80029f4:	00ca      	lsls	r2, r1, #3
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	4622      	mov	r2, r4
 80029fe:	189b      	adds	r3, r3, r2
 8002a00:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a02:	462b      	mov	r3, r5
 8002a04:	460a      	mov	r2, r1
 8002a06:	eb42 0303 	adc.w	r3, r2, r3
 8002a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a18:	4629      	mov	r1, r5
 8002a1a:	024b      	lsls	r3, r1, #9
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a22:	4621      	mov	r1, r4
 8002a24:	024a      	lsls	r2, r1, #9
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a38:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a3c:	f7fd fbe2 	bl	8000204 <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4613      	mov	r3, r2
 8002a46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a4a:	e067      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4c:	4b75      	ldr	r3, [pc, #468]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a58:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a66:	2300      	movs	r3, #0
 8002a68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a6a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002a6e:	4622      	mov	r2, r4
 8002a70:	462b      	mov	r3, r5
 8002a72:	f04f 0000 	mov.w	r0, #0
 8002a76:	f04f 0100 	mov.w	r1, #0
 8002a7a:	0159      	lsls	r1, r3, #5
 8002a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a80:	0150      	lsls	r0, r2, #5
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4621      	mov	r1, r4
 8002a88:	1a51      	subs	r1, r2, r1
 8002a8a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	018b      	lsls	r3, r1, #6
 8002aa4:	4641      	mov	r1, r8
 8002aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aaa:	4641      	mov	r1, r8
 8002aac:	018a      	lsls	r2, r1, #6
 8002aae:	4641      	mov	r1, r8
 8002ab0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002aba:	f04f 0200 	mov.w	r2, #0
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ac6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002aca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ace:	4692      	mov	sl, r2
 8002ad0:	469b      	mov	fp, r3
 8002ad2:	4623      	mov	r3, r4
 8002ad4:	eb1a 0303 	adds.w	r3, sl, r3
 8002ad8:	623b      	str	r3, [r7, #32]
 8002ada:	462b      	mov	r3, r5
 8002adc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002aee:	4629      	mov	r1, r5
 8002af0:	028b      	lsls	r3, r1, #10
 8002af2:	4621      	mov	r1, r4
 8002af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002af8:	4621      	mov	r1, r4
 8002afa:	028a      	lsls	r2, r1, #10
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b04:	2200      	movs	r2, #0
 8002b06:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b08:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b0e:	f7fd fb79 	bl	8000204 <__aeabi_uldivmod>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4613      	mov	r3, r2
 8002b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b1c:	4b41      	ldr	r3, [pc, #260]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	3301      	adds	r3, #1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002b2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b3e:	e0eb      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b40:	4b38      	ldr	r3, [pc, #224]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b4c:	4b35      	ldr	r3, [pc, #212]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d06b      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b58:	4b32      	ldr	r3, [pc, #200]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	099b      	lsrs	r3, r3, #6
 8002b5e:	2200      	movs	r2, #0
 8002b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002b74:	4622      	mov	r2, r4
 8002b76:	462b      	mov	r3, r5
 8002b78:	f04f 0000 	mov.w	r0, #0
 8002b7c:	f04f 0100 	mov.w	r1, #0
 8002b80:	0159      	lsls	r1, r3, #5
 8002b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b86:	0150      	lsls	r0, r2, #5
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	1a51      	subs	r1, r2, r1
 8002b90:	61b9      	str	r1, [r7, #24]
 8002b92:	4629      	mov	r1, r5
 8002b94:	eb63 0301 	sbc.w	r3, r3, r1
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ba6:	4659      	mov	r1, fp
 8002ba8:	018b      	lsls	r3, r1, #6
 8002baa:	4651      	mov	r1, sl
 8002bac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	018a      	lsls	r2, r1, #6
 8002bb4:	4651      	mov	r1, sl
 8002bb6:	ebb2 0801 	subs.w	r8, r2, r1
 8002bba:	4659      	mov	r1, fp
 8002bbc:	eb63 0901 	sbc.w	r9, r3, r1
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bcc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bd0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd4:	4690      	mov	r8, r2
 8002bd6:	4699      	mov	r9, r3
 8002bd8:	4623      	mov	r3, r4
 8002bda:	eb18 0303 	adds.w	r3, r8, r3
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	462b      	mov	r3, r5
 8002be2:	eb49 0303 	adc.w	r3, r9, r3
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	024b      	lsls	r3, r1, #9
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bfe:	4621      	mov	r1, r4
 8002c00:	024a      	lsls	r2, r1, #9
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c0e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c14:	f7fd faf6 	bl	8000204 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c22:	e065      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x420>
 8002c24:	40023800 	.word	0x40023800
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c30:	4b3d      	ldr	r3, [pc, #244]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	099b      	lsrs	r3, r3, #6
 8002c36:	2200      	movs	r2, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c40:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c42:	2300      	movs	r3, #0
 8002c44:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002c4a:	4642      	mov	r2, r8
 8002c4c:	464b      	mov	r3, r9
 8002c4e:	f04f 0000 	mov.w	r0, #0
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	0159      	lsls	r1, r3, #5
 8002c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5c:	0150      	lsls	r0, r2, #5
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4641      	mov	r1, r8
 8002c64:	1a51      	subs	r1, r2, r1
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	4649      	mov	r1, r9
 8002c6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	018b      	lsls	r3, r1, #6
 8002c80:	4651      	mov	r1, sl
 8002c82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c86:	4651      	mov	r1, sl
 8002c88:	018a      	lsls	r2, r1, #6
 8002c8a:	4651      	mov	r1, sl
 8002c8c:	1a54      	subs	r4, r2, r1
 8002c8e:	4659      	mov	r1, fp
 8002c90:	eb63 0501 	sbc.w	r5, r3, r1
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	00eb      	lsls	r3, r5, #3
 8002c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ca2:	00e2      	lsls	r2, r4, #3
 8002ca4:	4614      	mov	r4, r2
 8002ca6:	461d      	mov	r5, r3
 8002ca8:	4643      	mov	r3, r8
 8002caa:	18e3      	adds	r3, r4, r3
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	464b      	mov	r3, r9
 8002cb0:	eb45 0303 	adc.w	r3, r5, r3
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	028b      	lsls	r3, r1, #10
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ccc:	4621      	mov	r1, r4
 8002cce:	028a      	lsls	r2, r1, #10
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cd8:	2200      	movs	r2, #0
 8002cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cdc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002cde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ce2:	f7fd fa8f 	bl	8000204 <__aeabi_uldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4613      	mov	r3, r2
 8002cec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x458>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	0f1b      	lsrs	r3, r3, #28
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002cfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d0e:	e003      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	37b8      	adds	r7, #184	@ 0xb8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	00f42400 	.word	0x00f42400

08002d30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e28d      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8083 	beq.w	8002e56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d50:	4b94      	ldr	r3, [pc, #592]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d019      	beq.n	8002d90 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d5c:	4b91      	ldr	r3, [pc, #580]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d68:	4b8e      	ldr	r3, [pc, #568]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d74:	d00c      	beq.n	8002d90 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d76:	4b8b      	ldr	r3, [pc, #556]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d112      	bne.n	8002da8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d82:	4b88      	ldr	r3, [pc, #544]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d8e:	d10b      	bne.n	8002da8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	4b84      	ldr	r3, [pc, #528]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d05b      	beq.n	8002e54 <HAL_RCC_OscConfig+0x124>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d157      	bne.n	8002e54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e25a      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db0:	d106      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x90>
 8002db2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a7b      	ldr	r2, [pc, #492]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e01d      	b.n	8002dfc <HAL_RCC_OscConfig+0xcc>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0xb4>
 8002dca:	4b76      	ldr	r3, [pc, #472]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a75      	ldr	r2, [pc, #468]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b73      	ldr	r3, [pc, #460]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a72      	ldr	r2, [pc, #456]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0xcc>
 8002de4:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a6e      	ldr	r2, [pc, #440]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	4b6c      	ldr	r3, [pc, #432]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a6b      	ldr	r2, [pc, #428]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d013      	beq.n	8002e2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe f886 	bl	8000f14 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e0c:	f7fe f882 	bl	8000f14 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	@ 0x64
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e21f      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	4b61      	ldr	r3, [pc, #388]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0xdc>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe f872 	bl	8000f14 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e34:	f7fe f86e 	bl	8000f14 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b64      	cmp	r3, #100	@ 0x64
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e20b      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	4b57      	ldr	r3, [pc, #348]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x104>
 8002e52:	e000      	b.n	8002e56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d06f      	beq.n	8002f42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e62:	4b50      	ldr	r3, [pc, #320]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d017      	beq.n	8002e9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d105      	bne.n	8002e86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e86:	4b47      	ldr	r3, [pc, #284]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d11c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e92:	4b44      	ldr	r3, [pc, #272]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d116      	bne.n	8002ecc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9e:	4b41      	ldr	r3, [pc, #260]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x186>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e1d3      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4937      	ldr	r1, [pc, #220]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eca:	e03a      	b.n	8002f42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d020      	beq.n	8002f16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed4:	4b34      	ldr	r3, [pc, #208]	@ (8002fa8 <HAL_RCC_OscConfig+0x278>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fe f81b 	bl	8000f14 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee2:	f7fe f817 	bl	8000f14 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e1b4      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f00:	4b28      	ldr	r3, [pc, #160]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4925      	ldr	r1, [pc, #148]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
 8002f14:	e015      	b.n	8002f42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f16:	4b24      	ldr	r3, [pc, #144]	@ (8002fa8 <HAL_RCC_OscConfig+0x278>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fd fffa 	bl	8000f14 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f24:	f7fd fff6 	bl	8000f14 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e193      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d036      	beq.n	8002fbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d016      	beq.n	8002f84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f56:	4b15      	ldr	r3, [pc, #84]	@ (8002fac <HAL_RCC_OscConfig+0x27c>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7fd ffda 	bl	8000f14 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fd ffd6 	bl	8000f14 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e173      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <HAL_RCC_OscConfig+0x274>)
 8002f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x234>
 8002f82:	e01b      	b.n	8002fbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f84:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <HAL_RCC_OscConfig+0x27c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fd ffc3 	bl	8000f14 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f90:	e00e      	b.n	8002fb0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f92:	f7fd ffbf 	bl	8000f14 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d907      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e15c      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	42470000 	.word	0x42470000
 8002fac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	4b8a      	ldr	r3, [pc, #552]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8002fb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ea      	bne.n	8002f92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8097 	beq.w	80030f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fce:	4b83      	ldr	r3, [pc, #524]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10f      	bne.n	8002ffa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	4b7f      	ldr	r3, [pc, #508]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fea:	4b7c      	ldr	r3, [pc, #496]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffa:	4b79      	ldr	r3, [pc, #484]	@ (80031e0 <HAL_RCC_OscConfig+0x4b0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003002:	2b00      	cmp	r3, #0
 8003004:	d118      	bne.n	8003038 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003006:	4b76      	ldr	r3, [pc, #472]	@ (80031e0 <HAL_RCC_OscConfig+0x4b0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a75      	ldr	r2, [pc, #468]	@ (80031e0 <HAL_RCC_OscConfig+0x4b0>)
 800300c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003012:	f7fd ff7f 	bl	8000f14 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301a:	f7fd ff7b 	bl	8000f14 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e118      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	4b6c      	ldr	r3, [pc, #432]	@ (80031e0 <HAL_RCC_OscConfig+0x4b0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d106      	bne.n	800304e <HAL_RCC_OscConfig+0x31e>
 8003040:	4b66      	ldr	r3, [pc, #408]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003044:	4a65      	ldr	r2, [pc, #404]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	6713      	str	r3, [r2, #112]	@ 0x70
 800304c:	e01c      	b.n	8003088 <HAL_RCC_OscConfig+0x358>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b05      	cmp	r3, #5
 8003054:	d10c      	bne.n	8003070 <HAL_RCC_OscConfig+0x340>
 8003056:	4b61      	ldr	r3, [pc, #388]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305a:	4a60      	ldr	r2, [pc, #384]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	6713      	str	r3, [r2, #112]	@ 0x70
 8003062:	4b5e      	ldr	r3, [pc, #376]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003066:	4a5d      	ldr	r2, [pc, #372]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6713      	str	r3, [r2, #112]	@ 0x70
 800306e:	e00b      	b.n	8003088 <HAL_RCC_OscConfig+0x358>
 8003070:	4b5a      	ldr	r3, [pc, #360]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003074:	4a59      	ldr	r2, [pc, #356]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003076:	f023 0301 	bic.w	r3, r3, #1
 800307a:	6713      	str	r3, [r2, #112]	@ 0x70
 800307c:	4b57      	ldr	r3, [pc, #348]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003080:	4a56      	ldr	r2, [pc, #344]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003082:	f023 0304 	bic.w	r3, r3, #4
 8003086:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d015      	beq.n	80030bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fd ff40 	bl	8000f14 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003096:	e00a      	b.n	80030ae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003098:	f7fd ff3c 	bl	8000f14 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0d7      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ae:	4b4b      	ldr	r3, [pc, #300]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0ee      	beq.n	8003098 <HAL_RCC_OscConfig+0x368>
 80030ba:	e014      	b.n	80030e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fd ff2a 	bl	8000f14 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c2:	e00a      	b.n	80030da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c4:	f7fd ff26 	bl	8000f14 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e0c1      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030da:	4b40      	ldr	r3, [pc, #256]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1ee      	bne.n	80030c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ec:	4b3b      	ldr	r3, [pc, #236]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	4a3a      	ldr	r2, [pc, #232]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 80030f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80ad 	beq.w	800325c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003102:	4b36      	ldr	r3, [pc, #216]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b08      	cmp	r3, #8
 800310c:	d060      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d145      	bne.n	80031a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003116:	4b33      	ldr	r3, [pc, #204]	@ (80031e4 <HAL_RCC_OscConfig+0x4b4>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fd fefa 	bl	8000f14 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003124:	f7fd fef6 	bl	8000f14 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e093      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003136:	4b29      	ldr	r3, [pc, #164]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1f0      	bne.n	8003124 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69da      	ldr	r2, [r3, #28]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	019b      	lsls	r3, r3, #6
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	085b      	lsrs	r3, r3, #1
 800315a:	3b01      	subs	r3, #1
 800315c:	041b      	lsls	r3, r3, #16
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	061b      	lsls	r3, r3, #24
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316c:	071b      	lsls	r3, r3, #28
 800316e:	491b      	ldr	r1, [pc, #108]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003174:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <HAL_RCC_OscConfig+0x4b4>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fd fecb 	bl	8000f14 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003182:	f7fd fec7 	bl	8000f14 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e064      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003194:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x452>
 80031a0:	e05c      	b.n	800325c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a2:	4b10      	ldr	r3, [pc, #64]	@ (80031e4 <HAL_RCC_OscConfig+0x4b4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fd feb4 	bl	8000f14 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fd feb0 	bl	8000f14 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e04d      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <HAL_RCC_OscConfig+0x4ac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x480>
 80031ce:	e045      	b.n	800325c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e040      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40007000 	.word	0x40007000
 80031e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003268 <HAL_RCC_OscConfig+0x538>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d030      	beq.n	8003258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d129      	bne.n	8003258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d122      	bne.n	8003258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800321e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003220:	4293      	cmp	r3, r2
 8003222:	d119      	bne.n	8003258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	3b01      	subs	r3, #1
 8003232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d10f      	bne.n	8003258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800

0800326c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e041      	b.n	8003302 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f839 	bl	800330a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f000 f9c0 	bl	8003630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d001      	beq.n	8003338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e04e      	b.n	80033d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a23      	ldr	r2, [pc, #140]	@ (80033e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d022      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x80>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003362:	d01d      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x80>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1f      	ldr	r2, [pc, #124]	@ (80033e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d018      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x80>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a1e      	ldr	r2, [pc, #120]	@ (80033ec <HAL_TIM_Base_Start_IT+0xcc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x80>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1c      	ldr	r2, [pc, #112]	@ (80033f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00e      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x80>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1b      	ldr	r2, [pc, #108]	@ (80033f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x80>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a19      	ldr	r2, [pc, #100]	@ (80033f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d004      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0x80>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a18      	ldr	r2, [pc, #96]	@ (80033fc <HAL_TIM_Base_Start_IT+0xdc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d111      	bne.n	80033c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d010      	beq.n	80033d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0201 	orr.w	r2, r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c2:	e007      	b.n	80033d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40010000 	.word	0x40010000
 80033e8:	40000400 	.word	0x40000400
 80033ec:	40000800 	.word	0x40000800
 80033f0:	40000c00 	.word	0x40000c00
 80033f4:	40010400 	.word	0x40010400
 80033f8:	40014000 	.word	0x40014000
 80033fc:	40001800 	.word	0x40001800

08003400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d020      	beq.n	8003464 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01b      	beq.n	8003464 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0202 	mvn.w	r2, #2
 8003434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f8d2 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8c4 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f8d5 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	d020      	beq.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01b      	beq.n	80034b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0204 	mvn.w	r2, #4
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2202      	movs	r2, #2
 8003486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8ac 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f89e 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f8af 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d020      	beq.n	80034fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01b      	beq.n	80034fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0208 	mvn.w	r2, #8
 80034cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2204      	movs	r2, #4
 80034d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f886 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 80034e8:	e005      	b.n	80034f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f878 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f889 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d020      	beq.n	8003548 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01b      	beq.n	8003548 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0210 	mvn.w	r2, #16
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2208      	movs	r2, #8
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f860 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f852 	bl	80035e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f863 	bl	8003608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00c      	beq.n	800356c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0201 	mvn.w	r2, #1
 8003564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fd fa9a 	bl	8000aa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00c      	beq.n	8003590 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f906 	bl	800379c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f834 	bl	800361c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0220 	mvn.w	r2, #32
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8d8 	bl	8003788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a46      	ldr	r2, [pc, #280]	@ (800375c <TIM_Base_SetConfig+0x12c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d013      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800364e:	d00f      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a43      	ldr	r2, [pc, #268]	@ (8003760 <TIM_Base_SetConfig+0x130>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00b      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a42      	ldr	r2, [pc, #264]	@ (8003764 <TIM_Base_SetConfig+0x134>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d007      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a41      	ldr	r2, [pc, #260]	@ (8003768 <TIM_Base_SetConfig+0x138>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_Base_SetConfig+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a40      	ldr	r2, [pc, #256]	@ (800376c <TIM_Base_SetConfig+0x13c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d108      	bne.n	8003682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a35      	ldr	r2, [pc, #212]	@ (800375c <TIM_Base_SetConfig+0x12c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d02b      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003690:	d027      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a32      	ldr	r2, [pc, #200]	@ (8003760 <TIM_Base_SetConfig+0x130>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d023      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a31      	ldr	r2, [pc, #196]	@ (8003764 <TIM_Base_SetConfig+0x134>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01f      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a30      	ldr	r2, [pc, #192]	@ (8003768 <TIM_Base_SetConfig+0x138>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01b      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a2f      	ldr	r2, [pc, #188]	@ (800376c <TIM_Base_SetConfig+0x13c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d017      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003770 <TIM_Base_SetConfig+0x140>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a2d      	ldr	r2, [pc, #180]	@ (8003774 <TIM_Base_SetConfig+0x144>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00f      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003778 <TIM_Base_SetConfig+0x148>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00b      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2b      	ldr	r2, [pc, #172]	@ (800377c <TIM_Base_SetConfig+0x14c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d007      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003780 <TIM_Base_SetConfig+0x150>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d003      	beq.n	80036e2 <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a29      	ldr	r2, [pc, #164]	@ (8003784 <TIM_Base_SetConfig+0x154>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d108      	bne.n	80036f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a10      	ldr	r2, [pc, #64]	@ (800375c <TIM_Base_SetConfig+0x12c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_Base_SetConfig+0xf8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a12      	ldr	r2, [pc, #72]	@ (800376c <TIM_Base_SetConfig+0x13c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d103      	bne.n	8003730 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f023 0201 	bic.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	611a      	str	r2, [r3, #16]
  }
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800
 8003768:	40000c00 	.word	0x40000c00
 800376c:	40010400 	.word	0x40010400
 8003770:	40014000 	.word	0x40014000
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800
 800377c:	40001800 	.word	0x40001800
 8003780:	40001c00 	.word	0x40001c00
 8003784:	40002000 	.word	0x40002000

08003788 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e042      	b.n	8003848 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fd fabe 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	@ 0x24
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f82b 	bl	8003850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003808:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003818:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003828:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003854:	b0c0      	sub	sp, #256	@ 0x100
 8003856:	af00      	add	r7, sp, #0
 8003858:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	68d9      	ldr	r1, [r3, #12]
 800386e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	ea40 0301 	orr.w	r3, r0, r1
 8003878:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800387a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	431a      	orrs	r2, r3
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	431a      	orrs	r2, r3
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80038a8:	f021 010c 	bic.w	r1, r1, #12
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038b6:	430b      	orrs	r3, r1
 80038b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ca:	6999      	ldr	r1, [r3, #24]
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	ea40 0301 	orr.w	r3, r0, r1
 80038d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	4b8f      	ldr	r3, [pc, #572]	@ (8003b1c <UART_SetConfig+0x2cc>)
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d005      	beq.n	80038f0 <UART_SetConfig+0xa0>
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003b20 <UART_SetConfig+0x2d0>)
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d104      	bne.n	80038fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038f0:	f7fe ffa8 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 80038f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038f8:	e003      	b.n	8003902 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038fa:	f7fe ff8f 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 80038fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800390c:	f040 810c 	bne.w	8003b28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003914:	2200      	movs	r2, #0
 8003916:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800391a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800391e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003922:	4622      	mov	r2, r4
 8003924:	462b      	mov	r3, r5
 8003926:	1891      	adds	r1, r2, r2
 8003928:	65b9      	str	r1, [r7, #88]	@ 0x58
 800392a:	415b      	adcs	r3, r3
 800392c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800392e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003932:	4621      	mov	r1, r4
 8003934:	eb12 0801 	adds.w	r8, r2, r1
 8003938:	4629      	mov	r1, r5
 800393a:	eb43 0901 	adc.w	r9, r3, r1
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800394a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800394e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003952:	4690      	mov	r8, r2
 8003954:	4699      	mov	r9, r3
 8003956:	4623      	mov	r3, r4
 8003958:	eb18 0303 	adds.w	r3, r8, r3
 800395c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003960:	462b      	mov	r3, r5
 8003962:	eb49 0303 	adc.w	r3, r9, r3
 8003966:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003976:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800397a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800397e:	460b      	mov	r3, r1
 8003980:	18db      	adds	r3, r3, r3
 8003982:	653b      	str	r3, [r7, #80]	@ 0x50
 8003984:	4613      	mov	r3, r2
 8003986:	eb42 0303 	adc.w	r3, r2, r3
 800398a:	657b      	str	r3, [r7, #84]	@ 0x54
 800398c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003990:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003994:	f7fc fc36 	bl	8000204 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4b61      	ldr	r3, [pc, #388]	@ (8003b24 <UART_SetConfig+0x2d4>)
 800399e:	fba3 2302 	umull	r2, r3, r3, r2
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	011c      	lsls	r4, r3, #4
 80039a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039aa:	2200      	movs	r2, #0
 80039ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80039b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80039b8:	4642      	mov	r2, r8
 80039ba:	464b      	mov	r3, r9
 80039bc:	1891      	adds	r1, r2, r2
 80039be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80039c0:	415b      	adcs	r3, r3
 80039c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80039c8:	4641      	mov	r1, r8
 80039ca:	eb12 0a01 	adds.w	sl, r2, r1
 80039ce:	4649      	mov	r1, r9
 80039d0:	eb43 0b01 	adc.w	fp, r3, r1
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039e8:	4692      	mov	sl, r2
 80039ea:	469b      	mov	fp, r3
 80039ec:	4643      	mov	r3, r8
 80039ee:	eb1a 0303 	adds.w	r3, sl, r3
 80039f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039f6:	464b      	mov	r3, r9
 80039f8:	eb4b 0303 	adc.w	r3, fp, r3
 80039fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a14:	460b      	mov	r3, r1
 8003a16:	18db      	adds	r3, r3, r3
 8003a18:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	eb42 0303 	adc.w	r3, r2, r3
 8003a20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a2a:	f7fc fbeb 	bl	8000204 <__aeabi_uldivmod>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	4b3b      	ldr	r3, [pc, #236]	@ (8003b24 <UART_SetConfig+0x2d4>)
 8003a36:	fba3 2301 	umull	r2, r3, r3, r1
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	2264      	movs	r2, #100	@ 0x64
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	1acb      	subs	r3, r1, r3
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a4a:	4b36      	ldr	r3, [pc, #216]	@ (8003b24 <UART_SetConfig+0x2d4>)
 8003a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a58:	441c      	add	r4, r3
 8003a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	464b      	mov	r3, r9
 8003a70:	1891      	adds	r1, r2, r2
 8003a72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a74:	415b      	adcs	r3, r3
 8003a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a7c:	4641      	mov	r1, r8
 8003a7e:	1851      	adds	r1, r2, r1
 8003a80:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a82:	4649      	mov	r1, r9
 8003a84:	414b      	adcs	r3, r1
 8003a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a94:	4659      	mov	r1, fp
 8003a96:	00cb      	lsls	r3, r1, #3
 8003a98:	4651      	mov	r1, sl
 8003a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a9e:	4651      	mov	r1, sl
 8003aa0:	00ca      	lsls	r2, r1, #3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4642      	mov	r2, r8
 8003aaa:	189b      	adds	r3, r3, r2
 8003aac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	460a      	mov	r2, r1
 8003ab4:	eb42 0303 	adc.w	r3, r2, r3
 8003ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ac8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003acc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	18db      	adds	r3, r3, r3
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	eb42 0303 	adc.w	r3, r2, r3
 8003adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ae2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003ae6:	f7fc fb8d 	bl	8000204 <__aeabi_uldivmod>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <UART_SetConfig+0x2d4>)
 8003af0:	fba3 1302 	umull	r1, r3, r3, r2
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	2164      	movs	r1, #100	@ 0x64
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	3332      	adds	r3, #50	@ 0x32
 8003b02:	4a08      	ldr	r2, [pc, #32]	@ (8003b24 <UART_SetConfig+0x2d4>)
 8003b04:	fba2 2303 	umull	r2, r3, r2, r3
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	f003 0207 	and.w	r2, r3, #7
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4422      	add	r2, r4
 8003b16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b18:	e106      	b.n	8003d28 <UART_SetConfig+0x4d8>
 8003b1a:	bf00      	nop
 8003b1c:	40011000 	.word	0x40011000
 8003b20:	40011400 	.word	0x40011400
 8003b24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b3a:	4642      	mov	r2, r8
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	1891      	adds	r1, r2, r2
 8003b40:	6239      	str	r1, [r7, #32]
 8003b42:	415b      	adcs	r3, r3
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b4a:	4641      	mov	r1, r8
 8003b4c:	1854      	adds	r4, r2, r1
 8003b4e:	4649      	mov	r1, r9
 8003b50:	eb43 0501 	adc.w	r5, r3, r1
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	00eb      	lsls	r3, r5, #3
 8003b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b62:	00e2      	lsls	r2, r4, #3
 8003b64:	4614      	mov	r4, r2
 8003b66:	461d      	mov	r5, r3
 8003b68:	4643      	mov	r3, r8
 8003b6a:	18e3      	adds	r3, r4, r3
 8003b6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b70:	464b      	mov	r3, r9
 8003b72:	eb45 0303 	adc.w	r3, r5, r3
 8003b76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b96:	4629      	mov	r1, r5
 8003b98:	008b      	lsls	r3, r1, #2
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	008a      	lsls	r2, r1, #2
 8003ba4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ba8:	f7fc fb2c 	bl	8000204 <__aeabi_uldivmod>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4b60      	ldr	r3, [pc, #384]	@ (8003d34 <UART_SetConfig+0x4e4>)
 8003bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	011c      	lsls	r4, r3, #4
 8003bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003bc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003bcc:	4642      	mov	r2, r8
 8003bce:	464b      	mov	r3, r9
 8003bd0:	1891      	adds	r1, r2, r2
 8003bd2:	61b9      	str	r1, [r7, #24]
 8003bd4:	415b      	adcs	r3, r3
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bdc:	4641      	mov	r1, r8
 8003bde:	1851      	adds	r1, r2, r1
 8003be0:	6139      	str	r1, [r7, #16]
 8003be2:	4649      	mov	r1, r9
 8003be4:	414b      	adcs	r3, r1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bf4:	4659      	mov	r1, fp
 8003bf6:	00cb      	lsls	r3, r1, #3
 8003bf8:	4651      	mov	r1, sl
 8003bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bfe:	4651      	mov	r1, sl
 8003c00:	00ca      	lsls	r2, r1, #3
 8003c02:	4610      	mov	r0, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	4642      	mov	r2, r8
 8003c0a:	189b      	adds	r3, r3, r2
 8003c0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c10:	464b      	mov	r3, r9
 8003c12:	460a      	mov	r2, r1
 8003c14:	eb42 0303 	adc.w	r3, r2, r3
 8003c18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c34:	4649      	mov	r1, r9
 8003c36:	008b      	lsls	r3, r1, #2
 8003c38:	4641      	mov	r1, r8
 8003c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c3e:	4641      	mov	r1, r8
 8003c40:	008a      	lsls	r2, r1, #2
 8003c42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c46:	f7fc fadd 	bl	8000204 <__aeabi_uldivmod>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4b38      	ldr	r3, [pc, #224]	@ (8003d34 <UART_SetConfig+0x4e4>)
 8003c52:	fba3 2301 	umull	r2, r3, r3, r1
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2264      	movs	r2, #100	@ 0x64
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	1acb      	subs	r3, r1, r3
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	3332      	adds	r3, #50	@ 0x32
 8003c64:	4a33      	ldr	r2, [pc, #204]	@ (8003d34 <UART_SetConfig+0x4e4>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c70:	441c      	add	r4, r3
 8003c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c76:	2200      	movs	r2, #0
 8003c78:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c80:	4642      	mov	r2, r8
 8003c82:	464b      	mov	r3, r9
 8003c84:	1891      	adds	r1, r2, r2
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	415b      	adcs	r3, r3
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c90:	4641      	mov	r1, r8
 8003c92:	1851      	adds	r1, r2, r1
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	4649      	mov	r1, r9
 8003c98:	414b      	adcs	r3, r1
 8003c9a:	607b      	str	r3, [r7, #4]
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ca8:	4659      	mov	r1, fp
 8003caa:	00cb      	lsls	r3, r1, #3
 8003cac:	4651      	mov	r1, sl
 8003cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cb2:	4651      	mov	r1, sl
 8003cb4:	00ca      	lsls	r2, r1, #3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4603      	mov	r3, r0
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	189b      	adds	r3, r3, r2
 8003cc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	460a      	mov	r2, r1
 8003cc6:	eb42 0303 	adc.w	r3, r2, r3
 8003cca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cd6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ce4:	4649      	mov	r1, r9
 8003ce6:	008b      	lsls	r3, r1, #2
 8003ce8:	4641      	mov	r1, r8
 8003cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cee:	4641      	mov	r1, r8
 8003cf0:	008a      	lsls	r2, r1, #2
 8003cf2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003cf6:	f7fc fa85 	bl	8000204 <__aeabi_uldivmod>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003d34 <UART_SetConfig+0x4e4>)
 8003d00:	fba3 1302 	umull	r1, r3, r3, r2
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	2164      	movs	r1, #100	@ 0x64
 8003d08:	fb01 f303 	mul.w	r3, r1, r3
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	3332      	adds	r3, #50	@ 0x32
 8003d12:	4a08      	ldr	r2, [pc, #32]	@ (8003d34 <UART_SetConfig+0x4e4>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	f003 020f 	and.w	r2, r3, #15
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4422      	add	r2, r4
 8003d26:	609a      	str	r2, [r3, #8]
}
 8003d28:	bf00      	nop
 8003d2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d34:	51eb851f 	.word	0x51eb851f

08003d38 <memset>:
 8003d38:	4402      	add	r2, r0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d100      	bne.n	8003d42 <memset+0xa>
 8003d40:	4770      	bx	lr
 8003d42:	f803 1b01 	strb.w	r1, [r3], #1
 8003d46:	e7f9      	b.n	8003d3c <memset+0x4>

08003d48 <__libc_init_array>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8003d80 <__libc_init_array+0x38>)
 8003d4c:	4c0d      	ldr	r4, [pc, #52]	@ (8003d84 <__libc_init_array+0x3c>)
 8003d4e:	1b64      	subs	r4, r4, r5
 8003d50:	10a4      	asrs	r4, r4, #2
 8003d52:	2600      	movs	r6, #0
 8003d54:	42a6      	cmp	r6, r4
 8003d56:	d109      	bne.n	8003d6c <__libc_init_array+0x24>
 8003d58:	4d0b      	ldr	r5, [pc, #44]	@ (8003d88 <__libc_init_array+0x40>)
 8003d5a:	4c0c      	ldr	r4, [pc, #48]	@ (8003d8c <__libc_init_array+0x44>)
 8003d5c:	f000 f818 	bl	8003d90 <_init>
 8003d60:	1b64      	subs	r4, r4, r5
 8003d62:	10a4      	asrs	r4, r4, #2
 8003d64:	2600      	movs	r6, #0
 8003d66:	42a6      	cmp	r6, r4
 8003d68:	d105      	bne.n	8003d76 <__libc_init_array+0x2e>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d70:	4798      	blx	r3
 8003d72:	3601      	adds	r6, #1
 8003d74:	e7ee      	b.n	8003d54 <__libc_init_array+0xc>
 8003d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d7a:	4798      	blx	r3
 8003d7c:	3601      	adds	r6, #1
 8003d7e:	e7f2      	b.n	8003d66 <__libc_init_array+0x1e>
 8003d80:	08003dc8 	.word	0x08003dc8
 8003d84:	08003dc8 	.word	0x08003dc8
 8003d88:	08003dc8 	.word	0x08003dc8
 8003d8c:	08003dcc 	.word	0x08003dcc

08003d90 <_init>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	bf00      	nop
 8003d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d96:	bc08      	pop	{r3}
 8003d98:	469e      	mov	lr, r3
 8003d9a:	4770      	bx	lr

08003d9c <_fini>:
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9e:	bf00      	nop
 8003da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da2:	bc08      	pop	{r3}
 8003da4:	469e      	mov	lr, r3
 8003da6:	4770      	bx	lr
