
TP_BusReseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080045b4  080045b4  000055b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800466c  0800466c  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  0800466c  0800466c  0000566c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004674  08004674  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004674  08004674  00005674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004678  08004678  00005678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800467c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  080046e4  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080046e4  00006274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af95  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a46  00000000  00000000  0001102d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  00012a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f3  00000000  00000000  000134a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022055  00000000  00000000  00013c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d94a  00000000  00000000  00035cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc99f  00000000  00000000  0004363a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ffd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000319c  00000000  00000000  0011001c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001131b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800459c 	.word	0x0800459c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800459c 	.word	0x0800459c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b090      	sub	sp, #64	@ 0x40
 80005a4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a6:	f000 fbb1 	bl	8000d0c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005aa:	f000 f89d 	bl	80006e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ae:	f000 f961 	bl	8000874 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005b2:	f000 f935 	bl	8000820 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80005b6:	f000 f905 	bl	80007c4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	// on récupère l'id

	uint8_t bmp280_id = 0; // la variable qui va stocker la valeur renvoyée par le capteur
 80005ba:	2300      	movs	r3, #0
 80005bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t bmp280_addr_id = 0xD0; // l'adresse du registre contenant l'ID
 80005c0:	23d0      	movs	r3, #208	@ 0xd0
 80005c2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint16_t bmp280_addr_shifted = BMP280_ADDR << 1; // adresse du composant contenant l'id,
 80005c6:	23ee      	movs	r3, #238	@ 0xee
 80005c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
													//cette adresse est décalée de 1 bit (voir ennoncé)

	HAL_I2C_Master_Transmit(&hi2c1, bmp280_addr_shifted, &bmp280_addr_id, 1, 1000); // on envoie l'adresse du registre qu'on veut récupérer
 80005ca:	f107 0229 	add.w	r2, r7, #41	@ 0x29
 80005ce:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80005d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2301      	movs	r3, #1
 80005d8:	483f      	ldr	r0, [pc, #252]	@ (80006d8 <main+0x138>)
 80005da:	f001 f805 	bl	80015e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, bmp280_addr_shifted, &bmp280_id, 1, 1000);
 80005de:	f107 022a 	add.w	r2, r7, #42	@ 0x2a
 80005e2:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80005e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	483a      	ldr	r0, [pc, #232]	@ (80006d8 <main+0x138>)
 80005ee:	f001 f8f9 	bl	80017e4 <HAL_I2C_Master_Receive>
	//--------------------------------------------------------------------------------------------

	// on configure

	uint8_t bmp280_addr_crtl_meas = 0xF4; // adresse du registre contenant le controle des mesures
 80005f2:	23f4      	movs	r3, #244	@ 0xf4
 80005f4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bmp280_config_crtl_meas = 0x57; // la valeur de la configuration à appliquer
 80005f8:	2357      	movs	r3, #87	@ 0x57
 80005fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	uint8_t bmp280_crtl_meas_buffer[2]={bmp280_addr_crtl_meas,bmp280_config_crtl_meas};
 80005fe:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000602:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000606:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800060a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint16_t value = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	847b      	strh	r3, [r7, #34]	@ 0x22

	// on envoie la configuration

	HAL_I2C_Master_Transmit(&hi2c1, bmp280_addr_shifted, &bmp280_crtl_meas_buffer, 2, 1000);
 8000612:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000616:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8000618:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2302      	movs	r3, #2
 8000620:	482d      	ldr	r0, [pc, #180]	@ (80006d8 <main+0x138>)
 8000622:	f000 ffe1 	bl	80015e8 <HAL_I2C_Master_Transmit>
	// on envoie buffer avec adresse du registre puis valeur a y écrire

	// Pour vérification
	HAL_I2C_Master_Receive(&hi2c1, bmp280_addr_shifted, &value, 1, 1000);
 8000626:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 800062a:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 800062c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2301      	movs	r3, #1
 8000634:	4828      	ldr	r0, [pc, #160]	@ (80006d8 <main+0x138>)
 8000636:	f001 f8d5 	bl	80017e4 <HAL_I2C_Master_Receive>
	//--------------------------------------------------------------------------------------------

	// Récupération de l'étalonnage, de la température et de la pression
	uint8_t calibration_buffer[CALIBRATION_BUFFER_SIZE];
	uint8_t first_calibration_addr = 0x88;
 800063a:	2388      	movs	r3, #136	@ 0x88
 800063c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t current_calibration_addr = first_calibration_addr; // variable qu'on va incrementer pour récup toutes les adresses
 8000640:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000644:	71fb      	strb	r3, [r7, #7]
	uint8_t calibration_value;

	for(int i = 0; i < CALIBRATION_BUFFER_SIZE; i++)
 8000646:	2300      	movs	r3, #0
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
 800064a:	e01f      	b.n	800068c <main+0xec>
	{
		HAL_I2C_Master_Transmit(&hi2c1, bmp280_addr_shifted, &current_calibration_addr, 1, 1000); // on demande à récup la valeur de l'adresse courante
 800064c:	1dfa      	adds	r2, r7, #7
 800064e:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8000650:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2301      	movs	r3, #1
 8000658:	481f      	ldr	r0, [pc, #124]	@ (80006d8 <main+0x138>)
 800065a:	f000 ffc5 	bl	80015e8 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, bmp280_addr_shifted, &calibration_value, 1, 1000); // on récupère la valeur de la calibration de l'adresse courante
 800065e:	1dba      	adds	r2, r7, #6
 8000660:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8000662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	481b      	ldr	r0, [pc, #108]	@ (80006d8 <main+0x138>)
 800066c:	f001 f8ba 	bl	80017e4 <HAL_I2C_Master_Receive>
		calibration_buffer[i] = calibration_value; // on la range dans le buffer
 8000670:	79b9      	ldrb	r1, [r7, #6]
 8000672:	f107 0208 	add.w	r2, r7, #8
 8000676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000678:	4413      	add	r3, r2
 800067a:	460a      	mov	r2, r1
 800067c:	701a      	strb	r2, [r3, #0]
		current_calibration_addr++; // on incrémente l'adresse
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	3301      	adds	r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < CALIBRATION_BUFFER_SIZE; i++)
 8000686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000688:	3301      	adds	r3, #1
 800068a:	637b      	str	r3, [r7, #52]	@ 0x34
 800068c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800068e:	2b18      	cmp	r3, #24
 8000690:	dddc      	ble.n	800064c <main+0xac>
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */

		printf("la valeur de l'id est %d\r\n", bmp280_id);
 8000692:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000696:	4619      	mov	r1, r3
 8000698:	4810      	ldr	r0, [pc, #64]	@ (80006dc <main+0x13c>)
 800069a:	f003 f911 	bl	80038c0 <iprintf>
		printf("la valeur de la configuration est %d\r\n", value);
 800069e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80006a0:	4619      	mov	r1, r3
 80006a2:	480f      	ldr	r0, [pc, #60]	@ (80006e0 <main+0x140>)
 80006a4:	f003 f90c 	bl	80038c0 <iprintf>
		for (int i = 0; i < CALIBRATION_BUFFER_SIZE; i++)
 80006a8:	2300      	movs	r3, #0
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80006ac:	e00b      	b.n	80006c6 <main+0x126>
		{
			printf("la valeur de la calibration est %d\r\n", calibration_buffer[i]);
 80006ae:	f107 0208 	add.w	r2, r7, #8
 80006b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <main+0x144>)
 80006bc:	f003 f900 	bl	80038c0 <iprintf>
		for (int i = 0; i < CALIBRATION_BUFFER_SIZE; i++)
 80006c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006c2:	3301      	adds	r3, #1
 80006c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80006c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006c8:	2b18      	cmp	r3, #24
 80006ca:	ddf0      	ble.n	80006ae <main+0x10e>
		}
		HAL_Delay(10000);
 80006cc:	f242 7010 	movw	r0, #10000	@ 0x2710
 80006d0:	f000 fb8e 	bl	8000df0 <HAL_Delay>
	{
 80006d4:	e7dd      	b.n	8000692 <main+0xf2>
 80006d6:	bf00      	nop
 80006d8:	20000084 	.word	0x20000084
 80006dc:	080045b4 	.word	0x080045b4
 80006e0:	080045d0 	.word	0x080045d0
 80006e4:	080045f8 	.word	0x080045f8

080006e8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	@ 0x50
 80006ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2234      	movs	r2, #52	@ 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 f937 	bl	800396a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	4b2a      	ldr	r3, [pc, #168]	@ (80007bc <SystemClock_Config+0xd4>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	4a29      	ldr	r2, [pc, #164]	@ (80007bc <SystemClock_Config+0xd4>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	@ 0x40
 800071c:	4b27      	ldr	r3, [pc, #156]	@ (80007bc <SystemClock_Config+0xd4>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	4b24      	ldr	r3, [pc, #144]	@ (80007c0 <SystemClock_Config+0xd8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000734:	4a22      	ldr	r2, [pc, #136]	@ (80007c0 <SystemClock_Config+0xd8>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b20      	ldr	r3, [pc, #128]	@ (80007c0 <SystemClock_Config+0xd8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 800075c:	2310      	movs	r3, #16
 800075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000760:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000764:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000766:	2304      	movs	r3, #4
 8000768:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4618      	mov	r0, r3
 8000778:	f002 f936 	bl	80029e8 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000782:	f000 f8e5 	bl	8000950 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2302      	movs	r3, #2
 800078c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000796:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2102      	movs	r1, #2
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fdd6 	bl	8002354 <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xca>
	{
		Error_Handler();
 80007ae:	f000 f8cf 	bl	8000950 <Error_Handler>
	}
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	@ 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007ca:	4a13      	ldr	r2, [pc, #76]	@ (8000818 <MX_I2C1_Init+0x54>)
 80007cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007d0:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_I2C1_Init+0x58>)
 80007d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007e6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	@ (8000814 <MX_I2C1_Init+0x50>)
 8000802:	f000 fdad 	bl	8001360 <HAL_I2C_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800080c:	f000 f8a0 	bl	8000950 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000084 	.word	0x20000084
 8000818:	40005400 	.word	0x40005400
 800081c:	000186a0 	.word	0x000186a0

08000820 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f002 fb64 	bl	8002f24 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000862:	f000 f875 	bl	8000950 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200000d8 	.word	0x200000d8
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b2d      	ldr	r3, [pc, #180]	@ (8000944 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a2c      	ldr	r2, [pc, #176]	@ (8000944 <MX_GPIO_Init+0xd0>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b2a      	ldr	r3, [pc, #168]	@ (8000944 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b26      	ldr	r3, [pc, #152]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a25      	ldr	r2, [pc, #148]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b23      	ldr	r3, [pc, #140]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	4812      	ldr	r0, [pc, #72]	@ (8000948 <MX_GPIO_Init+0xd4>)
 8000900:	f000 fd14 	bl	800132c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000908:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800090e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	480c      	ldr	r0, [pc, #48]	@ (800094c <MX_GPIO_Init+0xd8>)
 800091c:	f000 fb72 	bl	8001004 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000920:	2320      	movs	r3, #32
 8000922:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_GPIO_Init+0xd4>)
 8000938:	f000 fb64 	bl	8001004 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	@ 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020800 	.word	0x40020800

08000950 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <Error_Handler+0x8>

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800096a:	4a0f      	ldr	r2, [pc, #60]	@ (80009a8 <HAL_MspInit+0x4c>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000970:	6453      	str	r3, [r2, #68]	@ 0x44
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a08      	ldr	r2, [pc, #32]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800099a:	2007      	movs	r0, #7
 800099c:	f000 fafe 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a19      	ldr	r2, [pc, #100]	@ (8000a30 <HAL_I2C_MspInit+0x84>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d12c      	bne.n	8000a28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a17      	ldr	r2, [pc, #92]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f0:	2312      	movs	r3, #18
 80009f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <HAL_I2C_MspInit+0x8c>)
 8000a08:	f000 fafc 	bl	8001004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a14:	4a07      	ldr	r2, [pc, #28]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 8000a16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1c:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <HAL_I2C_MspInit+0x88>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a28:	bf00      	nop
 8000a2a:	3728      	adds	r7, #40	@ 0x28
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40005400 	.word	0x40005400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020400 	.word	0x40020400

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a19      	ldr	r2, [pc, #100]	@ (8000ac0 <HAL_UART_MspInit+0x84>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d12b      	bne.n	8000ab6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a10      	ldr	r2, [pc, #64]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <HAL_UART_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a96:	230c      	movs	r3, #12
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <HAL_UART_MspInit+0x8c>)
 8000ab2:	f000 faa7 	bl	8001004 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000

08000acc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000ad4:	1d39      	adds	r1, r7, #4
 8000ad6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ada:	2201      	movs	r2, #1
 8000adc:	4803      	ldr	r0, [pc, #12]	@ (8000aec <__io_putchar+0x20>)
 8000ade:	f002 fa71 	bl	8002fc4 <HAL_UART_Transmit>

  return ch;
 8000ae2:	687b      	ldr	r3, [r7, #4]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000d8 	.word	0x200000d8

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b46:	f000 f933 	bl	8000db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b086      	sub	sp, #24
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	e00a      	b.n	8000b76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b60:	f3af 8000 	nop.w
 8000b64:	4601      	mov	r1, r0
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	60ba      	str	r2, [r7, #8]
 8000b6c:	b2ca      	uxtb	r2, r1
 8000b6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3301      	adds	r3, #1
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	dbf0      	blt.n	8000b60 <_read+0x12>
  }

  return len;
 8000b7e:	687b      	ldr	r3, [r7, #4]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e009      	b.n	8000bae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	60ba      	str	r2, [r7, #8]
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff92 	bl	8000acc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbf1      	blt.n	8000b9a <_write+0x12>
  }
  return len;
 8000bb6:	687b      	ldr	r3, [r7, #4]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_close>:

int _close(int file)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_isatty>:

int _isatty(int file)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b085      	sub	sp, #20
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f002 fed6 	bl	8003a08 <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20020000 	.word	0x20020000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	20000120 	.word	0x20000120
 8000c90:	20000278 	.word	0x20000278

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cbc:	f7ff ffea 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	@ (8000cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f002 fe95 	bl	8003a14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fc59 	bl	80005a0 <main>
  bx  lr    
 8000cee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cfc:	0800467c 	.word	0x0800467c
  ldr r2, =_sbss
 8000d00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d04:	20000274 	.word	0x20000274

08000d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <HAL_Init+0x40>)
 8000d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <HAL_Init+0x40>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <HAL_Init+0x40>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f931 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 f808 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff fe0c 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023c00 	.word	0x40023c00

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_InitTick+0x54>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <HAL_InitTick+0x58>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f93b 	bl	8000fea <HAL_SYSTICK_Config>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00e      	b.n	8000d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b0f      	cmp	r3, #15
 8000d82:	d80a      	bhi.n	8000d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d84:	2200      	movs	r2, #0
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f000 f911 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d90:	4a06      	ldr	r2, [pc, #24]	@ (8000dac <HAL_InitTick+0x5c>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000000 	.word	0x20000000
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000004 	.word	0x20000004

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	@ (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000124 	.word	0x20000124

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	@ (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000124 	.word	0x20000124

08000df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df8:	f7ff ffee 	bl	8000dd8 <HAL_GetTick>
 8000dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_Delay+0x44>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e16:	bf00      	nop
 8000e18:	f7ff ffde 	bl	8000dd8 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f7      	bhi.n	8000e18 <HAL_Delay+0x28>
  {
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008

08000e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e48:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e54:	4013      	ands	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6a:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	60d3      	str	r3, [r2, #12]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e84:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <__NVIC_GetPriorityGrouping+0x18>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	0a1b      	lsrs	r3, r3, #8
 8000e8a:	f003 0307 	and.w	r3, r3, #7
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	@ (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	@ (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	@ 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	@ 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff47 	bl	8000e38 <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff5c 	bl	8000e80 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ffb0 	bl	8000f58 <SysTick_Config>
 8000ff8:	4603      	mov	r3, r0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
 800101e:	e165      	b.n	80012ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	429a      	cmp	r2, r3
 800103a:	f040 8154 	bne.w	80012e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001052:	2b02      	cmp	r3, #2
 8001054:	d130      	bne.n	80010b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800108c:	2201      	movs	r2, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 0201 	and.w	r2, r3, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d017      	beq.n	80010f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d123      	bne.n	8001148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	69b9      	ldr	r1, [r7, #24]
 8001144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0203 	and.w	r2, r3, #3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80ae 	beq.w	80012e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b5d      	ldr	r3, [pc, #372]	@ (8001304 <HAL_GPIO_Init+0x300>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a5c      	ldr	r2, [pc, #368]	@ (8001304 <HAL_GPIO_Init+0x300>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b5a      	ldr	r3, [pc, #360]	@ (8001304 <HAL_GPIO_Init+0x300>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011a6:	4a58      	ldr	r2, [pc, #352]	@ (8001308 <HAL_GPIO_Init+0x304>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3302      	adds	r3, #2
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4f      	ldr	r2, [pc, #316]	@ (800130c <HAL_GPIO_Init+0x308>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d025      	beq.n	800121e <HAL_GPIO_Init+0x21a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001310 <HAL_GPIO_Init+0x30c>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d01f      	beq.n	800121a <HAL_GPIO_Init+0x216>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001314 <HAL_GPIO_Init+0x310>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d019      	beq.n	8001216 <HAL_GPIO_Init+0x212>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001318 <HAL_GPIO_Init+0x314>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0x20e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4b      	ldr	r2, [pc, #300]	@ (800131c <HAL_GPIO_Init+0x318>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00d      	beq.n	800120e <HAL_GPIO_Init+0x20a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001320 <HAL_GPIO_Init+0x31c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d007      	beq.n	800120a <HAL_GPIO_Init+0x206>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a49      	ldr	r2, [pc, #292]	@ (8001324 <HAL_GPIO_Init+0x320>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_GPIO_Init+0x202>
 8001202:	2306      	movs	r3, #6
 8001204:	e00c      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 8001206:	2307      	movs	r3, #7
 8001208:	e00a      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800120e:	2304      	movs	r3, #4
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x21c>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	@ (8001308 <HAL_GPIO_Init+0x304>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b3a      	ldr	r3, [pc, #232]	@ (8001328 <HAL_GPIO_Init+0x324>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001262:	4a31      	ldr	r2, [pc, #196]	@ (8001328 <HAL_GPIO_Init+0x324>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001268:	4b2f      	ldr	r3, [pc, #188]	@ (8001328 <HAL_GPIO_Init+0x324>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800128c:	4a26      	ldr	r2, [pc, #152]	@ (8001328 <HAL_GPIO_Init+0x324>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001292:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <HAL_GPIO_Init+0x324>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001328 <HAL_GPIO_Init+0x324>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <HAL_GPIO_Init+0x324>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e0:	4a11      	ldr	r2, [pc, #68]	@ (8001328 <HAL_GPIO_Init+0x324>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f ae96 	bls.w	8001020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	@ 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40021400 	.word	0x40021400
 8001324:	40021800 	.word	0x40021800
 8001328:	40013c00 	.word	0x40013c00

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001348:	e003      	b.n	8001352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	041a      	lsls	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e12b      	b.n	80015ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d106      	bne.n	800138c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fb10 	bl	80009ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2224      	movs	r2, #36	@ 0x24
 8001390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013c4:	f001 f8b8 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 80013c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a81      	ldr	r2, [pc, #516]	@ (80015d4 <HAL_I2C_Init+0x274>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d807      	bhi.n	80013e4 <HAL_I2C_Init+0x84>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4a80      	ldr	r2, [pc, #512]	@ (80015d8 <HAL_I2C_Init+0x278>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	bf94      	ite	ls
 80013dc:	2301      	movls	r3, #1
 80013de:	2300      	movhi	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	e006      	b.n	80013f2 <HAL_I2C_Init+0x92>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4a7d      	ldr	r2, [pc, #500]	@ (80015dc <HAL_I2C_Init+0x27c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	bf94      	ite	ls
 80013ec:	2301      	movls	r3, #1
 80013ee:	2300      	movhi	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e0e7      	b.n	80015ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4a78      	ldr	r2, [pc, #480]	@ (80015e0 <HAL_I2C_Init+0x280>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0c9b      	lsrs	r3, r3, #18
 8001404:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	430a      	orrs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	4a6a      	ldr	r2, [pc, #424]	@ (80015d4 <HAL_I2C_Init+0x274>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d802      	bhi.n	8001434 <HAL_I2C_Init+0xd4>
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	3301      	adds	r3, #1
 8001432:	e009      	b.n	8001448 <HAL_I2C_Init+0xe8>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	4a69      	ldr	r2, [pc, #420]	@ (80015e4 <HAL_I2C_Init+0x284>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	3301      	adds	r3, #1
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	430b      	orrs	r3, r1
 800144e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800145a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	495c      	ldr	r1, [pc, #368]	@ (80015d4 <HAL_I2C_Init+0x274>)
 8001464:	428b      	cmp	r3, r1
 8001466:	d819      	bhi.n	800149c <HAL_I2C_Init+0x13c>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1e59      	subs	r1, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fbb1 f3f3 	udiv	r3, r1, r3
 8001476:	1c59      	adds	r1, r3, #1
 8001478:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800147c:	400b      	ands	r3, r1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <HAL_I2C_Init+0x138>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1e59      	subs	r1, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001490:	3301      	adds	r3, #1
 8001492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001496:	e051      	b.n	800153c <HAL_I2C_Init+0x1dc>
 8001498:	2304      	movs	r3, #4
 800149a:	e04f      	b.n	800153c <HAL_I2C_Init+0x1dc>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d111      	bne.n	80014c8 <HAL_I2C_Init+0x168>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1e58      	subs	r0, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	440b      	add	r3, r1
 80014b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	e012      	b.n	80014ee <HAL_I2C_Init+0x18e>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1e58      	subs	r0, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	0099      	lsls	r1, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	fbb0 f3f3 	udiv	r3, r0, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf0c      	ite	eq
 80014e8:	2301      	moveq	r3, #1
 80014ea:	2300      	movne	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_I2C_Init+0x196>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e022      	b.n	800153c <HAL_I2C_Init+0x1dc>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10e      	bne.n	800151c <HAL_I2C_Init+0x1bc>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1e58      	subs	r0, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6859      	ldr	r1, [r3, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	440b      	add	r3, r1
 800150c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001510:	3301      	adds	r3, #1
 8001512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800151a:	e00f      	b.n	800153c <HAL_I2C_Init+0x1dc>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e58      	subs	r0, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	0099      	lsls	r1, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001538:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	6809      	ldr	r1, [r1, #0]
 8001540:	4313      	orrs	r3, r2
 8001542:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69da      	ldr	r2, [r3, #28]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	431a      	orrs	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800156a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6911      	ldr	r1, [r2, #16]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68d2      	ldr	r2, [r2, #12]
 8001576:	4311      	orrs	r1, r2
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	430b      	orrs	r3, r1
 800157e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2220      	movs	r2, #32
 80015b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	000186a0 	.word	0x000186a0
 80015d8:	001e847f 	.word	0x001e847f
 80015dc:	003d08ff 	.word	0x003d08ff
 80015e0:	431bde83 	.word	0x431bde83
 80015e4:	10624dd3 	.word	0x10624dd3

080015e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	461a      	mov	r2, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	817b      	strh	r3, [r7, #10]
 80015f8:	4613      	mov	r3, r2
 80015fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff fbec 	bl	8000dd8 <HAL_GetTick>
 8001600:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b20      	cmp	r3, #32
 800160c:	f040 80e0 	bne.w	80017d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2319      	movs	r3, #25
 8001616:	2201      	movs	r2, #1
 8001618:	4970      	ldr	r1, [pc, #448]	@ (80017dc <HAL_I2C_Master_Transmit+0x1f4>)
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 fc64 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001626:	2302      	movs	r3, #2
 8001628:	e0d3      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_I2C_Master_Transmit+0x50>
 8001634:	2302      	movs	r3, #2
 8001636:	e0cc      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b01      	cmp	r3, #1
 800164c:	d007      	beq.n	800165e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800166c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2221      	movs	r2, #33	@ 0x21
 8001672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2210      	movs	r2, #16
 800167a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	893a      	ldrh	r2, [r7, #8]
 800168e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001694:	b29a      	uxth	r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4a50      	ldr	r2, [pc, #320]	@ (80017e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800169e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016a0:	8979      	ldrh	r1, [r7, #10]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	6a3a      	ldr	r2, [r7, #32]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 face 	bl	8001c48 <I2C_MasterRequestWrite>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e08d      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016cc:	e066      	b.n	800179c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	6a39      	ldr	r1, [r7, #32]
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 fd22 	bl	800211c <I2C_WaitOnTXEFlagUntilTimeout>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00d      	beq.n	80016fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d107      	bne.n	80016f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e06b      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001714:	b29b      	uxth	r3, r3
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b04      	cmp	r3, #4
 8001736:	d11b      	bne.n	8001770 <HAL_I2C_Master_Transmit+0x188>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800173c:	2b00      	cmp	r3, #0
 800173e:	d017      	beq.n	8001770 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175a:	b29b      	uxth	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	6a39      	ldr	r1, [r7, #32]
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 fd19 	bl	80021ac <I2C_WaitOnBTFFlagUntilTimeout>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00d      	beq.n	800179c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001784:	2b04      	cmp	r3, #4
 8001786:	d107      	bne.n	8001798 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001796:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e01a      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d194      	bne.n	80016ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e000      	b.n	80017d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017d0:	2302      	movs	r3, #2
  }
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	00100002 	.word	0x00100002
 80017e0:	ffff0000 	.word	0xffff0000

080017e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	@ 0x30
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	461a      	mov	r2, r3
 80017f0:	460b      	mov	r3, r1
 80017f2:	817b      	strh	r3, [r7, #10]
 80017f4:	4613      	mov	r3, r2
 80017f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff faee 	bl	8000dd8 <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b20      	cmp	r3, #32
 8001808:	f040 8217 	bne.w	8001c3a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2319      	movs	r3, #25
 8001812:	2201      	movs	r2, #1
 8001814:	497c      	ldr	r1, [pc, #496]	@ (8001a08 <HAL_I2C_Master_Receive+0x224>)
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 fb66 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001822:	2302      	movs	r3, #2
 8001824:	e20a      	b.n	8001c3c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_I2C_Master_Receive+0x50>
 8001830:	2302      	movs	r3, #2
 8001832:	e203      	b.n	8001c3c <HAL_I2C_Master_Receive+0x458>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b01      	cmp	r3, #1
 8001848:	d007      	beq.n	800185a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0201 	orr.w	r2, r2, #1
 8001858:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001868:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2222      	movs	r2, #34	@ 0x22
 800186e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2210      	movs	r2, #16
 8001876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	893a      	ldrh	r2, [r7, #8]
 800188a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4a5c      	ldr	r2, [pc, #368]	@ (8001a0c <HAL_I2C_Master_Receive+0x228>)
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800189c:	8979      	ldrh	r1, [r7, #10]
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fa52 	bl	8001d4c <I2C_MasterRequestRead>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e1c4      	b.n	8001c3c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d113      	bne.n	80018e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	623b      	str	r3, [r7, #32]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	623b      	str	r3, [r7, #32]
 80018ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e198      	b.n	8001c14 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d11b      	bne.n	8001922 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	61fb      	str	r3, [r7, #28]
 800190e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e178      	b.n	8001c14 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001926:	2b02      	cmp	r3, #2
 8001928:	d11b      	bne.n	8001962 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001938:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001948:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	e158      	b.n	8001c14 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001970:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001988:	e144      	b.n	8001c14 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800198e:	2b03      	cmp	r3, #3
 8001990:	f200 80f1 	bhi.w	8001b76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001998:	2b01      	cmp	r3, #1
 800199a:	d123      	bne.n	80019e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800199c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 fc4b 	bl	800223c <I2C_WaitOnRXNEFlagUntilTimeout>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e145      	b.n	8001c3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019cc:	3b01      	subs	r3, #1
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d8:	b29b      	uxth	r3, r3
 80019da:	3b01      	subs	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019e2:	e117      	b.n	8001c14 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d14e      	bne.n	8001a8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f2:	2200      	movs	r2, #0
 80019f4:	4906      	ldr	r1, [pc, #24]	@ (8001a10 <HAL_I2C_Master_Receive+0x22c>)
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fa76 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e11a      	b.n	8001c3c <HAL_I2C_Master_Receive+0x458>
 8001a06:	bf00      	nop
 8001a08:	00100002 	.word	0x00100002
 8001a0c:	ffff0000 	.word	0xffff0000
 8001a10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	3b01      	subs	r3, #1
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001a88:	e0c4      	b.n	8001c14 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a90:	2200      	movs	r2, #0
 8001a92:	496c      	ldr	r1, [pc, #432]	@ (8001c44 <HAL_I2C_Master_Receive+0x460>)
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 fa27 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0cb      	b.n	8001c3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aec:	2200      	movs	r2, #0
 8001aee:	4955      	ldr	r1, [pc, #340]	@ (8001c44 <HAL_I2C_Master_Receive+0x460>)
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f9f9 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e09d      	b.n	8001c3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	691a      	ldr	r2, [r3, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b74:	e04e      	b.n	8001c14 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fb5e 	bl	800223c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e058      	b.n	8001c3c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d124      	bne.n	8001c14 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d107      	bne.n	8001be2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001be0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f47f aeb6 	bne.w	800198a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
  }
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3728      	adds	r7, #40	@ 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	00010004 	.word	0x00010004

08001c48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	460b      	mov	r3, r1
 8001c56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d006      	beq.n	8001c72 <I2C_MasterRequestWrite+0x2a>
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d003      	beq.n	8001c72 <I2C_MasterRequestWrite+0x2a>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c70:	d108      	bne.n	8001c84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e00b      	b.n	8001c9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c88:	2b12      	cmp	r3, #18
 8001c8a:	d107      	bne.n	8001c9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f91d 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00d      	beq.n	8001cd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cc2:	d103      	bne.n	8001ccc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e035      	b.n	8001d3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cd8:	d108      	bne.n	8001cec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cda:	897b      	ldrh	r3, [r7, #10]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	e01b      	b.n	8001d24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cec:	897b      	ldrh	r3, [r7, #10]
 8001cee:	11db      	asrs	r3, r3, #7
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 0306 	and.w	r3, r3, #6
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f063 030f 	orn	r3, r3, #15
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	490e      	ldr	r1, [pc, #56]	@ (8001d44 <I2C_MasterRequestWrite+0xfc>)
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f966 	bl	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e010      	b.n	8001d3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d1a:	897b      	ldrh	r3, [r7, #10]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4907      	ldr	r1, [pc, #28]	@ (8001d48 <I2C_MasterRequestWrite+0x100>)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f956 	bl	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	00010008 	.word	0x00010008
 8001d48:	00010002 	.word	0x00010002

08001d4c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d60:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d70:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d006      	beq.n	8001d86 <I2C_MasterRequestRead+0x3a>
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d003      	beq.n	8001d86 <I2C_MasterRequestRead+0x3a>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d84:	d108      	bne.n	8001d98 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e00b      	b.n	8001db0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9c:	2b11      	cmp	r3, #17
 8001d9e:	d107      	bne.n	8001db0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 f893 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00d      	beq.n	8001de4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dd6:	d103      	bne.n	8001de0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e079      	b.n	8001ed8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001dec:	d108      	bne.n	8001e00 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001dee:	897b      	ldrh	r3, [r7, #10]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	611a      	str	r2, [r3, #16]
 8001dfe:	e05f      	b.n	8001ec0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	11db      	asrs	r3, r3, #7
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f003 0306 	and.w	r3, r3, #6
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f063 030f 	orn	r3, r3, #15
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4930      	ldr	r1, [pc, #192]	@ (8001ee0 <I2C_MasterRequestRead+0x194>)
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f8dc 	bl	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e054      	b.n	8001ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e2e:	897b      	ldrh	r3, [r7, #10]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4929      	ldr	r1, [pc, #164]	@ (8001ee4 <I2C_MasterRequestRead+0x198>)
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f000 f8cc 	bl	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e044      	b.n	8001ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e72:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f831 	bl	8001ee8 <I2C_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00d      	beq.n	8001ea8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e9a:	d103      	bne.n	8001ea4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ea2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e017      	b.n	8001ed8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001ea8:	897b      	ldrh	r3, [r7, #10]
 8001eaa:	11db      	asrs	r3, r3, #7
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f003 0306 	and.w	r3, r3, #6
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	f063 030e 	orn	r3, r3, #14
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4907      	ldr	r1, [pc, #28]	@ (8001ee4 <I2C_MasterRequestRead+0x198>)
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f888 	bl	8001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	00010008 	.word	0x00010008
 8001ee4:	00010002 	.word	0x00010002

08001ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ef8:	e048      	b.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f00:	d044      	beq.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f02:	f7fe ff69 	bl	8000dd8 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d302      	bcc.n	8001f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d139      	bne.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	0c1b      	lsrs	r3, r3, #16
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d10d      	bne.n	8001f3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	43da      	mvns	r2, r3
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	e00c      	b.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	43da      	mvns	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d116      	bne.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	f043 0220 	orr.w	r2, r3, #32
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e023      	b.n	8001fd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	0c1b      	lsrs	r3, r3, #16
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d10d      	bne.n	8001fb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	e00c      	b.n	8001fcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	43da      	mvns	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d093      	beq.n	8001efa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fea:	e071      	b.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffa:	d123      	bne.n	8002044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800200a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002014:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	f043 0204 	orr.w	r2, r3, #4
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e067      	b.n	8002114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204a:	d041      	beq.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204c:	f7fe fec4 	bl	8000dd8 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	d302      	bcc.n	8002062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d136      	bne.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	0c1b      	lsrs	r3, r3, #16
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d10c      	bne.n	8002086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	43da      	mvns	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4013      	ands	r3, r2
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf14      	ite	ne
 800207e:	2301      	movne	r3, #1
 8002080:	2300      	moveq	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	e00b      	b.n	800209e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	43da      	mvns	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4013      	ands	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf14      	ite	ne
 8002098:	2301      	movne	r3, #1
 800209a:	2300      	moveq	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d016      	beq.n	80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2220      	movs	r2, #32
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f043 0220 	orr.w	r2, r3, #32
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e021      	b.n	8002114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	0c1b      	lsrs	r3, r3, #16
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d10c      	bne.n	80020f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	43da      	mvns	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4013      	ands	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e00b      	b.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4013      	ands	r3, r2
 8002100:	b29b      	uxth	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	bf14      	ite	ne
 8002106:	2301      	movne	r3, #1
 8002108:	2300      	moveq	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	f47f af6d 	bne.w	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002128:	e034      	b.n	8002194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f8e3 	bl	80022f6 <I2C_IsAcknowledgeFailed>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e034      	b.n	80021a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d028      	beq.n	8002194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002142:	f7fe fe49 	bl	8000dd8 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	429a      	cmp	r2, r3
 8002150:	d302      	bcc.n	8002158 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d11d      	bne.n	8002194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002162:	2b80      	cmp	r3, #128	@ 0x80
 8002164:	d016      	beq.n	8002194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e007      	b.n	80021a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219e:	2b80      	cmp	r3, #128	@ 0x80
 80021a0:	d1c3      	bne.n	800212a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021b8:	e034      	b.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 f89b 	bl	80022f6 <I2C_IsAcknowledgeFailed>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e034      	b.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d028      	beq.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d2:	f7fe fe01 	bl	8000dd8 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d302      	bcc.n	80021e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d11d      	bne.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d016      	beq.n	8002224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	f043 0220 	orr.w	r2, r3, #32
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e007      	b.n	8002234 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d1c3      	bne.n	80021ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002248:	e049      	b.n	80022de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b10      	cmp	r3, #16
 8002256:	d119      	bne.n	800228c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0210 	mvn.w	r2, #16
 8002260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e030      	b.n	80022ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800228c:	f7fe fda4 	bl	8000dd8 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	429a      	cmp	r2, r3
 800229a:	d302      	bcc.n	80022a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d11d      	bne.n	80022de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ac:	2b40      	cmp	r3, #64	@ 0x40
 80022ae:	d016      	beq.n	80022de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e007      	b.n	80022ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e8:	2b40      	cmp	r3, #64	@ 0x40
 80022ea:	d1ae      	bne.n	800224a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800230c:	d11b      	bne.n	8002346 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002316:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f043 0204 	orr.w	r2, r3, #4
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0cc      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b68      	ldr	r3, [pc, #416]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d90c      	bls.n	8002390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b65      	ldr	r3, [pc, #404]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b63      	ldr	r3, [pc, #396]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0b8      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d020      	beq.n	80023de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a8:	4b59      	ldr	r3, [pc, #356]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a58      	ldr	r2, [pc, #352]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c0:	4b53      	ldr	r3, [pc, #332]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a52      	ldr	r2, [pc, #328]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b50      	ldr	r3, [pc, #320]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	494d      	ldr	r1, [pc, #308]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d044      	beq.n	8002474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b47      	ldr	r3, [pc, #284]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d119      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e07f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d003      	beq.n	8002412 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240e:	2b03      	cmp	r3, #3
 8002410:	d107      	bne.n	8002422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4b3f      	ldr	r3, [pc, #252]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d109      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e06f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002422:	4b3b      	ldr	r3, [pc, #236]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e067      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002432:	4b37      	ldr	r3, [pc, #220]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f023 0203 	bic.w	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4934      	ldr	r1, [pc, #208]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002444:	f7fe fcc8 	bl	8000dd8 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244a:	e00a      	b.n	8002462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe fcc4 	bl	8000dd8 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e04f      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	4b2b      	ldr	r3, [pc, #172]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 020c 	and.w	r2, r3, #12
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	429a      	cmp	r2, r3
 8002472:	d1eb      	bne.n	800244c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002474:	4b25      	ldr	r3, [pc, #148]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d20c      	bcs.n	800249c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002482:	4b22      	ldr	r3, [pc, #136]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e032      	b.n	8002502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b19      	ldr	r3, [pc, #100]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	4916      	ldr	r1, [pc, #88]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d009      	beq.n	80024da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c6:	4b12      	ldr	r3, [pc, #72]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	490e      	ldr	r1, [pc, #56]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024da:	f000 f855 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	490a      	ldr	r1, [pc, #40]	@ (8002514 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a09      	ldr	r2, [pc, #36]	@ (8002518 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fc28 	bl	8000d50 <HAL_InitTick>

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40023c00 	.word	0x40023c00
 8002510:	40023800 	.word	0x40023800
 8002514:	08004620 	.word	0x08004620
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002524:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <HAL_RCC_GetHCLKFreq+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000000 	.word	0x20000000

08002538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800253c:	f7ff fff0 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0a9b      	lsrs	r3, r3, #10
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4903      	ldr	r1, [pc, #12]	@ (800255c <HAL_RCC_GetPCLK1Freq+0x24>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40023800 	.word	0x40023800
 800255c:	08004630 	.word	0x08004630

08002560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002564:	f7ff ffdc 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	0b5b      	lsrs	r3, r3, #13
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	4903      	ldr	r1, [pc, #12]	@ (8002584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	08004630 	.word	0x08004630

08002588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800258c:	b0ae      	sub	sp, #184	@ 0xb8
 800258e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ae:	4bcb      	ldr	r3, [pc, #812]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x354>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	f200 8206 	bhi.w	80029c8 <HAL_RCC_GetSysClockFreq+0x440>
 80025bc:	a201      	add	r2, pc, #4	@ (adr r2, 80025c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025f9 	.word	0x080025f9
 80025c8:	080029c9 	.word	0x080029c9
 80025cc:	080029c9 	.word	0x080029c9
 80025d0:	080029c9 	.word	0x080029c9
 80025d4:	08002601 	.word	0x08002601
 80025d8:	080029c9 	.word	0x080029c9
 80025dc:	080029c9 	.word	0x080029c9
 80025e0:	080029c9 	.word	0x080029c9
 80025e4:	08002609 	.word	0x08002609
 80025e8:	080029c9 	.word	0x080029c9
 80025ec:	080029c9 	.word	0x080029c9
 80025f0:	080029c9 	.word	0x080029c9
 80025f4:	080027f9 	.word	0x080027f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025f8:	4bb9      	ldr	r3, [pc, #740]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x358>)
 80025fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025fe:	e1e7      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002600:	4bb8      	ldr	r3, [pc, #736]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002602:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002606:	e1e3      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002608:	4bb4      	ldr	r3, [pc, #720]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x354>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002610:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002614:	4bb1      	ldr	r3, [pc, #708]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d071      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002620:	4bae      	ldr	r3, [pc, #696]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	099b      	lsrs	r3, r3, #6
 8002626:	2200      	movs	r2, #0
 8002628:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800262c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002630:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002638:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800263c:	2300      	movs	r3, #0
 800263e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002642:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002646:	4622      	mov	r2, r4
 8002648:	462b      	mov	r3, r5
 800264a:	f04f 0000 	mov.w	r0, #0
 800264e:	f04f 0100 	mov.w	r1, #0
 8002652:	0159      	lsls	r1, r3, #5
 8002654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002658:	0150      	lsls	r0, r2, #5
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4621      	mov	r1, r4
 8002660:	1a51      	subs	r1, r2, r1
 8002662:	6439      	str	r1, [r7, #64]	@ 0x40
 8002664:	4629      	mov	r1, r5
 8002666:	eb63 0301 	sbc.w	r3, r3, r1
 800266a:	647b      	str	r3, [r7, #68]	@ 0x44
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	f04f 0300 	mov.w	r3, #0
 8002674:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002678:	4649      	mov	r1, r9
 800267a:	018b      	lsls	r3, r1, #6
 800267c:	4641      	mov	r1, r8
 800267e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002682:	4641      	mov	r1, r8
 8002684:	018a      	lsls	r2, r1, #6
 8002686:	4641      	mov	r1, r8
 8002688:	1a51      	subs	r1, r2, r1
 800268a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800268c:	4649      	mov	r1, r9
 800268e:	eb63 0301 	sbc.w	r3, r3, r1
 8002692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80026a0:	4649      	mov	r1, r9
 80026a2:	00cb      	lsls	r3, r1, #3
 80026a4:	4641      	mov	r1, r8
 80026a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026aa:	4641      	mov	r1, r8
 80026ac:	00ca      	lsls	r2, r1, #3
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	4622      	mov	r2, r4
 80026b6:	189b      	adds	r3, r3, r2
 80026b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80026ba:	462b      	mov	r3, r5
 80026bc:	460a      	mov	r2, r1
 80026be:	eb42 0303 	adc.w	r3, r2, r3
 80026c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026d0:	4629      	mov	r1, r5
 80026d2:	024b      	lsls	r3, r1, #9
 80026d4:	4621      	mov	r1, r4
 80026d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026da:	4621      	mov	r1, r4
 80026dc:	024a      	lsls	r2, r1, #9
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80026f4:	f7fd fddc 	bl	80002b0 <__aeabi_uldivmod>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4613      	mov	r3, r2
 80026fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002702:	e067      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002704:	4b75      	ldr	r3, [pc, #468]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	2200      	movs	r2, #0
 800270c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002710:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002714:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800271c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800271e:	2300      	movs	r3, #0
 8002720:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002722:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002726:	4622      	mov	r2, r4
 8002728:	462b      	mov	r3, r5
 800272a:	f04f 0000 	mov.w	r0, #0
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	0159      	lsls	r1, r3, #5
 8002734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002738:	0150      	lsls	r0, r2, #5
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4621      	mov	r1, r4
 8002740:	1a51      	subs	r1, r2, r1
 8002742:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002744:	4629      	mov	r1, r5
 8002746:	eb63 0301 	sbc.w	r3, r3, r1
 800274a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002758:	4649      	mov	r1, r9
 800275a:	018b      	lsls	r3, r1, #6
 800275c:	4641      	mov	r1, r8
 800275e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002762:	4641      	mov	r1, r8
 8002764:	018a      	lsls	r2, r1, #6
 8002766:	4641      	mov	r1, r8
 8002768:	ebb2 0a01 	subs.w	sl, r2, r1
 800276c:	4649      	mov	r1, r9
 800276e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800277e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002786:	4692      	mov	sl, r2
 8002788:	469b      	mov	fp, r3
 800278a:	4623      	mov	r3, r4
 800278c:	eb1a 0303 	adds.w	r3, sl, r3
 8002790:	623b      	str	r3, [r7, #32]
 8002792:	462b      	mov	r3, r5
 8002794:	eb4b 0303 	adc.w	r3, fp, r3
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027a6:	4629      	mov	r1, r5
 80027a8:	028b      	lsls	r3, r1, #10
 80027aa:	4621      	mov	r1, r4
 80027ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b0:	4621      	mov	r1, r4
 80027b2:	028a      	lsls	r2, r1, #10
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027bc:	2200      	movs	r2, #0
 80027be:	673b      	str	r3, [r7, #112]	@ 0x70
 80027c0:	677a      	str	r2, [r7, #116]	@ 0x74
 80027c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80027c6:	f7fd fd73 	bl	80002b0 <__aeabi_uldivmod>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4613      	mov	r3, r2
 80027d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027d4:	4b41      	ldr	r3, [pc, #260]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x354>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	3301      	adds	r3, #1
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80027e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027f6:	e0eb      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f8:	4b38      	ldr	r3, [pc, #224]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x354>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002800:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002804:	4b35      	ldr	r3, [pc, #212]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d06b      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002810:	4b32      	ldr	r3, [pc, #200]	@ (80028dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	099b      	lsrs	r3, r3, #6
 8002816:	2200      	movs	r2, #0
 8002818:	66bb      	str	r3, [r7, #104]	@ 0x68
 800281a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800281c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800281e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002822:	663b      	str	r3, [r7, #96]	@ 0x60
 8002824:	2300      	movs	r3, #0
 8002826:	667b      	str	r3, [r7, #100]	@ 0x64
 8002828:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800282c:	4622      	mov	r2, r4
 800282e:	462b      	mov	r3, r5
 8002830:	f04f 0000 	mov.w	r0, #0
 8002834:	f04f 0100 	mov.w	r1, #0
 8002838:	0159      	lsls	r1, r3, #5
 800283a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800283e:	0150      	lsls	r0, r2, #5
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4621      	mov	r1, r4
 8002846:	1a51      	subs	r1, r2, r1
 8002848:	61b9      	str	r1, [r7, #24]
 800284a:	4629      	mov	r1, r5
 800284c:	eb63 0301 	sbc.w	r3, r3, r1
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800285e:	4659      	mov	r1, fp
 8002860:	018b      	lsls	r3, r1, #6
 8002862:	4651      	mov	r1, sl
 8002864:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002868:	4651      	mov	r1, sl
 800286a:	018a      	lsls	r2, r1, #6
 800286c:	4651      	mov	r1, sl
 800286e:	ebb2 0801 	subs.w	r8, r2, r1
 8002872:	4659      	mov	r1, fp
 8002874:	eb63 0901 	sbc.w	r9, r3, r1
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002884:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002888:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800288c:	4690      	mov	r8, r2
 800288e:	4699      	mov	r9, r3
 8002890:	4623      	mov	r3, r4
 8002892:	eb18 0303 	adds.w	r3, r8, r3
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	462b      	mov	r3, r5
 800289a:	eb49 0303 	adc.w	r3, r9, r3
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028ac:	4629      	mov	r1, r5
 80028ae:	024b      	lsls	r3, r1, #9
 80028b0:	4621      	mov	r1, r4
 80028b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028b6:	4621      	mov	r1, r4
 80028b8:	024a      	lsls	r2, r1, #9
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028c2:	2200      	movs	r2, #0
 80028c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80028c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028cc:	f7fd fcf0 	bl	80002b0 <__aeabi_uldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4613      	mov	r3, r2
 80028d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028da:	e065      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x420>
 80028dc:	40023800 	.word	0x40023800
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e8:	4b3d      	ldr	r3, [pc, #244]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	099b      	lsrs	r3, r3, #6
 80028ee:	2200      	movs	r2, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	4611      	mov	r1, r2
 80028f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80028fa:	2300      	movs	r3, #0
 80028fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80028fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002902:	4642      	mov	r2, r8
 8002904:	464b      	mov	r3, r9
 8002906:	f04f 0000 	mov.w	r0, #0
 800290a:	f04f 0100 	mov.w	r1, #0
 800290e:	0159      	lsls	r1, r3, #5
 8002910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002914:	0150      	lsls	r0, r2, #5
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4641      	mov	r1, r8
 800291c:	1a51      	subs	r1, r2, r1
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	4649      	mov	r1, r9
 8002922:	eb63 0301 	sbc.w	r3, r3, r1
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002934:	4659      	mov	r1, fp
 8002936:	018b      	lsls	r3, r1, #6
 8002938:	4651      	mov	r1, sl
 800293a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800293e:	4651      	mov	r1, sl
 8002940:	018a      	lsls	r2, r1, #6
 8002942:	4651      	mov	r1, sl
 8002944:	1a54      	subs	r4, r2, r1
 8002946:	4659      	mov	r1, fp
 8002948:	eb63 0501 	sbc.w	r5, r3, r1
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	00eb      	lsls	r3, r5, #3
 8002956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800295a:	00e2      	lsls	r2, r4, #3
 800295c:	4614      	mov	r4, r2
 800295e:	461d      	mov	r5, r3
 8002960:	4643      	mov	r3, r8
 8002962:	18e3      	adds	r3, r4, r3
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	464b      	mov	r3, r9
 8002968:	eb45 0303 	adc.w	r3, r5, r3
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800297a:	4629      	mov	r1, r5
 800297c:	028b      	lsls	r3, r1, #10
 800297e:	4621      	mov	r1, r4
 8002980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002984:	4621      	mov	r1, r4
 8002986:	028a      	lsls	r2, r1, #10
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002990:	2200      	movs	r2, #0
 8002992:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002994:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002996:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800299a:	f7fd fc89 	bl	80002b0 <__aeabi_uldivmod>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4613      	mov	r3, r2
 80029a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029a8:	4b0d      	ldr	r3, [pc, #52]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	0f1b      	lsrs	r3, r3, #28
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80029b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029c6:	e003      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c8:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80029ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	37b8      	adds	r7, #184	@ 0xb8
 80029d8:	46bd      	mov	sp, r7
 80029da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	00f42400 	.word	0x00f42400

080029e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e28d      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8083 	beq.w	8002b0e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a08:	4b94      	ldr	r3, [pc, #592]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d019      	beq.n	8002a48 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a14:	4b91      	ldr	r3, [pc, #580]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a20:	4b8e      	ldr	r3, [pc, #568]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a2c:	d00c      	beq.n	8002a48 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	d112      	bne.n	8002a60 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a3a:	4b88      	ldr	r3, [pc, #544]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a46:	d10b      	bne.n	8002a60 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a48:	4b84      	ldr	r3, [pc, #528]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d05b      	beq.n	8002b0c <HAL_RCC_OscConfig+0x124>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d157      	bne.n	8002b0c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e25a      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a68:	d106      	bne.n	8002a78 <HAL_RCC_OscConfig+0x90>
 8002a6a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7b      	ldr	r2, [pc, #492]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e01d      	b.n	8002ab4 <HAL_RCC_OscConfig+0xcc>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0xb4>
 8002a82:	4b76      	ldr	r3, [pc, #472]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a75      	ldr	r2, [pc, #468]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b73      	ldr	r3, [pc, #460]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a72      	ldr	r2, [pc, #456]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCC_OscConfig+0xcc>
 8002a9c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a6e      	ldr	r2, [pc, #440]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b6c      	ldr	r3, [pc, #432]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a6b      	ldr	r2, [pc, #428]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe f98c 	bl	8000dd8 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7fe f988 	bl	8000dd8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	@ 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e21f      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b61      	ldr	r3, [pc, #388]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xdc>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe f978 	bl	8000dd8 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe f974 	bl	8000dd8 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	@ 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e20b      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	4b57      	ldr	r3, [pc, #348]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x104>
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d06f      	beq.n	8002bfa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b1a:	4b50      	ldr	r3, [pc, #320]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d017      	beq.n	8002b56 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b26:	4b4d      	ldr	r3, [pc, #308]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d105      	bne.n	8002b3e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b32:	4b4a      	ldr	r3, [pc, #296]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3e:	4b47      	ldr	r3, [pc, #284]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d11c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	4b44      	ldr	r3, [pc, #272]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	4b41      	ldr	r3, [pc, #260]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x186>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e1d3      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4937      	ldr	r1, [pc, #220]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	e03a      	b.n	8002bfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	4b34      	ldr	r3, [pc, #208]	@ (8002c60 <HAL_RCC_OscConfig+0x278>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7fe f921 	bl	8000dd8 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b9a:	f7fe f91d 	bl	8000dd8 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e1b4      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	4b2b      	ldr	r3, [pc, #172]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b28      	ldr	r3, [pc, #160]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4925      	ldr	r1, [pc, #148]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]
 8002bcc:	e015      	b.n	8002bfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bce:	4b24      	ldr	r3, [pc, #144]	@ (8002c60 <HAL_RCC_OscConfig+0x278>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe f900 	bl	8000dd8 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7fe f8fc 	bl	8000dd8 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e193      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d036      	beq.n	8002c74 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0e:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <HAL_RCC_OscConfig+0x27c>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c14:	f7fe f8e0 	bl	8000dd8 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7fe f8dc 	bl	8000dd8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e173      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c5c <HAL_RCC_OscConfig+0x274>)
 8002c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x234>
 8002c3a:	e01b      	b.n	8002c74 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c3c:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <HAL_RCC_OscConfig+0x27c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c42:	f7fe f8c9 	bl	8000dd8 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	e00e      	b.n	8002c68 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4a:	f7fe f8c5 	bl	8000dd8 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d907      	bls.n	8002c68 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e15c      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	42470000 	.word	0x42470000
 8002c64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c68:	4b8a      	ldr	r3, [pc, #552]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1ea      	bne.n	8002c4a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8097 	beq.w	8002db0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c86:	4b83      	ldr	r3, [pc, #524]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	4b7f      	ldr	r3, [pc, #508]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca2:	4b7c      	ldr	r3, [pc, #496]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb2:	4b79      	ldr	r3, [pc, #484]	@ (8002e98 <HAL_RCC_OscConfig+0x4b0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d118      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cbe:	4b76      	ldr	r3, [pc, #472]	@ (8002e98 <HAL_RCC_OscConfig+0x4b0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a75      	ldr	r2, [pc, #468]	@ (8002e98 <HAL_RCC_OscConfig+0x4b0>)
 8002cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cca:	f7fe f885 	bl	8000dd8 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd2:	f7fe f881 	bl	8000dd8 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e118      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e98 <HAL_RCC_OscConfig+0x4b0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCC_OscConfig+0x31e>
 8002cf8:	4b66      	ldr	r3, [pc, #408]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfc:	4a65      	ldr	r2, [pc, #404]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d04:	e01c      	b.n	8002d40 <HAL_RCC_OscConfig+0x358>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b05      	cmp	r3, #5
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x340>
 8002d0e:	4b61      	ldr	r3, [pc, #388]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d12:	4a60      	ldr	r2, [pc, #384]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	f043 0304 	orr.w	r3, r3, #4
 8002d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d1a:	4b5e      	ldr	r3, [pc, #376]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	4a5d      	ldr	r2, [pc, #372]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d26:	e00b      	b.n	8002d40 <HAL_RCC_OscConfig+0x358>
 8002d28:	4b5a      	ldr	r3, [pc, #360]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2c:	4a59      	ldr	r2, [pc, #356]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d34:	4b57      	ldr	r3, [pc, #348]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d38:	4a56      	ldr	r2, [pc, #344]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002d3a:	f023 0304 	bic.w	r3, r3, #4
 8002d3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d015      	beq.n	8002d74 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fe f846 	bl	8000dd8 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d50:	f7fe f842 	bl	8000dd8 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e0d7      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d66:	4b4b      	ldr	r3, [pc, #300]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0ee      	beq.n	8002d50 <HAL_RCC_OscConfig+0x368>
 8002d72:	e014      	b.n	8002d9e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d74:	f7fe f830 	bl	8000dd8 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f7fe f82c 	bl	8000dd8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e0c1      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d92:	4b40      	ldr	r3, [pc, #256]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1ee      	bne.n	8002d7c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da4:	4b3b      	ldr	r3, [pc, #236]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	4a3a      	ldr	r2, [pc, #232]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80ad 	beq.w	8002f14 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dba:	4b36      	ldr	r3, [pc, #216]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d060      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d145      	bne.n	8002e5a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dce:	4b33      	ldr	r3, [pc, #204]	@ (8002e9c <HAL_RCC_OscConfig+0x4b4>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe f800 	bl	8000dd8 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fd fffc 	bl	8000dd8 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e093      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	4b29      	ldr	r3, [pc, #164]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	019b      	lsls	r3, r3, #6
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e10:	085b      	lsrs	r3, r3, #1
 8002e12:	3b01      	subs	r3, #1
 8002e14:	041b      	lsls	r3, r3, #16
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e24:	071b      	lsls	r3, r3, #28
 8002e26:	491b      	ldr	r1, [pc, #108]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e9c <HAL_RCC_OscConfig+0x4b4>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fd ffd1 	bl	8000dd8 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7fd ffcd 	bl	8000dd8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e064      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4c:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x452>
 8002e58:	e05c      	b.n	8002f14 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5a:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <HAL_RCC_OscConfig+0x4b4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fd ffba 	bl	8000dd8 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e68:	f7fd ffb6 	bl	8000dd8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e04d      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x480>
 8002e86:	e045      	b.n	8002f14 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e040      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40007000 	.word	0x40007000
 8002e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f20 <HAL_RCC_OscConfig+0x538>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d030      	beq.n	8002f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d129      	bne.n	8002f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d122      	bne.n	8002f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d119      	bne.n	8002f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d10f      	bne.n	8002f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800

08002f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e042      	b.n	8002fbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fd fd76 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2224      	movs	r2, #36	@ 0x24
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f973 	bl	8003254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695a      	ldr	r2, [r3, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	@ 0x28
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d175      	bne.n	80030d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_UART_Transmit+0x2c>
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e06e      	b.n	80030d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2221      	movs	r2, #33	@ 0x21
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003002:	f7fd fee9 	bl	8000dd8 <HAL_GetTick>
 8003006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	88fa      	ldrh	r2, [r7, #6]
 800300c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	88fa      	ldrh	r2, [r7, #6]
 8003012:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800301c:	d108      	bne.n	8003030 <HAL_UART_Transmit+0x6c>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	61bb      	str	r3, [r7, #24]
 800302e:	e003      	b.n	8003038 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003034:	2300      	movs	r3, #0
 8003036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003038:	e02e      	b.n	8003098 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2200      	movs	r2, #0
 8003042:	2180      	movs	r1, #128	@ 0x80
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f848 	bl	80030da <UART_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e03a      	b.n	80030d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10b      	bne.n	800307a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	3302      	adds	r3, #2
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	e007      	b.n	800308a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	3301      	adds	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1cb      	bne.n	800303a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2200      	movs	r2, #0
 80030aa:	2140      	movs	r1, #64	@ 0x40
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f814 	bl	80030da <UART_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e006      	b.n	80030d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3720      	adds	r7, #32
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	4613      	mov	r3, r2
 80030e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ea:	e03b      	b.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d037      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f4:	f7fd fe70 	bl	8000dd8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	6a3a      	ldr	r2, [r7, #32]
 8003100:	429a      	cmp	r2, r3
 8003102:	d302      	bcc.n	800310a <UART_WaitOnFlagUntilTimeout+0x30>
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e03a      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d023      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b80      	cmp	r3, #128	@ 0x80
 8003120:	d020      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b40      	cmp	r3, #64	@ 0x40
 8003126:	d01d      	beq.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b08      	cmp	r3, #8
 8003134:	d116      	bne.n	8003164 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f81d 	bl	800318c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2208      	movs	r2, #8
 8003156:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e00f      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	4013      	ands	r3, r2
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	429a      	cmp	r2, r3
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	429a      	cmp	r2, r3
 8003180:	d0b4      	beq.n	80030ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b095      	sub	sp, #84	@ 0x54
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319e:	e853 3f00 	ldrex	r3, [r3]
 80031a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80031b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031bc:	e841 2300 	strex	r3, r2, [r1]
 80031c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e5      	bne.n	8003194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3314      	adds	r3, #20
 80031ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	e853 3f00 	ldrex	r3, [r3]
 80031d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031f0:	e841 2300 	strex	r3, r2, [r1]
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e5      	bne.n	80031c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	2b01      	cmp	r3, #1
 8003202:	d119      	bne.n	8003238 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	330c      	adds	r3, #12
 800320a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	e853 3f00 	ldrex	r3, [r3]
 8003212:	60bb      	str	r3, [r7, #8]
   return(result);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f023 0310 	bic.w	r3, r3, #16
 800321a:	647b      	str	r3, [r7, #68]	@ 0x44
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003224:	61ba      	str	r2, [r7, #24]
 8003226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	6979      	ldr	r1, [r7, #20]
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	e841 2300 	strex	r3, r2, [r1]
 8003230:	613b      	str	r3, [r7, #16]
   return(result);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e5      	bne.n	8003204 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003246:	bf00      	nop
 8003248:	3754      	adds	r7, #84	@ 0x54
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003258:	b0c0      	sub	sp, #256	@ 0x100
 800325a:	af00      	add	r7, sp, #0
 800325c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003270:	68d9      	ldr	r1, [r3, #12]
 8003272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	ea40 0301 	orr.w	r3, r0, r1
 800327c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800327e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	431a      	orrs	r2, r3
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	431a      	orrs	r2, r3
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032ac:	f021 010c 	bic.w	r1, r1, #12
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032ba:	430b      	orrs	r3, r1
 80032bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ce:	6999      	ldr	r1, [r3, #24]
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	ea40 0301 	orr.w	r3, r0, r1
 80032da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003520 <UART_SetConfig+0x2cc>)
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d005      	beq.n	80032f4 <UART_SetConfig+0xa0>
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b8d      	ldr	r3, [pc, #564]	@ (8003524 <UART_SetConfig+0x2d0>)
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d104      	bne.n	80032fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032f4:	f7ff f934 	bl	8002560 <HAL_RCC_GetPCLK2Freq>
 80032f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032fc:	e003      	b.n	8003306 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032fe:	f7ff f91b 	bl	8002538 <HAL_RCC_GetPCLK1Freq>
 8003302:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003310:	f040 810c 	bne.w	800352c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003318:	2200      	movs	r2, #0
 800331a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800331e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003322:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003326:	4622      	mov	r2, r4
 8003328:	462b      	mov	r3, r5
 800332a:	1891      	adds	r1, r2, r2
 800332c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800332e:	415b      	adcs	r3, r3
 8003330:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003332:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003336:	4621      	mov	r1, r4
 8003338:	eb12 0801 	adds.w	r8, r2, r1
 800333c:	4629      	mov	r1, r5
 800333e:	eb43 0901 	adc.w	r9, r3, r1
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003356:	4690      	mov	r8, r2
 8003358:	4699      	mov	r9, r3
 800335a:	4623      	mov	r3, r4
 800335c:	eb18 0303 	adds.w	r3, r8, r3
 8003360:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003364:	462b      	mov	r3, r5
 8003366:	eb49 0303 	adc.w	r3, r9, r3
 800336a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800337a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800337e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003382:	460b      	mov	r3, r1
 8003384:	18db      	adds	r3, r3, r3
 8003386:	653b      	str	r3, [r7, #80]	@ 0x50
 8003388:	4613      	mov	r3, r2
 800338a:	eb42 0303 	adc.w	r3, r2, r3
 800338e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003390:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003394:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003398:	f7fc ff8a 	bl	80002b0 <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4b61      	ldr	r3, [pc, #388]	@ (8003528 <UART_SetConfig+0x2d4>)
 80033a2:	fba3 2302 	umull	r2, r3, r3, r2
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	011c      	lsls	r4, r3, #4
 80033aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033bc:	4642      	mov	r2, r8
 80033be:	464b      	mov	r3, r9
 80033c0:	1891      	adds	r1, r2, r2
 80033c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033c4:	415b      	adcs	r3, r3
 80033c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033cc:	4641      	mov	r1, r8
 80033ce:	eb12 0a01 	adds.w	sl, r2, r1
 80033d2:	4649      	mov	r1, r9
 80033d4:	eb43 0b01 	adc.w	fp, r3, r1
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ec:	4692      	mov	sl, r2
 80033ee:	469b      	mov	fp, r3
 80033f0:	4643      	mov	r3, r8
 80033f2:	eb1a 0303 	adds.w	r3, sl, r3
 80033f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033fa:	464b      	mov	r3, r9
 80033fc:	eb4b 0303 	adc.w	r3, fp, r3
 8003400:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003410:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003414:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003418:	460b      	mov	r3, r1
 800341a:	18db      	adds	r3, r3, r3
 800341c:	643b      	str	r3, [r7, #64]	@ 0x40
 800341e:	4613      	mov	r3, r2
 8003420:	eb42 0303 	adc.w	r3, r2, r3
 8003424:	647b      	str	r3, [r7, #68]	@ 0x44
 8003426:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800342a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800342e:	f7fc ff3f 	bl	80002b0 <__aeabi_uldivmod>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4611      	mov	r1, r2
 8003438:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <UART_SetConfig+0x2d4>)
 800343a:	fba3 2301 	umull	r2, r3, r3, r1
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2264      	movs	r2, #100	@ 0x64
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	1acb      	subs	r3, r1, r3
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800344e:	4b36      	ldr	r3, [pc, #216]	@ (8003528 <UART_SetConfig+0x2d4>)
 8003450:	fba3 2302 	umull	r2, r3, r3, r2
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800345c:	441c      	add	r4, r3
 800345e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003462:	2200      	movs	r2, #0
 8003464:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003468:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800346c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003470:	4642      	mov	r2, r8
 8003472:	464b      	mov	r3, r9
 8003474:	1891      	adds	r1, r2, r2
 8003476:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003478:	415b      	adcs	r3, r3
 800347a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800347c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003480:	4641      	mov	r1, r8
 8003482:	1851      	adds	r1, r2, r1
 8003484:	6339      	str	r1, [r7, #48]	@ 0x30
 8003486:	4649      	mov	r1, r9
 8003488:	414b      	adcs	r3, r1
 800348a:	637b      	str	r3, [r7, #52]	@ 0x34
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003498:	4659      	mov	r1, fp
 800349a:	00cb      	lsls	r3, r1, #3
 800349c:	4651      	mov	r1, sl
 800349e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034a2:	4651      	mov	r1, sl
 80034a4:	00ca      	lsls	r2, r1, #3
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	4603      	mov	r3, r0
 80034ac:	4642      	mov	r2, r8
 80034ae:	189b      	adds	r3, r3, r2
 80034b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034b4:	464b      	mov	r3, r9
 80034b6:	460a      	mov	r2, r1
 80034b8:	eb42 0303 	adc.w	r3, r2, r3
 80034bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034d4:	460b      	mov	r3, r1
 80034d6:	18db      	adds	r3, r3, r3
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034da:	4613      	mov	r3, r2
 80034dc:	eb42 0303 	adc.w	r3, r2, r3
 80034e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034ea:	f7fc fee1 	bl	80002b0 <__aeabi_uldivmod>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003528 <UART_SetConfig+0x2d4>)
 80034f4:	fba3 1302 	umull	r1, r3, r3, r2
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	2164      	movs	r1, #100	@ 0x64
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	3332      	adds	r3, #50	@ 0x32
 8003506:	4a08      	ldr	r2, [pc, #32]	@ (8003528 <UART_SetConfig+0x2d4>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	095b      	lsrs	r3, r3, #5
 800350e:	f003 0207 	and.w	r2, r3, #7
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4422      	add	r2, r4
 800351a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800351c:	e106      	b.n	800372c <UART_SetConfig+0x4d8>
 800351e:	bf00      	nop
 8003520:	40011000 	.word	0x40011000
 8003524:	40011400 	.word	0x40011400
 8003528:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800352c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003530:	2200      	movs	r2, #0
 8003532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003536:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800353a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800353e:	4642      	mov	r2, r8
 8003540:	464b      	mov	r3, r9
 8003542:	1891      	adds	r1, r2, r2
 8003544:	6239      	str	r1, [r7, #32]
 8003546:	415b      	adcs	r3, r3
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
 800354a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800354e:	4641      	mov	r1, r8
 8003550:	1854      	adds	r4, r2, r1
 8003552:	4649      	mov	r1, r9
 8003554:	eb43 0501 	adc.w	r5, r3, r1
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	00eb      	lsls	r3, r5, #3
 8003562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003566:	00e2      	lsls	r2, r4, #3
 8003568:	4614      	mov	r4, r2
 800356a:	461d      	mov	r5, r3
 800356c:	4643      	mov	r3, r8
 800356e:	18e3      	adds	r3, r4, r3
 8003570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003574:	464b      	mov	r3, r9
 8003576:	eb45 0303 	adc.w	r3, r5, r3
 800357a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800358a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800359a:	4629      	mov	r1, r5
 800359c:	008b      	lsls	r3, r1, #2
 800359e:	4621      	mov	r1, r4
 80035a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a4:	4621      	mov	r1, r4
 80035a6:	008a      	lsls	r2, r1, #2
 80035a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035ac:	f7fc fe80 	bl	80002b0 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4b60      	ldr	r3, [pc, #384]	@ (8003738 <UART_SetConfig+0x4e4>)
 80035b6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	011c      	lsls	r4, r3, #4
 80035be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035d0:	4642      	mov	r2, r8
 80035d2:	464b      	mov	r3, r9
 80035d4:	1891      	adds	r1, r2, r2
 80035d6:	61b9      	str	r1, [r7, #24]
 80035d8:	415b      	adcs	r3, r3
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e0:	4641      	mov	r1, r8
 80035e2:	1851      	adds	r1, r2, r1
 80035e4:	6139      	str	r1, [r7, #16]
 80035e6:	4649      	mov	r1, r9
 80035e8:	414b      	adcs	r3, r1
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f8:	4659      	mov	r1, fp
 80035fa:	00cb      	lsls	r3, r1, #3
 80035fc:	4651      	mov	r1, sl
 80035fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003602:	4651      	mov	r1, sl
 8003604:	00ca      	lsls	r2, r1, #3
 8003606:	4610      	mov	r0, r2
 8003608:	4619      	mov	r1, r3
 800360a:	4603      	mov	r3, r0
 800360c:	4642      	mov	r2, r8
 800360e:	189b      	adds	r3, r3, r2
 8003610:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003614:	464b      	mov	r3, r9
 8003616:	460a      	mov	r2, r1
 8003618:	eb42 0303 	adc.w	r3, r2, r3
 800361c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	67bb      	str	r3, [r7, #120]	@ 0x78
 800362a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003638:	4649      	mov	r1, r9
 800363a:	008b      	lsls	r3, r1, #2
 800363c:	4641      	mov	r1, r8
 800363e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003642:	4641      	mov	r1, r8
 8003644:	008a      	lsls	r2, r1, #2
 8003646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800364a:	f7fc fe31 	bl	80002b0 <__aeabi_uldivmod>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4611      	mov	r1, r2
 8003654:	4b38      	ldr	r3, [pc, #224]	@ (8003738 <UART_SetConfig+0x4e4>)
 8003656:	fba3 2301 	umull	r2, r3, r3, r1
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2264      	movs	r2, #100	@ 0x64
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	1acb      	subs	r3, r1, r3
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	3332      	adds	r3, #50	@ 0x32
 8003668:	4a33      	ldr	r2, [pc, #204]	@ (8003738 <UART_SetConfig+0x4e4>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003674:	441c      	add	r4, r3
 8003676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800367a:	2200      	movs	r2, #0
 800367c:	673b      	str	r3, [r7, #112]	@ 0x70
 800367e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003680:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003684:	4642      	mov	r2, r8
 8003686:	464b      	mov	r3, r9
 8003688:	1891      	adds	r1, r2, r2
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	415b      	adcs	r3, r3
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003694:	4641      	mov	r1, r8
 8003696:	1851      	adds	r1, r2, r1
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	4649      	mov	r1, r9
 800369c:	414b      	adcs	r3, r1
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	f04f 0300 	mov.w	r3, #0
 80036a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036ac:	4659      	mov	r1, fp
 80036ae:	00cb      	lsls	r3, r1, #3
 80036b0:	4651      	mov	r1, sl
 80036b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036b6:	4651      	mov	r1, sl
 80036b8:	00ca      	lsls	r2, r1, #3
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	4603      	mov	r3, r0
 80036c0:	4642      	mov	r2, r8
 80036c2:	189b      	adds	r3, r3, r2
 80036c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036c6:	464b      	mov	r3, r9
 80036c8:	460a      	mov	r2, r1
 80036ca:	eb42 0303 	adc.w	r3, r2, r3
 80036ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80036da:	667a      	str	r2, [r7, #100]	@ 0x64
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036e8:	4649      	mov	r1, r9
 80036ea:	008b      	lsls	r3, r1, #2
 80036ec:	4641      	mov	r1, r8
 80036ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f2:	4641      	mov	r1, r8
 80036f4:	008a      	lsls	r2, r1, #2
 80036f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036fa:	f7fc fdd9 	bl	80002b0 <__aeabi_uldivmod>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <UART_SetConfig+0x4e4>)
 8003704:	fba3 1302 	umull	r1, r3, r3, r2
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	2164      	movs	r1, #100	@ 0x64
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	3332      	adds	r3, #50	@ 0x32
 8003716:	4a08      	ldr	r2, [pc, #32]	@ (8003738 <UART_SetConfig+0x4e4>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	f003 020f 	and.w	r2, r3, #15
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4422      	add	r2, r4
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003732:	46bd      	mov	sp, r7
 8003734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003738:	51eb851f 	.word	0x51eb851f

0800373c <std>:
 800373c:	2300      	movs	r3, #0
 800373e:	b510      	push	{r4, lr}
 8003740:	4604      	mov	r4, r0
 8003742:	e9c0 3300 	strd	r3, r3, [r0]
 8003746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800374a:	6083      	str	r3, [r0, #8]
 800374c:	8181      	strh	r1, [r0, #12]
 800374e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003750:	81c2      	strh	r2, [r0, #14]
 8003752:	6183      	str	r3, [r0, #24]
 8003754:	4619      	mov	r1, r3
 8003756:	2208      	movs	r2, #8
 8003758:	305c      	adds	r0, #92	@ 0x5c
 800375a:	f000 f906 	bl	800396a <memset>
 800375e:	4b0d      	ldr	r3, [pc, #52]	@ (8003794 <std+0x58>)
 8003760:	6263      	str	r3, [r4, #36]	@ 0x24
 8003762:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <std+0x5c>)
 8003764:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003766:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <std+0x60>)
 8003768:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <std+0x64>)
 800376c:	6323      	str	r3, [r4, #48]	@ 0x30
 800376e:	4b0d      	ldr	r3, [pc, #52]	@ (80037a4 <std+0x68>)
 8003770:	6224      	str	r4, [r4, #32]
 8003772:	429c      	cmp	r4, r3
 8003774:	d006      	beq.n	8003784 <std+0x48>
 8003776:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800377a:	4294      	cmp	r4, r2
 800377c:	d002      	beq.n	8003784 <std+0x48>
 800377e:	33d0      	adds	r3, #208	@ 0xd0
 8003780:	429c      	cmp	r4, r3
 8003782:	d105      	bne.n	8003790 <std+0x54>
 8003784:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800378c:	f000 b966 	b.w	8003a5c <__retarget_lock_init_recursive>
 8003790:	bd10      	pop	{r4, pc}
 8003792:	bf00      	nop
 8003794:	080038e5 	.word	0x080038e5
 8003798:	08003907 	.word	0x08003907
 800379c:	0800393f 	.word	0x0800393f
 80037a0:	08003963 	.word	0x08003963
 80037a4:	20000128 	.word	0x20000128

080037a8 <stdio_exit_handler>:
 80037a8:	4a02      	ldr	r2, [pc, #8]	@ (80037b4 <stdio_exit_handler+0xc>)
 80037aa:	4903      	ldr	r1, [pc, #12]	@ (80037b8 <stdio_exit_handler+0x10>)
 80037ac:	4803      	ldr	r0, [pc, #12]	@ (80037bc <stdio_exit_handler+0x14>)
 80037ae:	f000 b869 	b.w	8003884 <_fwalk_sglue>
 80037b2:	bf00      	nop
 80037b4:	2000000c 	.word	0x2000000c
 80037b8:	080042fd 	.word	0x080042fd
 80037bc:	2000001c 	.word	0x2000001c

080037c0 <cleanup_stdio>:
 80037c0:	6841      	ldr	r1, [r0, #4]
 80037c2:	4b0c      	ldr	r3, [pc, #48]	@ (80037f4 <cleanup_stdio+0x34>)
 80037c4:	4299      	cmp	r1, r3
 80037c6:	b510      	push	{r4, lr}
 80037c8:	4604      	mov	r4, r0
 80037ca:	d001      	beq.n	80037d0 <cleanup_stdio+0x10>
 80037cc:	f000 fd96 	bl	80042fc <_fflush_r>
 80037d0:	68a1      	ldr	r1, [r4, #8]
 80037d2:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <cleanup_stdio+0x38>)
 80037d4:	4299      	cmp	r1, r3
 80037d6:	d002      	beq.n	80037de <cleanup_stdio+0x1e>
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 fd8f 	bl	80042fc <_fflush_r>
 80037de:	68e1      	ldr	r1, [r4, #12]
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <cleanup_stdio+0x3c>)
 80037e2:	4299      	cmp	r1, r3
 80037e4:	d004      	beq.n	80037f0 <cleanup_stdio+0x30>
 80037e6:	4620      	mov	r0, r4
 80037e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037ec:	f000 bd86 	b.w	80042fc <_fflush_r>
 80037f0:	bd10      	pop	{r4, pc}
 80037f2:	bf00      	nop
 80037f4:	20000128 	.word	0x20000128
 80037f8:	20000190 	.word	0x20000190
 80037fc:	200001f8 	.word	0x200001f8

08003800 <global_stdio_init.part.0>:
 8003800:	b510      	push	{r4, lr}
 8003802:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <global_stdio_init.part.0+0x30>)
 8003804:	4c0b      	ldr	r4, [pc, #44]	@ (8003834 <global_stdio_init.part.0+0x34>)
 8003806:	4a0c      	ldr	r2, [pc, #48]	@ (8003838 <global_stdio_init.part.0+0x38>)
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	4620      	mov	r0, r4
 800380c:	2200      	movs	r2, #0
 800380e:	2104      	movs	r1, #4
 8003810:	f7ff ff94 	bl	800373c <std>
 8003814:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003818:	2201      	movs	r2, #1
 800381a:	2109      	movs	r1, #9
 800381c:	f7ff ff8e 	bl	800373c <std>
 8003820:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003824:	2202      	movs	r2, #2
 8003826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800382a:	2112      	movs	r1, #18
 800382c:	f7ff bf86 	b.w	800373c <std>
 8003830:	20000260 	.word	0x20000260
 8003834:	20000128 	.word	0x20000128
 8003838:	080037a9 	.word	0x080037a9

0800383c <__sfp_lock_acquire>:
 800383c:	4801      	ldr	r0, [pc, #4]	@ (8003844 <__sfp_lock_acquire+0x8>)
 800383e:	f000 b90e 	b.w	8003a5e <__retarget_lock_acquire_recursive>
 8003842:	bf00      	nop
 8003844:	20000269 	.word	0x20000269

08003848 <__sfp_lock_release>:
 8003848:	4801      	ldr	r0, [pc, #4]	@ (8003850 <__sfp_lock_release+0x8>)
 800384a:	f000 b909 	b.w	8003a60 <__retarget_lock_release_recursive>
 800384e:	bf00      	nop
 8003850:	20000269 	.word	0x20000269

08003854 <__sinit>:
 8003854:	b510      	push	{r4, lr}
 8003856:	4604      	mov	r4, r0
 8003858:	f7ff fff0 	bl	800383c <__sfp_lock_acquire>
 800385c:	6a23      	ldr	r3, [r4, #32]
 800385e:	b11b      	cbz	r3, 8003868 <__sinit+0x14>
 8003860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003864:	f7ff bff0 	b.w	8003848 <__sfp_lock_release>
 8003868:	4b04      	ldr	r3, [pc, #16]	@ (800387c <__sinit+0x28>)
 800386a:	6223      	str	r3, [r4, #32]
 800386c:	4b04      	ldr	r3, [pc, #16]	@ (8003880 <__sinit+0x2c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f5      	bne.n	8003860 <__sinit+0xc>
 8003874:	f7ff ffc4 	bl	8003800 <global_stdio_init.part.0>
 8003878:	e7f2      	b.n	8003860 <__sinit+0xc>
 800387a:	bf00      	nop
 800387c:	080037c1 	.word	0x080037c1
 8003880:	20000260 	.word	0x20000260

08003884 <_fwalk_sglue>:
 8003884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003888:	4607      	mov	r7, r0
 800388a:	4688      	mov	r8, r1
 800388c:	4614      	mov	r4, r2
 800388e:	2600      	movs	r6, #0
 8003890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003894:	f1b9 0901 	subs.w	r9, r9, #1
 8003898:	d505      	bpl.n	80038a6 <_fwalk_sglue+0x22>
 800389a:	6824      	ldr	r4, [r4, #0]
 800389c:	2c00      	cmp	r4, #0
 800389e:	d1f7      	bne.n	8003890 <_fwalk_sglue+0xc>
 80038a0:	4630      	mov	r0, r6
 80038a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a6:	89ab      	ldrh	r3, [r5, #12]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d907      	bls.n	80038bc <_fwalk_sglue+0x38>
 80038ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038b0:	3301      	adds	r3, #1
 80038b2:	d003      	beq.n	80038bc <_fwalk_sglue+0x38>
 80038b4:	4629      	mov	r1, r5
 80038b6:	4638      	mov	r0, r7
 80038b8:	47c0      	blx	r8
 80038ba:	4306      	orrs	r6, r0
 80038bc:	3568      	adds	r5, #104	@ 0x68
 80038be:	e7e9      	b.n	8003894 <_fwalk_sglue+0x10>

080038c0 <iprintf>:
 80038c0:	b40f      	push	{r0, r1, r2, r3}
 80038c2:	b507      	push	{r0, r1, r2, lr}
 80038c4:	4906      	ldr	r1, [pc, #24]	@ (80038e0 <iprintf+0x20>)
 80038c6:	ab04      	add	r3, sp, #16
 80038c8:	6808      	ldr	r0, [r1, #0]
 80038ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80038ce:	6881      	ldr	r1, [r0, #8]
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	f000 f9e9 	bl	8003ca8 <_vfiprintf_r>
 80038d6:	b003      	add	sp, #12
 80038d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80038dc:	b004      	add	sp, #16
 80038de:	4770      	bx	lr
 80038e0:	20000018 	.word	0x20000018

080038e4 <__sread>:
 80038e4:	b510      	push	{r4, lr}
 80038e6:	460c      	mov	r4, r1
 80038e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038ec:	f000 f868 	bl	80039c0 <_read_r>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	bfab      	itete	ge
 80038f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80038f6:	89a3      	ldrhlt	r3, [r4, #12]
 80038f8:	181b      	addge	r3, r3, r0
 80038fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80038fe:	bfac      	ite	ge
 8003900:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003902:	81a3      	strhlt	r3, [r4, #12]
 8003904:	bd10      	pop	{r4, pc}

08003906 <__swrite>:
 8003906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800390a:	461f      	mov	r7, r3
 800390c:	898b      	ldrh	r3, [r1, #12]
 800390e:	05db      	lsls	r3, r3, #23
 8003910:	4605      	mov	r5, r0
 8003912:	460c      	mov	r4, r1
 8003914:	4616      	mov	r6, r2
 8003916:	d505      	bpl.n	8003924 <__swrite+0x1e>
 8003918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800391c:	2302      	movs	r3, #2
 800391e:	2200      	movs	r2, #0
 8003920:	f000 f83c 	bl	800399c <_lseek_r>
 8003924:	89a3      	ldrh	r3, [r4, #12]
 8003926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800392a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800392e:	81a3      	strh	r3, [r4, #12]
 8003930:	4632      	mov	r2, r6
 8003932:	463b      	mov	r3, r7
 8003934:	4628      	mov	r0, r5
 8003936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800393a:	f000 b853 	b.w	80039e4 <_write_r>

0800393e <__sseek>:
 800393e:	b510      	push	{r4, lr}
 8003940:	460c      	mov	r4, r1
 8003942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003946:	f000 f829 	bl	800399c <_lseek_r>
 800394a:	1c43      	adds	r3, r0, #1
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	bf15      	itete	ne
 8003950:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003952:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003956:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800395a:	81a3      	strheq	r3, [r4, #12]
 800395c:	bf18      	it	ne
 800395e:	81a3      	strhne	r3, [r4, #12]
 8003960:	bd10      	pop	{r4, pc}

08003962 <__sclose>:
 8003962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003966:	f000 b809 	b.w	800397c <_close_r>

0800396a <memset>:
 800396a:	4402      	add	r2, r0
 800396c:	4603      	mov	r3, r0
 800396e:	4293      	cmp	r3, r2
 8003970:	d100      	bne.n	8003974 <memset+0xa>
 8003972:	4770      	bx	lr
 8003974:	f803 1b01 	strb.w	r1, [r3], #1
 8003978:	e7f9      	b.n	800396e <memset+0x4>
	...

0800397c <_close_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	4d06      	ldr	r5, [pc, #24]	@ (8003998 <_close_r+0x1c>)
 8003980:	2300      	movs	r3, #0
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	602b      	str	r3, [r5, #0]
 8003988:	f7fd f91a 	bl	8000bc0 <_close>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_close_r+0x1a>
 8003990:	682b      	ldr	r3, [r5, #0]
 8003992:	b103      	cbz	r3, 8003996 <_close_r+0x1a>
 8003994:	6023      	str	r3, [r4, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	20000264 	.word	0x20000264

0800399c <_lseek_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	4d07      	ldr	r5, [pc, #28]	@ (80039bc <_lseek_r+0x20>)
 80039a0:	4604      	mov	r4, r0
 80039a2:	4608      	mov	r0, r1
 80039a4:	4611      	mov	r1, r2
 80039a6:	2200      	movs	r2, #0
 80039a8:	602a      	str	r2, [r5, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f7fd f92f 	bl	8000c0e <_lseek>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d102      	bne.n	80039ba <_lseek_r+0x1e>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b103      	cbz	r3, 80039ba <_lseek_r+0x1e>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	20000264 	.word	0x20000264

080039c0 <_read_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4d07      	ldr	r5, [pc, #28]	@ (80039e0 <_read_r+0x20>)
 80039c4:	4604      	mov	r4, r0
 80039c6:	4608      	mov	r0, r1
 80039c8:	4611      	mov	r1, r2
 80039ca:	2200      	movs	r2, #0
 80039cc:	602a      	str	r2, [r5, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	f7fd f8bd 	bl	8000b4e <_read>
 80039d4:	1c43      	adds	r3, r0, #1
 80039d6:	d102      	bne.n	80039de <_read_r+0x1e>
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	b103      	cbz	r3, 80039de <_read_r+0x1e>
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	bd38      	pop	{r3, r4, r5, pc}
 80039e0:	20000264 	.word	0x20000264

080039e4 <_write_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	4d07      	ldr	r5, [pc, #28]	@ (8003a04 <_write_r+0x20>)
 80039e8:	4604      	mov	r4, r0
 80039ea:	4608      	mov	r0, r1
 80039ec:	4611      	mov	r1, r2
 80039ee:	2200      	movs	r2, #0
 80039f0:	602a      	str	r2, [r5, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	f7fd f8c8 	bl	8000b88 <_write>
 80039f8:	1c43      	adds	r3, r0, #1
 80039fa:	d102      	bne.n	8003a02 <_write_r+0x1e>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	b103      	cbz	r3, 8003a02 <_write_r+0x1e>
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	bd38      	pop	{r3, r4, r5, pc}
 8003a04:	20000264 	.word	0x20000264

08003a08 <__errno>:
 8003a08:	4b01      	ldr	r3, [pc, #4]	@ (8003a10 <__errno+0x8>)
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000018 	.word	0x20000018

08003a14 <__libc_init_array>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	4d0d      	ldr	r5, [pc, #52]	@ (8003a4c <__libc_init_array+0x38>)
 8003a18:	4c0d      	ldr	r4, [pc, #52]	@ (8003a50 <__libc_init_array+0x3c>)
 8003a1a:	1b64      	subs	r4, r4, r5
 8003a1c:	10a4      	asrs	r4, r4, #2
 8003a1e:	2600      	movs	r6, #0
 8003a20:	42a6      	cmp	r6, r4
 8003a22:	d109      	bne.n	8003a38 <__libc_init_array+0x24>
 8003a24:	4d0b      	ldr	r5, [pc, #44]	@ (8003a54 <__libc_init_array+0x40>)
 8003a26:	4c0c      	ldr	r4, [pc, #48]	@ (8003a58 <__libc_init_array+0x44>)
 8003a28:	f000 fdb8 	bl	800459c <_init>
 8003a2c:	1b64      	subs	r4, r4, r5
 8003a2e:	10a4      	asrs	r4, r4, #2
 8003a30:	2600      	movs	r6, #0
 8003a32:	42a6      	cmp	r6, r4
 8003a34:	d105      	bne.n	8003a42 <__libc_init_array+0x2e>
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3c:	4798      	blx	r3
 8003a3e:	3601      	adds	r6, #1
 8003a40:	e7ee      	b.n	8003a20 <__libc_init_array+0xc>
 8003a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a46:	4798      	blx	r3
 8003a48:	3601      	adds	r6, #1
 8003a4a:	e7f2      	b.n	8003a32 <__libc_init_array+0x1e>
 8003a4c:	08004674 	.word	0x08004674
 8003a50:	08004674 	.word	0x08004674
 8003a54:	08004674 	.word	0x08004674
 8003a58:	08004678 	.word	0x08004678

08003a5c <__retarget_lock_init_recursive>:
 8003a5c:	4770      	bx	lr

08003a5e <__retarget_lock_acquire_recursive>:
 8003a5e:	4770      	bx	lr

08003a60 <__retarget_lock_release_recursive>:
 8003a60:	4770      	bx	lr
	...

08003a64 <_free_r>:
 8003a64:	b538      	push	{r3, r4, r5, lr}
 8003a66:	4605      	mov	r5, r0
 8003a68:	2900      	cmp	r1, #0
 8003a6a:	d041      	beq.n	8003af0 <_free_r+0x8c>
 8003a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a70:	1f0c      	subs	r4, r1, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	bfb8      	it	lt
 8003a76:	18e4      	addlt	r4, r4, r3
 8003a78:	f000 f8e0 	bl	8003c3c <__malloc_lock>
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <_free_r+0x90>)
 8003a7e:	6813      	ldr	r3, [r2, #0]
 8003a80:	b933      	cbnz	r3, 8003a90 <_free_r+0x2c>
 8003a82:	6063      	str	r3, [r4, #4]
 8003a84:	6014      	str	r4, [r2, #0]
 8003a86:	4628      	mov	r0, r5
 8003a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a8c:	f000 b8dc 	b.w	8003c48 <__malloc_unlock>
 8003a90:	42a3      	cmp	r3, r4
 8003a92:	d908      	bls.n	8003aa6 <_free_r+0x42>
 8003a94:	6820      	ldr	r0, [r4, #0]
 8003a96:	1821      	adds	r1, r4, r0
 8003a98:	428b      	cmp	r3, r1
 8003a9a:	bf01      	itttt	eq
 8003a9c:	6819      	ldreq	r1, [r3, #0]
 8003a9e:	685b      	ldreq	r3, [r3, #4]
 8003aa0:	1809      	addeq	r1, r1, r0
 8003aa2:	6021      	streq	r1, [r4, #0]
 8003aa4:	e7ed      	b.n	8003a82 <_free_r+0x1e>
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	b10b      	cbz	r3, 8003ab0 <_free_r+0x4c>
 8003aac:	42a3      	cmp	r3, r4
 8003aae:	d9fa      	bls.n	8003aa6 <_free_r+0x42>
 8003ab0:	6811      	ldr	r1, [r2, #0]
 8003ab2:	1850      	adds	r0, r2, r1
 8003ab4:	42a0      	cmp	r0, r4
 8003ab6:	d10b      	bne.n	8003ad0 <_free_r+0x6c>
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	4401      	add	r1, r0
 8003abc:	1850      	adds	r0, r2, r1
 8003abe:	4283      	cmp	r3, r0
 8003ac0:	6011      	str	r1, [r2, #0]
 8003ac2:	d1e0      	bne.n	8003a86 <_free_r+0x22>
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	6053      	str	r3, [r2, #4]
 8003aca:	4408      	add	r0, r1
 8003acc:	6010      	str	r0, [r2, #0]
 8003ace:	e7da      	b.n	8003a86 <_free_r+0x22>
 8003ad0:	d902      	bls.n	8003ad8 <_free_r+0x74>
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	602b      	str	r3, [r5, #0]
 8003ad6:	e7d6      	b.n	8003a86 <_free_r+0x22>
 8003ad8:	6820      	ldr	r0, [r4, #0]
 8003ada:	1821      	adds	r1, r4, r0
 8003adc:	428b      	cmp	r3, r1
 8003ade:	bf04      	itt	eq
 8003ae0:	6819      	ldreq	r1, [r3, #0]
 8003ae2:	685b      	ldreq	r3, [r3, #4]
 8003ae4:	6063      	str	r3, [r4, #4]
 8003ae6:	bf04      	itt	eq
 8003ae8:	1809      	addeq	r1, r1, r0
 8003aea:	6021      	streq	r1, [r4, #0]
 8003aec:	6054      	str	r4, [r2, #4]
 8003aee:	e7ca      	b.n	8003a86 <_free_r+0x22>
 8003af0:	bd38      	pop	{r3, r4, r5, pc}
 8003af2:	bf00      	nop
 8003af4:	20000270 	.word	0x20000270

08003af8 <sbrk_aligned>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	4e0f      	ldr	r6, [pc, #60]	@ (8003b38 <sbrk_aligned+0x40>)
 8003afc:	460c      	mov	r4, r1
 8003afe:	6831      	ldr	r1, [r6, #0]
 8003b00:	4605      	mov	r5, r0
 8003b02:	b911      	cbnz	r1, 8003b0a <sbrk_aligned+0x12>
 8003b04:	f000 fcb6 	bl	8004474 <_sbrk_r>
 8003b08:	6030      	str	r0, [r6, #0]
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f000 fcb1 	bl	8004474 <_sbrk_r>
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	d103      	bne.n	8003b1e <sbrk_aligned+0x26>
 8003b16:	f04f 34ff 	mov.w	r4, #4294967295
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	bd70      	pop	{r4, r5, r6, pc}
 8003b1e:	1cc4      	adds	r4, r0, #3
 8003b20:	f024 0403 	bic.w	r4, r4, #3
 8003b24:	42a0      	cmp	r0, r4
 8003b26:	d0f8      	beq.n	8003b1a <sbrk_aligned+0x22>
 8003b28:	1a21      	subs	r1, r4, r0
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f000 fca2 	bl	8004474 <_sbrk_r>
 8003b30:	3001      	adds	r0, #1
 8003b32:	d1f2      	bne.n	8003b1a <sbrk_aligned+0x22>
 8003b34:	e7ef      	b.n	8003b16 <sbrk_aligned+0x1e>
 8003b36:	bf00      	nop
 8003b38:	2000026c 	.word	0x2000026c

08003b3c <_malloc_r>:
 8003b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b40:	1ccd      	adds	r5, r1, #3
 8003b42:	f025 0503 	bic.w	r5, r5, #3
 8003b46:	3508      	adds	r5, #8
 8003b48:	2d0c      	cmp	r5, #12
 8003b4a:	bf38      	it	cc
 8003b4c:	250c      	movcc	r5, #12
 8003b4e:	2d00      	cmp	r5, #0
 8003b50:	4606      	mov	r6, r0
 8003b52:	db01      	blt.n	8003b58 <_malloc_r+0x1c>
 8003b54:	42a9      	cmp	r1, r5
 8003b56:	d904      	bls.n	8003b62 <_malloc_r+0x26>
 8003b58:	230c      	movs	r3, #12
 8003b5a:	6033      	str	r3, [r6, #0]
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c38 <_malloc_r+0xfc>
 8003b66:	f000 f869 	bl	8003c3c <__malloc_lock>
 8003b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b6e:	461c      	mov	r4, r3
 8003b70:	bb44      	cbnz	r4, 8003bc4 <_malloc_r+0x88>
 8003b72:	4629      	mov	r1, r5
 8003b74:	4630      	mov	r0, r6
 8003b76:	f7ff ffbf 	bl	8003af8 <sbrk_aligned>
 8003b7a:	1c43      	adds	r3, r0, #1
 8003b7c:	4604      	mov	r4, r0
 8003b7e:	d158      	bne.n	8003c32 <_malloc_r+0xf6>
 8003b80:	f8d8 4000 	ldr.w	r4, [r8]
 8003b84:	4627      	mov	r7, r4
 8003b86:	2f00      	cmp	r7, #0
 8003b88:	d143      	bne.n	8003c12 <_malloc_r+0xd6>
 8003b8a:	2c00      	cmp	r4, #0
 8003b8c:	d04b      	beq.n	8003c26 <_malloc_r+0xea>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	4639      	mov	r1, r7
 8003b92:	4630      	mov	r0, r6
 8003b94:	eb04 0903 	add.w	r9, r4, r3
 8003b98:	f000 fc6c 	bl	8004474 <_sbrk_r>
 8003b9c:	4581      	cmp	r9, r0
 8003b9e:	d142      	bne.n	8003c26 <_malloc_r+0xea>
 8003ba0:	6821      	ldr	r1, [r4, #0]
 8003ba2:	1a6d      	subs	r5, r5, r1
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f7ff ffa6 	bl	8003af8 <sbrk_aligned>
 8003bac:	3001      	adds	r0, #1
 8003bae:	d03a      	beq.n	8003c26 <_malloc_r+0xea>
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	442b      	add	r3, r5
 8003bb4:	6023      	str	r3, [r4, #0]
 8003bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	bb62      	cbnz	r2, 8003c18 <_malloc_r+0xdc>
 8003bbe:	f8c8 7000 	str.w	r7, [r8]
 8003bc2:	e00f      	b.n	8003be4 <_malloc_r+0xa8>
 8003bc4:	6822      	ldr	r2, [r4, #0]
 8003bc6:	1b52      	subs	r2, r2, r5
 8003bc8:	d420      	bmi.n	8003c0c <_malloc_r+0xd0>
 8003bca:	2a0b      	cmp	r2, #11
 8003bcc:	d917      	bls.n	8003bfe <_malloc_r+0xc2>
 8003bce:	1961      	adds	r1, r4, r5
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	6025      	str	r5, [r4, #0]
 8003bd4:	bf18      	it	ne
 8003bd6:	6059      	strne	r1, [r3, #4]
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	bf08      	it	eq
 8003bdc:	f8c8 1000 	streq.w	r1, [r8]
 8003be0:	5162      	str	r2, [r4, r5]
 8003be2:	604b      	str	r3, [r1, #4]
 8003be4:	4630      	mov	r0, r6
 8003be6:	f000 f82f 	bl	8003c48 <__malloc_unlock>
 8003bea:	f104 000b 	add.w	r0, r4, #11
 8003bee:	1d23      	adds	r3, r4, #4
 8003bf0:	f020 0007 	bic.w	r0, r0, #7
 8003bf4:	1ac2      	subs	r2, r0, r3
 8003bf6:	bf1c      	itt	ne
 8003bf8:	1a1b      	subne	r3, r3, r0
 8003bfa:	50a3      	strne	r3, [r4, r2]
 8003bfc:	e7af      	b.n	8003b5e <_malloc_r+0x22>
 8003bfe:	6862      	ldr	r2, [r4, #4]
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	bf0c      	ite	eq
 8003c04:	f8c8 2000 	streq.w	r2, [r8]
 8003c08:	605a      	strne	r2, [r3, #4]
 8003c0a:	e7eb      	b.n	8003be4 <_malloc_r+0xa8>
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	6864      	ldr	r4, [r4, #4]
 8003c10:	e7ae      	b.n	8003b70 <_malloc_r+0x34>
 8003c12:	463c      	mov	r4, r7
 8003c14:	687f      	ldr	r7, [r7, #4]
 8003c16:	e7b6      	b.n	8003b86 <_malloc_r+0x4a>
 8003c18:	461a      	mov	r2, r3
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	42a3      	cmp	r3, r4
 8003c1e:	d1fb      	bne.n	8003c18 <_malloc_r+0xdc>
 8003c20:	2300      	movs	r3, #0
 8003c22:	6053      	str	r3, [r2, #4]
 8003c24:	e7de      	b.n	8003be4 <_malloc_r+0xa8>
 8003c26:	230c      	movs	r3, #12
 8003c28:	6033      	str	r3, [r6, #0]
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	f000 f80c 	bl	8003c48 <__malloc_unlock>
 8003c30:	e794      	b.n	8003b5c <_malloc_r+0x20>
 8003c32:	6005      	str	r5, [r0, #0]
 8003c34:	e7d6      	b.n	8003be4 <_malloc_r+0xa8>
 8003c36:	bf00      	nop
 8003c38:	20000270 	.word	0x20000270

08003c3c <__malloc_lock>:
 8003c3c:	4801      	ldr	r0, [pc, #4]	@ (8003c44 <__malloc_lock+0x8>)
 8003c3e:	f7ff bf0e 	b.w	8003a5e <__retarget_lock_acquire_recursive>
 8003c42:	bf00      	nop
 8003c44:	20000268 	.word	0x20000268

08003c48 <__malloc_unlock>:
 8003c48:	4801      	ldr	r0, [pc, #4]	@ (8003c50 <__malloc_unlock+0x8>)
 8003c4a:	f7ff bf09 	b.w	8003a60 <__retarget_lock_release_recursive>
 8003c4e:	bf00      	nop
 8003c50:	20000268 	.word	0x20000268

08003c54 <__sfputc_r>:
 8003c54:	6893      	ldr	r3, [r2, #8]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	b410      	push	{r4}
 8003c5c:	6093      	str	r3, [r2, #8]
 8003c5e:	da08      	bge.n	8003c72 <__sfputc_r+0x1e>
 8003c60:	6994      	ldr	r4, [r2, #24]
 8003c62:	42a3      	cmp	r3, r4
 8003c64:	db01      	blt.n	8003c6a <__sfputc_r+0x16>
 8003c66:	290a      	cmp	r1, #10
 8003c68:	d103      	bne.n	8003c72 <__sfputc_r+0x1e>
 8003c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c6e:	f000 bb6d 	b.w	800434c <__swbuf_r>
 8003c72:	6813      	ldr	r3, [r2, #0]
 8003c74:	1c58      	adds	r0, r3, #1
 8003c76:	6010      	str	r0, [r2, #0]
 8003c78:	7019      	strb	r1, [r3, #0]
 8003c7a:	4608      	mov	r0, r1
 8003c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <__sfputs_r>:
 8003c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c84:	4606      	mov	r6, r0
 8003c86:	460f      	mov	r7, r1
 8003c88:	4614      	mov	r4, r2
 8003c8a:	18d5      	adds	r5, r2, r3
 8003c8c:	42ac      	cmp	r4, r5
 8003c8e:	d101      	bne.n	8003c94 <__sfputs_r+0x12>
 8003c90:	2000      	movs	r0, #0
 8003c92:	e007      	b.n	8003ca4 <__sfputs_r+0x22>
 8003c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c98:	463a      	mov	r2, r7
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f7ff ffda 	bl	8003c54 <__sfputc_r>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d1f3      	bne.n	8003c8c <__sfputs_r+0xa>
 8003ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ca8 <_vfiprintf_r>:
 8003ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cac:	460d      	mov	r5, r1
 8003cae:	b09d      	sub	sp, #116	@ 0x74
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	4698      	mov	r8, r3
 8003cb4:	4606      	mov	r6, r0
 8003cb6:	b118      	cbz	r0, 8003cc0 <_vfiprintf_r+0x18>
 8003cb8:	6a03      	ldr	r3, [r0, #32]
 8003cba:	b90b      	cbnz	r3, 8003cc0 <_vfiprintf_r+0x18>
 8003cbc:	f7ff fdca 	bl	8003854 <__sinit>
 8003cc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003cc2:	07d9      	lsls	r1, r3, #31
 8003cc4:	d405      	bmi.n	8003cd2 <_vfiprintf_r+0x2a>
 8003cc6:	89ab      	ldrh	r3, [r5, #12]
 8003cc8:	059a      	lsls	r2, r3, #22
 8003cca:	d402      	bmi.n	8003cd2 <_vfiprintf_r+0x2a>
 8003ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cce:	f7ff fec6 	bl	8003a5e <__retarget_lock_acquire_recursive>
 8003cd2:	89ab      	ldrh	r3, [r5, #12]
 8003cd4:	071b      	lsls	r3, r3, #28
 8003cd6:	d501      	bpl.n	8003cdc <_vfiprintf_r+0x34>
 8003cd8:	692b      	ldr	r3, [r5, #16]
 8003cda:	b99b      	cbnz	r3, 8003d04 <_vfiprintf_r+0x5c>
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4630      	mov	r0, r6
 8003ce0:	f000 fb72 	bl	80043c8 <__swsetup_r>
 8003ce4:	b170      	cbz	r0, 8003d04 <_vfiprintf_r+0x5c>
 8003ce6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ce8:	07dc      	lsls	r4, r3, #31
 8003cea:	d504      	bpl.n	8003cf6 <_vfiprintf_r+0x4e>
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	b01d      	add	sp, #116	@ 0x74
 8003cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf6:	89ab      	ldrh	r3, [r5, #12]
 8003cf8:	0598      	lsls	r0, r3, #22
 8003cfa:	d4f7      	bmi.n	8003cec <_vfiprintf_r+0x44>
 8003cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003cfe:	f7ff feaf 	bl	8003a60 <__retarget_lock_release_recursive>
 8003d02:	e7f3      	b.n	8003cec <_vfiprintf_r+0x44>
 8003d04:	2300      	movs	r3, #0
 8003d06:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d08:	2320      	movs	r3, #32
 8003d0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d12:	2330      	movs	r3, #48	@ 0x30
 8003d14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003ec4 <_vfiprintf_r+0x21c>
 8003d18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d1c:	f04f 0901 	mov.w	r9, #1
 8003d20:	4623      	mov	r3, r4
 8003d22:	469a      	mov	sl, r3
 8003d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d28:	b10a      	cbz	r2, 8003d2e <_vfiprintf_r+0x86>
 8003d2a:	2a25      	cmp	r2, #37	@ 0x25
 8003d2c:	d1f9      	bne.n	8003d22 <_vfiprintf_r+0x7a>
 8003d2e:	ebba 0b04 	subs.w	fp, sl, r4
 8003d32:	d00b      	beq.n	8003d4c <_vfiprintf_r+0xa4>
 8003d34:	465b      	mov	r3, fp
 8003d36:	4622      	mov	r2, r4
 8003d38:	4629      	mov	r1, r5
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f7ff ffa1 	bl	8003c82 <__sfputs_r>
 8003d40:	3001      	adds	r0, #1
 8003d42:	f000 80a7 	beq.w	8003e94 <_vfiprintf_r+0x1ec>
 8003d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d48:	445a      	add	r2, fp
 8003d4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 809f 	beq.w	8003e94 <_vfiprintf_r+0x1ec>
 8003d56:	2300      	movs	r3, #0
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d60:	f10a 0a01 	add.w	sl, sl, #1
 8003d64:	9304      	str	r3, [sp, #16]
 8003d66:	9307      	str	r3, [sp, #28]
 8003d68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d6e:	4654      	mov	r4, sl
 8003d70:	2205      	movs	r2, #5
 8003d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d76:	4853      	ldr	r0, [pc, #332]	@ (8003ec4 <_vfiprintf_r+0x21c>)
 8003d78:	f7fc fa4a 	bl	8000210 <memchr>
 8003d7c:	9a04      	ldr	r2, [sp, #16]
 8003d7e:	b9d8      	cbnz	r0, 8003db8 <_vfiprintf_r+0x110>
 8003d80:	06d1      	lsls	r1, r2, #27
 8003d82:	bf44      	itt	mi
 8003d84:	2320      	movmi	r3, #32
 8003d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d8a:	0713      	lsls	r3, r2, #28
 8003d8c:	bf44      	itt	mi
 8003d8e:	232b      	movmi	r3, #43	@ 0x2b
 8003d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d94:	f89a 3000 	ldrb.w	r3, [sl]
 8003d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d9a:	d015      	beq.n	8003dc8 <_vfiprintf_r+0x120>
 8003d9c:	9a07      	ldr	r2, [sp, #28]
 8003d9e:	4654      	mov	r4, sl
 8003da0:	2000      	movs	r0, #0
 8003da2:	f04f 0c0a 	mov.w	ip, #10
 8003da6:	4621      	mov	r1, r4
 8003da8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dac:	3b30      	subs	r3, #48	@ 0x30
 8003dae:	2b09      	cmp	r3, #9
 8003db0:	d94b      	bls.n	8003e4a <_vfiprintf_r+0x1a2>
 8003db2:	b1b0      	cbz	r0, 8003de2 <_vfiprintf_r+0x13a>
 8003db4:	9207      	str	r2, [sp, #28]
 8003db6:	e014      	b.n	8003de2 <_vfiprintf_r+0x13a>
 8003db8:	eba0 0308 	sub.w	r3, r0, r8
 8003dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	9304      	str	r3, [sp, #16]
 8003dc4:	46a2      	mov	sl, r4
 8003dc6:	e7d2      	b.n	8003d6e <_vfiprintf_r+0xc6>
 8003dc8:	9b03      	ldr	r3, [sp, #12]
 8003dca:	1d19      	adds	r1, r3, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	9103      	str	r1, [sp, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bfbb      	ittet	lt
 8003dd4:	425b      	neglt	r3, r3
 8003dd6:	f042 0202 	orrlt.w	r2, r2, #2
 8003dda:	9307      	strge	r3, [sp, #28]
 8003ddc:	9307      	strlt	r3, [sp, #28]
 8003dde:	bfb8      	it	lt
 8003de0:	9204      	strlt	r2, [sp, #16]
 8003de2:	7823      	ldrb	r3, [r4, #0]
 8003de4:	2b2e      	cmp	r3, #46	@ 0x2e
 8003de6:	d10a      	bne.n	8003dfe <_vfiprintf_r+0x156>
 8003de8:	7863      	ldrb	r3, [r4, #1]
 8003dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dec:	d132      	bne.n	8003e54 <_vfiprintf_r+0x1ac>
 8003dee:	9b03      	ldr	r3, [sp, #12]
 8003df0:	1d1a      	adds	r2, r3, #4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	9203      	str	r2, [sp, #12]
 8003df6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dfa:	3402      	adds	r4, #2
 8003dfc:	9305      	str	r3, [sp, #20]
 8003dfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003ed4 <_vfiprintf_r+0x22c>
 8003e02:	7821      	ldrb	r1, [r4, #0]
 8003e04:	2203      	movs	r2, #3
 8003e06:	4650      	mov	r0, sl
 8003e08:	f7fc fa02 	bl	8000210 <memchr>
 8003e0c:	b138      	cbz	r0, 8003e1e <_vfiprintf_r+0x176>
 8003e0e:	9b04      	ldr	r3, [sp, #16]
 8003e10:	eba0 000a 	sub.w	r0, r0, sl
 8003e14:	2240      	movs	r2, #64	@ 0x40
 8003e16:	4082      	lsls	r2, r0
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	3401      	adds	r4, #1
 8003e1c:	9304      	str	r3, [sp, #16]
 8003e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e22:	4829      	ldr	r0, [pc, #164]	@ (8003ec8 <_vfiprintf_r+0x220>)
 8003e24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e28:	2206      	movs	r2, #6
 8003e2a:	f7fc f9f1 	bl	8000210 <memchr>
 8003e2e:	2800      	cmp	r0, #0
 8003e30:	d03f      	beq.n	8003eb2 <_vfiprintf_r+0x20a>
 8003e32:	4b26      	ldr	r3, [pc, #152]	@ (8003ecc <_vfiprintf_r+0x224>)
 8003e34:	bb1b      	cbnz	r3, 8003e7e <_vfiprintf_r+0x1d6>
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	3307      	adds	r3, #7
 8003e3a:	f023 0307 	bic.w	r3, r3, #7
 8003e3e:	3308      	adds	r3, #8
 8003e40:	9303      	str	r3, [sp, #12]
 8003e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e44:	443b      	add	r3, r7
 8003e46:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e48:	e76a      	b.n	8003d20 <_vfiprintf_r+0x78>
 8003e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e4e:	460c      	mov	r4, r1
 8003e50:	2001      	movs	r0, #1
 8003e52:	e7a8      	b.n	8003da6 <_vfiprintf_r+0xfe>
 8003e54:	2300      	movs	r3, #0
 8003e56:	3401      	adds	r4, #1
 8003e58:	9305      	str	r3, [sp, #20]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f04f 0c0a 	mov.w	ip, #10
 8003e60:	4620      	mov	r0, r4
 8003e62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e66:	3a30      	subs	r2, #48	@ 0x30
 8003e68:	2a09      	cmp	r2, #9
 8003e6a:	d903      	bls.n	8003e74 <_vfiprintf_r+0x1cc>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0c6      	beq.n	8003dfe <_vfiprintf_r+0x156>
 8003e70:	9105      	str	r1, [sp, #20]
 8003e72:	e7c4      	b.n	8003dfe <_vfiprintf_r+0x156>
 8003e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e78:	4604      	mov	r4, r0
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e7f0      	b.n	8003e60 <_vfiprintf_r+0x1b8>
 8003e7e:	ab03      	add	r3, sp, #12
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	462a      	mov	r2, r5
 8003e84:	4b12      	ldr	r3, [pc, #72]	@ (8003ed0 <_vfiprintf_r+0x228>)
 8003e86:	a904      	add	r1, sp, #16
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f3af 8000 	nop.w
 8003e8e:	4607      	mov	r7, r0
 8003e90:	1c78      	adds	r0, r7, #1
 8003e92:	d1d6      	bne.n	8003e42 <_vfiprintf_r+0x19a>
 8003e94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e96:	07d9      	lsls	r1, r3, #31
 8003e98:	d405      	bmi.n	8003ea6 <_vfiprintf_r+0x1fe>
 8003e9a:	89ab      	ldrh	r3, [r5, #12]
 8003e9c:	059a      	lsls	r2, r3, #22
 8003e9e:	d402      	bmi.n	8003ea6 <_vfiprintf_r+0x1fe>
 8003ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ea2:	f7ff fddd 	bl	8003a60 <__retarget_lock_release_recursive>
 8003ea6:	89ab      	ldrh	r3, [r5, #12]
 8003ea8:	065b      	lsls	r3, r3, #25
 8003eaa:	f53f af1f 	bmi.w	8003cec <_vfiprintf_r+0x44>
 8003eae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003eb0:	e71e      	b.n	8003cf0 <_vfiprintf_r+0x48>
 8003eb2:	ab03      	add	r3, sp, #12
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	462a      	mov	r2, r5
 8003eb8:	4b05      	ldr	r3, [pc, #20]	@ (8003ed0 <_vfiprintf_r+0x228>)
 8003eba:	a904      	add	r1, sp, #16
 8003ebc:	4630      	mov	r0, r6
 8003ebe:	f000 f879 	bl	8003fb4 <_printf_i>
 8003ec2:	e7e4      	b.n	8003e8e <_vfiprintf_r+0x1e6>
 8003ec4:	08004638 	.word	0x08004638
 8003ec8:	08004642 	.word	0x08004642
 8003ecc:	00000000 	.word	0x00000000
 8003ed0:	08003c83 	.word	0x08003c83
 8003ed4:	0800463e 	.word	0x0800463e

08003ed8 <_printf_common>:
 8003ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003edc:	4616      	mov	r6, r2
 8003ede:	4698      	mov	r8, r3
 8003ee0:	688a      	ldr	r2, [r1, #8]
 8003ee2:	690b      	ldr	r3, [r1, #16]
 8003ee4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	bfb8      	it	lt
 8003eec:	4613      	movlt	r3, r2
 8003eee:	6033      	str	r3, [r6, #0]
 8003ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ef4:	4607      	mov	r7, r0
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	b10a      	cbz	r2, 8003efe <_printf_common+0x26>
 8003efa:	3301      	adds	r3, #1
 8003efc:	6033      	str	r3, [r6, #0]
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	0699      	lsls	r1, r3, #26
 8003f02:	bf42      	ittt	mi
 8003f04:	6833      	ldrmi	r3, [r6, #0]
 8003f06:	3302      	addmi	r3, #2
 8003f08:	6033      	strmi	r3, [r6, #0]
 8003f0a:	6825      	ldr	r5, [r4, #0]
 8003f0c:	f015 0506 	ands.w	r5, r5, #6
 8003f10:	d106      	bne.n	8003f20 <_printf_common+0x48>
 8003f12:	f104 0a19 	add.w	sl, r4, #25
 8003f16:	68e3      	ldr	r3, [r4, #12]
 8003f18:	6832      	ldr	r2, [r6, #0]
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	42ab      	cmp	r3, r5
 8003f1e:	dc26      	bgt.n	8003f6e <_printf_common+0x96>
 8003f20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f24:	6822      	ldr	r2, [r4, #0]
 8003f26:	3b00      	subs	r3, #0
 8003f28:	bf18      	it	ne
 8003f2a:	2301      	movne	r3, #1
 8003f2c:	0692      	lsls	r2, r2, #26
 8003f2e:	d42b      	bmi.n	8003f88 <_printf_common+0xb0>
 8003f30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f34:	4641      	mov	r1, r8
 8003f36:	4638      	mov	r0, r7
 8003f38:	47c8      	blx	r9
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	d01e      	beq.n	8003f7c <_printf_common+0xa4>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	6922      	ldr	r2, [r4, #16]
 8003f42:	f003 0306 	and.w	r3, r3, #6
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	bf02      	ittt	eq
 8003f4a:	68e5      	ldreq	r5, [r4, #12]
 8003f4c:	6833      	ldreq	r3, [r6, #0]
 8003f4e:	1aed      	subeq	r5, r5, r3
 8003f50:	68a3      	ldr	r3, [r4, #8]
 8003f52:	bf0c      	ite	eq
 8003f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f58:	2500      	movne	r5, #0
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	bfc4      	itt	gt
 8003f5e:	1a9b      	subgt	r3, r3, r2
 8003f60:	18ed      	addgt	r5, r5, r3
 8003f62:	2600      	movs	r6, #0
 8003f64:	341a      	adds	r4, #26
 8003f66:	42b5      	cmp	r5, r6
 8003f68:	d11a      	bne.n	8003fa0 <_printf_common+0xc8>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	e008      	b.n	8003f80 <_printf_common+0xa8>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	4652      	mov	r2, sl
 8003f72:	4641      	mov	r1, r8
 8003f74:	4638      	mov	r0, r7
 8003f76:	47c8      	blx	r9
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d103      	bne.n	8003f84 <_printf_common+0xac>
 8003f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f84:	3501      	adds	r5, #1
 8003f86:	e7c6      	b.n	8003f16 <_printf_common+0x3e>
 8003f88:	18e1      	adds	r1, r4, r3
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	2030      	movs	r0, #48	@ 0x30
 8003f8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f92:	4422      	add	r2, r4
 8003f94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	e7c7      	b.n	8003f30 <_printf_common+0x58>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	47c8      	blx	r9
 8003faa:	3001      	adds	r0, #1
 8003fac:	d0e6      	beq.n	8003f7c <_printf_common+0xa4>
 8003fae:	3601      	adds	r6, #1
 8003fb0:	e7d9      	b.n	8003f66 <_printf_common+0x8e>
	...

08003fb4 <_printf_i>:
 8003fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb8:	7e0f      	ldrb	r7, [r1, #24]
 8003fba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fbc:	2f78      	cmp	r7, #120	@ 0x78
 8003fbe:	4691      	mov	r9, r2
 8003fc0:	4680      	mov	r8, r0
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	469a      	mov	sl, r3
 8003fc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fca:	d807      	bhi.n	8003fdc <_printf_i+0x28>
 8003fcc:	2f62      	cmp	r7, #98	@ 0x62
 8003fce:	d80a      	bhi.n	8003fe6 <_printf_i+0x32>
 8003fd0:	2f00      	cmp	r7, #0
 8003fd2:	f000 80d2 	beq.w	800417a <_printf_i+0x1c6>
 8003fd6:	2f58      	cmp	r7, #88	@ 0x58
 8003fd8:	f000 80b9 	beq.w	800414e <_printf_i+0x19a>
 8003fdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fe0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fe4:	e03a      	b.n	800405c <_printf_i+0xa8>
 8003fe6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fea:	2b15      	cmp	r3, #21
 8003fec:	d8f6      	bhi.n	8003fdc <_printf_i+0x28>
 8003fee:	a101      	add	r1, pc, #4	@ (adr r1, 8003ff4 <_printf_i+0x40>)
 8003ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ff4:	0800404d 	.word	0x0800404d
 8003ff8:	08004061 	.word	0x08004061
 8003ffc:	08003fdd 	.word	0x08003fdd
 8004000:	08003fdd 	.word	0x08003fdd
 8004004:	08003fdd 	.word	0x08003fdd
 8004008:	08003fdd 	.word	0x08003fdd
 800400c:	08004061 	.word	0x08004061
 8004010:	08003fdd 	.word	0x08003fdd
 8004014:	08003fdd 	.word	0x08003fdd
 8004018:	08003fdd 	.word	0x08003fdd
 800401c:	08003fdd 	.word	0x08003fdd
 8004020:	08004161 	.word	0x08004161
 8004024:	0800408b 	.word	0x0800408b
 8004028:	0800411b 	.word	0x0800411b
 800402c:	08003fdd 	.word	0x08003fdd
 8004030:	08003fdd 	.word	0x08003fdd
 8004034:	08004183 	.word	0x08004183
 8004038:	08003fdd 	.word	0x08003fdd
 800403c:	0800408b 	.word	0x0800408b
 8004040:	08003fdd 	.word	0x08003fdd
 8004044:	08003fdd 	.word	0x08003fdd
 8004048:	08004123 	.word	0x08004123
 800404c:	6833      	ldr	r3, [r6, #0]
 800404e:	1d1a      	adds	r2, r3, #4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6032      	str	r2, [r6, #0]
 8004054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004058:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800405c:	2301      	movs	r3, #1
 800405e:	e09d      	b.n	800419c <_printf_i+0x1e8>
 8004060:	6833      	ldr	r3, [r6, #0]
 8004062:	6820      	ldr	r0, [r4, #0]
 8004064:	1d19      	adds	r1, r3, #4
 8004066:	6031      	str	r1, [r6, #0]
 8004068:	0606      	lsls	r6, r0, #24
 800406a:	d501      	bpl.n	8004070 <_printf_i+0xbc>
 800406c:	681d      	ldr	r5, [r3, #0]
 800406e:	e003      	b.n	8004078 <_printf_i+0xc4>
 8004070:	0645      	lsls	r5, r0, #25
 8004072:	d5fb      	bpl.n	800406c <_printf_i+0xb8>
 8004074:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004078:	2d00      	cmp	r5, #0
 800407a:	da03      	bge.n	8004084 <_printf_i+0xd0>
 800407c:	232d      	movs	r3, #45	@ 0x2d
 800407e:	426d      	negs	r5, r5
 8004080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004084:	4859      	ldr	r0, [pc, #356]	@ (80041ec <_printf_i+0x238>)
 8004086:	230a      	movs	r3, #10
 8004088:	e011      	b.n	80040ae <_printf_i+0xfa>
 800408a:	6821      	ldr	r1, [r4, #0]
 800408c:	6833      	ldr	r3, [r6, #0]
 800408e:	0608      	lsls	r0, r1, #24
 8004090:	f853 5b04 	ldr.w	r5, [r3], #4
 8004094:	d402      	bmi.n	800409c <_printf_i+0xe8>
 8004096:	0649      	lsls	r1, r1, #25
 8004098:	bf48      	it	mi
 800409a:	b2ad      	uxthmi	r5, r5
 800409c:	2f6f      	cmp	r7, #111	@ 0x6f
 800409e:	4853      	ldr	r0, [pc, #332]	@ (80041ec <_printf_i+0x238>)
 80040a0:	6033      	str	r3, [r6, #0]
 80040a2:	bf14      	ite	ne
 80040a4:	230a      	movne	r3, #10
 80040a6:	2308      	moveq	r3, #8
 80040a8:	2100      	movs	r1, #0
 80040aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040ae:	6866      	ldr	r6, [r4, #4]
 80040b0:	60a6      	str	r6, [r4, #8]
 80040b2:	2e00      	cmp	r6, #0
 80040b4:	bfa2      	ittt	ge
 80040b6:	6821      	ldrge	r1, [r4, #0]
 80040b8:	f021 0104 	bicge.w	r1, r1, #4
 80040bc:	6021      	strge	r1, [r4, #0]
 80040be:	b90d      	cbnz	r5, 80040c4 <_printf_i+0x110>
 80040c0:	2e00      	cmp	r6, #0
 80040c2:	d04b      	beq.n	800415c <_printf_i+0x1a8>
 80040c4:	4616      	mov	r6, r2
 80040c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80040ca:	fb03 5711 	mls	r7, r3, r1, r5
 80040ce:	5dc7      	ldrb	r7, [r0, r7]
 80040d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040d4:	462f      	mov	r7, r5
 80040d6:	42bb      	cmp	r3, r7
 80040d8:	460d      	mov	r5, r1
 80040da:	d9f4      	bls.n	80040c6 <_printf_i+0x112>
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d10b      	bne.n	80040f8 <_printf_i+0x144>
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	07df      	lsls	r7, r3, #31
 80040e4:	d508      	bpl.n	80040f8 <_printf_i+0x144>
 80040e6:	6923      	ldr	r3, [r4, #16]
 80040e8:	6861      	ldr	r1, [r4, #4]
 80040ea:	4299      	cmp	r1, r3
 80040ec:	bfde      	ittt	le
 80040ee:	2330      	movle	r3, #48	@ 0x30
 80040f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040f8:	1b92      	subs	r2, r2, r6
 80040fa:	6122      	str	r2, [r4, #16]
 80040fc:	f8cd a000 	str.w	sl, [sp]
 8004100:	464b      	mov	r3, r9
 8004102:	aa03      	add	r2, sp, #12
 8004104:	4621      	mov	r1, r4
 8004106:	4640      	mov	r0, r8
 8004108:	f7ff fee6 	bl	8003ed8 <_printf_common>
 800410c:	3001      	adds	r0, #1
 800410e:	d14a      	bne.n	80041a6 <_printf_i+0x1f2>
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	b004      	add	sp, #16
 8004116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	f043 0320 	orr.w	r3, r3, #32
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	4833      	ldr	r0, [pc, #204]	@ (80041f0 <_printf_i+0x23c>)
 8004124:	2778      	movs	r7, #120	@ 0x78
 8004126:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	6831      	ldr	r1, [r6, #0]
 800412e:	061f      	lsls	r7, r3, #24
 8004130:	f851 5b04 	ldr.w	r5, [r1], #4
 8004134:	d402      	bmi.n	800413c <_printf_i+0x188>
 8004136:	065f      	lsls	r7, r3, #25
 8004138:	bf48      	it	mi
 800413a:	b2ad      	uxthmi	r5, r5
 800413c:	6031      	str	r1, [r6, #0]
 800413e:	07d9      	lsls	r1, r3, #31
 8004140:	bf44      	itt	mi
 8004142:	f043 0320 	orrmi.w	r3, r3, #32
 8004146:	6023      	strmi	r3, [r4, #0]
 8004148:	b11d      	cbz	r5, 8004152 <_printf_i+0x19e>
 800414a:	2310      	movs	r3, #16
 800414c:	e7ac      	b.n	80040a8 <_printf_i+0xf4>
 800414e:	4827      	ldr	r0, [pc, #156]	@ (80041ec <_printf_i+0x238>)
 8004150:	e7e9      	b.n	8004126 <_printf_i+0x172>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	f023 0320 	bic.w	r3, r3, #32
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	e7f6      	b.n	800414a <_printf_i+0x196>
 800415c:	4616      	mov	r6, r2
 800415e:	e7bd      	b.n	80040dc <_printf_i+0x128>
 8004160:	6833      	ldr	r3, [r6, #0]
 8004162:	6825      	ldr	r5, [r4, #0]
 8004164:	6961      	ldr	r1, [r4, #20]
 8004166:	1d18      	adds	r0, r3, #4
 8004168:	6030      	str	r0, [r6, #0]
 800416a:	062e      	lsls	r6, r5, #24
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	d501      	bpl.n	8004174 <_printf_i+0x1c0>
 8004170:	6019      	str	r1, [r3, #0]
 8004172:	e002      	b.n	800417a <_printf_i+0x1c6>
 8004174:	0668      	lsls	r0, r5, #25
 8004176:	d5fb      	bpl.n	8004170 <_printf_i+0x1bc>
 8004178:	8019      	strh	r1, [r3, #0]
 800417a:	2300      	movs	r3, #0
 800417c:	6123      	str	r3, [r4, #16]
 800417e:	4616      	mov	r6, r2
 8004180:	e7bc      	b.n	80040fc <_printf_i+0x148>
 8004182:	6833      	ldr	r3, [r6, #0]
 8004184:	1d1a      	adds	r2, r3, #4
 8004186:	6032      	str	r2, [r6, #0]
 8004188:	681e      	ldr	r6, [r3, #0]
 800418a:	6862      	ldr	r2, [r4, #4]
 800418c:	2100      	movs	r1, #0
 800418e:	4630      	mov	r0, r6
 8004190:	f7fc f83e 	bl	8000210 <memchr>
 8004194:	b108      	cbz	r0, 800419a <_printf_i+0x1e6>
 8004196:	1b80      	subs	r0, r0, r6
 8004198:	6060      	str	r0, [r4, #4]
 800419a:	6863      	ldr	r3, [r4, #4]
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	2300      	movs	r3, #0
 80041a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041a4:	e7aa      	b.n	80040fc <_printf_i+0x148>
 80041a6:	6923      	ldr	r3, [r4, #16]
 80041a8:	4632      	mov	r2, r6
 80041aa:	4649      	mov	r1, r9
 80041ac:	4640      	mov	r0, r8
 80041ae:	47d0      	blx	sl
 80041b0:	3001      	adds	r0, #1
 80041b2:	d0ad      	beq.n	8004110 <_printf_i+0x15c>
 80041b4:	6823      	ldr	r3, [r4, #0]
 80041b6:	079b      	lsls	r3, r3, #30
 80041b8:	d413      	bmi.n	80041e2 <_printf_i+0x22e>
 80041ba:	68e0      	ldr	r0, [r4, #12]
 80041bc:	9b03      	ldr	r3, [sp, #12]
 80041be:	4298      	cmp	r0, r3
 80041c0:	bfb8      	it	lt
 80041c2:	4618      	movlt	r0, r3
 80041c4:	e7a6      	b.n	8004114 <_printf_i+0x160>
 80041c6:	2301      	movs	r3, #1
 80041c8:	4632      	mov	r2, r6
 80041ca:	4649      	mov	r1, r9
 80041cc:	4640      	mov	r0, r8
 80041ce:	47d0      	blx	sl
 80041d0:	3001      	adds	r0, #1
 80041d2:	d09d      	beq.n	8004110 <_printf_i+0x15c>
 80041d4:	3501      	adds	r5, #1
 80041d6:	68e3      	ldr	r3, [r4, #12]
 80041d8:	9903      	ldr	r1, [sp, #12]
 80041da:	1a5b      	subs	r3, r3, r1
 80041dc:	42ab      	cmp	r3, r5
 80041de:	dcf2      	bgt.n	80041c6 <_printf_i+0x212>
 80041e0:	e7eb      	b.n	80041ba <_printf_i+0x206>
 80041e2:	2500      	movs	r5, #0
 80041e4:	f104 0619 	add.w	r6, r4, #25
 80041e8:	e7f5      	b.n	80041d6 <_printf_i+0x222>
 80041ea:	bf00      	nop
 80041ec:	08004649 	.word	0x08004649
 80041f0:	0800465a 	.word	0x0800465a

080041f4 <__sflush_r>:
 80041f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041fc:	0716      	lsls	r6, r2, #28
 80041fe:	4605      	mov	r5, r0
 8004200:	460c      	mov	r4, r1
 8004202:	d454      	bmi.n	80042ae <__sflush_r+0xba>
 8004204:	684b      	ldr	r3, [r1, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	dc02      	bgt.n	8004210 <__sflush_r+0x1c>
 800420a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	dd48      	ble.n	80042a2 <__sflush_r+0xae>
 8004210:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004212:	2e00      	cmp	r6, #0
 8004214:	d045      	beq.n	80042a2 <__sflush_r+0xae>
 8004216:	2300      	movs	r3, #0
 8004218:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800421c:	682f      	ldr	r7, [r5, #0]
 800421e:	6a21      	ldr	r1, [r4, #32]
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	d030      	beq.n	8004286 <__sflush_r+0x92>
 8004224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	0759      	lsls	r1, r3, #29
 800422a:	d505      	bpl.n	8004238 <__sflush_r+0x44>
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	1ad2      	subs	r2, r2, r3
 8004230:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004232:	b10b      	cbz	r3, 8004238 <__sflush_r+0x44>
 8004234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004236:	1ad2      	subs	r2, r2, r3
 8004238:	2300      	movs	r3, #0
 800423a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800423c:	6a21      	ldr	r1, [r4, #32]
 800423e:	4628      	mov	r0, r5
 8004240:	47b0      	blx	r6
 8004242:	1c43      	adds	r3, r0, #1
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	d106      	bne.n	8004256 <__sflush_r+0x62>
 8004248:	6829      	ldr	r1, [r5, #0]
 800424a:	291d      	cmp	r1, #29
 800424c:	d82b      	bhi.n	80042a6 <__sflush_r+0xb2>
 800424e:	4a2a      	ldr	r2, [pc, #168]	@ (80042f8 <__sflush_r+0x104>)
 8004250:	410a      	asrs	r2, r1
 8004252:	07d6      	lsls	r6, r2, #31
 8004254:	d427      	bmi.n	80042a6 <__sflush_r+0xb2>
 8004256:	2200      	movs	r2, #0
 8004258:	6062      	str	r2, [r4, #4]
 800425a:	04d9      	lsls	r1, r3, #19
 800425c:	6922      	ldr	r2, [r4, #16]
 800425e:	6022      	str	r2, [r4, #0]
 8004260:	d504      	bpl.n	800426c <__sflush_r+0x78>
 8004262:	1c42      	adds	r2, r0, #1
 8004264:	d101      	bne.n	800426a <__sflush_r+0x76>
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	b903      	cbnz	r3, 800426c <__sflush_r+0x78>
 800426a:	6560      	str	r0, [r4, #84]	@ 0x54
 800426c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800426e:	602f      	str	r7, [r5, #0]
 8004270:	b1b9      	cbz	r1, 80042a2 <__sflush_r+0xae>
 8004272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004276:	4299      	cmp	r1, r3
 8004278:	d002      	beq.n	8004280 <__sflush_r+0x8c>
 800427a:	4628      	mov	r0, r5
 800427c:	f7ff fbf2 	bl	8003a64 <_free_r>
 8004280:	2300      	movs	r3, #0
 8004282:	6363      	str	r3, [r4, #52]	@ 0x34
 8004284:	e00d      	b.n	80042a2 <__sflush_r+0xae>
 8004286:	2301      	movs	r3, #1
 8004288:	4628      	mov	r0, r5
 800428a:	47b0      	blx	r6
 800428c:	4602      	mov	r2, r0
 800428e:	1c50      	adds	r0, r2, #1
 8004290:	d1c9      	bne.n	8004226 <__sflush_r+0x32>
 8004292:	682b      	ldr	r3, [r5, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0c6      	beq.n	8004226 <__sflush_r+0x32>
 8004298:	2b1d      	cmp	r3, #29
 800429a:	d001      	beq.n	80042a0 <__sflush_r+0xac>
 800429c:	2b16      	cmp	r3, #22
 800429e:	d11e      	bne.n	80042de <__sflush_r+0xea>
 80042a0:	602f      	str	r7, [r5, #0]
 80042a2:	2000      	movs	r0, #0
 80042a4:	e022      	b.n	80042ec <__sflush_r+0xf8>
 80042a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042aa:	b21b      	sxth	r3, r3
 80042ac:	e01b      	b.n	80042e6 <__sflush_r+0xf2>
 80042ae:	690f      	ldr	r7, [r1, #16]
 80042b0:	2f00      	cmp	r7, #0
 80042b2:	d0f6      	beq.n	80042a2 <__sflush_r+0xae>
 80042b4:	0793      	lsls	r3, r2, #30
 80042b6:	680e      	ldr	r6, [r1, #0]
 80042b8:	bf08      	it	eq
 80042ba:	694b      	ldreq	r3, [r1, #20]
 80042bc:	600f      	str	r7, [r1, #0]
 80042be:	bf18      	it	ne
 80042c0:	2300      	movne	r3, #0
 80042c2:	eba6 0807 	sub.w	r8, r6, r7
 80042c6:	608b      	str	r3, [r1, #8]
 80042c8:	f1b8 0f00 	cmp.w	r8, #0
 80042cc:	dde9      	ble.n	80042a2 <__sflush_r+0xae>
 80042ce:	6a21      	ldr	r1, [r4, #32]
 80042d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80042d2:	4643      	mov	r3, r8
 80042d4:	463a      	mov	r2, r7
 80042d6:	4628      	mov	r0, r5
 80042d8:	47b0      	blx	r6
 80042da:	2800      	cmp	r0, #0
 80042dc:	dc08      	bgt.n	80042f0 <__sflush_r+0xfc>
 80042de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042e6:	81a3      	strh	r3, [r4, #12]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f0:	4407      	add	r7, r0
 80042f2:	eba8 0800 	sub.w	r8, r8, r0
 80042f6:	e7e7      	b.n	80042c8 <__sflush_r+0xd4>
 80042f8:	dfbffffe 	.word	0xdfbffffe

080042fc <_fflush_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	690b      	ldr	r3, [r1, #16]
 8004300:	4605      	mov	r5, r0
 8004302:	460c      	mov	r4, r1
 8004304:	b913      	cbnz	r3, 800430c <_fflush_r+0x10>
 8004306:	2500      	movs	r5, #0
 8004308:	4628      	mov	r0, r5
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	b118      	cbz	r0, 8004316 <_fflush_r+0x1a>
 800430e:	6a03      	ldr	r3, [r0, #32]
 8004310:	b90b      	cbnz	r3, 8004316 <_fflush_r+0x1a>
 8004312:	f7ff fa9f 	bl	8003854 <__sinit>
 8004316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f3      	beq.n	8004306 <_fflush_r+0xa>
 800431e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004320:	07d0      	lsls	r0, r2, #31
 8004322:	d404      	bmi.n	800432e <_fflush_r+0x32>
 8004324:	0599      	lsls	r1, r3, #22
 8004326:	d402      	bmi.n	800432e <_fflush_r+0x32>
 8004328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800432a:	f7ff fb98 	bl	8003a5e <__retarget_lock_acquire_recursive>
 800432e:	4628      	mov	r0, r5
 8004330:	4621      	mov	r1, r4
 8004332:	f7ff ff5f 	bl	80041f4 <__sflush_r>
 8004336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004338:	07da      	lsls	r2, r3, #31
 800433a:	4605      	mov	r5, r0
 800433c:	d4e4      	bmi.n	8004308 <_fflush_r+0xc>
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	059b      	lsls	r3, r3, #22
 8004342:	d4e1      	bmi.n	8004308 <_fflush_r+0xc>
 8004344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004346:	f7ff fb8b 	bl	8003a60 <__retarget_lock_release_recursive>
 800434a:	e7dd      	b.n	8004308 <_fflush_r+0xc>

0800434c <__swbuf_r>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	460e      	mov	r6, r1
 8004350:	4614      	mov	r4, r2
 8004352:	4605      	mov	r5, r0
 8004354:	b118      	cbz	r0, 800435e <__swbuf_r+0x12>
 8004356:	6a03      	ldr	r3, [r0, #32]
 8004358:	b90b      	cbnz	r3, 800435e <__swbuf_r+0x12>
 800435a:	f7ff fa7b 	bl	8003854 <__sinit>
 800435e:	69a3      	ldr	r3, [r4, #24]
 8004360:	60a3      	str	r3, [r4, #8]
 8004362:	89a3      	ldrh	r3, [r4, #12]
 8004364:	071a      	lsls	r2, r3, #28
 8004366:	d501      	bpl.n	800436c <__swbuf_r+0x20>
 8004368:	6923      	ldr	r3, [r4, #16]
 800436a:	b943      	cbnz	r3, 800437e <__swbuf_r+0x32>
 800436c:	4621      	mov	r1, r4
 800436e:	4628      	mov	r0, r5
 8004370:	f000 f82a 	bl	80043c8 <__swsetup_r>
 8004374:	b118      	cbz	r0, 800437e <__swbuf_r+0x32>
 8004376:	f04f 37ff 	mov.w	r7, #4294967295
 800437a:	4638      	mov	r0, r7
 800437c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	6922      	ldr	r2, [r4, #16]
 8004382:	1a98      	subs	r0, r3, r2
 8004384:	6963      	ldr	r3, [r4, #20]
 8004386:	b2f6      	uxtb	r6, r6
 8004388:	4283      	cmp	r3, r0
 800438a:	4637      	mov	r7, r6
 800438c:	dc05      	bgt.n	800439a <__swbuf_r+0x4e>
 800438e:	4621      	mov	r1, r4
 8004390:	4628      	mov	r0, r5
 8004392:	f7ff ffb3 	bl	80042fc <_fflush_r>
 8004396:	2800      	cmp	r0, #0
 8004398:	d1ed      	bne.n	8004376 <__swbuf_r+0x2a>
 800439a:	68a3      	ldr	r3, [r4, #8]
 800439c:	3b01      	subs	r3, #1
 800439e:	60a3      	str	r3, [r4, #8]
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	6022      	str	r2, [r4, #0]
 80043a6:	701e      	strb	r6, [r3, #0]
 80043a8:	6962      	ldr	r2, [r4, #20]
 80043aa:	1c43      	adds	r3, r0, #1
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d004      	beq.n	80043ba <__swbuf_r+0x6e>
 80043b0:	89a3      	ldrh	r3, [r4, #12]
 80043b2:	07db      	lsls	r3, r3, #31
 80043b4:	d5e1      	bpl.n	800437a <__swbuf_r+0x2e>
 80043b6:	2e0a      	cmp	r6, #10
 80043b8:	d1df      	bne.n	800437a <__swbuf_r+0x2e>
 80043ba:	4621      	mov	r1, r4
 80043bc:	4628      	mov	r0, r5
 80043be:	f7ff ff9d 	bl	80042fc <_fflush_r>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	d0d9      	beq.n	800437a <__swbuf_r+0x2e>
 80043c6:	e7d6      	b.n	8004376 <__swbuf_r+0x2a>

080043c8 <__swsetup_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4b29      	ldr	r3, [pc, #164]	@ (8004470 <__swsetup_r+0xa8>)
 80043cc:	4605      	mov	r5, r0
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	460c      	mov	r4, r1
 80043d2:	b118      	cbz	r0, 80043dc <__swsetup_r+0x14>
 80043d4:	6a03      	ldr	r3, [r0, #32]
 80043d6:	b90b      	cbnz	r3, 80043dc <__swsetup_r+0x14>
 80043d8:	f7ff fa3c 	bl	8003854 <__sinit>
 80043dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e0:	0719      	lsls	r1, r3, #28
 80043e2:	d422      	bmi.n	800442a <__swsetup_r+0x62>
 80043e4:	06da      	lsls	r2, r3, #27
 80043e6:	d407      	bmi.n	80043f8 <__swsetup_r+0x30>
 80043e8:	2209      	movs	r2, #9
 80043ea:	602a      	str	r2, [r5, #0]
 80043ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043f0:	81a3      	strh	r3, [r4, #12]
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295
 80043f6:	e033      	b.n	8004460 <__swsetup_r+0x98>
 80043f8:	0758      	lsls	r0, r3, #29
 80043fa:	d512      	bpl.n	8004422 <__swsetup_r+0x5a>
 80043fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043fe:	b141      	cbz	r1, 8004412 <__swsetup_r+0x4a>
 8004400:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004404:	4299      	cmp	r1, r3
 8004406:	d002      	beq.n	800440e <__swsetup_r+0x46>
 8004408:	4628      	mov	r0, r5
 800440a:	f7ff fb2b 	bl	8003a64 <_free_r>
 800440e:	2300      	movs	r3, #0
 8004410:	6363      	str	r3, [r4, #52]	@ 0x34
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004418:	81a3      	strh	r3, [r4, #12]
 800441a:	2300      	movs	r3, #0
 800441c:	6063      	str	r3, [r4, #4]
 800441e:	6923      	ldr	r3, [r4, #16]
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	89a3      	ldrh	r3, [r4, #12]
 8004424:	f043 0308 	orr.w	r3, r3, #8
 8004428:	81a3      	strh	r3, [r4, #12]
 800442a:	6923      	ldr	r3, [r4, #16]
 800442c:	b94b      	cbnz	r3, 8004442 <__swsetup_r+0x7a>
 800442e:	89a3      	ldrh	r3, [r4, #12]
 8004430:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004438:	d003      	beq.n	8004442 <__swsetup_r+0x7a>
 800443a:	4621      	mov	r1, r4
 800443c:	4628      	mov	r0, r5
 800443e:	f000 f84f 	bl	80044e0 <__smakebuf_r>
 8004442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004446:	f013 0201 	ands.w	r2, r3, #1
 800444a:	d00a      	beq.n	8004462 <__swsetup_r+0x9a>
 800444c:	2200      	movs	r2, #0
 800444e:	60a2      	str	r2, [r4, #8]
 8004450:	6962      	ldr	r2, [r4, #20]
 8004452:	4252      	negs	r2, r2
 8004454:	61a2      	str	r2, [r4, #24]
 8004456:	6922      	ldr	r2, [r4, #16]
 8004458:	b942      	cbnz	r2, 800446c <__swsetup_r+0xa4>
 800445a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800445e:	d1c5      	bne.n	80043ec <__swsetup_r+0x24>
 8004460:	bd38      	pop	{r3, r4, r5, pc}
 8004462:	0799      	lsls	r1, r3, #30
 8004464:	bf58      	it	pl
 8004466:	6962      	ldrpl	r2, [r4, #20]
 8004468:	60a2      	str	r2, [r4, #8]
 800446a:	e7f4      	b.n	8004456 <__swsetup_r+0x8e>
 800446c:	2000      	movs	r0, #0
 800446e:	e7f7      	b.n	8004460 <__swsetup_r+0x98>
 8004470:	20000018 	.word	0x20000018

08004474 <_sbrk_r>:
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	4d06      	ldr	r5, [pc, #24]	@ (8004490 <_sbrk_r+0x1c>)
 8004478:	2300      	movs	r3, #0
 800447a:	4604      	mov	r4, r0
 800447c:	4608      	mov	r0, r1
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	f7fc fbd2 	bl	8000c28 <_sbrk>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d102      	bne.n	800448e <_sbrk_r+0x1a>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b103      	cbz	r3, 800448e <_sbrk_r+0x1a>
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	20000264 	.word	0x20000264

08004494 <__swhatbuf_r>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	460c      	mov	r4, r1
 8004498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449c:	2900      	cmp	r1, #0
 800449e:	b096      	sub	sp, #88	@ 0x58
 80044a0:	4615      	mov	r5, r2
 80044a2:	461e      	mov	r6, r3
 80044a4:	da0d      	bge.n	80044c2 <__swhatbuf_r+0x2e>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80044ac:	f04f 0100 	mov.w	r1, #0
 80044b0:	bf14      	ite	ne
 80044b2:	2340      	movne	r3, #64	@ 0x40
 80044b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80044b8:	2000      	movs	r0, #0
 80044ba:	6031      	str	r1, [r6, #0]
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	b016      	add	sp, #88	@ 0x58
 80044c0:	bd70      	pop	{r4, r5, r6, pc}
 80044c2:	466a      	mov	r2, sp
 80044c4:	f000 f848 	bl	8004558 <_fstat_r>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	dbec      	blt.n	80044a6 <__swhatbuf_r+0x12>
 80044cc:	9901      	ldr	r1, [sp, #4]
 80044ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80044d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80044d6:	4259      	negs	r1, r3
 80044d8:	4159      	adcs	r1, r3
 80044da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044de:	e7eb      	b.n	80044b8 <__swhatbuf_r+0x24>

080044e0 <__smakebuf_r>:
 80044e0:	898b      	ldrh	r3, [r1, #12]
 80044e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044e4:	079d      	lsls	r5, r3, #30
 80044e6:	4606      	mov	r6, r0
 80044e8:	460c      	mov	r4, r1
 80044ea:	d507      	bpl.n	80044fc <__smakebuf_r+0x1c>
 80044ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	6123      	str	r3, [r4, #16]
 80044f4:	2301      	movs	r3, #1
 80044f6:	6163      	str	r3, [r4, #20]
 80044f8:	b003      	add	sp, #12
 80044fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044fc:	ab01      	add	r3, sp, #4
 80044fe:	466a      	mov	r2, sp
 8004500:	f7ff ffc8 	bl	8004494 <__swhatbuf_r>
 8004504:	9f00      	ldr	r7, [sp, #0]
 8004506:	4605      	mov	r5, r0
 8004508:	4639      	mov	r1, r7
 800450a:	4630      	mov	r0, r6
 800450c:	f7ff fb16 	bl	8003b3c <_malloc_r>
 8004510:	b948      	cbnz	r0, 8004526 <__smakebuf_r+0x46>
 8004512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004516:	059a      	lsls	r2, r3, #22
 8004518:	d4ee      	bmi.n	80044f8 <__smakebuf_r+0x18>
 800451a:	f023 0303 	bic.w	r3, r3, #3
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	81a3      	strh	r3, [r4, #12]
 8004524:	e7e2      	b.n	80044ec <__smakebuf_r+0xc>
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	6020      	str	r0, [r4, #0]
 800452a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452e:	81a3      	strh	r3, [r4, #12]
 8004530:	9b01      	ldr	r3, [sp, #4]
 8004532:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004536:	b15b      	cbz	r3, 8004550 <__smakebuf_r+0x70>
 8004538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800453c:	4630      	mov	r0, r6
 800453e:	f000 f81d 	bl	800457c <_isatty_r>
 8004542:	b128      	cbz	r0, 8004550 <__smakebuf_r+0x70>
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	81a3      	strh	r3, [r4, #12]
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	431d      	orrs	r5, r3
 8004554:	81a5      	strh	r5, [r4, #12]
 8004556:	e7cf      	b.n	80044f8 <__smakebuf_r+0x18>

08004558 <_fstat_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4d07      	ldr	r5, [pc, #28]	@ (8004578 <_fstat_r+0x20>)
 800455c:	2300      	movs	r3, #0
 800455e:	4604      	mov	r4, r0
 8004560:	4608      	mov	r0, r1
 8004562:	4611      	mov	r1, r2
 8004564:	602b      	str	r3, [r5, #0]
 8004566:	f7fc fb37 	bl	8000bd8 <_fstat>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	d102      	bne.n	8004574 <_fstat_r+0x1c>
 800456e:	682b      	ldr	r3, [r5, #0]
 8004570:	b103      	cbz	r3, 8004574 <_fstat_r+0x1c>
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	bd38      	pop	{r3, r4, r5, pc}
 8004576:	bf00      	nop
 8004578:	20000264 	.word	0x20000264

0800457c <_isatty_r>:
 800457c:	b538      	push	{r3, r4, r5, lr}
 800457e:	4d06      	ldr	r5, [pc, #24]	@ (8004598 <_isatty_r+0x1c>)
 8004580:	2300      	movs	r3, #0
 8004582:	4604      	mov	r4, r0
 8004584:	4608      	mov	r0, r1
 8004586:	602b      	str	r3, [r5, #0]
 8004588:	f7fc fb36 	bl	8000bf8 <_isatty>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_isatty_r+0x1a>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_isatty_r+0x1a>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	20000264 	.word	0x20000264

0800459c <_init>:
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	bf00      	nop
 80045a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a2:	bc08      	pop	{r3}
 80045a4:	469e      	mov	lr, r3
 80045a6:	4770      	bx	lr

080045a8 <_fini>:
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045aa:	bf00      	nop
 80045ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ae:	bc08      	pop	{r3}
 80045b0:	469e      	mov	lr, r3
 80045b2:	4770      	bx	lr
