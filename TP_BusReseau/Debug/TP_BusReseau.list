
TP_BusReseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005248  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005418  08005418  00006418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005504  08005504  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005504  08005504  00006504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800550c  0800550c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800550c  0800550c  0000650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005510  08005510  00006510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005514  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000006c  08005580  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08005580  00007308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e262  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a3  00000000  00000000  000152fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000178a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a9  00000000  00000000  00018530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232c8  00000000  00000000  00018ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a4c  00000000  00000000  0003c1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf742  00000000  00000000  0004cbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c32f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af0  00000000  00000000  0011c374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0011fe64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005400 	.word	0x08005400

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005400 	.word	0x08005400

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_ldivmod>:
 80002d0:	b97b      	cbnz	r3, 80002f2 <__aeabi_ldivmod+0x22>
 80002d2:	b972      	cbnz	r2, 80002f2 <__aeabi_ldivmod+0x22>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bfbe      	ittt	lt
 80002d8:	2000      	movlt	r0, #0
 80002da:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002de:	e006      	blt.n	80002ee <__aeabi_ldivmod+0x1e>
 80002e0:	bf08      	it	eq
 80002e2:	2800      	cmpeq	r0, #0
 80002e4:	bf1c      	itt	ne
 80002e6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002ea:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ee:	f000 b9b5 	b.w	800065c <__aeabi_idiv0>
 80002f2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002fa:	2900      	cmp	r1, #0
 80002fc:	db09      	blt.n	8000312 <__aeabi_ldivmod+0x42>
 80002fe:	2b00      	cmp	r3, #0
 8000300:	db1a      	blt.n	8000338 <__aeabi_ldivmod+0x68>
 8000302:	f000 f84d 	bl	80003a0 <__udivmoddi4>
 8000306:	f8dd e004 	ldr.w	lr, [sp, #4]
 800030a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030e:	b004      	add	sp, #16
 8000310:	4770      	bx	lr
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	2b00      	cmp	r3, #0
 800031a:	db1b      	blt.n	8000354 <__aeabi_ldivmod+0x84>
 800031c:	f000 f840 	bl	80003a0 <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	4252      	negs	r2, r2
 8000332:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000336:	4770      	bx	lr
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	f000 f82f 	bl	80003a0 <__udivmoddi4>
 8000342:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034a:	b004      	add	sp, #16
 800034c:	4240      	negs	r0, r0
 800034e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000352:	4770      	bx	lr
 8000354:	4252      	negs	r2, r2
 8000356:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035a:	f000 f821 	bl	80003a0 <__udivmoddi4>
 800035e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000362:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000366:	b004      	add	sp, #16
 8000368:	4252      	negs	r2, r2
 800036a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036e:	4770      	bx	lr

08000370 <__aeabi_uldivmod>:
 8000370:	b953      	cbnz	r3, 8000388 <__aeabi_uldivmod+0x18>
 8000372:	b94a      	cbnz	r2, 8000388 <__aeabi_uldivmod+0x18>
 8000374:	2900      	cmp	r1, #0
 8000376:	bf08      	it	eq
 8000378:	2800      	cmpeq	r0, #0
 800037a:	bf1c      	itt	ne
 800037c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000380:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000384:	f000 b96a 	b.w	800065c <__aeabi_idiv0>
 8000388:	f1ad 0c08 	sub.w	ip, sp, #8
 800038c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000390:	f000 f806 	bl	80003a0 <__udivmoddi4>
 8000394:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000398:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039c:	b004      	add	sp, #16
 800039e:	4770      	bx	lr

080003a0 <__udivmoddi4>:
 80003a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003a4:	9d08      	ldr	r5, [sp, #32]
 80003a6:	460c      	mov	r4, r1
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d14e      	bne.n	800044a <__udivmoddi4+0xaa>
 80003ac:	4694      	mov	ip, r2
 80003ae:	458c      	cmp	ip, r1
 80003b0:	4686      	mov	lr, r0
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	d962      	bls.n	800047e <__udivmoddi4+0xde>
 80003b8:	b14a      	cbz	r2, 80003ce <__udivmoddi4+0x2e>
 80003ba:	f1c2 0320 	rsb	r3, r2, #32
 80003be:	4091      	lsls	r1, r2
 80003c0:	fa20 f303 	lsr.w	r3, r0, r3
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	4319      	orrs	r1, r3
 80003ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d2:	fa1f f68c 	uxth.w	r6, ip
 80003d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003de:	fb07 1114 	mls	r1, r7, r4, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb04 f106 	mul.w	r1, r4, r6
 80003ea:	4299      	cmp	r1, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x64>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80003f6:	f080 8112 	bcs.w	800061e <__udivmoddi4+0x27e>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 810f 	bls.w	800061e <__udivmoddi4+0x27e>
 8000400:	3c02      	subs	r4, #2
 8000402:	4463      	add	r3, ip
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	fa1f f38e 	uxth.w	r3, lr
 800040a:	fbb1 f0f7 	udiv	r0, r1, r7
 800040e:	fb07 1110 	mls	r1, r7, r0, r1
 8000412:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000416:	fb00 f606 	mul.w	r6, r0, r6
 800041a:	429e      	cmp	r6, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x94>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000426:	f080 80fc 	bcs.w	8000622 <__udivmoddi4+0x282>
 800042a:	429e      	cmp	r6, r3
 800042c:	f240 80f9 	bls.w	8000622 <__udivmoddi4+0x282>
 8000430:	4463      	add	r3, ip
 8000432:	3802      	subs	r0, #2
 8000434:	1b9b      	subs	r3, r3, r6
 8000436:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800043a:	2100      	movs	r1, #0
 800043c:	b11d      	cbz	r5, 8000446 <__udivmoddi4+0xa6>
 800043e:	40d3      	lsrs	r3, r2
 8000440:	2200      	movs	r2, #0
 8000442:	e9c5 3200 	strd	r3, r2, [r5]
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	428b      	cmp	r3, r1
 800044c:	d905      	bls.n	800045a <__udivmoddi4+0xba>
 800044e:	b10d      	cbz	r5, 8000454 <__udivmoddi4+0xb4>
 8000450:	e9c5 0100 	strd	r0, r1, [r5]
 8000454:	2100      	movs	r1, #0
 8000456:	4608      	mov	r0, r1
 8000458:	e7f5      	b.n	8000446 <__udivmoddi4+0xa6>
 800045a:	fab3 f183 	clz	r1, r3
 800045e:	2900      	cmp	r1, #0
 8000460:	d146      	bne.n	80004f0 <__udivmoddi4+0x150>
 8000462:	42a3      	cmp	r3, r4
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0xcc>
 8000466:	4290      	cmp	r0, r2
 8000468:	f0c0 80f0 	bcc.w	800064c <__udivmoddi4+0x2ac>
 800046c:	1a86      	subs	r6, r0, r2
 800046e:	eb64 0303 	sbc.w	r3, r4, r3
 8000472:	2001      	movs	r0, #1
 8000474:	2d00      	cmp	r5, #0
 8000476:	d0e6      	beq.n	8000446 <__udivmoddi4+0xa6>
 8000478:	e9c5 6300 	strd	r6, r3, [r5]
 800047c:	e7e3      	b.n	8000446 <__udivmoddi4+0xa6>
 800047e:	2a00      	cmp	r2, #0
 8000480:	f040 8090 	bne.w	80005a4 <__udivmoddi4+0x204>
 8000484:	eba1 040c 	sub.w	r4, r1, ip
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa1f f78c 	uxth.w	r7, ip
 8000490:	2101      	movs	r1, #1
 8000492:	fbb4 f6f8 	udiv	r6, r4, r8
 8000496:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800049a:	fb08 4416 	mls	r4, r8, r6, r4
 800049e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004a2:	fb07 f006 	mul.w	r0, r7, r6
 80004a6:	4298      	cmp	r0, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x11c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x11a>
 80004b4:	4298      	cmp	r0, r3
 80004b6:	f200 80cd 	bhi.w	8000654 <__udivmoddi4+0x2b4>
 80004ba:	4626      	mov	r6, r4
 80004bc:	1a1c      	subs	r4, r3, r0
 80004be:	fa1f f38e 	uxth.w	r3, lr
 80004c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004c6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ce:	fb00 f707 	mul.w	r7, r0, r7
 80004d2:	429f      	cmp	r7, r3
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x148>
 80004d6:	eb1c 0303 	adds.w	r3, ip, r3
 80004da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004de:	d202      	bcs.n	80004e6 <__udivmoddi4+0x146>
 80004e0:	429f      	cmp	r7, r3
 80004e2:	f200 80b0 	bhi.w	8000646 <__udivmoddi4+0x2a6>
 80004e6:	4620      	mov	r0, r4
 80004e8:	1bdb      	subs	r3, r3, r7
 80004ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ee:	e7a5      	b.n	800043c <__udivmoddi4+0x9c>
 80004f0:	f1c1 0620 	rsb	r6, r1, #32
 80004f4:	408b      	lsls	r3, r1
 80004f6:	fa22 f706 	lsr.w	r7, r2, r6
 80004fa:	431f      	orrs	r7, r3
 80004fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000500:	fa04 f301 	lsl.w	r3, r4, r1
 8000504:	ea43 030c 	orr.w	r3, r3, ip
 8000508:	40f4      	lsrs	r4, r6
 800050a:	fa00 f801 	lsl.w	r8, r0, r1
 800050e:	0c38      	lsrs	r0, r7, #16
 8000510:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000514:	fbb4 fef0 	udiv	lr, r4, r0
 8000518:	fa1f fc87 	uxth.w	ip, r7
 800051c:	fb00 441e 	mls	r4, r0, lr, r4
 8000520:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000524:	fb0e f90c 	mul.w	r9, lr, ip
 8000528:	45a1      	cmp	r9, r4
 800052a:	fa02 f201 	lsl.w	r2, r2, r1
 800052e:	d90a      	bls.n	8000546 <__udivmoddi4+0x1a6>
 8000530:	193c      	adds	r4, r7, r4
 8000532:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000536:	f080 8084 	bcs.w	8000642 <__udivmoddi4+0x2a2>
 800053a:	45a1      	cmp	r9, r4
 800053c:	f240 8081 	bls.w	8000642 <__udivmoddi4+0x2a2>
 8000540:	f1ae 0e02 	sub.w	lr, lr, #2
 8000544:	443c      	add	r4, r7
 8000546:	eba4 0409 	sub.w	r4, r4, r9
 800054a:	fa1f f983 	uxth.w	r9, r3
 800054e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000552:	fb00 4413 	mls	r4, r0, r3, r4
 8000556:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800055a:	fb03 fc0c 	mul.w	ip, r3, ip
 800055e:	45a4      	cmp	ip, r4
 8000560:	d907      	bls.n	8000572 <__udivmoddi4+0x1d2>
 8000562:	193c      	adds	r4, r7, r4
 8000564:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000568:	d267      	bcs.n	800063a <__udivmoddi4+0x29a>
 800056a:	45a4      	cmp	ip, r4
 800056c:	d965      	bls.n	800063a <__udivmoddi4+0x29a>
 800056e:	3b02      	subs	r3, #2
 8000570:	443c      	add	r4, r7
 8000572:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000576:	fba0 9302 	umull	r9, r3, r0, r2
 800057a:	eba4 040c 	sub.w	r4, r4, ip
 800057e:	429c      	cmp	r4, r3
 8000580:	46ce      	mov	lr, r9
 8000582:	469c      	mov	ip, r3
 8000584:	d351      	bcc.n	800062a <__udivmoddi4+0x28a>
 8000586:	d04e      	beq.n	8000626 <__udivmoddi4+0x286>
 8000588:	b155      	cbz	r5, 80005a0 <__udivmoddi4+0x200>
 800058a:	ebb8 030e 	subs.w	r3, r8, lr
 800058e:	eb64 040c 	sbc.w	r4, r4, ip
 8000592:	fa04 f606 	lsl.w	r6, r4, r6
 8000596:	40cb      	lsrs	r3, r1
 8000598:	431e      	orrs	r6, r3
 800059a:	40cc      	lsrs	r4, r1
 800059c:	e9c5 6400 	strd	r6, r4, [r5]
 80005a0:	2100      	movs	r1, #0
 80005a2:	e750      	b.n	8000446 <__udivmoddi4+0xa6>
 80005a4:	f1c2 0320 	rsb	r3, r2, #32
 80005a8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80005b0:	fa24 f303 	lsr.w	r3, r4, r3
 80005b4:	4094      	lsls	r4, r2
 80005b6:	430c      	orrs	r4, r1
 80005b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005c0:	fa1f f78c 	uxth.w	r7, ip
 80005c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005c8:	fb08 3110 	mls	r1, r8, r0, r3
 80005cc:	0c23      	lsrs	r3, r4, #16
 80005ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005d2:	fb00 f107 	mul.w	r1, r0, r7
 80005d6:	4299      	cmp	r1, r3
 80005d8:	d908      	bls.n	80005ec <__udivmoddi4+0x24c>
 80005da:	eb1c 0303 	adds.w	r3, ip, r3
 80005de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005e2:	d22c      	bcs.n	800063e <__udivmoddi4+0x29e>
 80005e4:	4299      	cmp	r1, r3
 80005e6:	d92a      	bls.n	800063e <__udivmoddi4+0x29e>
 80005e8:	3802      	subs	r0, #2
 80005ea:	4463      	add	r3, ip
 80005ec:	1a5b      	subs	r3, r3, r1
 80005ee:	b2a4      	uxth	r4, r4
 80005f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005f4:	fb08 3311 	mls	r3, r8, r1, r3
 80005f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005fc:	fb01 f307 	mul.w	r3, r1, r7
 8000600:	42a3      	cmp	r3, r4
 8000602:	d908      	bls.n	8000616 <__udivmoddi4+0x276>
 8000604:	eb1c 0404 	adds.w	r4, ip, r4
 8000608:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800060c:	d213      	bcs.n	8000636 <__udivmoddi4+0x296>
 800060e:	42a3      	cmp	r3, r4
 8000610:	d911      	bls.n	8000636 <__udivmoddi4+0x296>
 8000612:	3902      	subs	r1, #2
 8000614:	4464      	add	r4, ip
 8000616:	1ae4      	subs	r4, r4, r3
 8000618:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800061c:	e739      	b.n	8000492 <__udivmoddi4+0xf2>
 800061e:	4604      	mov	r4, r0
 8000620:	e6f0      	b.n	8000404 <__udivmoddi4+0x64>
 8000622:	4608      	mov	r0, r1
 8000624:	e706      	b.n	8000434 <__udivmoddi4+0x94>
 8000626:	45c8      	cmp	r8, r9
 8000628:	d2ae      	bcs.n	8000588 <__udivmoddi4+0x1e8>
 800062a:	ebb9 0e02 	subs.w	lr, r9, r2
 800062e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000632:	3801      	subs	r0, #1
 8000634:	e7a8      	b.n	8000588 <__udivmoddi4+0x1e8>
 8000636:	4631      	mov	r1, r6
 8000638:	e7ed      	b.n	8000616 <__udivmoddi4+0x276>
 800063a:	4603      	mov	r3, r0
 800063c:	e799      	b.n	8000572 <__udivmoddi4+0x1d2>
 800063e:	4630      	mov	r0, r6
 8000640:	e7d4      	b.n	80005ec <__udivmoddi4+0x24c>
 8000642:	46d6      	mov	lr, sl
 8000644:	e77f      	b.n	8000546 <__udivmoddi4+0x1a6>
 8000646:	4463      	add	r3, ip
 8000648:	3802      	subs	r0, #2
 800064a:	e74d      	b.n	80004e8 <__udivmoddi4+0x148>
 800064c:	4606      	mov	r6, r0
 800064e:	4623      	mov	r3, r4
 8000650:	4608      	mov	r0, r1
 8000652:	e70f      	b.n	8000474 <__udivmoddi4+0xd4>
 8000654:	3e02      	subs	r6, #2
 8000656:	4463      	add	r3, ip
 8000658:	e730      	b.n	80004bc <__udivmoddi4+0x11c>
 800065a:	bf00      	nop

0800065c <__aeabi_idiv0>:
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000664:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_CAN1_Init+0x64>)
 8000666:	4a18      	ldr	r2, [pc, #96]	@ (80006c8 <MX_CAN1_Init+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800066a:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <MX_CAN1_Init+0x64>)
 800066c:	2206      	movs	r2, #6
 800066e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000670:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_CAN1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000676:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <MX_CAN1_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800067c:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_CAN1_Init+0x64>)
 800067e:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000682:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_CAN1_Init+0x64>)
 8000686:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800068a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800068c:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <MX_CAN1_Init+0x64>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_CAN1_Init+0x64>)
 8000694:	2200      	movs	r2, #0
 8000696:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_CAN1_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_CAN1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_CAN1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_CAN1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_CAN1_Init+0x64>)
 80006b2:	f001 f911 	bl	80018d8 <HAL_CAN_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006bc:	f000 fe7a 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000088 	.word	0x20000088
 80006c8:	40006400 	.word	0x40006400

080006cc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a19      	ldr	r2, [pc, #100]	@ (8000750 <HAL_CAN_MspInit+0x84>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d12c      	bne.n	8000748 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f6:	4a17      	ldr	r2, [pc, #92]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 80006f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a10      	ldr	r2, [pc, #64]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <HAL_CAN_MspInit+0x88>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000726:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000738:	2309      	movs	r3, #9
 800073a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <HAL_CAN_MspInit+0x8c>)
 8000744:	f001 faaa 	bl	8001c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40006400 	.word	0x40006400
 8000754:	40023800 	.word	0x40023800
 8000758:	40020400 	.word	0x40020400

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a2c      	ldr	r2, [pc, #176]	@ (800082c <MX_GPIO_Init+0xd0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b26      	ldr	r3, [pc, #152]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a25      	ldr	r2, [pc, #148]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a1e      	ldr	r2, [pc, #120]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a17      	ldr	r2, [pc, #92]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4812      	ldr	r0, [pc, #72]	@ (8000830 <MX_GPIO_Init+0xd4>)
 80007e8:	f001 fbec 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_GPIO_Init+0xd8>)
 8000804:	f001 fa4a 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000808:	2320      	movs	r3, #32
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_GPIO_Init+0xd4>)
 8000820:	f001 fa3c 	bl	8001c9c <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	@ 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	40020800 	.word	0x40020800

08000838 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_I2C3_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	@ (800088c <MX_I2C3_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000844:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <MX_I2C3_Init+0x58>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_I2C3_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000856:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <MX_I2C3_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <MX_I2C3_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_I2C3_Init+0x50>)
 8000876:	f001 fbbf 	bl	8001ff8 <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 fd98 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000b0 	.word	0x200000b0
 800088c:	40005c00 	.word	0x40005c00
 8000890:	000186a0 	.word	0x000186a0

08000894 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a28      	ldr	r2, [pc, #160]	@ (8000954 <HAL_I2C_MspInit+0xc0>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d14a      	bne.n	800094c <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a26      	ldr	r2, [pc, #152]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a1f      	ldr	r2, [pc, #124]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f4:	2312      	movs	r3, #18
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000900:	2304      	movs	r3, #4
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4814      	ldr	r0, [pc, #80]	@ (800095c <HAL_I2C_MspInit+0xc8>)
 800090c:	f001 f9c6 	bl	8001c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000910:	2310      	movs	r3, #16
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000914:	2312      	movs	r3, #18
 8000916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000920:	2304      	movs	r3, #4
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <HAL_I2C_MspInit+0xcc>)
 800092c:	f001 f9b6 	bl	8001c9c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	4a07      	ldr	r2, [pc, #28]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 800093a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800093e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <HAL_I2C_MspInit+0xc4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	@ 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40005c00 	.word	0x40005c00
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000
 8000960:	40020400 	.word	0x40020400

08000964 <convertBufferToUint32>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t convertBufferToUint32(uint8_t buffer[3]) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	return (uint32_t)buffer[0] << 16 | (uint32_t)buffer[1] << 8 | (uint32_t)buffer[2];
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	041a      	lsls	r2, r3, #16
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3301      	adds	r3, #1
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	4313      	orrs	r3, r2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	3202      	adds	r2, #2
 8000980:	7812      	ldrb	r2, [r2, #0]
 8000982:	4313      	orrs	r3, r2
}
 8000984:	4618      	mov	r0, r3
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <bmp280_config>:

int bmp280_config()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af02      	add	r7, sp, #8
	// on config

	uint8_t bmp280_addr_ctrl_meas = 0xF4; // l'adresse du registre contenant le control des mesures
 8000996:	23f4      	movs	r3, #244	@ 0xf4
 8000998:	71fb      	strb	r3, [r7, #7]
	uint8_t bmp280_config_ctrl_meas = 0x57; // la valuer de la config a appliqué
 800099a:	2357      	movs	r3, #87	@ 0x57
 800099c:	71bb      	strb	r3, [r7, #6]
	uint8_t bmp280_ctrl_meas_buffer[2] = {bmp280_addr_ctrl_meas, bmp280_config_ctrl_meas};
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	713b      	strb	r3, [r7, #4]
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	717b      	strb	r3, [r7, #5]
	uint8_t value = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	70fb      	strb	r3, [r7, #3]
	//on envoie la config
	//on envoie buffer avec adresse du registre
	//puis valeur à y écrire
	if( HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, bmp280_addr_shifted, bmp280_ctrl_meas_buffer, 2, 1000))
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <bmp280_config+0x58>)
 80009ac:	8819      	ldrh	r1, [r3, #0]
 80009ae:	1d3a      	adds	r2, r7, #4
 80009b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2302      	movs	r3, #2
 80009b8:	480c      	ldr	r0, [pc, #48]	@ (80009ec <bmp280_config+0x5c>)
 80009ba:	f001 fc61 	bl	8002280 <HAL_I2C_Master_Transmit>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <bmp280_config+0x38>
	{
		return 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	e00a      	b.n	80009de <bmp280_config+0x4e>
	}
	//pour vérification
	HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &value, 1, 1000);
 80009c8:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <bmp280_config+0x58>)
 80009ca:	8819      	ldrh	r1, [r3, #0]
 80009cc:	1cfa      	adds	r2, r7, #3
 80009ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	4805      	ldr	r0, [pc, #20]	@ (80009ec <bmp280_config+0x5c>)
 80009d8:	f001 fd50 	bl	800247c <HAL_I2C_Master_Receive>
	return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000000 	.word	0x20000000
 80009ec:	200000b0 	.word	0x200000b0

080009f0 <bmp280_etalonnage>:

int bmp280_etalonnage()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af02      	add	r7, sp, #8
	//--------------------------------------------------------------------------------------
	//Récupération de létalonnage
	uint8_t first_calibration_addr = 0x88; // valeur de la première adresse du registre calibration
 80009f6:	2388      	movs	r3, #136	@ 0x88
 80009f8:	70fb      	strb	r3, [r7, #3]
	uint8_t current_calibration_addr = first_calibration_addr; // variable que l'on va incrémenter pour récupérer toutes les adresses
 80009fa:	78fb      	ldrb	r3, [r7, #3]
 80009fc:	70bb      	strb	r3, [r7, #2]
	uint8_t calibration_value;
	for(int i = 0; i <BMP280_CALIBRATION_BUFFER_SIZE;i++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	e02a      	b.n	8000a5a <bmp280_etalonnage+0x6a>
	{
		if( HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, bmp280_addr_shifted, &current_calibration_addr, 1, 1000))  // on demande à récup valeur de l'adresse courante
 8000a04:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <bmp280_etalonnage+0x7c>)
 8000a06:	8819      	ldrh	r1, [r3, #0]
 8000a08:	1cba      	adds	r2, r7, #2
 8000a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2301      	movs	r3, #1
 8000a12:	4817      	ldr	r0, [pc, #92]	@ (8000a70 <bmp280_etalonnage+0x80>)
 8000a14:	f001 fc34 	bl	8002280 <HAL_I2C_Master_Transmit>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <bmp280_etalonnage+0x32>

		{
			return 1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e01f      	b.n	8000a62 <bmp280_etalonnage+0x72>
		}
		if( HAL_OK != HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &calibration_value, 1, 1000))  // on demande à récup valeur de l'adresse courante
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <bmp280_etalonnage+0x7c>)
 8000a24:	8819      	ldrh	r1, [r3, #0]
 8000a26:	1c7a      	adds	r2, r7, #1
 8000a28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2301      	movs	r3, #1
 8000a30:	480f      	ldr	r0, [pc, #60]	@ (8000a70 <bmp280_etalonnage+0x80>)
 8000a32:	f001 fd23 	bl	800247c <HAL_I2C_Master_Receive>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <bmp280_etalonnage+0x50>
		{
			return 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e010      	b.n	8000a62 <bmp280_etalonnage+0x72>
		}
		 // on récupère la valeur de calibration de l'adresse courante
		calibration_buffer[i] = calibration_value; // on la range dans le buffer
 8000a40:	7879      	ldrb	r1, [r7, #1]
 8000a42:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <bmp280_etalonnage+0x84>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4413      	add	r3, r2
 8000a48:	460a      	mov	r2, r1
 8000a4a:	701a      	strb	r2, [r3, #0]
		current_calibration_addr++; // on incrémente l'adresse
 8000a4c:	78bb      	ldrb	r3, [r7, #2]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	70bb      	strb	r3, [r7, #2]
	for(int i = 0; i <BMP280_CALIBRATION_BUFFER_SIZE;i++)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b18      	cmp	r3, #24
 8000a5e:	ddd1      	ble.n	8000a04 <bmp280_etalonnage+0x14>
	}
	return 0;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	200000b0 	.word	0x200000b0
 8000a74:	20000104 	.word	0x20000104

08000a78 <bmp280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)calibration_buffer[0]<<1))) * ((int32_t)calibration_buffer[1])) >> 11;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	10da      	asrs	r2, r3, #3
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <bmp280_compensate_T_int32+0x70>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	4a16      	ldr	r2, [pc, #88]	@ (8000ae8 <bmp280_compensate_T_int32+0x70>)
 8000a8e:	7852      	ldrb	r2, [r2, #1]
 8000a90:	fb02 f303 	mul.w	r3, r2, r3
 8000a94:	12db      	asrs	r3, r3, #11
 8000a96:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)calibration_buffer[0])) * ((adc_T>>4) - ((int32_t)calibration_buffer[0]))) >> 12) *
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	111b      	asrs	r3, r3, #4
 8000a9c:	4a12      	ldr	r2, [pc, #72]	@ (8000ae8 <bmp280_compensate_T_int32+0x70>)
 8000a9e:	7812      	ldrb	r2, [r2, #0]
 8000aa0:	1a9b      	subs	r3, r3, r2
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	1112      	asrs	r2, r2, #4
 8000aa6:	4910      	ldr	r1, [pc, #64]	@ (8000ae8 <bmp280_compensate_T_int32+0x70>)
 8000aa8:	7809      	ldrb	r1, [r1, #0]
 8000aaa:	1a52      	subs	r2, r2, r1
 8000aac:	fb02 f303 	mul.w	r3, r2, r3
 8000ab0:	131b      	asrs	r3, r3, #12
			((int32_t)calibration_buffer[2])) >> 14;
 8000ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <bmp280_compensate_T_int32+0x70>)
 8000ab4:	7892      	ldrb	r2, [r2, #2]
	var2 = (((((adc_T>>4) - ((int32_t)calibration_buffer[0])) * ((adc_T>>4) - ((int32_t)calibration_buffer[0]))) >> 12) *
 8000ab6:	fb02 f303 	mul.w	r3, r2, r3
 8000aba:	139b      	asrs	r3, r3, #14
 8000abc:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a09      	ldr	r2, [pc, #36]	@ (8000aec <bmp280_compensate_T_int32+0x74>)
 8000ac6:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <bmp280_compensate_T_int32+0x74>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	3380      	adds	r3, #128	@ 0x80
 8000ad4:	121b      	asrs	r3, r3, #8
 8000ad6:	60fb      	str	r3, [r7, #12]
	return T;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	371c      	adds	r7, #28
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000104 	.word	0x20000104
 8000aec:	20000120 	.word	0x20000120

08000af0 <bmp280_compensate_P_int64>:
// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
uint32_t bmp280_compensate_P_int64(int32_t adc_P)
{
 8000af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000af4:	b0ca      	sub	sp, #296	@ 0x128
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8000afc:	4bac      	ldr	r3, [pc, #688]	@ (8000db0 <bmp280_compensate_P_int64+0x2c0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	17da      	asrs	r2, r3, #31
 8000b02:	461c      	mov	r4, r3
 8000b04:	4615      	mov	r5, r2
 8000b06:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8000b0a:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8000b0e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)calibration_buffer[8];
 8000b12:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b1a:	fb03 f102 	mul.w	r1, r3, r2
 8000b1e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b26:	fb02 f303 	mul.w	r3, r2, r3
 8000b2a:	18ca      	adds	r2, r1, r3
 8000b2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b30:	fba3 8903 	umull	r8, r9, r3, r3
 8000b34:	eb02 0309 	add.w	r3, r2, r9
 8000b38:	4699      	mov	r9, r3
 8000b3a:	4b9e      	ldr	r3, [pc, #632]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000b3c:	7a1b      	ldrb	r3, [r3, #8]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2200      	movs	r2, #0
 8000b42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000b46:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000b4a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000b4e:	4603      	mov	r3, r0
 8000b50:	fb03 f209 	mul.w	r2, r3, r9
 8000b54:	460b      	mov	r3, r1
 8000b56:	fb08 f303 	mul.w	r3, r8, r3
 8000b5a:	4413      	add	r3, r2
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	fba8 1202 	umull	r1, r2, r8, r2
 8000b62:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000b66:	460a      	mov	r2, r1
 8000b68:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000b6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000b70:	4413      	add	r3, r2
 8000b72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000b76:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000b7a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000b7e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)calibration_buffer[7])<<17);
 8000b82:	4b8c      	ldr	r3, [pc, #560]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000b84:	79db      	ldrb	r3, [r3, #7]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000b8e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000b92:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b96:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000b9a:	462a      	mov	r2, r5
 8000b9c:	fb02 f203 	mul.w	r2, r2, r3
 8000ba0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ba4:	4621      	mov	r1, r4
 8000ba6:	fb01 f303 	mul.w	r3, r1, r3
 8000baa:	441a      	add	r2, r3
 8000bac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bb0:	4621      	mov	r1, r4
 8000bb2:	fba3 1301 	umull	r1, r3, r3, r1
 8000bb6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000bba:	460b      	mov	r3, r1
 8000bbc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000bca:	f04f 0000 	mov.w	r0, #0
 8000bce:	f04f 0100 	mov.w	r1, #0
 8000bd2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000bd6:	462b      	mov	r3, r5
 8000bd8:	0459      	lsls	r1, r3, #17
 8000bda:	4623      	mov	r3, r4
 8000bdc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000be0:	4623      	mov	r3, r4
 8000be2:	0458      	lsls	r0, r3, #17
 8000be4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000be8:	1814      	adds	r4, r2, r0
 8000bea:	643c      	str	r4, [r7, #64]	@ 0x40
 8000bec:	414b      	adcs	r3, r1
 8000bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8000bf0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000bf4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)calibration_buffer[6])<<35);
 8000bf8:	4b6e      	ldr	r3, [pc, #440]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000bfa:	799b      	ldrb	r3, [r3, #6]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000c04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	f04f 0100 	mov.w	r1, #0
 8000c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c14:	00d9      	lsls	r1, r3, #3
 8000c16:	2000      	movs	r0, #0
 8000c18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000c1c:	1814      	adds	r4, r2, r0
 8000c1e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000c20:	414b      	adcs	r3, r1
 8000c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c24:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000c28:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)calibration_buffer[5])>>8) + ((var1 * (int64_t)calibration_buffer[4])<<12);
 8000c2c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000c30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c34:	fb03 f102 	mul.w	r1, r3, r2
 8000c38:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000c3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c40:	fb02 f303 	mul.w	r3, r2, r3
 8000c44:	18ca      	adds	r2, r1, r3
 8000c46:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c4a:	fba3 1303 	umull	r1, r3, r3, r3
 8000c4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000c52:	460b      	mov	r3, r1
 8000c54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000c5c:	18d3      	adds	r3, r2, r3
 8000c5e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000c62:	4b54      	ldr	r3, [pc, #336]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000c64:	795b      	ldrb	r3, [r3, #5]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000c72:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000c76:	462b      	mov	r3, r5
 8000c78:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	fb02 f203 	mul.w	r2, r2, r3
 8000c82:	464b      	mov	r3, r9
 8000c84:	4621      	mov	r1, r4
 8000c86:	fb01 f303 	mul.w	r3, r1, r3
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4622      	mov	r2, r4
 8000c8e:	4641      	mov	r1, r8
 8000c90:	fba2 1201 	umull	r1, r2, r2, r1
 8000c94:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000c98:	460a      	mov	r2, r1
 8000c9a:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000c9e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000ca2:	4413      	add	r3, r2
 8000ca4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	f04f 0100 	mov.w	r1, #0
 8000cb0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000cb4:	4623      	mov	r3, r4
 8000cb6:	0a18      	lsrs	r0, r3, #8
 8000cb8:	462b      	mov	r3, r5
 8000cba:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000cbe:	462b      	mov	r3, r5
 8000cc0:	1219      	asrs	r1, r3, #8
 8000cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000cce:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000cd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000cd6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000cda:	464a      	mov	r2, r9
 8000cdc:	fb02 f203 	mul.w	r2, r2, r3
 8000ce0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ce4:	4644      	mov	r4, r8
 8000ce6:	fb04 f303 	mul.w	r3, r4, r3
 8000cea:	441a      	add	r2, r3
 8000cec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000cf0:	4644      	mov	r4, r8
 8000cf2:	fba3 4304 	umull	r4, r3, r3, r4
 8000cf6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000d00:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000d16:	464c      	mov	r4, r9
 8000d18:	0323      	lsls	r3, r4, #12
 8000d1a:	4644      	mov	r4, r8
 8000d1c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000d20:	4644      	mov	r4, r8
 8000d22:	0322      	lsls	r2, r4, #12
 8000d24:	1884      	adds	r4, r0, r2
 8000d26:	633c      	str	r4, [r7, #48]	@ 0x30
 8000d28:	eb41 0303 	adc.w	r3, r1, r3
 8000d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d2e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000d32:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)calibration_buffer[3])>>33;
 8000d36:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000d3a:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000d3e:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000d42:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000d46:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <bmp280_compensate_P_int64+0x2c4>)
 8000d48:	78db      	ldrb	r3, [r3, #3]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000d52:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000d5a:	462b      	mov	r3, r5
 8000d5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000d60:	4642      	mov	r2, r8
 8000d62:	fb02 f203 	mul.w	r2, r2, r3
 8000d66:	464b      	mov	r3, r9
 8000d68:	4621      	mov	r1, r4
 8000d6a:	fb01 f303 	mul.w	r3, r1, r3
 8000d6e:	4413      	add	r3, r2
 8000d70:	4622      	mov	r2, r4
 8000d72:	4641      	mov	r1, r8
 8000d74:	fba2 1201 	umull	r1, r2, r2, r1
 8000d78:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000d82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000d86:	4413      	add	r3, r2
 8000d88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000d98:	4629      	mov	r1, r5
 8000d9a:	104a      	asrs	r2, r1, #1
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	17cb      	asrs	r3, r1, #31
 8000da0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000da4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da8:	4313      	orrs	r3, r2
 8000daa:	d105      	bne.n	8000db8 <bmp280_compensate_P_int64+0x2c8>
	{
		return 0; // avoid exception caused by division by zero
 8000dac:	2300      	movs	r3, #0
 8000dae:	e146      	b.n	800103e <bmp280_compensate_P_int64+0x54e>
 8000db0:	20000120 	.word	0x20000120
 8000db4:	20000104 	.word	0x20000104
	}
	p = 1048576-adc_P;
 8000db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000dbc:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000dc0:	17da      	asrs	r2, r3, #31
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000dc6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000dca:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000dce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000dd2:	105b      	asrs	r3, r3, #1
 8000dd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000dd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000ddc:	07db      	lsls	r3, r3, #31
 8000dde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000de2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000de6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000dea:	4621      	mov	r1, r4
 8000dec:	1a89      	subs	r1, r1, r2
 8000dee:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000df0:	4629      	mov	r1, r5
 8000df2:	eb61 0303 	sbc.w	r3, r1, r3
 8000df6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000df8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000dfc:	4622      	mov	r2, r4
 8000dfe:	462b      	mov	r3, r5
 8000e00:	1891      	adds	r1, r2, r2
 8000e02:	6239      	str	r1, [r7, #32]
 8000e04:	415b      	adcs	r3, r3
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e08:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	1851      	adds	r1, r2, r1
 8000e10:	61b9      	str	r1, [r7, #24]
 8000e12:	4629      	mov	r1, r5
 8000e14:	414b      	adcs	r3, r1
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000e24:	4649      	mov	r1, r9
 8000e26:	018b      	lsls	r3, r1, #6
 8000e28:	4641      	mov	r1, r8
 8000e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000e2e:	4641      	mov	r1, r8
 8000e30:	018a      	lsls	r2, r1, #6
 8000e32:	4641      	mov	r1, r8
 8000e34:	1889      	adds	r1, r1, r2
 8000e36:	6139      	str	r1, [r7, #16]
 8000e38:	4649      	mov	r1, r9
 8000e3a:	eb43 0101 	adc.w	r1, r3, r1
 8000e3e:	6179      	str	r1, [r7, #20]
 8000e40:	f04f 0200 	mov.w	r2, #0
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000e4c:	4649      	mov	r1, r9
 8000e4e:	008b      	lsls	r3, r1, #2
 8000e50:	4641      	mov	r1, r8
 8000e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e56:	4641      	mov	r1, r8
 8000e58:	008a      	lsls	r2, r1, #2
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4622      	mov	r2, r4
 8000e62:	189b      	adds	r3, r3, r2
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	460b      	mov	r3, r1
 8000e68:	462a      	mov	r2, r5
 8000e6a:	eb42 0303 	adc.w	r3, r2, r3
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	f04f 0200 	mov.w	r2, #0
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000e7c:	4649      	mov	r1, r9
 8000e7e:	008b      	lsls	r3, r1, #2
 8000e80:	4641      	mov	r1, r8
 8000e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000e86:	4641      	mov	r1, r8
 8000e88:	008a      	lsls	r2, r1, #2
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4622      	mov	r2, r4
 8000e92:	189b      	adds	r3, r3, r2
 8000e94:	673b      	str	r3, [r7, #112]	@ 0x70
 8000e96:	462b      	mov	r3, r5
 8000e98:	460a      	mov	r2, r1
 8000e9a:	eb42 0303 	adc.w	r3, r2, r3
 8000e9e:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ea0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ea4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000ea8:	f7ff fa12 	bl	80002d0 <__aeabi_ldivmod>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)calibration_buffer[11]) * (p>>13) * (p>>13)) >> 25;
 8000eb4:	4b65      	ldr	r3, [pc, #404]	@ (800104c <bmp280_compensate_P_int64+0x55c>)
 8000eb6:	7adb      	ldrb	r3, [r3, #11]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2200      	movs	r2, #0
 8000ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000ebe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000ec0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000ec4:	f04f 0000 	mov.w	r0, #0
 8000ec8:	f04f 0100 	mov.w	r1, #0
 8000ecc:	0b50      	lsrs	r0, r2, #13
 8000ece:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000ed2:	1359      	asrs	r1, r3, #13
 8000ed4:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000ed8:	462b      	mov	r3, r5
 8000eda:	fb00 f203 	mul.w	r2, r0, r3
 8000ede:	4623      	mov	r3, r4
 8000ee0:	fb03 f301 	mul.w	r3, r3, r1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4622      	mov	r2, r4
 8000ee8:	fba2 1200 	umull	r1, r2, r2, r0
 8000eec:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000ef6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000efa:	4413      	add	r3, r2
 8000efc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000f00:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000f04:	f04f 0000 	mov.w	r0, #0
 8000f08:	f04f 0100 	mov.w	r1, #0
 8000f0c:	0b50      	lsrs	r0, r2, #13
 8000f0e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000f12:	1359      	asrs	r1, r3, #13
 8000f14:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000f18:	462b      	mov	r3, r5
 8000f1a:	fb00 f203 	mul.w	r2, r0, r3
 8000f1e:	4623      	mov	r3, r4
 8000f20:	fb03 f301 	mul.w	r3, r3, r1
 8000f24:	4413      	add	r3, r2
 8000f26:	4622      	mov	r2, r4
 8000f28:	fba2 1200 	umull	r1, r2, r2, r0
 8000f2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000f30:	460a      	mov	r2, r1
 8000f32:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000f36:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	0e4a      	lsrs	r2, r1, #25
 8000f50:	4629      	mov	r1, r5
 8000f52:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000f56:	4629      	mov	r1, r5
 8000f58:	164b      	asrs	r3, r1, #25
 8000f5a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)calibration_buffer[10]) * p) >> 19;
 8000f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <bmp280_compensate_P_int64+0x55c>)
 8000f60:	7a9b      	ldrb	r3, [r3, #10]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000f6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000f6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000f72:	462a      	mov	r2, r5
 8000f74:	fb02 f203 	mul.w	r2, r2, r3
 8000f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	fb01 f303 	mul.w	r3, r1, r3
 8000f82:	4413      	add	r3, r2
 8000f84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000f88:	4621      	mov	r1, r4
 8000f8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000f8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000f92:	460a      	mov	r2, r1
 8000f94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000f98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000fae:	4621      	mov	r1, r4
 8000fb0:	0cca      	lsrs	r2, r1, #19
 8000fb2:	4629      	mov	r1, r5
 8000fb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000fb8:	4629      	mov	r1, r5
 8000fba:	14cb      	asrs	r3, r1, #19
 8000fbc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)calibration_buffer[9])<<4);
 8000fc0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000fc4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000fc8:	1884      	adds	r4, r0, r2
 8000fca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000fcc:	eb41 0303 	adc.w	r3, r1, r3
 8000fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000fd2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000fd6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000fda:	4621      	mov	r1, r4
 8000fdc:	1889      	adds	r1, r1, r2
 8000fde:	6539      	str	r1, [r7, #80]	@ 0x50
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	eb43 0101 	adc.w	r1, r3, r1
 8000fe6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000fe8:	f04f 0000 	mov.w	r0, #0
 8000fec:	f04f 0100 	mov.w	r1, #0
 8000ff0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	0a18      	lsrs	r0, r3, #8
 8000ff8:	462b      	mov	r3, r5
 8000ffa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ffe:	462b      	mov	r3, r5
 8001000:	1219      	asrs	r1, r3, #8
 8001002:	4b12      	ldr	r3, [pc, #72]	@ (800104c <bmp280_compensate_P_int64+0x55c>)
 8001004:	7a5b      	ldrb	r3, [r3, #9]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2200      	movs	r2, #0
 800100a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800100c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 800101a:	464c      	mov	r4, r9
 800101c:	0123      	lsls	r3, r4, #4
 800101e:	4644      	mov	r4, r8
 8001020:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001024:	4644      	mov	r4, r8
 8001026:	0122      	lsls	r2, r4, #4
 8001028:	1884      	adds	r4, r0, r2
 800102a:	603c      	str	r4, [r7, #0]
 800102c:	eb41 0303 	adc.w	r3, r1, r3
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001036:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 800103a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800103e:	4618      	mov	r0, r3
 8001040:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001044:	46bd      	mov	sp, r7
 8001046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800104a:	bf00      	nop
 800104c:	20000104 	.word	0x20000104

08001050 <GET_T>:

	int GET_T(uint32_t * temp)
	{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af02      	add	r7, sp, #8
 8001056:	6078      	str	r0, [r7, #4]
		//récupération de la température
		uint8_t temp_start_addr = 0xFA; // l'adresse de départ du registre température
 8001058:	23fa      	movs	r3, #250	@ 0xfa
 800105a:	76fb      	strb	r3, [r7, #27]
		uint8_t temp_value_buffer[3]; //chaque adresse sera stocké dans un byte puis on combinera les bytes
		uint8_t current_temp_addr = temp_start_addr;
 800105c:	7efb      	ldrb	r3, [r7, #27]
 800105e:	72fb      	strb	r3, [r7, #11]
		uint8_t temp_value; //chaque adresse sera stocké dans un byte puis on combinera les bytes

		for(int i = 0; i <3;i++)
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	e023      	b.n	80010ae <GET_T+0x5e>
		{

			HAL_OK !=HAL_I2C_Master_Transmit(&hi2c3, bmp280_addr_shifted, &current_temp_addr, 1, 1000);
 8001066:	4b29      	ldr	r3, [pc, #164]	@ (800110c <GET_T+0xbc>)
 8001068:	8819      	ldrh	r1, [r3, #0]
 800106a:	f107 020b 	add.w	r2, r7, #11
 800106e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	4826      	ldr	r0, [pc, #152]	@ (8001110 <GET_T+0xc0>)
 8001078:	f001 f902 	bl	8002280 <HAL_I2C_Master_Transmit>

			HAL_OK !=HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &temp_value, 1, 1000);
 800107c:	4b23      	ldr	r3, [pc, #140]	@ (800110c <GET_T+0xbc>)
 800107e:	8819      	ldrh	r1, [r3, #0]
 8001080:	f107 020a 	add.w	r2, r7, #10
 8001084:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2301      	movs	r3, #1
 800108c:	4820      	ldr	r0, [pc, #128]	@ (8001110 <GET_T+0xc0>)
 800108e:	f001 f9f5 	bl	800247c <HAL_I2C_Master_Receive>

			temp_value_buffer[i] = temp_value; // on la range dans le buffer
 8001092:	7ab9      	ldrb	r1, [r7, #10]
 8001094:	f107 020c 	add.w	r2, r7, #12
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	4413      	add	r3, r2
 800109c:	460a      	mov	r2, r1
 800109e:	701a      	strb	r2, [r3, #0]
			current_temp_addr++; // on incrémente l'adresse
 80010a0:	7afb      	ldrb	r3, [r7, #11]
 80010a2:	3301      	adds	r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	72fb      	strb	r3, [r7, #11]
		for(int i = 0; i <3;i++)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	3301      	adds	r3, #1
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	ddd8      	ble.n	8001066 <GET_T+0x16>
		}
		uint32_t temp_value_32  =	convertBufferToUint32(temp_value_buffer);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fc53 	bl	8000964 <convertBufferToUint32>
 80010be:	6178      	str	r0, [r7, #20]
		temp_value_32 = bmp280_compensate_T_int32(temp_value_32);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fcd8 	bl	8000a78 <bmp280_compensate_T_int32>
 80010c8:	4603      	mov	r3, r0
 80010ca:	617b      	str	r3, [r7, #20]
		float temp_value_c = temp_value_32 * 0.0025f;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	ee07 3a90 	vmov	s15, r3
 80010d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001114 <GET_T+0xc4>
 80010da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010de:	edc7 7a04 	vstr	s15, [r7, #16]
		temp = (int)(temp_value_c * 100); //1234 = 12.34 degrés celsius
 80010e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010e6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001118 <GET_T+0xc8>
 80010ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f2:	ee17 3a90 	vmov	r3, s15
 80010f6:	607b      	str	r3, [r7, #4]

		printf("Temperature (à divisé par 100 ): %lu \r\n", temp);
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4808      	ldr	r0, [pc, #32]	@ (800111c <GET_T+0xcc>)
 80010fc:	f003 fb12 	bl	8004724 <iprintf>
		return 0;
 8001100:	2300      	movs	r3, #0
	}
 8001102:	4618      	mov	r0, r3
 8001104:	3720      	adds	r7, #32
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000000 	.word	0x20000000
 8001110:	200000b0 	.word	0x200000b0
 8001114:	3b23d70a 	.word	0x3b23d70a
 8001118:	42c80000 	.word	0x42c80000
 800111c:	08005418 	.word	0x08005418

08001120 <GET_P>:

	int GET_P()
	{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af02      	add	r7, sp, #8
		//récupération de la pression
		uint8_t pressure_start_addr = 0xF7; // l'adresse de départ du registre pression
 8001126:	23f7      	movs	r3, #247	@ 0xf7
 8001128:	74fb      	strb	r3, [r7, #19]
		uint8_t pressure_value_buffer[3]; //chaque adresse sera stocké dans un byte puis on combinera les bytes
		uint8_t current_pressure_addr = pressure_start_addr;
 800112a:	7cfb      	ldrb	r3, [r7, #19]
 800112c:	71fb      	strb	r3, [r7, #7]
		uint8_t pressure_value; //chaque adresse sera stocké dans un byte puis on combinera les bytes

		for(int i = 0; i <3;i++)
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e02b      	b.n	800118c <GET_P+0x6c>
		{

			if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, bmp280_addr_shifted, &current_pressure_addr, 1, 1000)) // on demande à récup valeur de l'adresse courante
 8001134:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <GET_P+0x9c>)
 8001136:	8819      	ldrh	r1, [r3, #0]
 8001138:	1dfa      	adds	r2, r7, #7
 800113a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	481f      	ldr	r0, [pc, #124]	@ (80011c0 <GET_P+0xa0>)
 8001144:	f001 f89c 	bl	8002280 <HAL_I2C_Master_Transmit>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <GET_P+0x32>
			{
				return 1;
 800114e:	2301      	movs	r3, #1
 8001150:	e02f      	b.n	80011b2 <GET_P+0x92>
			}
			if(HAL_OK != HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &pressure_value, 1, 1000)) // on demande à récup valeur de l'adresse courante
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <GET_P+0x9c>)
 8001154:	8819      	ldrh	r1, [r3, #0]
 8001156:	1dba      	adds	r2, r7, #6
 8001158:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	4817      	ldr	r0, [pc, #92]	@ (80011c0 <GET_P+0xa0>)
 8001162:	f001 f98b 	bl	800247c <HAL_I2C_Master_Receive>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <GET_P+0x50>
			{
				return 1;
 800116c:	2301      	movs	r3, #1
 800116e:	e020      	b.n	80011b2 <GET_P+0x92>
			}
			// on récupère la valeur de calibration de l'adresse courante
			pressure_value_buffer[i] = pressure_value; // on la range dans le buffer
 8001170:	79b9      	ldrb	r1, [r7, #6]
 8001172:	f107 0208 	add.w	r2, r7, #8
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	4413      	add	r3, r2
 800117a:	460a      	mov	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
			current_pressure_addr++; // on incrémente l'adresse
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	3301      	adds	r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	71fb      	strb	r3, [r7, #7]
		for(int i = 0; i <3;i++)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2b02      	cmp	r3, #2
 8001190:	ddd0      	ble.n	8001134 <GET_P+0x14>
		}
		//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
		uint32_t pressure_value_32 = convertBufferToUint32(pressure_value_buffer);
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fbe4 	bl	8000964 <convertBufferToUint32>
 800119c:	60f8      	str	r0, [r7, #12]
		pressure_value_32 = bmp280_compensate_P_int64(pressure_value_32);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fca5 	bl	8000af0 <bmp280_compensate_P_int64>
 80011a6:	60f8      	str	r0, [r7, #12]
		printf("pression non compensée %lu \r\n",pressure_value_32);
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	4806      	ldr	r0, [pc, #24]	@ (80011c4 <GET_P+0xa4>)
 80011ac:	f003 faba 	bl	8004724 <iprintf>
		return 0;
 80011b0:	2300      	movs	r3, #0
	}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000000 	.word	0x20000000
 80011c0:	200000b0 	.word	0x200000b0
 80011c4:	08005444 	.word	0x08005444

080011c8 <main>:
	/**
	 * @brief  The application entry point.
	 * @retval int
	 */
	int main(void)
	{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0
		/* USER CODE END 1 */

		/* MCU Configuration--------------------------------------------------------*/

		/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
		HAL_Init();
 80011ce:	f000 fb11 	bl	80017f4 <HAL_Init>
		/* USER CODE BEGIN Init */

		/* USER CODE END Init */

		/* Configure the system clock */
		SystemClock_Config();
 80011d2:	f000 f87d 	bl	80012d0 <SystemClock_Config>
		/* USER CODE BEGIN SysInit */

		/* USER CODE END SysInit */

		/* Initialize all configured peripherals */
		MX_GPIO_Init();
 80011d6:	f7ff fac1 	bl	800075c <MX_GPIO_Init>
		MX_USART2_UART_Init();
 80011da:	f000 fa0f 	bl	80015fc <MX_USART2_UART_Init>
		MX_CAN1_Init();
 80011de:	f7ff fa3f 	bl	8000660 <MX_CAN1_Init>
		MX_USART3_UART_Init();
 80011e2:	f000 fa35 	bl	8001650 <MX_USART3_UART_Init>
		MX_I2C3_Init();
 80011e6:	f7ff fb27 	bl	8000838 <MX_I2C3_Init>
		HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &bmp280_id, 1, 1000);
		//--------------------------------------------------------------------------------------

#endif

		uint8_t uart_transmission_end_flag = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	77fb      	strb	r3, [r7, #31]
		uint8_t received_char;
		uint8_t receive_buffer[10];
		memset(receive_buffer, 0, sizeof(receive_buffer));
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	220a      	movs	r2, #10
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fae9 	bl	80047ce <memset>

		bmp280_config();
 80011fc:	f7ff fbc8 	bl	8000990 <bmp280_config>
		bmp280_etalonnage();
 8001200:	f7ff fbf6 	bl	80009f0 <bmp280_etalonnage>

		uint8_t prompt[] = ">>> \r";
 8001204:	4a2c      	ldr	r2, [pc, #176]	@ (80012b8 <main+0xf0>)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120c:	6018      	str	r0, [r3, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	8019      	strh	r1, [r3, #0]
			//		CAN_Send_AutomaticMode(0x54,0x01);
			//		HAL_Delay(1000);
			//		CAN_Send_AutomaticMode(0x54,0x00);
			//
			//		HAL_Delay(1000);
			printf(prompt);
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fa85 	bl	8004724 <iprintf>
			int buffer_index = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
			uart_transmission_end_flag = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	77fb      	strb	r3, [r7, #31]
			uint32_t temp;

			while(uart_transmission_end_flag == 0)
 8001222:	e045      	b.n	80012b0 <main+0xe8>
			{
				HAL_UART_Receive(&huart2, &received_char, 1, HAL_MAX_DELAY);// pour raspberry
 8001224:	f107 0117 	add.w	r1, r7, #23
 8001228:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800122c:	2201      	movs	r2, #1
 800122e:	4823      	ldr	r0, [pc, #140]	@ (80012bc <main+0xf4>)
 8001230:	f002 fdef 	bl	8003e12 <HAL_UART_Receive>
				if((received_char != '\r') && (received_char != '\n') )
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	2b0d      	cmp	r3, #13
 8001238:	d00d      	beq.n	8001256 <main+0x8e>
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	2b0a      	cmp	r3, #10
 800123e:	d00a      	beq.n	8001256 <main+0x8e>
				{
					receive_buffer[buffer_index] = received_char;
 8001240:	7df9      	ldrb	r1, [r7, #23]
 8001242:	f107 020c 	add.w	r2, r7, #12
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4413      	add	r3, r2
 800124a:	460a      	mov	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
					buffer_index++;
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	3301      	adds	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	e02c      	b.n	80012b0 <main+0xe8>
				}
				else
				{
					if(strcmp((const char*)receive_buffer,"GET_T") == 0)
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4919      	ldr	r1, [pc, #100]	@ (80012c0 <main+0xf8>)
 800125c:	4618      	mov	r0, r3
 800125e:	f7fe ffd7 	bl	8000210 <strcmp>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d109      	bne.n	800127c <main+0xb4>
					{
						if(GET_T(&temp) != NO_PROBLEMO)
 8001268:	463b      	mov	r3, r7
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fef0 	bl	8001050 <GET_T>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <main+0xb4>
						{
							printf("problem while reading temp");
 8001276:	4813      	ldr	r0, [pc, #76]	@ (80012c4 <main+0xfc>)
 8001278:	f003 fa54 	bl	8004724 <iprintf>
						}
					}
					if(strcmp((const char*)receive_buffer,"GET_P") == 0)
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4911      	ldr	r1, [pc, #68]	@ (80012c8 <main+0x100>)
 8001282:	4618      	mov	r0, r3
 8001284:	f7fe ffc4 	bl	8000210 <strcmp>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d107      	bne.n	800129e <main+0xd6>
					{
						if(GET_P() != NO_PROBLEMO)
 800128e:	f7ff ff47 	bl	8001120 <GET_P>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <main+0xd6>
						{
							printf("problem while reading pressure");
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <main+0x104>)
 800129a:	f003 fa43 	bl	8004724 <iprintf>
						}
					}
					memset(receive_buffer, 0, sizeof(receive_buffer));
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	220a      	movs	r2, #10
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 fa91 	bl	80047ce <memset>
					uart_transmission_end_flag = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	77fb      	strb	r3, [r7, #31]
			while(uart_transmission_end_flag == 0)
 80012b0:	7ffb      	ldrb	r3, [r7, #31]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0b6      	beq.n	8001224 <main+0x5c>
		{
 80012b6:	e7ac      	b.n	8001212 <main+0x4a>
 80012b8:	080054b0 	.word	0x080054b0
 80012bc:	20000128 	.word	0x20000128
 80012c0:	08005464 	.word	0x08005464
 80012c4:	0800546c 	.word	0x0800546c
 80012c8:	08005488 	.word	0x08005488
 80012cc:	08005490 	.word	0x08005490

080012d0 <SystemClock_Config>:
	/**
	 * @brief System Clock Configuration
	 * @retval None
	 */
	void SystemClock_Config(void)
	{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	@ 0x50
 80012d4:	af00      	add	r7, sp, #0
		RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	2234      	movs	r2, #52	@ 0x34
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 fa75 	bl	80047ce <memset>
		RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]

		/** Configure the main internal regulator output voltage
		 */
		__HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <SystemClock_Config+0xdc>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	4a2b      	ldr	r2, [pc, #172]	@ (80013ac <SystemClock_Config+0xdc>)
 80012fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001302:	6413      	str	r3, [r2, #64]	@ 0x40
 8001304:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <SystemClock_Config+0xdc>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
		__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001310:	2300      	movs	r3, #0
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <SystemClock_Config+0xe0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a25      	ldr	r2, [pc, #148]	@ (80013b0 <SystemClock_Config+0xe0>)
 800131a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <SystemClock_Config+0xe0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	683b      	ldr	r3, [r7, #0]

		/** Initializes the RCC Oscillators according to the specified parameters
		 * in the RCC_OscInitTypeDef structure.
		 */
		RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
		RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001330:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001334:	623b      	str	r3, [r7, #32]
		RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001336:	2302      	movs	r3, #2
 8001338:	637b      	str	r3, [r7, #52]	@ 0x34
		RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800133e:	63bb      	str	r3, [r7, #56]	@ 0x38
		RCC_OscInitStruct.PLL.PLLM = 4;
 8001340:	2304      	movs	r3, #4
 8001342:	63fb      	str	r3, [r7, #60]	@ 0x3c
		RCC_OscInitStruct.PLL.PLLN = 180;
 8001344:	23b4      	movs	r3, #180	@ 0xb4
 8001346:	643b      	str	r3, [r7, #64]	@ 0x40
		RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001348:	2302      	movs	r3, #2
 800134a:	647b      	str	r3, [r7, #68]	@ 0x44
		RCC_OscInitStruct.PLL.PLLQ = 2;
 800134c:	2302      	movs	r3, #2
 800134e:	64bb      	str	r3, [r7, #72]	@ 0x48
		RCC_OscInitStruct.PLL.PLLR = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	4618      	mov	r0, r3
 800135a:	f002 f9e1 	bl	8003720 <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x98>
		{
			Error_Handler();
 8001364:	f000 f826 	bl	80013b4 <Error_Handler>
		}

		/** Activate the Over-Drive mode
		 */
		if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001368:	f001 fe40 	bl	8002fec <HAL_PWREx_EnableOverDrive>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xa6>
		{
			Error_Handler();
 8001372:	f000 f81f 	bl	80013b4 <Error_Handler>
		}

		/** Initializes the CPU, AHB and APB buses clocks
		 */
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	60bb      	str	r3, [r7, #8]
				|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
		RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	60fb      	str	r3, [r7, #12]
		RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
		RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001382:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001386:	617b      	str	r3, [r7, #20]
		RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138c:	61bb      	str	r3, [r7, #24]

		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	2105      	movs	r1, #5
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fe79 	bl	800308c <HAL_RCC_ClockConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0xd4>
		{
			Error_Handler();
 80013a0:	f000 f808 	bl	80013b4 <Error_Handler>
		}
	}
 80013a4:	bf00      	nop
 80013a6:	3750      	adds	r7, #80	@ 0x50
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <Error_Handler>:
	/**
	 * @brief  This function is executed in case of error occurrence.
	 * @retval None
	 */
	void Error_Handler(void)
	{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
		/* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <Error_Handler+0x8>

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <HAL_MspInit+0x4c>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <HAL_MspInit+0x4c>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	4b09      	ldr	r3, [pc, #36]	@ (800140c <HAL_MspInit+0x4c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	4a08      	ldr	r2, [pc, #32]	@ (800140c <HAL_MspInit+0x4c>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001418:	1d39      	adds	r1, r7, #4
 800141a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800141e:	2201      	movs	r2, #1
 8001420:	4803      	ldr	r0, [pc, #12]	@ (8001430 <__io_putchar+0x20>)
 8001422:	f002 fc6b 	bl	8003cfc <HAL_UART_Transmit>

  return ch;
 8001426:	687b      	ldr	r3, [r7, #4]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000128 	.word	0x20000128

08001434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <NMI_Handler+0x4>

0800143c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <MemManage_Handler+0x4>

0800144c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <UsageFault_Handler+0x4>

0800145c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148a:	f000 fa05 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}

08001492 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e00a      	b.n	80014ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014a4:	f3af 8000 	nop.w
 80014a8:	4601      	mov	r1, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	60ba      	str	r2, [r7, #8]
 80014b0:	b2ca      	uxtb	r2, r1
 80014b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	3301      	adds	r3, #1
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbf0      	blt.n	80014a4 <_read+0x12>
  }

  return len;
 80014c2:	687b      	ldr	r3, [r7, #4]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e009      	b.n	80014f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	60ba      	str	r2, [r7, #8]
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff92 	bl	8001410 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dbf1      	blt.n	80014de <_write+0x12>
  }
  return len;
 80014fa:	687b      	ldr	r3, [r7, #4]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <_close>:

int _close(int file)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800152c:	605a      	str	r2, [r3, #4]
  return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_isatty>:

int _isatty(int file)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001544:	2301      	movs	r3, #1
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001552:	b480      	push	{r7}
 8001554:	b085      	sub	sp, #20
 8001556:	af00      	add	r7, sp, #0
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f003 f966 	bl	800486c <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20020000 	.word	0x20020000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	20000124 	.word	0x20000124
 80015d4:	20000308 	.word	0x20000308

080015d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <SystemInit+0x20>)
 80015de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e2:	4a05      	ldr	r2, [pc, #20]	@ (80015f8 <SystemInit+0x20>)
 80015e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <MX_USART2_UART_Init+0x4c>)
 8001602:	4a12      	ldr	r2, [pc, #72]	@ (800164c <MX_USART2_UART_Init+0x50>)
 8001604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <MX_USART2_UART_Init+0x4c>)
 8001608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800160c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <MX_USART2_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <MX_USART2_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <MX_USART2_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <MX_USART2_UART_Init+0x4c>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <MX_USART2_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <MX_USART2_UART_Init+0x4c>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	@ (8001648 <MX_USART2_UART_Init+0x4c>)
 8001634:	f002 fb12 	bl	8003c5c <HAL_UART_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800163e:	f7ff feb9 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000128 	.word	0x20000128
 800164c:	40004400 	.word	0x40004400

08001650 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <MX_USART3_UART_Init+0x4c>)
 8001656:	4a12      	ldr	r2, [pc, #72]	@ (80016a0 <MX_USART3_UART_Init+0x50>)
 8001658:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <MX_USART3_UART_Init+0x4c>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <MX_USART3_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <MX_USART3_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <MX_USART3_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <MX_USART3_UART_Init+0x4c>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <MX_USART3_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <MX_USART3_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	@ (800169c <MX_USART3_UART_Init+0x4c>)
 8001688:	f002 fae8 	bl	8003c5c <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001692:	f7ff fe8f 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000170 	.word	0x20000170
 80016a0:	40004800 	.word	0x40004800

080016a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	@ 0x30
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a32      	ldr	r2, [pc, #200]	@ (800178c <HAL_UART_MspInit+0xe8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d12c      	bne.n	8001720 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	4b31      	ldr	r3, [pc, #196]	@ (8001790 <HAL_UART_MspInit+0xec>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	4a30      	ldr	r2, [pc, #192]	@ (8001790 <HAL_UART_MspInit+0xec>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001790 <HAL_UART_MspInit+0xec>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001790 <HAL_UART_MspInit+0xec>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a29      	ldr	r2, [pc, #164]	@ (8001790 <HAL_UART_MspInit+0xec>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <HAL_UART_MspInit+0xec>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016fe:	230c      	movs	r3, #12
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170e:	2307      	movs	r3, #7
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	481e      	ldr	r0, [pc, #120]	@ (8001794 <HAL_UART_MspInit+0xf0>)
 800171a:	f000 fabf 	bl	8001c9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800171e:	e031      	b.n	8001784 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1c      	ldr	r2, [pc, #112]	@ (8001798 <HAL_UART_MspInit+0xf4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12c      	bne.n	8001784 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_UART_MspInit+0xec>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4a17      	ldr	r2, [pc, #92]	@ (8001790 <HAL_UART_MspInit+0xec>)
 8001734:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_UART_MspInit+0xec>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_UART_MspInit+0xec>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a10      	ldr	r2, [pc, #64]	@ (8001790 <HAL_UART_MspInit+0xec>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <HAL_UART_MspInit+0xec>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001762:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001774:	2307      	movs	r3, #7
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	4807      	ldr	r0, [pc, #28]	@ (800179c <HAL_UART_MspInit+0xf8>)
 8001780:	f000 fa8c 	bl	8001c9c <HAL_GPIO_Init>
}
 8001784:	bf00      	nop
 8001786:	3730      	adds	r7, #48	@ 0x30
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40004400 	.word	0x40004400
 8001790:	40023800 	.word	0x40023800
 8001794:	40020000 	.word	0x40020000
 8001798:	40004800 	.word	0x40004800
 800179c:	40020800 	.word	0x40020800

080017a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017a4:	f7ff ff18 	bl	80015d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a8:	480c      	ldr	r0, [pc, #48]	@ (80017dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017aa:	490d      	ldr	r1, [pc, #52]	@ (80017e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ac:	4a0d      	ldr	r2, [pc, #52]	@ (80017e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c0:	4c0a      	ldr	r4, [pc, #40]	@ (80017ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f003 f853 	bl	8004878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d2:	f7ff fcf9 	bl	80011c8 <main>
  bx  lr    
 80017d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80017e4:	08005514 	.word	0x08005514
  ldr r2, =_sbss
 80017e8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80017ec:	20000308 	.word	0x20000308

080017f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC_IRQHandler>
	...

080017f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <HAL_Init+0x40>)
 80017fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001804:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <HAL_Init+0x40>)
 800180a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800180e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001810:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <HAL_Init+0x40>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a07      	ldr	r2, [pc, #28]	@ (8001834 <HAL_Init+0x40>)
 8001816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181c:	2003      	movs	r0, #3
 800181e:	f000 fa09 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001822:	200f      	movs	r0, #15
 8001824:	f000 f808 	bl	8001838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001828:	f7ff fdca 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_InitTick+0x54>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_InitTick+0x58>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001852:	fbb2 f3f3 	udiv	r3, r2, r3
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fa13 	bl	8001c82 <HAL_SYSTICK_Config>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e00e      	b.n	8001884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d80a      	bhi.n	8001882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001874:	f000 f9e9 	bl	8001c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001878:	4a06      	ldr	r2, [pc, #24]	@ (8001894 <HAL_InitTick+0x5c>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	e000      	b.n	8001884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000004 	.word	0x20000004
 8001890:	2000000c 	.word	0x2000000c
 8001894:	20000008 	.word	0x20000008

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <HAL_IncTick+0x20>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <HAL_IncTick+0x24>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <HAL_IncTick+0x24>)
 80018aa:	6013      	str	r3, [r2, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000000c 	.word	0x2000000c
 80018bc:	200001b8 	.word	0x200001b8

080018c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return uwTick;
 80018c4:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <HAL_GetTick+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	200001b8 	.word	0x200001b8

080018d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0ed      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7fe fee8 	bl	80006cc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff ffd8 	bl	80018c0 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001912:	e012      	b.n	800193a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001914:	f7ff ffd4 	bl	80018c0 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b0a      	cmp	r3, #10
 8001920:	d90b      	bls.n	800193a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2205      	movs	r2, #5
 8001932:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0c5      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0e5      	beq.n	8001914 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0202 	bic.w	r2, r2, #2
 8001956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001958:	f7ff ffb2 	bl	80018c0 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800195e:	e012      	b.n	8001986 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001960:	f7ff ffae 	bl	80018c0 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b0a      	cmp	r3, #10
 800196c:	d90b      	bls.n	8001986 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2205      	movs	r2, #5
 800197e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e09f      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e5      	bne.n	8001960 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e1b      	ldrb	r3, [r3, #24]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d108      	bne.n	80019ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e007      	b.n	80019be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7e5b      	ldrb	r3, [r3, #25]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e9b      	ldrb	r3, [r3, #26]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0220 	orr.w	r2, r2, #32
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e007      	b.n	8001a12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0220 	bic.w	r2, r2, #32
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7edb      	ldrb	r3, [r3, #27]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0210 	bic.w	r2, r2, #16
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e007      	b.n	8001a3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0210 	orr.w	r2, r2, #16
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7f1b      	ldrb	r3, [r3, #28]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0208 	orr.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e007      	b.n	8001a66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0208 	bic.w	r2, r2, #8
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7f5b      	ldrb	r3, [r3, #29]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0204 	orr.w	r2, r2, #4
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	ea42 0103 	orr.w	r1, r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db0a      	blt.n	8001b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	490c      	ldr	r1, [pc, #48]	@ (8001b80 <__NVIC_SetPriority+0x4c>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b5c:	e00a      	b.n	8001b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4908      	ldr	r1, [pc, #32]	@ (8001b84 <__NVIC_SetPriority+0x50>)
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3b04      	subs	r3, #4
 8001b6c:	0112      	lsls	r2, r2, #4
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	440b      	add	r3, r1
 8001b72:	761a      	strb	r2, [r3, #24]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	@ 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	bf28      	it	cs
 8001ba6:	2304      	movcs	r3, #4
 8001ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3304      	adds	r3, #4
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d902      	bls.n	8001bb8 <NVIC_EncodePriority+0x30>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3b03      	subs	r3, #3
 8001bb6:	e000      	b.n	8001bba <NVIC_EncodePriority+0x32>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	401a      	ands	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43d9      	mvns	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	4313      	orrs	r3, r2
         );
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3724      	adds	r7, #36	@ 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c00:	d301      	bcc.n	8001c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00f      	b.n	8001c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c06:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <SysTick_Config+0x40>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0e:	210f      	movs	r1, #15
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c14:	f7ff ff8e 	bl	8001b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <SysTick_Config+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1e:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <SysTick_Config+0x40>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff47 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff5c 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff8e 	bl	8001b88 <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5d 	bl	8001b34 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffb0 	bl	8001bf0 <SysTick_Config>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	@ 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	e165      	b.n	8001f84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	f040 8154 	bne.w	8001f7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d005      	beq.n	8001cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d130      	bne.n	8001d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 0201 	and.w	r2, r3, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d017      	beq.n	8001d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d123      	bne.n	8001de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80ae 	beq.w	8001f7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	4b5d      	ldr	r3, [pc, #372]	@ (8001f9c <HAL_GPIO_Init+0x300>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e2a:	4a5c      	ldr	r2, [pc, #368]	@ (8001f9c <HAL_GPIO_Init+0x300>)
 8001e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e32:	4b5a      	ldr	r3, [pc, #360]	@ (8001f9c <HAL_GPIO_Init+0x300>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3e:	4a58      	ldr	r2, [pc, #352]	@ (8001fa0 <HAL_GPIO_Init+0x304>)
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	3302      	adds	r3, #2
 8001e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	220f      	movs	r2, #15
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa4 <HAL_GPIO_Init+0x308>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d025      	beq.n	8001eb6 <HAL_GPIO_Init+0x21a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4e      	ldr	r2, [pc, #312]	@ (8001fa8 <HAL_GPIO_Init+0x30c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01f      	beq.n	8001eb2 <HAL_GPIO_Init+0x216>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4d      	ldr	r2, [pc, #308]	@ (8001fac <HAL_GPIO_Init+0x310>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d019      	beq.n	8001eae <HAL_GPIO_Init+0x212>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb0 <HAL_GPIO_Init+0x314>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0x20e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4b      	ldr	r2, [pc, #300]	@ (8001fb4 <HAL_GPIO_Init+0x318>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00d      	beq.n	8001ea6 <HAL_GPIO_Init+0x20a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb8 <HAL_GPIO_Init+0x31c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <HAL_GPIO_Init+0x206>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a49      	ldr	r2, [pc, #292]	@ (8001fbc <HAL_GPIO_Init+0x320>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_GPIO_Init+0x202>
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	e00c      	b.n	8001eb8 <HAL_GPIO_Init+0x21c>
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	e00a      	b.n	8001eb8 <HAL_GPIO_Init+0x21c>
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	e008      	b.n	8001eb8 <HAL_GPIO_Init+0x21c>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x21c>
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e004      	b.n	8001eb8 <HAL_GPIO_Init+0x21c>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_Init+0x21c>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_GPIO_Init+0x21c>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	f002 0203 	and.w	r2, r2, #3
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	4093      	lsls	r3, r2
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec8:	4935      	ldr	r1, [pc, #212]	@ (8001fa0 <HAL_GPIO_Init+0x304>)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc0 <HAL_GPIO_Init+0x324>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efa:	4a31      	ldr	r2, [pc, #196]	@ (8001fc0 <HAL_GPIO_Init+0x324>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f00:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc0 <HAL_GPIO_Init+0x324>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f24:	4a26      	ldr	r2, [pc, #152]	@ (8001fc0 <HAL_GPIO_Init+0x324>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2a:	4b25      	ldr	r3, [pc, #148]	@ (8001fc0 <HAL_GPIO_Init+0x324>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc0 <HAL_GPIO_Init+0x324>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f54:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <HAL_GPIO_Init+0x324>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f78:	4a11      	ldr	r2, [pc, #68]	@ (8001fc0 <HAL_GPIO_Init+0x324>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3301      	adds	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b0f      	cmp	r3, #15
 8001f88:	f67f ae96 	bls.w	8001cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3724      	adds	r7, #36	@ 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40021400 	.word	0x40021400
 8001fbc:	40021800 	.word	0x40021800
 8001fc0:	40013c00 	.word	0x40013c00

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe0:	e003      	b.n	8001fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fe2:	887b      	ldrh	r3, [r7, #2]
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	619a      	str	r2, [r3, #24]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e12b      	b.n	8002262 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fc38 	bl	8000894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	@ 0x24
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800204a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800205a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800205c:	f001 f908 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8002060:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4a81      	ldr	r2, [pc, #516]	@ (800226c <HAL_I2C_Init+0x274>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d807      	bhi.n	800207c <HAL_I2C_Init+0x84>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a80      	ldr	r2, [pc, #512]	@ (8002270 <HAL_I2C_Init+0x278>)
 8002070:	4293      	cmp	r3, r2
 8002072:	bf94      	ite	ls
 8002074:	2301      	movls	r3, #1
 8002076:	2300      	movhi	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e006      	b.n	800208a <HAL_I2C_Init+0x92>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a7d      	ldr	r2, [pc, #500]	@ (8002274 <HAL_I2C_Init+0x27c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	bf94      	ite	ls
 8002084:	2301      	movls	r3, #1
 8002086:	2300      	movhi	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0e7      	b.n	8002262 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4a78      	ldr	r2, [pc, #480]	@ (8002278 <HAL_I2C_Init+0x280>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0c9b      	lsrs	r3, r3, #18
 800209c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a6a      	ldr	r2, [pc, #424]	@ (800226c <HAL_I2C_Init+0x274>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d802      	bhi.n	80020cc <HAL_I2C_Init+0xd4>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	3301      	adds	r3, #1
 80020ca:	e009      	b.n	80020e0 <HAL_I2C_Init+0xe8>
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020d2:	fb02 f303 	mul.w	r3, r2, r3
 80020d6:	4a69      	ldr	r2, [pc, #420]	@ (800227c <HAL_I2C_Init+0x284>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	3301      	adds	r3, #1
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6812      	ldr	r2, [r2, #0]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	495c      	ldr	r1, [pc, #368]	@ (800226c <HAL_I2C_Init+0x274>)
 80020fc:	428b      	cmp	r3, r1
 80020fe:	d819      	bhi.n	8002134 <HAL_I2C_Init+0x13c>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1e59      	subs	r1, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fbb1 f3f3 	udiv	r3, r1, r3
 800210e:	1c59      	adds	r1, r3, #1
 8002110:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002114:	400b      	ands	r3, r1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_I2C_Init+0x138>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e59      	subs	r1, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fbb1 f3f3 	udiv	r3, r1, r3
 8002128:	3301      	adds	r3, #1
 800212a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212e:	e051      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 8002130:	2304      	movs	r3, #4
 8002132:	e04f      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d111      	bne.n	8002160 <HAL_I2C_Init+0x168>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1e58      	subs	r0, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	e012      	b.n	8002186 <HAL_I2C_Init+0x18e>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e58      	subs	r0, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	0099      	lsls	r1, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	fbb0 f3f3 	udiv	r3, r0, r3
 8002176:	3301      	adds	r3, #1
 8002178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Init+0x196>
 800218a:	2301      	movs	r3, #1
 800218c:	e022      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10e      	bne.n	80021b4 <HAL_I2C_Init+0x1bc>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1e58      	subs	r0, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6859      	ldr	r1, [r3, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	440b      	add	r3, r1
 80021a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b2:	e00f      	b.n	80021d4 <HAL_I2C_Init+0x1dc>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1e58      	subs	r0, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	0099      	lsls	r1, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ca:	3301      	adds	r3, #1
 80021cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	6809      	ldr	r1, [r1, #0]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002202:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6911      	ldr	r1, [r2, #16]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68d2      	ldr	r2, [r2, #12]
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	430b      	orrs	r3, r1
 8002216:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	000186a0 	.word	0x000186a0
 8002270:	001e847f 	.word	0x001e847f
 8002274:	003d08ff 	.word	0x003d08ff
 8002278:	431bde83 	.word	0x431bde83
 800227c:	10624dd3 	.word	0x10624dd3

08002280 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	461a      	mov	r2, r3
 800228c:	460b      	mov	r3, r1
 800228e:	817b      	strh	r3, [r7, #10]
 8002290:	4613      	mov	r3, r2
 8002292:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fb14 	bl	80018c0 <HAL_GetTick>
 8002298:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	f040 80e0 	bne.w	8002468 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2319      	movs	r3, #25
 80022ae:	2201      	movs	r2, #1
 80022b0:	4970      	ldr	r1, [pc, #448]	@ (8002474 <HAL_I2C_Master_Transmit+0x1f4>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fc64 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
 80022c0:	e0d3      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_I2C_Master_Transmit+0x50>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e0cc      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d007      	beq.n	80022f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2221      	movs	r2, #33	@ 0x21
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2210      	movs	r2, #16
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a50      	ldr	r2, [pc, #320]	@ (8002478 <HAL_I2C_Master_Transmit+0x1f8>)
 8002336:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002338:	8979      	ldrh	r1, [r7, #10]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 face 	bl	80028e0 <I2C_MasterRequestWrite>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e08d      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002364:	e066      	b.n	8002434 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	6a39      	ldr	r1, [r7, #32]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fd22 	bl	8002db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	2b04      	cmp	r3, #4
 800237c:	d107      	bne.n	800238e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800238c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e06b      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d11b      	bne.n	8002408 <HAL_I2C_Master_Transmit+0x188>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d017      	beq.n	8002408 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	6a39      	ldr	r1, [r7, #32]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fd19 	bl	8002e44 <I2C_WaitOnBTFFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00d      	beq.n	8002434 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	2b04      	cmp	r3, #4
 800241e:	d107      	bne.n	8002430 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800242e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e01a      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002438:	2b00      	cmp	r3, #0
 800243a:	d194      	bne.n	8002366 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800244a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	e000      	b.n	800246a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002468:	2302      	movs	r3, #2
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	00100002 	.word	0x00100002
 8002478:	ffff0000 	.word	0xffff0000

0800247c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08c      	sub	sp, #48	@ 0x30
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	461a      	mov	r2, r3
 8002488:	460b      	mov	r3, r1
 800248a:	817b      	strh	r3, [r7, #10]
 800248c:	4613      	mov	r3, r2
 800248e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff fa16 	bl	80018c0 <HAL_GetTick>
 8002494:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b20      	cmp	r3, #32
 80024a0:	f040 8217 	bne.w	80028d2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2319      	movs	r3, #25
 80024aa:	2201      	movs	r2, #1
 80024ac:	497c      	ldr	r1, [pc, #496]	@ (80026a0 <HAL_I2C_Master_Receive+0x224>)
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fb66 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
 80024bc:	e20a      	b.n	80028d4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_I2C_Master_Receive+0x50>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e203      	b.n	80028d4 <HAL_I2C_Master_Receive+0x458>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d007      	beq.n	80024f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002500:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2222      	movs	r2, #34	@ 0x22
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2210      	movs	r2, #16
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	893a      	ldrh	r2, [r7, #8]
 8002522:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4a5c      	ldr	r2, [pc, #368]	@ (80026a4 <HAL_I2C_Master_Receive+0x228>)
 8002532:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002534:	8979      	ldrh	r1, [r7, #10]
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fa52 	bl	80029e4 <I2C_MasterRequestRead>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1c4      	b.n	80028d4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	d113      	bne.n	800257a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	623b      	str	r3, [r7, #32]
 8002566:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e198      	b.n	80028ac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257e:	2b01      	cmp	r3, #1
 8002580:	d11b      	bne.n	80025ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002590:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e178      	b.n	80028ac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d11b      	bne.n	80025fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	e158      	b.n	80028ac <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002608:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002620:	e144      	b.n	80028ac <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002626:	2b03      	cmp	r3, #3
 8002628:	f200 80f1 	bhi.w	800280e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002630:	2b01      	cmp	r3, #1
 8002632:	d123      	bne.n	800267c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002636:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fc4b 	bl	8002ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e145      	b.n	80028d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800267a:	e117      	b.n	80028ac <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002680:	2b02      	cmp	r3, #2
 8002682:	d14e      	bne.n	8002722 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	2200      	movs	r2, #0
 800268c:	4906      	ldr	r1, [pc, #24]	@ (80026a8 <HAL_I2C_Master_Receive+0x22c>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa76 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e11a      	b.n	80028d4 <HAL_I2C_Master_Receive+0x458>
 800269e:	bf00      	nop
 80026a0:	00100002 	.word	0x00100002
 80026a4:	ffff0000 	.word	0xffff0000
 80026a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002720:	e0c4      	b.n	80028ac <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002728:	2200      	movs	r2, #0
 800272a:	496c      	ldr	r1, [pc, #432]	@ (80028dc <HAL_I2C_Master_Receive+0x460>)
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 fa27 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0cb      	b.n	80028d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800274a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002784:	2200      	movs	r2, #0
 8002786:	4955      	ldr	r1, [pc, #340]	@ (80028dc <HAL_I2C_Master_Receive+0x460>)
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f9f9 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e09d      	b.n	80028d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800280c:	e04e      	b.n	80028ac <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002810:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fb5e 	bl	8002ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e058      	b.n	80028d4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b04      	cmp	r3, #4
 8002860:	d124      	bne.n	80028ac <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002866:	2b03      	cmp	r3, #3
 8002868:	d107      	bne.n	800287a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002878:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f47f aeb6 	bne.w	8002622 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
  }
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3728      	adds	r7, #40	@ 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	00010004 	.word	0x00010004

080028e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	460b      	mov	r3, r1
 80028ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d006      	beq.n	800290a <I2C_MasterRequestWrite+0x2a>
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d003      	beq.n	800290a <I2C_MasterRequestWrite+0x2a>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002908:	d108      	bne.n	800291c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e00b      	b.n	8002934 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	2b12      	cmp	r3, #18
 8002922:	d107      	bne.n	8002934 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002932:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f91d 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00d      	beq.n	8002968 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800295a:	d103      	bne.n	8002964 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002962:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e035      	b.n	80029d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002970:	d108      	bne.n	8002984 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002972:	897b      	ldrh	r3, [r7, #10]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002980:	611a      	str	r2, [r3, #16]
 8002982:	e01b      	b.n	80029bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002984:	897b      	ldrh	r3, [r7, #10]
 8002986:	11db      	asrs	r3, r3, #7
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f003 0306 	and.w	r3, r3, #6
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f063 030f 	orn	r3, r3, #15
 8002994:	b2da      	uxtb	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	490e      	ldr	r1, [pc, #56]	@ (80029dc <I2C_MasterRequestWrite+0xfc>)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f966 	bl	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e010      	b.n	80029d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029b2:	897b      	ldrh	r3, [r7, #10]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4907      	ldr	r1, [pc, #28]	@ (80029e0 <I2C_MasterRequestWrite+0x100>)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f956 	bl	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	00010008 	.word	0x00010008
 80029e0:	00010002 	.word	0x00010002

080029e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	460b      	mov	r3, r1
 80029f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a08:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d006      	beq.n	8002a1e <I2C_MasterRequestRead+0x3a>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d003      	beq.n	8002a1e <I2C_MasterRequestRead+0x3a>
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a1c:	d108      	bne.n	8002a30 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e00b      	b.n	8002a48 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	2b11      	cmp	r3, #17
 8002a36:	d107      	bne.n	8002a48 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f893 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00d      	beq.n	8002a7c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a6e:	d103      	bne.n	8002a78 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e079      	b.n	8002b70 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a84:	d108      	bne.n	8002a98 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a86:	897b      	ldrh	r3, [r7, #10]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	611a      	str	r2, [r3, #16]
 8002a96:	e05f      	b.n	8002b58 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a98:	897b      	ldrh	r3, [r7, #10]
 8002a9a:	11db      	asrs	r3, r3, #7
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f003 0306 	and.w	r3, r3, #6
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f063 030f 	orn	r3, r3, #15
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4930      	ldr	r1, [pc, #192]	@ (8002b78 <I2C_MasterRequestRead+0x194>)
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f8dc 	bl	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e054      	b.n	8002b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ac6:	897b      	ldrh	r3, [r7, #10]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4929      	ldr	r1, [pc, #164]	@ (8002b7c <I2C_MasterRequestRead+0x198>)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f8cc 	bl	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e044      	b.n	8002b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b0a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f831 	bl	8002b80 <I2C_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00d      	beq.n	8002b40 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b32:	d103      	bne.n	8002b3c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b3a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e017      	b.n	8002b70 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002b40:	897b      	ldrh	r3, [r7, #10]
 8002b42:	11db      	asrs	r3, r3, #7
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f003 0306 	and.w	r3, r3, #6
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f063 030e 	orn	r3, r3, #14
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4907      	ldr	r1, [pc, #28]	@ (8002b7c <I2C_MasterRequestRead+0x198>)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f888 	bl	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	00010008 	.word	0x00010008
 8002b7c:	00010002 	.word	0x00010002

08002b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b90:	e048      	b.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b98:	d044      	beq.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7fe fe91 	bl	80018c0 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d139      	bne.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d10d      	bne.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	e00c      	b.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	43da      	mvns	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	4013      	ands	r3, r2
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf0c      	ite	eq
 8002be8:	2301      	moveq	r3, #1
 8002bea:	2300      	movne	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	461a      	mov	r2, r3
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d116      	bne.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e023      	b.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	0c1b      	lsrs	r3, r3, #16
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d10d      	bne.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	43da      	mvns	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	e00c      	b.n	8002c64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	43da      	mvns	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4013      	ands	r3, r2
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d093      	beq.n	8002b92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c82:	e071      	b.n	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c92:	d123      	bne.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	f043 0204 	orr.w	r2, r3, #4
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e067      	b.n	8002dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ce2:	d041      	beq.n	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce4:	f7fe fdec 	bl	80018c0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d302      	bcc.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d136      	bne.n	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d10c      	bne.n	8002d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	e00b      	b.n	8002d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d016      	beq.n	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2220      	movs	r2, #32
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	f043 0220 	orr.w	r2, r3, #32
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e021      	b.n	8002dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d10c      	bne.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e00b      	b.n	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4013      	ands	r3, r2
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf14      	ite	ne
 8002d9e:	2301      	movne	r3, #1
 8002da0:	2300      	moveq	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f47f af6d 	bne.w	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dc0:	e034      	b.n	8002e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f8e3 	bl	8002f8e <I2C_IsAcknowledgeFailed>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e034      	b.n	8002e3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dd8:	d028      	beq.n	8002e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dda:	f7fe fd71 	bl	80018c0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d11d      	bne.n	8002e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfa:	2b80      	cmp	r3, #128	@ 0x80
 8002dfc:	d016      	beq.n	8002e2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	f043 0220 	orr.w	r2, r3, #32
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e007      	b.n	8002e3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e36:	2b80      	cmp	r3, #128	@ 0x80
 8002e38:	d1c3      	bne.n	8002dc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e50:	e034      	b.n	8002ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f89b 	bl	8002f8e <I2C_IsAcknowledgeFailed>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e034      	b.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e68:	d028      	beq.n	8002ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6a:	f7fe fd29 	bl	80018c0 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d11d      	bne.n	8002ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d016      	beq.n	8002ebc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e007      	b.n	8002ecc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d1c3      	bne.n	8002e52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee0:	e049      	b.n	8002f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d119      	bne.n	8002f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0210 	mvn.w	r2, #16
 8002ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e030      	b.n	8002f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f24:	f7fe fccc 	bl	80018c0 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d302      	bcc.n	8002f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d11d      	bne.n	8002f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f44:	2b40      	cmp	r3, #64	@ 0x40
 8002f46:	d016      	beq.n	8002f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	f043 0220 	orr.w	r2, r3, #32
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e007      	b.n	8002f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f80:	2b40      	cmp	r3, #64	@ 0x40
 8002f82:	d1ae      	bne.n	8002ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa4:	d11b      	bne.n	8002fde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	f043 0204 	orr.w	r2, r3, #4
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4b20      	ldr	r3, [pc, #128]	@ (800307c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800307c <HAL_PWREx_EnableOverDrive+0x90>)
 8003000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003004:	6413      	str	r3, [r2, #64]	@ 0x40
 8003006:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <HAL_PWREx_EnableOverDrive+0x90>)
 8003008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003012:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HAL_PWREx_EnableOverDrive+0x94>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003018:	f7fe fc52 	bl	80018c0 <HAL_GetTick>
 800301c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800301e:	e009      	b.n	8003034 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003020:	f7fe fc4e 	bl	80018c0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800302e:	d901      	bls.n	8003034 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e01f      	b.n	8003074 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003034:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <HAL_PWREx_EnableOverDrive+0x98>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003040:	d1ee      	bne.n	8003020 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003042:	4b11      	ldr	r3, [pc, #68]	@ (8003088 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003048:	f7fe fc3a 	bl	80018c0 <HAL_GetTick>
 800304c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800304e:	e009      	b.n	8003064 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003050:	f7fe fc36 	bl	80018c0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800305e:	d901      	bls.n	8003064 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e007      	b.n	8003074 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003064:	4b07      	ldr	r3, [pc, #28]	@ (8003084 <HAL_PWREx_EnableOverDrive+0x98>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003070:	d1ee      	bne.n	8003050 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40023800 	.word	0x40023800
 8003080:	420e0040 	.word	0x420e0040
 8003084:	40007000 	.word	0x40007000
 8003088:	420e0044 	.word	0x420e0044

0800308c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0cc      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030a0:	4b68      	ldr	r3, [pc, #416]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d90c      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b65      	ldr	r3, [pc, #404]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b63      	ldr	r3, [pc, #396]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b8      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	4b59      	ldr	r3, [pc, #356]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	4a58      	ldr	r2, [pc, #352]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f8:	4b53      	ldr	r3, [pc, #332]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a52      	ldr	r2, [pc, #328]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003102:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b50      	ldr	r3, [pc, #320]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	494d      	ldr	r1, [pc, #308]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d044      	beq.n	80031ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b47      	ldr	r3, [pc, #284]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d119      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d003      	beq.n	800314a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003146:	2b03      	cmp	r3, #3
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314a:	4b3f      	ldr	r3, [pc, #252]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e06f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e067      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316a:	4b37      	ldr	r3, [pc, #220]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f023 0203 	bic.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4934      	ldr	r1, [pc, #208]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800317c:	f7fe fba0 	bl	80018c0 <HAL_GetTick>
 8003180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	e00a      	b.n	800319a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003184:	f7fe fb9c 	bl	80018c0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e04f      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 020c 	and.w	r2, r3, #12
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d1eb      	bne.n	8003184 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031ac:	4b25      	ldr	r3, [pc, #148]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d20c      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b22      	ldr	r3, [pc, #136]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e032      	b.n	800323a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b19      	ldr	r3, [pc, #100]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4916      	ldr	r1, [pc, #88]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fe:	4b12      	ldr	r3, [pc, #72]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	490e      	ldr	r1, [pc, #56]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003212:	f000 f855 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8003216:	4602      	mov	r2, r0
 8003218:	4b0b      	ldr	r3, [pc, #44]	@ (8003248 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	490a      	ldr	r1, [pc, #40]	@ (800324c <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	5ccb      	ldrb	r3, [r1, r3]
 8003226:	fa22 f303 	lsr.w	r3, r2, r3
 800322a:	4a09      	ldr	r2, [pc, #36]	@ (8003250 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800322e:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <HAL_RCC_ClockConfig+0x1c8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fb00 	bl	8001838 <HAL_InitTick>

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40023c00 	.word	0x40023c00
 8003248:	40023800 	.word	0x40023800
 800324c:	080054b8 	.word	0x080054b8
 8003250:	20000004 	.word	0x20000004
 8003254:	20000008 	.word	0x20000008

08003258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800325c:	4b03      	ldr	r3, [pc, #12]	@ (800326c <HAL_RCC_GetHCLKFreq+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000004 	.word	0x20000004

08003270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003274:	f7ff fff0 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0a9b      	lsrs	r3, r3, #10
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4903      	ldr	r1, [pc, #12]	@ (8003294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	080054c8 	.word	0x080054c8

08003298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800329c:	f7ff ffdc 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0b5b      	lsrs	r3, r3, #13
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4903      	ldr	r1, [pc, #12]	@ (80032bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	080054c8 	.word	0x080054c8

080032c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c4:	b0ae      	sub	sp, #184	@ 0xb8
 80032c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e6:	4bcb      	ldr	r3, [pc, #812]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x354>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	f200 8206 	bhi.w	8003700 <HAL_RCC_GetSysClockFreq+0x440>
 80032f4:	a201      	add	r2, pc, #4	@ (adr r2, 80032fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fa:	bf00      	nop
 80032fc:	08003331 	.word	0x08003331
 8003300:	08003701 	.word	0x08003701
 8003304:	08003701 	.word	0x08003701
 8003308:	08003701 	.word	0x08003701
 800330c:	08003339 	.word	0x08003339
 8003310:	08003701 	.word	0x08003701
 8003314:	08003701 	.word	0x08003701
 8003318:	08003701 	.word	0x08003701
 800331c:	08003341 	.word	0x08003341
 8003320:	08003701 	.word	0x08003701
 8003324:	08003701 	.word	0x08003701
 8003328:	08003701 	.word	0x08003701
 800332c:	08003531 	.word	0x08003531
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4bb9      	ldr	r3, [pc, #740]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x358>)
 8003332:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003336:	e1e7      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003338:	4bb8      	ldr	r3, [pc, #736]	@ (800361c <HAL_RCC_GetSysClockFreq+0x35c>)
 800333a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800333e:	e1e3      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003340:	4bb4      	ldr	r3, [pc, #720]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x354>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003348:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334c:	4bb1      	ldr	r3, [pc, #708]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x354>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d071      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003358:	4bae      	ldr	r3, [pc, #696]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x354>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	099b      	lsrs	r3, r3, #6
 800335e:	2200      	movs	r2, #0
 8003360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003364:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003368:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800336c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003370:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800337a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800337e:	4622      	mov	r2, r4
 8003380:	462b      	mov	r3, r5
 8003382:	f04f 0000 	mov.w	r0, #0
 8003386:	f04f 0100 	mov.w	r1, #0
 800338a:	0159      	lsls	r1, r3, #5
 800338c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003390:	0150      	lsls	r0, r2, #5
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4621      	mov	r1, r4
 8003398:	1a51      	subs	r1, r2, r1
 800339a:	6439      	str	r1, [r7, #64]	@ 0x40
 800339c:	4629      	mov	r1, r5
 800339e:	eb63 0301 	sbc.w	r3, r3, r1
 80033a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80033b0:	4649      	mov	r1, r9
 80033b2:	018b      	lsls	r3, r1, #6
 80033b4:	4641      	mov	r1, r8
 80033b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ba:	4641      	mov	r1, r8
 80033bc:	018a      	lsls	r2, r1, #6
 80033be:	4641      	mov	r1, r8
 80033c0:	1a51      	subs	r1, r2, r1
 80033c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033c4:	4649      	mov	r1, r9
 80033c6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80033d8:	4649      	mov	r1, r9
 80033da:	00cb      	lsls	r3, r1, #3
 80033dc:	4641      	mov	r1, r8
 80033de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033e2:	4641      	mov	r1, r8
 80033e4:	00ca      	lsls	r2, r1, #3
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	4622      	mov	r2, r4
 80033ee:	189b      	adds	r3, r3, r2
 80033f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033f2:	462b      	mov	r3, r5
 80033f4:	460a      	mov	r2, r1
 80033f6:	eb42 0303 	adc.w	r3, r2, r3
 80033fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003408:	4629      	mov	r1, r5
 800340a:	024b      	lsls	r3, r1, #9
 800340c:	4621      	mov	r1, r4
 800340e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003412:	4621      	mov	r1, r4
 8003414:	024a      	lsls	r2, r1, #9
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800341e:	2200      	movs	r2, #0
 8003420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003424:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003428:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800342c:	f7fc ffa0 	bl	8000370 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800343a:	e067      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343c:	4b75      	ldr	r3, [pc, #468]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x354>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	099b      	lsrs	r3, r3, #6
 8003442:	2200      	movs	r2, #0
 8003444:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003448:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800344c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003454:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003456:	2300      	movs	r3, #0
 8003458:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800345a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800345e:	4622      	mov	r2, r4
 8003460:	462b      	mov	r3, r5
 8003462:	f04f 0000 	mov.w	r0, #0
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	0159      	lsls	r1, r3, #5
 800346c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003470:	0150      	lsls	r0, r2, #5
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4621      	mov	r1, r4
 8003478:	1a51      	subs	r1, r2, r1
 800347a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800347c:	4629      	mov	r1, r5
 800347e:	eb63 0301 	sbc.w	r3, r3, r1
 8003482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003490:	4649      	mov	r1, r9
 8003492:	018b      	lsls	r3, r1, #6
 8003494:	4641      	mov	r1, r8
 8003496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800349a:	4641      	mov	r1, r8
 800349c:	018a      	lsls	r2, r1, #6
 800349e:	4641      	mov	r1, r8
 80034a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80034a4:	4649      	mov	r1, r9
 80034a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034be:	4692      	mov	sl, r2
 80034c0:	469b      	mov	fp, r3
 80034c2:	4623      	mov	r3, r4
 80034c4:	eb1a 0303 	adds.w	r3, sl, r3
 80034c8:	623b      	str	r3, [r7, #32]
 80034ca:	462b      	mov	r3, r5
 80034cc:	eb4b 0303 	adc.w	r3, fp, r3
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80034de:	4629      	mov	r1, r5
 80034e0:	028b      	lsls	r3, r1, #10
 80034e2:	4621      	mov	r1, r4
 80034e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034e8:	4621      	mov	r1, r4
 80034ea:	028a      	lsls	r2, r1, #10
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034f4:	2200      	movs	r2, #0
 80034f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80034f8:	677a      	str	r2, [r7, #116]	@ 0x74
 80034fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80034fe:	f7fc ff37 	bl	8000370 <__aeabi_uldivmod>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4613      	mov	r3, r2
 8003508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800350c:	4b41      	ldr	r3, [pc, #260]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x354>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	3301      	adds	r3, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800351e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003526:	fbb2 f3f3 	udiv	r3, r2, r3
 800352a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800352e:	e0eb      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003530:	4b38      	ldr	r3, [pc, #224]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x354>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800353c:	4b35      	ldr	r3, [pc, #212]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x354>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d06b      	beq.n	8003620 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003548:	4b32      	ldr	r3, [pc, #200]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x354>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	2200      	movs	r2, #0
 8003550:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003552:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003554:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355a:	663b      	str	r3, [r7, #96]	@ 0x60
 800355c:	2300      	movs	r3, #0
 800355e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003560:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003564:	4622      	mov	r2, r4
 8003566:	462b      	mov	r3, r5
 8003568:	f04f 0000 	mov.w	r0, #0
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	0159      	lsls	r1, r3, #5
 8003572:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003576:	0150      	lsls	r0, r2, #5
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4621      	mov	r1, r4
 800357e:	1a51      	subs	r1, r2, r1
 8003580:	61b9      	str	r1, [r7, #24]
 8003582:	4629      	mov	r1, r5
 8003584:	eb63 0301 	sbc.w	r3, r3, r1
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003596:	4659      	mov	r1, fp
 8003598:	018b      	lsls	r3, r1, #6
 800359a:	4651      	mov	r1, sl
 800359c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035a0:	4651      	mov	r1, sl
 80035a2:	018a      	lsls	r2, r1, #6
 80035a4:	4651      	mov	r1, sl
 80035a6:	ebb2 0801 	subs.w	r8, r2, r1
 80035aa:	4659      	mov	r1, fp
 80035ac:	eb63 0901 	sbc.w	r9, r3, r1
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c4:	4690      	mov	r8, r2
 80035c6:	4699      	mov	r9, r3
 80035c8:	4623      	mov	r3, r4
 80035ca:	eb18 0303 	adds.w	r3, r8, r3
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	462b      	mov	r3, r5
 80035d2:	eb49 0303 	adc.w	r3, r9, r3
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80035e4:	4629      	mov	r1, r5
 80035e6:	024b      	lsls	r3, r1, #9
 80035e8:	4621      	mov	r1, r4
 80035ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035ee:	4621      	mov	r1, r4
 80035f0:	024a      	lsls	r2, r1, #9
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035fa:	2200      	movs	r2, #0
 80035fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003600:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003604:	f7fc feb4 	bl	8000370 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4613      	mov	r3, r2
 800360e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003612:	e065      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x420>
 8003614:	40023800 	.word	0x40023800
 8003618:	00f42400 	.word	0x00f42400
 800361c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003620:	4b3d      	ldr	r3, [pc, #244]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x458>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	2200      	movs	r2, #0
 8003628:	4618      	mov	r0, r3
 800362a:	4611      	mov	r1, r2
 800362c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003630:	653b      	str	r3, [r7, #80]	@ 0x50
 8003632:	2300      	movs	r3, #0
 8003634:	657b      	str	r3, [r7, #84]	@ 0x54
 8003636:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800363a:	4642      	mov	r2, r8
 800363c:	464b      	mov	r3, r9
 800363e:	f04f 0000 	mov.w	r0, #0
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	0159      	lsls	r1, r3, #5
 8003648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800364c:	0150      	lsls	r0, r2, #5
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4641      	mov	r1, r8
 8003654:	1a51      	subs	r1, r2, r1
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	4649      	mov	r1, r9
 800365a:	eb63 0301 	sbc.w	r3, r3, r1
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800366c:	4659      	mov	r1, fp
 800366e:	018b      	lsls	r3, r1, #6
 8003670:	4651      	mov	r1, sl
 8003672:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003676:	4651      	mov	r1, sl
 8003678:	018a      	lsls	r2, r1, #6
 800367a:	4651      	mov	r1, sl
 800367c:	1a54      	subs	r4, r2, r1
 800367e:	4659      	mov	r1, fp
 8003680:	eb63 0501 	sbc.w	r5, r3, r1
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	00eb      	lsls	r3, r5, #3
 800368e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003692:	00e2      	lsls	r2, r4, #3
 8003694:	4614      	mov	r4, r2
 8003696:	461d      	mov	r5, r3
 8003698:	4643      	mov	r3, r8
 800369a:	18e3      	adds	r3, r4, r3
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	464b      	mov	r3, r9
 80036a0:	eb45 0303 	adc.w	r3, r5, r3
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036b2:	4629      	mov	r1, r5
 80036b4:	028b      	lsls	r3, r1, #10
 80036b6:	4621      	mov	r1, r4
 80036b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036bc:	4621      	mov	r1, r4
 80036be:	028a      	lsls	r2, r1, #10
 80036c0:	4610      	mov	r0, r2
 80036c2:	4619      	mov	r1, r3
 80036c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036c8:	2200      	movs	r2, #0
 80036ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036cc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80036ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80036d2:	f7fc fe4d 	bl	8000370 <__aeabi_uldivmod>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4613      	mov	r3, r2
 80036dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x458>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	0f1b      	lsrs	r3, r3, #28
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80036ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036fe:	e003      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003700:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003702:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003706:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003708:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800370c:	4618      	mov	r0, r3
 800370e:	37b8      	adds	r7, #184	@ 0xb8
 8003710:	46bd      	mov	sp, r7
 8003712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	00f42400 	.word	0x00f42400

08003720 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e28d      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8083 	beq.w	8003846 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003740:	4b94      	ldr	r3, [pc, #592]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b04      	cmp	r3, #4
 800374a:	d019      	beq.n	8003780 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800374c:	4b91      	ldr	r3, [pc, #580]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
        || \
 8003754:	2b08      	cmp	r3, #8
 8003756:	d106      	bne.n	8003766 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003758:	4b8e      	ldr	r3, [pc, #568]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003764:	d00c      	beq.n	8003780 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003766:	4b8b      	ldr	r3, [pc, #556]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800376e:	2b0c      	cmp	r3, #12
 8003770:	d112      	bne.n	8003798 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003772:	4b88      	ldr	r3, [pc, #544]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800377a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800377e:	d10b      	bne.n	8003798 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	4b84      	ldr	r3, [pc, #528]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d05b      	beq.n	8003844 <HAL_RCC_OscConfig+0x124>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d157      	bne.n	8003844 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e25a      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a0:	d106      	bne.n	80037b0 <HAL_RCC_OscConfig+0x90>
 80037a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a7b      	ldr	r2, [pc, #492]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e01d      	b.n	80037ec <HAL_RCC_OscConfig+0xcc>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0xb4>
 80037ba:	4b76      	ldr	r3, [pc, #472]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a75      	ldr	r2, [pc, #468]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80037c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b73      	ldr	r3, [pc, #460]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a72      	ldr	r2, [pc, #456]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0xcc>
 80037d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80037da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6b      	ldr	r2, [pc, #428]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80037e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d013      	beq.n	800381c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fe f864 	bl	80018c0 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fe f860 	bl	80018c0 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	@ 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e21f      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b61      	ldr	r3, [pc, #388]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0xdc>
 800381a:	e014      	b.n	8003846 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fe f850 	bl	80018c0 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003824:	f7fe f84c 	bl	80018c0 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	@ 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e20b      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003836:	4b57      	ldr	r3, [pc, #348]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x104>
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d06f      	beq.n	8003932 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003852:	4b50      	ldr	r3, [pc, #320]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b00      	cmp	r3, #0
 800385c:	d017      	beq.n	800388e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800385e:	4b4d      	ldr	r3, [pc, #308]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
        || \
 8003866:	2b08      	cmp	r3, #8
 8003868:	d105      	bne.n	8003876 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800386a:	4b4a      	ldr	r3, [pc, #296]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003876:	4b47      	ldr	r3, [pc, #284]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800387e:	2b0c      	cmp	r3, #12
 8003880:	d11c      	bne.n	80038bc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003882:	4b44      	ldr	r3, [pc, #272]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d116      	bne.n	80038bc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388e:	4b41      	ldr	r3, [pc, #260]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_RCC_OscConfig+0x186>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e1d3      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4937      	ldr	r1, [pc, #220]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	e03a      	b.n	8003932 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038c4:	4b34      	ldr	r3, [pc, #208]	@ (8003998 <HAL_RCC_OscConfig+0x278>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7fd fff9 	bl	80018c0 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038d2:	f7fd fff5 	bl	80018c0 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e1b4      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f0:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4925      	ldr	r1, [pc, #148]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]
 8003904:	e015      	b.n	8003932 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003906:	4b24      	ldr	r3, [pc, #144]	@ (8003998 <HAL_RCC_OscConfig+0x278>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd ffd8 	bl	80018c0 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003914:	f7fd ffd4 	bl	80018c0 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e193      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003926:	4b1b      	ldr	r3, [pc, #108]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d036      	beq.n	80039ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d016      	beq.n	8003974 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003946:	4b15      	ldr	r3, [pc, #84]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003948:	2201      	movs	r2, #1
 800394a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fd ffb8 	bl	80018c0 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003954:	f7fd ffb4 	bl	80018c0 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e173      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003966:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <HAL_RCC_OscConfig+0x274>)
 8003968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x234>
 8003972:	e01b      	b.n	80039ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003974:	4b09      	ldr	r3, [pc, #36]	@ (800399c <HAL_RCC_OscConfig+0x27c>)
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7fd ffa1 	bl	80018c0 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	e00e      	b.n	80039a0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003982:	f7fd ff9d 	bl	80018c0 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d907      	bls.n	80039a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e15c      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
 8003994:	40023800 	.word	0x40023800
 8003998:	42470000 	.word	0x42470000
 800399c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a0:	4b8a      	ldr	r3, [pc, #552]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 80039a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1ea      	bne.n	8003982 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8097 	beq.w	8003ae8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ba:	2300      	movs	r3, #0
 80039bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039be:	4b83      	ldr	r3, [pc, #524]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10f      	bne.n	80039ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	4b7f      	ldr	r3, [pc, #508]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	4a7e      	ldr	r2, [pc, #504]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039da:	4b7c      	ldr	r3, [pc, #496]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ea:	4b79      	ldr	r3, [pc, #484]	@ (8003bd0 <HAL_RCC_OscConfig+0x4b0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d118      	bne.n	8003a28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f6:	4b76      	ldr	r3, [pc, #472]	@ (8003bd0 <HAL_RCC_OscConfig+0x4b0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a75      	ldr	r2, [pc, #468]	@ (8003bd0 <HAL_RCC_OscConfig+0x4b0>)
 80039fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a02:	f7fd ff5d 	bl	80018c0 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a0a:	f7fd ff59 	bl	80018c0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e118      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1c:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd0 <HAL_RCC_OscConfig+0x4b0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d106      	bne.n	8003a3e <HAL_RCC_OscConfig+0x31e>
 8003a30:	4b66      	ldr	r3, [pc, #408]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a34:	4a65      	ldr	r2, [pc, #404]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a3c:	e01c      	b.n	8003a78 <HAL_RCC_OscConfig+0x358>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x340>
 8003a46:	4b61      	ldr	r3, [pc, #388]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4a:	4a60      	ldr	r2, [pc, #384]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003a4c:	f043 0304 	orr.w	r3, r3, #4
 8003a50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a52:	4b5e      	ldr	r3, [pc, #376]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a56:	4a5d      	ldr	r2, [pc, #372]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCC_OscConfig+0x358>
 8003a60:	4b5a      	ldr	r3, [pc, #360]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a64:	4a59      	ldr	r2, [pc, #356]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a6c:	4b57      	ldr	r3, [pc, #348]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a70:	4a56      	ldr	r2, [pc, #344]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003a72:	f023 0304 	bic.w	r3, r3, #4
 8003a76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d015      	beq.n	8003aac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fd ff1e 	bl	80018c0 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fd ff1a 	bl	80018c0 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e0d7      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0ee      	beq.n	8003a88 <HAL_RCC_OscConfig+0x368>
 8003aaa:	e014      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fd ff08 	bl	80018c0 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7fd ff04 	bl	80018c0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e0c1      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aca:	4b40      	ldr	r3, [pc, #256]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1ee      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003adc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	4a3a      	ldr	r2, [pc, #232]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80ad 	beq.w	8003c4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003af2:	4b36      	ldr	r3, [pc, #216]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d060      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d145      	bne.n	8003b92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b06:	4b33      	ldr	r3, [pc, #204]	@ (8003bd4 <HAL_RCC_OscConfig+0x4b4>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fed8 	bl	80018c0 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fd fed4 	bl	80018c0 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e093      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69da      	ldr	r2, [r3, #28]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	019b      	lsls	r3, r3, #6
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	041b      	lsls	r3, r3, #16
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	071b      	lsls	r3, r3, #28
 8003b5e:	491b      	ldr	r1, [pc, #108]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b64:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_RCC_OscConfig+0x4b4>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fd fea9 	bl	80018c0 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fd fea5 	bl	80018c0 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e064      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b84:	4b11      	ldr	r3, [pc, #68]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x452>
 8003b90:	e05c      	b.n	8003c4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b92:	4b10      	ldr	r3, [pc, #64]	@ (8003bd4 <HAL_RCC_OscConfig+0x4b4>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd fe92 	bl	80018c0 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd fe8e 	bl	80018c0 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e04d      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb2:	4b06      	ldr	r3, [pc, #24]	@ (8003bcc <HAL_RCC_OscConfig+0x4ac>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x480>
 8003bbe:	e045      	b.n	8003c4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e040      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40007000 	.word	0x40007000
 8003bd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003c58 <HAL_RCC_OscConfig+0x538>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d030      	beq.n	8003c48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d129      	bne.n	8003c48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d122      	bne.n	8003c48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c08:	4013      	ands	r3, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d119      	bne.n	8003c48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	3b01      	subs	r3, #1
 8003c22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d10f      	bne.n	8003c48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d107      	bne.n	8003c48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800

08003c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e042      	b.n	8003cf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fd fd0e 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2224      	movs	r2, #36	@ 0x24
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fa09 	bl	80040b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	@ 0x28
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d175      	bne.n	8003e08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <HAL_UART_Transmit+0x2c>
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e06e      	b.n	8003e0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2221      	movs	r2, #33	@ 0x21
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d3a:	f7fd fdc1 	bl	80018c0 <HAL_GetTick>
 8003d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	88fa      	ldrh	r2, [r7, #6]
 8003d44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d54:	d108      	bne.n	8003d68 <HAL_UART_Transmit+0x6c>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e003      	b.n	8003d70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d70:	e02e      	b.n	8003dd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2180      	movs	r1, #128	@ 0x80
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f8df 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e03a      	b.n	8003e0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	3302      	adds	r3, #2
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	e007      	b.n	8003dc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1cb      	bne.n	8003d72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	2140      	movs	r1, #64	@ 0x40
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f8ab 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e006      	b.n	8003e0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3720      	adds	r7, #32
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08a      	sub	sp, #40	@ 0x28
 8003e16:	af02      	add	r7, sp, #8
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	f040 8081 	bne.w	8003f36 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_UART_Receive+0x2e>
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e079      	b.n	8003f38 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2222      	movs	r2, #34	@ 0x22
 8003e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e58:	f7fd fd32 	bl	80018c0 <HAL_GetTick>
 8003e5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	88fa      	ldrh	r2, [r7, #6]
 8003e62:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e72:	d108      	bne.n	8003e86 <HAL_UART_Receive+0x74>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e003      	b.n	8003e8e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e8e:	e047      	b.n	8003f20 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2120      	movs	r1, #32
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f850 	bl	8003f40 <UART_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e042      	b.n	8003f38 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10c      	bne.n	8003ed2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	3302      	adds	r3, #2
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e01f      	b.n	8003f12 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eda:	d007      	beq.n	8003eec <HAL_UART_Receive+0xda>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <HAL_UART_Receive+0xe8>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	e008      	b.n	8003f0c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1b2      	bne.n	8003e90 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	603b      	str	r3, [r7, #0]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f50:	e03b      	b.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f58:	d037      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5a:	f7fd fcb1 	bl	80018c0 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d302      	bcc.n	8003f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e03a      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d023      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b80      	cmp	r3, #128	@ 0x80
 8003f86:	d020      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b40      	cmp	r3, #64	@ 0x40
 8003f8c:	d01d      	beq.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d116      	bne.n	8003fca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f81d 	bl	8003ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2208      	movs	r2, #8
 8003fbc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e00f      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2300      	movne	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d0b4      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b095      	sub	sp, #84	@ 0x54
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004010:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800401a:	643a      	str	r2, [r7, #64]	@ 0x40
 800401c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004020:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3314      	adds	r3, #20
 8004034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	61fb      	str	r3, [r7, #28]
   return(result);
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3314      	adds	r3, #20
 800404c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800404e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004050:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e5      	bne.n	800402e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004066:	2b01      	cmp	r3, #1
 8004068:	d119      	bne.n	800409e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	60bb      	str	r3, [r7, #8]
   return(result);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f023 0310 	bic.w	r3, r3, #16
 8004080:	647b      	str	r3, [r7, #68]	@ 0x44
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	330c      	adds	r3, #12
 8004088:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800408a:	61ba      	str	r2, [r7, #24]
 800408c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6979      	ldr	r1, [r7, #20]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	613b      	str	r3, [r7, #16]
   return(result);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e5      	bne.n	800406a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040ac:	bf00      	nop
 80040ae:	3754      	adds	r7, #84	@ 0x54
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040bc:	b0c0      	sub	sp, #256	@ 0x100
 80040be:	af00      	add	r7, sp, #0
 80040c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	68d9      	ldr	r1, [r3, #12]
 80040d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	ea40 0301 	orr.w	r3, r0, r1
 80040e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	431a      	orrs	r2, r3
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004110:	f021 010c 	bic.w	r1, r1, #12
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800411e:	430b      	orrs	r3, r1
 8004120:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004132:	6999      	ldr	r1, [r3, #24]
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	ea40 0301 	orr.w	r3, r0, r1
 800413e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b8f      	ldr	r3, [pc, #572]	@ (8004384 <UART_SetConfig+0x2cc>)
 8004148:	429a      	cmp	r2, r3
 800414a:	d005      	beq.n	8004158 <UART_SetConfig+0xa0>
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	4b8d      	ldr	r3, [pc, #564]	@ (8004388 <UART_SetConfig+0x2d0>)
 8004154:	429a      	cmp	r2, r3
 8004156:	d104      	bne.n	8004162 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004158:	f7ff f89e 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 800415c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004160:	e003      	b.n	800416a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004162:	f7ff f885 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8004166:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004174:	f040 810c 	bne.w	8004390 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800417c:	2200      	movs	r2, #0
 800417e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004182:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004186:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800418a:	4622      	mov	r2, r4
 800418c:	462b      	mov	r3, r5
 800418e:	1891      	adds	r1, r2, r2
 8004190:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004192:	415b      	adcs	r3, r3
 8004194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004196:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800419a:	4621      	mov	r1, r4
 800419c:	eb12 0801 	adds.w	r8, r2, r1
 80041a0:	4629      	mov	r1, r5
 80041a2:	eb43 0901 	adc.w	r9, r3, r1
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ba:	4690      	mov	r8, r2
 80041bc:	4699      	mov	r9, r3
 80041be:	4623      	mov	r3, r4
 80041c0:	eb18 0303 	adds.w	r3, r8, r3
 80041c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041c8:	462b      	mov	r3, r5
 80041ca:	eb49 0303 	adc.w	r3, r9, r3
 80041ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041e6:	460b      	mov	r3, r1
 80041e8:	18db      	adds	r3, r3, r3
 80041ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80041ec:	4613      	mov	r3, r2
 80041ee:	eb42 0303 	adc.w	r3, r2, r3
 80041f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80041f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041fc:	f7fc f8b8 	bl	8000370 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4b61      	ldr	r3, [pc, #388]	@ (800438c <UART_SetConfig+0x2d4>)
 8004206:	fba3 2302 	umull	r2, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	011c      	lsls	r4, r3, #4
 800420e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004212:	2200      	movs	r2, #0
 8004214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004218:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800421c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004220:	4642      	mov	r2, r8
 8004222:	464b      	mov	r3, r9
 8004224:	1891      	adds	r1, r2, r2
 8004226:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004228:	415b      	adcs	r3, r3
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004230:	4641      	mov	r1, r8
 8004232:	eb12 0a01 	adds.w	sl, r2, r1
 8004236:	4649      	mov	r1, r9
 8004238:	eb43 0b01 	adc.w	fp, r3, r1
 800423c:	f04f 0200 	mov.w	r2, #0
 8004240:	f04f 0300 	mov.w	r3, #0
 8004244:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004248:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800424c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004250:	4692      	mov	sl, r2
 8004252:	469b      	mov	fp, r3
 8004254:	4643      	mov	r3, r8
 8004256:	eb1a 0303 	adds.w	r3, sl, r3
 800425a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800425e:	464b      	mov	r3, r9
 8004260:	eb4b 0303 	adc.w	r3, fp, r3
 8004264:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004274:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004278:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800427c:	460b      	mov	r3, r1
 800427e:	18db      	adds	r3, r3, r3
 8004280:	643b      	str	r3, [r7, #64]	@ 0x40
 8004282:	4613      	mov	r3, r2
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	647b      	str	r3, [r7, #68]	@ 0x44
 800428a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800428e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004292:	f7fc f86d 	bl	8000370 <__aeabi_uldivmod>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4611      	mov	r1, r2
 800429c:	4b3b      	ldr	r3, [pc, #236]	@ (800438c <UART_SetConfig+0x2d4>)
 800429e:	fba3 2301 	umull	r2, r3, r3, r1
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2264      	movs	r2, #100	@ 0x64
 80042a6:	fb02 f303 	mul.w	r3, r2, r3
 80042aa:	1acb      	subs	r3, r1, r3
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80042b2:	4b36      	ldr	r3, [pc, #216]	@ (800438c <UART_SetConfig+0x2d4>)
 80042b4:	fba3 2302 	umull	r2, r3, r3, r2
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80042c0:	441c      	add	r4, r3
 80042c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	1891      	adds	r1, r2, r2
 80042da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042dc:	415b      	adcs	r3, r3
 80042de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80042e4:	4641      	mov	r1, r8
 80042e6:	1851      	adds	r1, r2, r1
 80042e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80042ea:	4649      	mov	r1, r9
 80042ec:	414b      	adcs	r3, r1
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80042fc:	4659      	mov	r1, fp
 80042fe:	00cb      	lsls	r3, r1, #3
 8004300:	4651      	mov	r1, sl
 8004302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004306:	4651      	mov	r1, sl
 8004308:	00ca      	lsls	r2, r1, #3
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	4603      	mov	r3, r0
 8004310:	4642      	mov	r2, r8
 8004312:	189b      	adds	r3, r3, r2
 8004314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004318:	464b      	mov	r3, r9
 800431a:	460a      	mov	r2, r1
 800431c:	eb42 0303 	adc.w	r3, r2, r3
 8004320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004330:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004334:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004338:	460b      	mov	r3, r1
 800433a:	18db      	adds	r3, r3, r3
 800433c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800433e:	4613      	mov	r3, r2
 8004340:	eb42 0303 	adc.w	r3, r2, r3
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800434a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800434e:	f7fc f80f 	bl	8000370 <__aeabi_uldivmod>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4b0d      	ldr	r3, [pc, #52]	@ (800438c <UART_SetConfig+0x2d4>)
 8004358:	fba3 1302 	umull	r1, r3, r3, r2
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	2164      	movs	r1, #100	@ 0x64
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	3332      	adds	r3, #50	@ 0x32
 800436a:	4a08      	ldr	r2, [pc, #32]	@ (800438c <UART_SetConfig+0x2d4>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	f003 0207 	and.w	r2, r3, #7
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4422      	add	r2, r4
 800437e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004380:	e106      	b.n	8004590 <UART_SetConfig+0x4d8>
 8004382:	bf00      	nop
 8004384:	40011000 	.word	0x40011000
 8004388:	40011400 	.word	0x40011400
 800438c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800439a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800439e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80043a2:	4642      	mov	r2, r8
 80043a4:	464b      	mov	r3, r9
 80043a6:	1891      	adds	r1, r2, r2
 80043a8:	6239      	str	r1, [r7, #32]
 80043aa:	415b      	adcs	r3, r3
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043b2:	4641      	mov	r1, r8
 80043b4:	1854      	adds	r4, r2, r1
 80043b6:	4649      	mov	r1, r9
 80043b8:	eb43 0501 	adc.w	r5, r3, r1
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	00eb      	lsls	r3, r5, #3
 80043c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ca:	00e2      	lsls	r2, r4, #3
 80043cc:	4614      	mov	r4, r2
 80043ce:	461d      	mov	r5, r3
 80043d0:	4643      	mov	r3, r8
 80043d2:	18e3      	adds	r3, r4, r3
 80043d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043d8:	464b      	mov	r3, r9
 80043da:	eb45 0303 	adc.w	r3, r5, r3
 80043de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80043fe:	4629      	mov	r1, r5
 8004400:	008b      	lsls	r3, r1, #2
 8004402:	4621      	mov	r1, r4
 8004404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004408:	4621      	mov	r1, r4
 800440a:	008a      	lsls	r2, r1, #2
 800440c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004410:	f7fb ffae 	bl	8000370 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4b60      	ldr	r3, [pc, #384]	@ (800459c <UART_SetConfig+0x4e4>)
 800441a:	fba3 2302 	umull	r2, r3, r3, r2
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	011c      	lsls	r4, r3, #4
 8004422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004426:	2200      	movs	r2, #0
 8004428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800442c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004430:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004434:	4642      	mov	r2, r8
 8004436:	464b      	mov	r3, r9
 8004438:	1891      	adds	r1, r2, r2
 800443a:	61b9      	str	r1, [r7, #24]
 800443c:	415b      	adcs	r3, r3
 800443e:	61fb      	str	r3, [r7, #28]
 8004440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004444:	4641      	mov	r1, r8
 8004446:	1851      	adds	r1, r2, r1
 8004448:	6139      	str	r1, [r7, #16]
 800444a:	4649      	mov	r1, r9
 800444c:	414b      	adcs	r3, r1
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800445c:	4659      	mov	r1, fp
 800445e:	00cb      	lsls	r3, r1, #3
 8004460:	4651      	mov	r1, sl
 8004462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004466:	4651      	mov	r1, sl
 8004468:	00ca      	lsls	r2, r1, #3
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	4603      	mov	r3, r0
 8004470:	4642      	mov	r2, r8
 8004472:	189b      	adds	r3, r3, r2
 8004474:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004478:	464b      	mov	r3, r9
 800447a:	460a      	mov	r2, r1
 800447c:	eb42 0303 	adc.w	r3, r2, r3
 8004480:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800448e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800449c:	4649      	mov	r1, r9
 800449e:	008b      	lsls	r3, r1, #2
 80044a0:	4641      	mov	r1, r8
 80044a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a6:	4641      	mov	r1, r8
 80044a8:	008a      	lsls	r2, r1, #2
 80044aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80044ae:	f7fb ff5f 	bl	8000370 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	4b38      	ldr	r3, [pc, #224]	@ (800459c <UART_SetConfig+0x4e4>)
 80044ba:	fba3 2301 	umull	r2, r3, r3, r1
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2264      	movs	r2, #100	@ 0x64
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	1acb      	subs	r3, r1, r3
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	3332      	adds	r3, #50	@ 0x32
 80044cc:	4a33      	ldr	r2, [pc, #204]	@ (800459c <UART_SetConfig+0x4e4>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044d8:	441c      	add	r4, r3
 80044da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044de:	2200      	movs	r2, #0
 80044e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80044e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80044e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	415b      	adcs	r3, r3
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044f8:	4641      	mov	r1, r8
 80044fa:	1851      	adds	r1, r2, r1
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	4649      	mov	r1, r9
 8004500:	414b      	adcs	r3, r1
 8004502:	607b      	str	r3, [r7, #4]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004510:	4659      	mov	r1, fp
 8004512:	00cb      	lsls	r3, r1, #3
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451a:	4651      	mov	r1, sl
 800451c:	00ca      	lsls	r2, r1, #3
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	4603      	mov	r3, r0
 8004524:	4642      	mov	r2, r8
 8004526:	189b      	adds	r3, r3, r2
 8004528:	66bb      	str	r3, [r7, #104]	@ 0x68
 800452a:	464b      	mov	r3, r9
 800452c:	460a      	mov	r2, r1
 800452e:	eb42 0303 	adc.w	r3, r2, r3
 8004532:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	663b      	str	r3, [r7, #96]	@ 0x60
 800453e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800454c:	4649      	mov	r1, r9
 800454e:	008b      	lsls	r3, r1, #2
 8004550:	4641      	mov	r1, r8
 8004552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004556:	4641      	mov	r1, r8
 8004558:	008a      	lsls	r2, r1, #2
 800455a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800455e:	f7fb ff07 	bl	8000370 <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <UART_SetConfig+0x4e4>)
 8004568:	fba3 1302 	umull	r1, r3, r3, r2
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	2164      	movs	r1, #100	@ 0x64
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	3332      	adds	r3, #50	@ 0x32
 800457a:	4a08      	ldr	r2, [pc, #32]	@ (800459c <UART_SetConfig+0x4e4>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	f003 020f 	and.w	r2, r3, #15
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4422      	add	r2, r4
 800458e:	609a      	str	r2, [r3, #8]
}
 8004590:	bf00      	nop
 8004592:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004596:	46bd      	mov	sp, r7
 8004598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800459c:	51eb851f 	.word	0x51eb851f

080045a0 <std>:
 80045a0:	2300      	movs	r3, #0
 80045a2:	b510      	push	{r4, lr}
 80045a4:	4604      	mov	r4, r0
 80045a6:	e9c0 3300 	strd	r3, r3, [r0]
 80045aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045ae:	6083      	str	r3, [r0, #8]
 80045b0:	8181      	strh	r1, [r0, #12]
 80045b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80045b4:	81c2      	strh	r2, [r0, #14]
 80045b6:	6183      	str	r3, [r0, #24]
 80045b8:	4619      	mov	r1, r3
 80045ba:	2208      	movs	r2, #8
 80045bc:	305c      	adds	r0, #92	@ 0x5c
 80045be:	f000 f906 	bl	80047ce <memset>
 80045c2:	4b0d      	ldr	r3, [pc, #52]	@ (80045f8 <std+0x58>)
 80045c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80045c6:	4b0d      	ldr	r3, [pc, #52]	@ (80045fc <std+0x5c>)
 80045c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004600 <std+0x60>)
 80045cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004604 <std+0x64>)
 80045d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80045d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004608 <std+0x68>)
 80045d4:	6224      	str	r4, [r4, #32]
 80045d6:	429c      	cmp	r4, r3
 80045d8:	d006      	beq.n	80045e8 <std+0x48>
 80045da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045de:	4294      	cmp	r4, r2
 80045e0:	d002      	beq.n	80045e8 <std+0x48>
 80045e2:	33d0      	adds	r3, #208	@ 0xd0
 80045e4:	429c      	cmp	r4, r3
 80045e6:	d105      	bne.n	80045f4 <std+0x54>
 80045e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80045ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f0:	f000 b966 	b.w	80048c0 <__retarget_lock_init_recursive>
 80045f4:	bd10      	pop	{r4, pc}
 80045f6:	bf00      	nop
 80045f8:	08004749 	.word	0x08004749
 80045fc:	0800476b 	.word	0x0800476b
 8004600:	080047a3 	.word	0x080047a3
 8004604:	080047c7 	.word	0x080047c7
 8004608:	200001bc 	.word	0x200001bc

0800460c <stdio_exit_handler>:
 800460c:	4a02      	ldr	r2, [pc, #8]	@ (8004618 <stdio_exit_handler+0xc>)
 800460e:	4903      	ldr	r1, [pc, #12]	@ (800461c <stdio_exit_handler+0x10>)
 8004610:	4803      	ldr	r0, [pc, #12]	@ (8004620 <stdio_exit_handler+0x14>)
 8004612:	f000 b869 	b.w	80046e8 <_fwalk_sglue>
 8004616:	bf00      	nop
 8004618:	20000010 	.word	0x20000010
 800461c:	08005161 	.word	0x08005161
 8004620:	20000020 	.word	0x20000020

08004624 <cleanup_stdio>:
 8004624:	6841      	ldr	r1, [r0, #4]
 8004626:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <cleanup_stdio+0x34>)
 8004628:	4299      	cmp	r1, r3
 800462a:	b510      	push	{r4, lr}
 800462c:	4604      	mov	r4, r0
 800462e:	d001      	beq.n	8004634 <cleanup_stdio+0x10>
 8004630:	f000 fd96 	bl	8005160 <_fflush_r>
 8004634:	68a1      	ldr	r1, [r4, #8]
 8004636:	4b09      	ldr	r3, [pc, #36]	@ (800465c <cleanup_stdio+0x38>)
 8004638:	4299      	cmp	r1, r3
 800463a:	d002      	beq.n	8004642 <cleanup_stdio+0x1e>
 800463c:	4620      	mov	r0, r4
 800463e:	f000 fd8f 	bl	8005160 <_fflush_r>
 8004642:	68e1      	ldr	r1, [r4, #12]
 8004644:	4b06      	ldr	r3, [pc, #24]	@ (8004660 <cleanup_stdio+0x3c>)
 8004646:	4299      	cmp	r1, r3
 8004648:	d004      	beq.n	8004654 <cleanup_stdio+0x30>
 800464a:	4620      	mov	r0, r4
 800464c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004650:	f000 bd86 	b.w	8005160 <_fflush_r>
 8004654:	bd10      	pop	{r4, pc}
 8004656:	bf00      	nop
 8004658:	200001bc 	.word	0x200001bc
 800465c:	20000224 	.word	0x20000224
 8004660:	2000028c 	.word	0x2000028c

08004664 <global_stdio_init.part.0>:
 8004664:	b510      	push	{r4, lr}
 8004666:	4b0b      	ldr	r3, [pc, #44]	@ (8004694 <global_stdio_init.part.0+0x30>)
 8004668:	4c0b      	ldr	r4, [pc, #44]	@ (8004698 <global_stdio_init.part.0+0x34>)
 800466a:	4a0c      	ldr	r2, [pc, #48]	@ (800469c <global_stdio_init.part.0+0x38>)
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	4620      	mov	r0, r4
 8004670:	2200      	movs	r2, #0
 8004672:	2104      	movs	r1, #4
 8004674:	f7ff ff94 	bl	80045a0 <std>
 8004678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800467c:	2201      	movs	r2, #1
 800467e:	2109      	movs	r1, #9
 8004680:	f7ff ff8e 	bl	80045a0 <std>
 8004684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004688:	2202      	movs	r2, #2
 800468a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800468e:	2112      	movs	r1, #18
 8004690:	f7ff bf86 	b.w	80045a0 <std>
 8004694:	200002f4 	.word	0x200002f4
 8004698:	200001bc 	.word	0x200001bc
 800469c:	0800460d 	.word	0x0800460d

080046a0 <__sfp_lock_acquire>:
 80046a0:	4801      	ldr	r0, [pc, #4]	@ (80046a8 <__sfp_lock_acquire+0x8>)
 80046a2:	f000 b90e 	b.w	80048c2 <__retarget_lock_acquire_recursive>
 80046a6:	bf00      	nop
 80046a8:	200002fd 	.word	0x200002fd

080046ac <__sfp_lock_release>:
 80046ac:	4801      	ldr	r0, [pc, #4]	@ (80046b4 <__sfp_lock_release+0x8>)
 80046ae:	f000 b909 	b.w	80048c4 <__retarget_lock_release_recursive>
 80046b2:	bf00      	nop
 80046b4:	200002fd 	.word	0x200002fd

080046b8 <__sinit>:
 80046b8:	b510      	push	{r4, lr}
 80046ba:	4604      	mov	r4, r0
 80046bc:	f7ff fff0 	bl	80046a0 <__sfp_lock_acquire>
 80046c0:	6a23      	ldr	r3, [r4, #32]
 80046c2:	b11b      	cbz	r3, 80046cc <__sinit+0x14>
 80046c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c8:	f7ff bff0 	b.w	80046ac <__sfp_lock_release>
 80046cc:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <__sinit+0x28>)
 80046ce:	6223      	str	r3, [r4, #32]
 80046d0:	4b04      	ldr	r3, [pc, #16]	@ (80046e4 <__sinit+0x2c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f5      	bne.n	80046c4 <__sinit+0xc>
 80046d8:	f7ff ffc4 	bl	8004664 <global_stdio_init.part.0>
 80046dc:	e7f2      	b.n	80046c4 <__sinit+0xc>
 80046de:	bf00      	nop
 80046e0:	08004625 	.word	0x08004625
 80046e4:	200002f4 	.word	0x200002f4

080046e8 <_fwalk_sglue>:
 80046e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046ec:	4607      	mov	r7, r0
 80046ee:	4688      	mov	r8, r1
 80046f0:	4614      	mov	r4, r2
 80046f2:	2600      	movs	r6, #0
 80046f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046f8:	f1b9 0901 	subs.w	r9, r9, #1
 80046fc:	d505      	bpl.n	800470a <_fwalk_sglue+0x22>
 80046fe:	6824      	ldr	r4, [r4, #0]
 8004700:	2c00      	cmp	r4, #0
 8004702:	d1f7      	bne.n	80046f4 <_fwalk_sglue+0xc>
 8004704:	4630      	mov	r0, r6
 8004706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800470a:	89ab      	ldrh	r3, [r5, #12]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d907      	bls.n	8004720 <_fwalk_sglue+0x38>
 8004710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004714:	3301      	adds	r3, #1
 8004716:	d003      	beq.n	8004720 <_fwalk_sglue+0x38>
 8004718:	4629      	mov	r1, r5
 800471a:	4638      	mov	r0, r7
 800471c:	47c0      	blx	r8
 800471e:	4306      	orrs	r6, r0
 8004720:	3568      	adds	r5, #104	@ 0x68
 8004722:	e7e9      	b.n	80046f8 <_fwalk_sglue+0x10>

08004724 <iprintf>:
 8004724:	b40f      	push	{r0, r1, r2, r3}
 8004726:	b507      	push	{r0, r1, r2, lr}
 8004728:	4906      	ldr	r1, [pc, #24]	@ (8004744 <iprintf+0x20>)
 800472a:	ab04      	add	r3, sp, #16
 800472c:	6808      	ldr	r0, [r1, #0]
 800472e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004732:	6881      	ldr	r1, [r0, #8]
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	f000 f9e9 	bl	8004b0c <_vfiprintf_r>
 800473a:	b003      	add	sp, #12
 800473c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004740:	b004      	add	sp, #16
 8004742:	4770      	bx	lr
 8004744:	2000001c 	.word	0x2000001c

08004748 <__sread>:
 8004748:	b510      	push	{r4, lr}
 800474a:	460c      	mov	r4, r1
 800474c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004750:	f000 f868 	bl	8004824 <_read_r>
 8004754:	2800      	cmp	r0, #0
 8004756:	bfab      	itete	ge
 8004758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800475a:	89a3      	ldrhlt	r3, [r4, #12]
 800475c:	181b      	addge	r3, r3, r0
 800475e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004762:	bfac      	ite	ge
 8004764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004766:	81a3      	strhlt	r3, [r4, #12]
 8004768:	bd10      	pop	{r4, pc}

0800476a <__swrite>:
 800476a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800476e:	461f      	mov	r7, r3
 8004770:	898b      	ldrh	r3, [r1, #12]
 8004772:	05db      	lsls	r3, r3, #23
 8004774:	4605      	mov	r5, r0
 8004776:	460c      	mov	r4, r1
 8004778:	4616      	mov	r6, r2
 800477a:	d505      	bpl.n	8004788 <__swrite+0x1e>
 800477c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004780:	2302      	movs	r3, #2
 8004782:	2200      	movs	r2, #0
 8004784:	f000 f83c 	bl	8004800 <_lseek_r>
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800478e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004792:	81a3      	strh	r3, [r4, #12]
 8004794:	4632      	mov	r2, r6
 8004796:	463b      	mov	r3, r7
 8004798:	4628      	mov	r0, r5
 800479a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800479e:	f000 b853 	b.w	8004848 <_write_r>

080047a2 <__sseek>:
 80047a2:	b510      	push	{r4, lr}
 80047a4:	460c      	mov	r4, r1
 80047a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047aa:	f000 f829 	bl	8004800 <_lseek_r>
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	bf15      	itete	ne
 80047b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047be:	81a3      	strheq	r3, [r4, #12]
 80047c0:	bf18      	it	ne
 80047c2:	81a3      	strhne	r3, [r4, #12]
 80047c4:	bd10      	pop	{r4, pc}

080047c6 <__sclose>:
 80047c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ca:	f000 b809 	b.w	80047e0 <_close_r>

080047ce <memset>:
 80047ce:	4402      	add	r2, r0
 80047d0:	4603      	mov	r3, r0
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d100      	bne.n	80047d8 <memset+0xa>
 80047d6:	4770      	bx	lr
 80047d8:	f803 1b01 	strb.w	r1, [r3], #1
 80047dc:	e7f9      	b.n	80047d2 <memset+0x4>
	...

080047e0 <_close_r>:
 80047e0:	b538      	push	{r3, r4, r5, lr}
 80047e2:	4d06      	ldr	r5, [pc, #24]	@ (80047fc <_close_r+0x1c>)
 80047e4:	2300      	movs	r3, #0
 80047e6:	4604      	mov	r4, r0
 80047e8:	4608      	mov	r0, r1
 80047ea:	602b      	str	r3, [r5, #0]
 80047ec:	f7fc fe8a 	bl	8001504 <_close>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d102      	bne.n	80047fa <_close_r+0x1a>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	b103      	cbz	r3, 80047fa <_close_r+0x1a>
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	200002f8 	.word	0x200002f8

08004800 <_lseek_r>:
 8004800:	b538      	push	{r3, r4, r5, lr}
 8004802:	4d07      	ldr	r5, [pc, #28]	@ (8004820 <_lseek_r+0x20>)
 8004804:	4604      	mov	r4, r0
 8004806:	4608      	mov	r0, r1
 8004808:	4611      	mov	r1, r2
 800480a:	2200      	movs	r2, #0
 800480c:	602a      	str	r2, [r5, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f7fc fe9f 	bl	8001552 <_lseek>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_lseek_r+0x1e>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_lseek_r+0x1e>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	200002f8 	.word	0x200002f8

08004824 <_read_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	4d07      	ldr	r5, [pc, #28]	@ (8004844 <_read_r+0x20>)
 8004828:	4604      	mov	r4, r0
 800482a:	4608      	mov	r0, r1
 800482c:	4611      	mov	r1, r2
 800482e:	2200      	movs	r2, #0
 8004830:	602a      	str	r2, [r5, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	f7fc fe2d 	bl	8001492 <_read>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_read_r+0x1e>
 800483c:	682b      	ldr	r3, [r5, #0]
 800483e:	b103      	cbz	r3, 8004842 <_read_r+0x1e>
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	200002f8 	.word	0x200002f8

08004848 <_write_r>:
 8004848:	b538      	push	{r3, r4, r5, lr}
 800484a:	4d07      	ldr	r5, [pc, #28]	@ (8004868 <_write_r+0x20>)
 800484c:	4604      	mov	r4, r0
 800484e:	4608      	mov	r0, r1
 8004850:	4611      	mov	r1, r2
 8004852:	2200      	movs	r2, #0
 8004854:	602a      	str	r2, [r5, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	f7fc fe38 	bl	80014cc <_write>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_write_r+0x1e>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_write_r+0x1e>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	200002f8 	.word	0x200002f8

0800486c <__errno>:
 800486c:	4b01      	ldr	r3, [pc, #4]	@ (8004874 <__errno+0x8>)
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	2000001c 	.word	0x2000001c

08004878 <__libc_init_array>:
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	4d0d      	ldr	r5, [pc, #52]	@ (80048b0 <__libc_init_array+0x38>)
 800487c:	4c0d      	ldr	r4, [pc, #52]	@ (80048b4 <__libc_init_array+0x3c>)
 800487e:	1b64      	subs	r4, r4, r5
 8004880:	10a4      	asrs	r4, r4, #2
 8004882:	2600      	movs	r6, #0
 8004884:	42a6      	cmp	r6, r4
 8004886:	d109      	bne.n	800489c <__libc_init_array+0x24>
 8004888:	4d0b      	ldr	r5, [pc, #44]	@ (80048b8 <__libc_init_array+0x40>)
 800488a:	4c0c      	ldr	r4, [pc, #48]	@ (80048bc <__libc_init_array+0x44>)
 800488c:	f000 fdb8 	bl	8005400 <_init>
 8004890:	1b64      	subs	r4, r4, r5
 8004892:	10a4      	asrs	r4, r4, #2
 8004894:	2600      	movs	r6, #0
 8004896:	42a6      	cmp	r6, r4
 8004898:	d105      	bne.n	80048a6 <__libc_init_array+0x2e>
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a0:	4798      	blx	r3
 80048a2:	3601      	adds	r6, #1
 80048a4:	e7ee      	b.n	8004884 <__libc_init_array+0xc>
 80048a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048aa:	4798      	blx	r3
 80048ac:	3601      	adds	r6, #1
 80048ae:	e7f2      	b.n	8004896 <__libc_init_array+0x1e>
 80048b0:	0800550c 	.word	0x0800550c
 80048b4:	0800550c 	.word	0x0800550c
 80048b8:	0800550c 	.word	0x0800550c
 80048bc:	08005510 	.word	0x08005510

080048c0 <__retarget_lock_init_recursive>:
 80048c0:	4770      	bx	lr

080048c2 <__retarget_lock_acquire_recursive>:
 80048c2:	4770      	bx	lr

080048c4 <__retarget_lock_release_recursive>:
 80048c4:	4770      	bx	lr
	...

080048c8 <_free_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4605      	mov	r5, r0
 80048cc:	2900      	cmp	r1, #0
 80048ce:	d041      	beq.n	8004954 <_free_r+0x8c>
 80048d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d4:	1f0c      	subs	r4, r1, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfb8      	it	lt
 80048da:	18e4      	addlt	r4, r4, r3
 80048dc:	f000 f8e0 	bl	8004aa0 <__malloc_lock>
 80048e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004958 <_free_r+0x90>)
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	b933      	cbnz	r3, 80048f4 <_free_r+0x2c>
 80048e6:	6063      	str	r3, [r4, #4]
 80048e8:	6014      	str	r4, [r2, #0]
 80048ea:	4628      	mov	r0, r5
 80048ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f0:	f000 b8dc 	b.w	8004aac <__malloc_unlock>
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	d908      	bls.n	800490a <_free_r+0x42>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	1821      	adds	r1, r4, r0
 80048fc:	428b      	cmp	r3, r1
 80048fe:	bf01      	itttt	eq
 8004900:	6819      	ldreq	r1, [r3, #0]
 8004902:	685b      	ldreq	r3, [r3, #4]
 8004904:	1809      	addeq	r1, r1, r0
 8004906:	6021      	streq	r1, [r4, #0]
 8004908:	e7ed      	b.n	80048e6 <_free_r+0x1e>
 800490a:	461a      	mov	r2, r3
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	b10b      	cbz	r3, 8004914 <_free_r+0x4c>
 8004910:	42a3      	cmp	r3, r4
 8004912:	d9fa      	bls.n	800490a <_free_r+0x42>
 8004914:	6811      	ldr	r1, [r2, #0]
 8004916:	1850      	adds	r0, r2, r1
 8004918:	42a0      	cmp	r0, r4
 800491a:	d10b      	bne.n	8004934 <_free_r+0x6c>
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	4401      	add	r1, r0
 8004920:	1850      	adds	r0, r2, r1
 8004922:	4283      	cmp	r3, r0
 8004924:	6011      	str	r1, [r2, #0]
 8004926:	d1e0      	bne.n	80048ea <_free_r+0x22>
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	6053      	str	r3, [r2, #4]
 800492e:	4408      	add	r0, r1
 8004930:	6010      	str	r0, [r2, #0]
 8004932:	e7da      	b.n	80048ea <_free_r+0x22>
 8004934:	d902      	bls.n	800493c <_free_r+0x74>
 8004936:	230c      	movs	r3, #12
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	e7d6      	b.n	80048ea <_free_r+0x22>
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	1821      	adds	r1, r4, r0
 8004940:	428b      	cmp	r3, r1
 8004942:	bf04      	itt	eq
 8004944:	6819      	ldreq	r1, [r3, #0]
 8004946:	685b      	ldreq	r3, [r3, #4]
 8004948:	6063      	str	r3, [r4, #4]
 800494a:	bf04      	itt	eq
 800494c:	1809      	addeq	r1, r1, r0
 800494e:	6021      	streq	r1, [r4, #0]
 8004950:	6054      	str	r4, [r2, #4]
 8004952:	e7ca      	b.n	80048ea <_free_r+0x22>
 8004954:	bd38      	pop	{r3, r4, r5, pc}
 8004956:	bf00      	nop
 8004958:	20000304 	.word	0x20000304

0800495c <sbrk_aligned>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4e0f      	ldr	r6, [pc, #60]	@ (800499c <sbrk_aligned+0x40>)
 8004960:	460c      	mov	r4, r1
 8004962:	6831      	ldr	r1, [r6, #0]
 8004964:	4605      	mov	r5, r0
 8004966:	b911      	cbnz	r1, 800496e <sbrk_aligned+0x12>
 8004968:	f000 fcb6 	bl	80052d8 <_sbrk_r>
 800496c:	6030      	str	r0, [r6, #0]
 800496e:	4621      	mov	r1, r4
 8004970:	4628      	mov	r0, r5
 8004972:	f000 fcb1 	bl	80052d8 <_sbrk_r>
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	d103      	bne.n	8004982 <sbrk_aligned+0x26>
 800497a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800497e:	4620      	mov	r0, r4
 8004980:	bd70      	pop	{r4, r5, r6, pc}
 8004982:	1cc4      	adds	r4, r0, #3
 8004984:	f024 0403 	bic.w	r4, r4, #3
 8004988:	42a0      	cmp	r0, r4
 800498a:	d0f8      	beq.n	800497e <sbrk_aligned+0x22>
 800498c:	1a21      	subs	r1, r4, r0
 800498e:	4628      	mov	r0, r5
 8004990:	f000 fca2 	bl	80052d8 <_sbrk_r>
 8004994:	3001      	adds	r0, #1
 8004996:	d1f2      	bne.n	800497e <sbrk_aligned+0x22>
 8004998:	e7ef      	b.n	800497a <sbrk_aligned+0x1e>
 800499a:	bf00      	nop
 800499c:	20000300 	.word	0x20000300

080049a0 <_malloc_r>:
 80049a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a4:	1ccd      	adds	r5, r1, #3
 80049a6:	f025 0503 	bic.w	r5, r5, #3
 80049aa:	3508      	adds	r5, #8
 80049ac:	2d0c      	cmp	r5, #12
 80049ae:	bf38      	it	cc
 80049b0:	250c      	movcc	r5, #12
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	4606      	mov	r6, r0
 80049b6:	db01      	blt.n	80049bc <_malloc_r+0x1c>
 80049b8:	42a9      	cmp	r1, r5
 80049ba:	d904      	bls.n	80049c6 <_malloc_r+0x26>
 80049bc:	230c      	movs	r3, #12
 80049be:	6033      	str	r3, [r6, #0]
 80049c0:	2000      	movs	r0, #0
 80049c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a9c <_malloc_r+0xfc>
 80049ca:	f000 f869 	bl	8004aa0 <__malloc_lock>
 80049ce:	f8d8 3000 	ldr.w	r3, [r8]
 80049d2:	461c      	mov	r4, r3
 80049d4:	bb44      	cbnz	r4, 8004a28 <_malloc_r+0x88>
 80049d6:	4629      	mov	r1, r5
 80049d8:	4630      	mov	r0, r6
 80049da:	f7ff ffbf 	bl	800495c <sbrk_aligned>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	4604      	mov	r4, r0
 80049e2:	d158      	bne.n	8004a96 <_malloc_r+0xf6>
 80049e4:	f8d8 4000 	ldr.w	r4, [r8]
 80049e8:	4627      	mov	r7, r4
 80049ea:	2f00      	cmp	r7, #0
 80049ec:	d143      	bne.n	8004a76 <_malloc_r+0xd6>
 80049ee:	2c00      	cmp	r4, #0
 80049f0:	d04b      	beq.n	8004a8a <_malloc_r+0xea>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	4639      	mov	r1, r7
 80049f6:	4630      	mov	r0, r6
 80049f8:	eb04 0903 	add.w	r9, r4, r3
 80049fc:	f000 fc6c 	bl	80052d8 <_sbrk_r>
 8004a00:	4581      	cmp	r9, r0
 8004a02:	d142      	bne.n	8004a8a <_malloc_r+0xea>
 8004a04:	6821      	ldr	r1, [r4, #0]
 8004a06:	1a6d      	subs	r5, r5, r1
 8004a08:	4629      	mov	r1, r5
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f7ff ffa6 	bl	800495c <sbrk_aligned>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d03a      	beq.n	8004a8a <_malloc_r+0xea>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	442b      	add	r3, r5
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	bb62      	cbnz	r2, 8004a7c <_malloc_r+0xdc>
 8004a22:	f8c8 7000 	str.w	r7, [r8]
 8004a26:	e00f      	b.n	8004a48 <_malloc_r+0xa8>
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	1b52      	subs	r2, r2, r5
 8004a2c:	d420      	bmi.n	8004a70 <_malloc_r+0xd0>
 8004a2e:	2a0b      	cmp	r2, #11
 8004a30:	d917      	bls.n	8004a62 <_malloc_r+0xc2>
 8004a32:	1961      	adds	r1, r4, r5
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	6025      	str	r5, [r4, #0]
 8004a38:	bf18      	it	ne
 8004a3a:	6059      	strne	r1, [r3, #4]
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	bf08      	it	eq
 8004a40:	f8c8 1000 	streq.w	r1, [r8]
 8004a44:	5162      	str	r2, [r4, r5]
 8004a46:	604b      	str	r3, [r1, #4]
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f000 f82f 	bl	8004aac <__malloc_unlock>
 8004a4e:	f104 000b 	add.w	r0, r4, #11
 8004a52:	1d23      	adds	r3, r4, #4
 8004a54:	f020 0007 	bic.w	r0, r0, #7
 8004a58:	1ac2      	subs	r2, r0, r3
 8004a5a:	bf1c      	itt	ne
 8004a5c:	1a1b      	subne	r3, r3, r0
 8004a5e:	50a3      	strne	r3, [r4, r2]
 8004a60:	e7af      	b.n	80049c2 <_malloc_r+0x22>
 8004a62:	6862      	ldr	r2, [r4, #4]
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	bf0c      	ite	eq
 8004a68:	f8c8 2000 	streq.w	r2, [r8]
 8004a6c:	605a      	strne	r2, [r3, #4]
 8004a6e:	e7eb      	b.n	8004a48 <_malloc_r+0xa8>
 8004a70:	4623      	mov	r3, r4
 8004a72:	6864      	ldr	r4, [r4, #4]
 8004a74:	e7ae      	b.n	80049d4 <_malloc_r+0x34>
 8004a76:	463c      	mov	r4, r7
 8004a78:	687f      	ldr	r7, [r7, #4]
 8004a7a:	e7b6      	b.n	80049ea <_malloc_r+0x4a>
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	d1fb      	bne.n	8004a7c <_malloc_r+0xdc>
 8004a84:	2300      	movs	r3, #0
 8004a86:	6053      	str	r3, [r2, #4]
 8004a88:	e7de      	b.n	8004a48 <_malloc_r+0xa8>
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	6033      	str	r3, [r6, #0]
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f000 f80c 	bl	8004aac <__malloc_unlock>
 8004a94:	e794      	b.n	80049c0 <_malloc_r+0x20>
 8004a96:	6005      	str	r5, [r0, #0]
 8004a98:	e7d6      	b.n	8004a48 <_malloc_r+0xa8>
 8004a9a:	bf00      	nop
 8004a9c:	20000304 	.word	0x20000304

08004aa0 <__malloc_lock>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	@ (8004aa8 <__malloc_lock+0x8>)
 8004aa2:	f7ff bf0e 	b.w	80048c2 <__retarget_lock_acquire_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	200002fc 	.word	0x200002fc

08004aac <__malloc_unlock>:
 8004aac:	4801      	ldr	r0, [pc, #4]	@ (8004ab4 <__malloc_unlock+0x8>)
 8004aae:	f7ff bf09 	b.w	80048c4 <__retarget_lock_release_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	200002fc 	.word	0x200002fc

08004ab8 <__sfputc_r>:
 8004ab8:	6893      	ldr	r3, [r2, #8]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	b410      	push	{r4}
 8004ac0:	6093      	str	r3, [r2, #8]
 8004ac2:	da08      	bge.n	8004ad6 <__sfputc_r+0x1e>
 8004ac4:	6994      	ldr	r4, [r2, #24]
 8004ac6:	42a3      	cmp	r3, r4
 8004ac8:	db01      	blt.n	8004ace <__sfputc_r+0x16>
 8004aca:	290a      	cmp	r1, #10
 8004acc:	d103      	bne.n	8004ad6 <__sfputc_r+0x1e>
 8004ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ad2:	f000 bb6d 	b.w	80051b0 <__swbuf_r>
 8004ad6:	6813      	ldr	r3, [r2, #0]
 8004ad8:	1c58      	adds	r0, r3, #1
 8004ada:	6010      	str	r0, [r2, #0]
 8004adc:	7019      	strb	r1, [r3, #0]
 8004ade:	4608      	mov	r0, r1
 8004ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <__sfputs_r>:
 8004ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae8:	4606      	mov	r6, r0
 8004aea:	460f      	mov	r7, r1
 8004aec:	4614      	mov	r4, r2
 8004aee:	18d5      	adds	r5, r2, r3
 8004af0:	42ac      	cmp	r4, r5
 8004af2:	d101      	bne.n	8004af8 <__sfputs_r+0x12>
 8004af4:	2000      	movs	r0, #0
 8004af6:	e007      	b.n	8004b08 <__sfputs_r+0x22>
 8004af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afc:	463a      	mov	r2, r7
 8004afe:	4630      	mov	r0, r6
 8004b00:	f7ff ffda 	bl	8004ab8 <__sfputc_r>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d1f3      	bne.n	8004af0 <__sfputs_r+0xa>
 8004b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b0c <_vfiprintf_r>:
 8004b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	460d      	mov	r5, r1
 8004b12:	b09d      	sub	sp, #116	@ 0x74
 8004b14:	4614      	mov	r4, r2
 8004b16:	4698      	mov	r8, r3
 8004b18:	4606      	mov	r6, r0
 8004b1a:	b118      	cbz	r0, 8004b24 <_vfiprintf_r+0x18>
 8004b1c:	6a03      	ldr	r3, [r0, #32]
 8004b1e:	b90b      	cbnz	r3, 8004b24 <_vfiprintf_r+0x18>
 8004b20:	f7ff fdca 	bl	80046b8 <__sinit>
 8004b24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b26:	07d9      	lsls	r1, r3, #31
 8004b28:	d405      	bmi.n	8004b36 <_vfiprintf_r+0x2a>
 8004b2a:	89ab      	ldrh	r3, [r5, #12]
 8004b2c:	059a      	lsls	r2, r3, #22
 8004b2e:	d402      	bmi.n	8004b36 <_vfiprintf_r+0x2a>
 8004b30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b32:	f7ff fec6 	bl	80048c2 <__retarget_lock_acquire_recursive>
 8004b36:	89ab      	ldrh	r3, [r5, #12]
 8004b38:	071b      	lsls	r3, r3, #28
 8004b3a:	d501      	bpl.n	8004b40 <_vfiprintf_r+0x34>
 8004b3c:	692b      	ldr	r3, [r5, #16]
 8004b3e:	b99b      	cbnz	r3, 8004b68 <_vfiprintf_r+0x5c>
 8004b40:	4629      	mov	r1, r5
 8004b42:	4630      	mov	r0, r6
 8004b44:	f000 fb72 	bl	800522c <__swsetup_r>
 8004b48:	b170      	cbz	r0, 8004b68 <_vfiprintf_r+0x5c>
 8004b4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b4c:	07dc      	lsls	r4, r3, #31
 8004b4e:	d504      	bpl.n	8004b5a <_vfiprintf_r+0x4e>
 8004b50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b54:	b01d      	add	sp, #116	@ 0x74
 8004b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5a:	89ab      	ldrh	r3, [r5, #12]
 8004b5c:	0598      	lsls	r0, r3, #22
 8004b5e:	d4f7      	bmi.n	8004b50 <_vfiprintf_r+0x44>
 8004b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b62:	f7ff feaf 	bl	80048c4 <__retarget_lock_release_recursive>
 8004b66:	e7f3      	b.n	8004b50 <_vfiprintf_r+0x44>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b76:	2330      	movs	r3, #48	@ 0x30
 8004b78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d28 <_vfiprintf_r+0x21c>
 8004b7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004b80:	f04f 0901 	mov.w	r9, #1
 8004b84:	4623      	mov	r3, r4
 8004b86:	469a      	mov	sl, r3
 8004b88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b8c:	b10a      	cbz	r2, 8004b92 <_vfiprintf_r+0x86>
 8004b8e:	2a25      	cmp	r2, #37	@ 0x25
 8004b90:	d1f9      	bne.n	8004b86 <_vfiprintf_r+0x7a>
 8004b92:	ebba 0b04 	subs.w	fp, sl, r4
 8004b96:	d00b      	beq.n	8004bb0 <_vfiprintf_r+0xa4>
 8004b98:	465b      	mov	r3, fp
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f7ff ffa1 	bl	8004ae6 <__sfputs_r>
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	f000 80a7 	beq.w	8004cf8 <_vfiprintf_r+0x1ec>
 8004baa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bac:	445a      	add	r2, fp
 8004bae:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bb0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 809f 	beq.w	8004cf8 <_vfiprintf_r+0x1ec>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bc4:	f10a 0a01 	add.w	sl, sl, #1
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	9307      	str	r3, [sp, #28]
 8004bcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bd2:	4654      	mov	r4, sl
 8004bd4:	2205      	movs	r2, #5
 8004bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bda:	4853      	ldr	r0, [pc, #332]	@ (8004d28 <_vfiprintf_r+0x21c>)
 8004bdc:	f7fb fb28 	bl	8000230 <memchr>
 8004be0:	9a04      	ldr	r2, [sp, #16]
 8004be2:	b9d8      	cbnz	r0, 8004c1c <_vfiprintf_r+0x110>
 8004be4:	06d1      	lsls	r1, r2, #27
 8004be6:	bf44      	itt	mi
 8004be8:	2320      	movmi	r3, #32
 8004bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bee:	0713      	lsls	r3, r2, #28
 8004bf0:	bf44      	itt	mi
 8004bf2:	232b      	movmi	r3, #43	@ 0x2b
 8004bf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004bf8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bfe:	d015      	beq.n	8004c2c <_vfiprintf_r+0x120>
 8004c00:	9a07      	ldr	r2, [sp, #28]
 8004c02:	4654      	mov	r4, sl
 8004c04:	2000      	movs	r0, #0
 8004c06:	f04f 0c0a 	mov.w	ip, #10
 8004c0a:	4621      	mov	r1, r4
 8004c0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c10:	3b30      	subs	r3, #48	@ 0x30
 8004c12:	2b09      	cmp	r3, #9
 8004c14:	d94b      	bls.n	8004cae <_vfiprintf_r+0x1a2>
 8004c16:	b1b0      	cbz	r0, 8004c46 <_vfiprintf_r+0x13a>
 8004c18:	9207      	str	r2, [sp, #28]
 8004c1a:	e014      	b.n	8004c46 <_vfiprintf_r+0x13a>
 8004c1c:	eba0 0308 	sub.w	r3, r0, r8
 8004c20:	fa09 f303 	lsl.w	r3, r9, r3
 8004c24:	4313      	orrs	r3, r2
 8004c26:	9304      	str	r3, [sp, #16]
 8004c28:	46a2      	mov	sl, r4
 8004c2a:	e7d2      	b.n	8004bd2 <_vfiprintf_r+0xc6>
 8004c2c:	9b03      	ldr	r3, [sp, #12]
 8004c2e:	1d19      	adds	r1, r3, #4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	9103      	str	r1, [sp, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bfbb      	ittet	lt
 8004c38:	425b      	neglt	r3, r3
 8004c3a:	f042 0202 	orrlt.w	r2, r2, #2
 8004c3e:	9307      	strge	r3, [sp, #28]
 8004c40:	9307      	strlt	r3, [sp, #28]
 8004c42:	bfb8      	it	lt
 8004c44:	9204      	strlt	r2, [sp, #16]
 8004c46:	7823      	ldrb	r3, [r4, #0]
 8004c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c4a:	d10a      	bne.n	8004c62 <_vfiprintf_r+0x156>
 8004c4c:	7863      	ldrb	r3, [r4, #1]
 8004c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c50:	d132      	bne.n	8004cb8 <_vfiprintf_r+0x1ac>
 8004c52:	9b03      	ldr	r3, [sp, #12]
 8004c54:	1d1a      	adds	r2, r3, #4
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	9203      	str	r2, [sp, #12]
 8004c5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c5e:	3402      	adds	r4, #2
 8004c60:	9305      	str	r3, [sp, #20]
 8004c62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d38 <_vfiprintf_r+0x22c>
 8004c66:	7821      	ldrb	r1, [r4, #0]
 8004c68:	2203      	movs	r2, #3
 8004c6a:	4650      	mov	r0, sl
 8004c6c:	f7fb fae0 	bl	8000230 <memchr>
 8004c70:	b138      	cbz	r0, 8004c82 <_vfiprintf_r+0x176>
 8004c72:	9b04      	ldr	r3, [sp, #16]
 8004c74:	eba0 000a 	sub.w	r0, r0, sl
 8004c78:	2240      	movs	r2, #64	@ 0x40
 8004c7a:	4082      	lsls	r2, r0
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	3401      	adds	r4, #1
 8004c80:	9304      	str	r3, [sp, #16]
 8004c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c86:	4829      	ldr	r0, [pc, #164]	@ (8004d2c <_vfiprintf_r+0x220>)
 8004c88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004c8c:	2206      	movs	r2, #6
 8004c8e:	f7fb facf 	bl	8000230 <memchr>
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d03f      	beq.n	8004d16 <_vfiprintf_r+0x20a>
 8004c96:	4b26      	ldr	r3, [pc, #152]	@ (8004d30 <_vfiprintf_r+0x224>)
 8004c98:	bb1b      	cbnz	r3, 8004ce2 <_vfiprintf_r+0x1d6>
 8004c9a:	9b03      	ldr	r3, [sp, #12]
 8004c9c:	3307      	adds	r3, #7
 8004c9e:	f023 0307 	bic.w	r3, r3, #7
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	9303      	str	r3, [sp, #12]
 8004ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ca8:	443b      	add	r3, r7
 8004caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cac:	e76a      	b.n	8004b84 <_vfiprintf_r+0x78>
 8004cae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	e7a8      	b.n	8004c0a <_vfiprintf_r+0xfe>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	3401      	adds	r4, #1
 8004cbc:	9305      	str	r3, [sp, #20]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	f04f 0c0a 	mov.w	ip, #10
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cca:	3a30      	subs	r2, #48	@ 0x30
 8004ccc:	2a09      	cmp	r2, #9
 8004cce:	d903      	bls.n	8004cd8 <_vfiprintf_r+0x1cc>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0c6      	beq.n	8004c62 <_vfiprintf_r+0x156>
 8004cd4:	9105      	str	r1, [sp, #20]
 8004cd6:	e7c4      	b.n	8004c62 <_vfiprintf_r+0x156>
 8004cd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cdc:	4604      	mov	r4, r0
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e7f0      	b.n	8004cc4 <_vfiprintf_r+0x1b8>
 8004ce2:	ab03      	add	r3, sp, #12
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	462a      	mov	r2, r5
 8004ce8:	4b12      	ldr	r3, [pc, #72]	@ (8004d34 <_vfiprintf_r+0x228>)
 8004cea:	a904      	add	r1, sp, #16
 8004cec:	4630      	mov	r0, r6
 8004cee:	f3af 8000 	nop.w
 8004cf2:	4607      	mov	r7, r0
 8004cf4:	1c78      	adds	r0, r7, #1
 8004cf6:	d1d6      	bne.n	8004ca6 <_vfiprintf_r+0x19a>
 8004cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cfa:	07d9      	lsls	r1, r3, #31
 8004cfc:	d405      	bmi.n	8004d0a <_vfiprintf_r+0x1fe>
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	059a      	lsls	r2, r3, #22
 8004d02:	d402      	bmi.n	8004d0a <_vfiprintf_r+0x1fe>
 8004d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d06:	f7ff fddd 	bl	80048c4 <__retarget_lock_release_recursive>
 8004d0a:	89ab      	ldrh	r3, [r5, #12]
 8004d0c:	065b      	lsls	r3, r3, #25
 8004d0e:	f53f af1f 	bmi.w	8004b50 <_vfiprintf_r+0x44>
 8004d12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d14:	e71e      	b.n	8004b54 <_vfiprintf_r+0x48>
 8004d16:	ab03      	add	r3, sp, #12
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	462a      	mov	r2, r5
 8004d1c:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <_vfiprintf_r+0x228>)
 8004d1e:	a904      	add	r1, sp, #16
 8004d20:	4630      	mov	r0, r6
 8004d22:	f000 f879 	bl	8004e18 <_printf_i>
 8004d26:	e7e4      	b.n	8004cf2 <_vfiprintf_r+0x1e6>
 8004d28:	080054d0 	.word	0x080054d0
 8004d2c:	080054da 	.word	0x080054da
 8004d30:	00000000 	.word	0x00000000
 8004d34:	08004ae7 	.word	0x08004ae7
 8004d38:	080054d6 	.word	0x080054d6

08004d3c <_printf_common>:
 8004d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d40:	4616      	mov	r6, r2
 8004d42:	4698      	mov	r8, r3
 8004d44:	688a      	ldr	r2, [r1, #8]
 8004d46:	690b      	ldr	r3, [r1, #16]
 8004d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	bfb8      	it	lt
 8004d50:	4613      	movlt	r3, r2
 8004d52:	6033      	str	r3, [r6, #0]
 8004d54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d58:	4607      	mov	r7, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	b10a      	cbz	r2, 8004d62 <_printf_common+0x26>
 8004d5e:	3301      	adds	r3, #1
 8004d60:	6033      	str	r3, [r6, #0]
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	0699      	lsls	r1, r3, #26
 8004d66:	bf42      	ittt	mi
 8004d68:	6833      	ldrmi	r3, [r6, #0]
 8004d6a:	3302      	addmi	r3, #2
 8004d6c:	6033      	strmi	r3, [r6, #0]
 8004d6e:	6825      	ldr	r5, [r4, #0]
 8004d70:	f015 0506 	ands.w	r5, r5, #6
 8004d74:	d106      	bne.n	8004d84 <_printf_common+0x48>
 8004d76:	f104 0a19 	add.w	sl, r4, #25
 8004d7a:	68e3      	ldr	r3, [r4, #12]
 8004d7c:	6832      	ldr	r2, [r6, #0]
 8004d7e:	1a9b      	subs	r3, r3, r2
 8004d80:	42ab      	cmp	r3, r5
 8004d82:	dc26      	bgt.n	8004dd2 <_printf_common+0x96>
 8004d84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	3b00      	subs	r3, #0
 8004d8c:	bf18      	it	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	0692      	lsls	r2, r2, #26
 8004d92:	d42b      	bmi.n	8004dec <_printf_common+0xb0>
 8004d94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d98:	4641      	mov	r1, r8
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	47c8      	blx	r9
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d01e      	beq.n	8004de0 <_printf_common+0xa4>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	6922      	ldr	r2, [r4, #16]
 8004da6:	f003 0306 	and.w	r3, r3, #6
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	bf02      	ittt	eq
 8004dae:	68e5      	ldreq	r5, [r4, #12]
 8004db0:	6833      	ldreq	r3, [r6, #0]
 8004db2:	1aed      	subeq	r5, r5, r3
 8004db4:	68a3      	ldr	r3, [r4, #8]
 8004db6:	bf0c      	ite	eq
 8004db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dbc:	2500      	movne	r5, #0
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	bfc4      	itt	gt
 8004dc2:	1a9b      	subgt	r3, r3, r2
 8004dc4:	18ed      	addgt	r5, r5, r3
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	341a      	adds	r4, #26
 8004dca:	42b5      	cmp	r5, r6
 8004dcc:	d11a      	bne.n	8004e04 <_printf_common+0xc8>
 8004dce:	2000      	movs	r0, #0
 8004dd0:	e008      	b.n	8004de4 <_printf_common+0xa8>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	4638      	mov	r0, r7
 8004dda:	47c8      	blx	r9
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d103      	bne.n	8004de8 <_printf_common+0xac>
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de8:	3501      	adds	r5, #1
 8004dea:	e7c6      	b.n	8004d7a <_printf_common+0x3e>
 8004dec:	18e1      	adds	r1, r4, r3
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	2030      	movs	r0, #48	@ 0x30
 8004df2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004df6:	4422      	add	r2, r4
 8004df8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e00:	3302      	adds	r3, #2
 8004e02:	e7c7      	b.n	8004d94 <_printf_common+0x58>
 8004e04:	2301      	movs	r3, #1
 8004e06:	4622      	mov	r2, r4
 8004e08:	4641      	mov	r1, r8
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	47c8      	blx	r9
 8004e0e:	3001      	adds	r0, #1
 8004e10:	d0e6      	beq.n	8004de0 <_printf_common+0xa4>
 8004e12:	3601      	adds	r6, #1
 8004e14:	e7d9      	b.n	8004dca <_printf_common+0x8e>
	...

08004e18 <_printf_i>:
 8004e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	7e0f      	ldrb	r7, [r1, #24]
 8004e1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e20:	2f78      	cmp	r7, #120	@ 0x78
 8004e22:	4691      	mov	r9, r2
 8004e24:	4680      	mov	r8, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	469a      	mov	sl, r3
 8004e2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e2e:	d807      	bhi.n	8004e40 <_printf_i+0x28>
 8004e30:	2f62      	cmp	r7, #98	@ 0x62
 8004e32:	d80a      	bhi.n	8004e4a <_printf_i+0x32>
 8004e34:	2f00      	cmp	r7, #0
 8004e36:	f000 80d2 	beq.w	8004fde <_printf_i+0x1c6>
 8004e3a:	2f58      	cmp	r7, #88	@ 0x58
 8004e3c:	f000 80b9 	beq.w	8004fb2 <_printf_i+0x19a>
 8004e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e48:	e03a      	b.n	8004ec0 <_printf_i+0xa8>
 8004e4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e4e:	2b15      	cmp	r3, #21
 8004e50:	d8f6      	bhi.n	8004e40 <_printf_i+0x28>
 8004e52:	a101      	add	r1, pc, #4	@ (adr r1, 8004e58 <_printf_i+0x40>)
 8004e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e58:	08004eb1 	.word	0x08004eb1
 8004e5c:	08004ec5 	.word	0x08004ec5
 8004e60:	08004e41 	.word	0x08004e41
 8004e64:	08004e41 	.word	0x08004e41
 8004e68:	08004e41 	.word	0x08004e41
 8004e6c:	08004e41 	.word	0x08004e41
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004e41 	.word	0x08004e41
 8004e78:	08004e41 	.word	0x08004e41
 8004e7c:	08004e41 	.word	0x08004e41
 8004e80:	08004e41 	.word	0x08004e41
 8004e84:	08004fc5 	.word	0x08004fc5
 8004e88:	08004eef 	.word	0x08004eef
 8004e8c:	08004f7f 	.word	0x08004f7f
 8004e90:	08004e41 	.word	0x08004e41
 8004e94:	08004e41 	.word	0x08004e41
 8004e98:	08004fe7 	.word	0x08004fe7
 8004e9c:	08004e41 	.word	0x08004e41
 8004ea0:	08004eef 	.word	0x08004eef
 8004ea4:	08004e41 	.word	0x08004e41
 8004ea8:	08004e41 	.word	0x08004e41
 8004eac:	08004f87 	.word	0x08004f87
 8004eb0:	6833      	ldr	r3, [r6, #0]
 8004eb2:	1d1a      	adds	r2, r3, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6032      	str	r2, [r6, #0]
 8004eb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ebc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e09d      	b.n	8005000 <_printf_i+0x1e8>
 8004ec4:	6833      	ldr	r3, [r6, #0]
 8004ec6:	6820      	ldr	r0, [r4, #0]
 8004ec8:	1d19      	adds	r1, r3, #4
 8004eca:	6031      	str	r1, [r6, #0]
 8004ecc:	0606      	lsls	r6, r0, #24
 8004ece:	d501      	bpl.n	8004ed4 <_printf_i+0xbc>
 8004ed0:	681d      	ldr	r5, [r3, #0]
 8004ed2:	e003      	b.n	8004edc <_printf_i+0xc4>
 8004ed4:	0645      	lsls	r5, r0, #25
 8004ed6:	d5fb      	bpl.n	8004ed0 <_printf_i+0xb8>
 8004ed8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004edc:	2d00      	cmp	r5, #0
 8004ede:	da03      	bge.n	8004ee8 <_printf_i+0xd0>
 8004ee0:	232d      	movs	r3, #45	@ 0x2d
 8004ee2:	426d      	negs	r5, r5
 8004ee4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ee8:	4859      	ldr	r0, [pc, #356]	@ (8005050 <_printf_i+0x238>)
 8004eea:	230a      	movs	r3, #10
 8004eec:	e011      	b.n	8004f12 <_printf_i+0xfa>
 8004eee:	6821      	ldr	r1, [r4, #0]
 8004ef0:	6833      	ldr	r3, [r6, #0]
 8004ef2:	0608      	lsls	r0, r1, #24
 8004ef4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ef8:	d402      	bmi.n	8004f00 <_printf_i+0xe8>
 8004efa:	0649      	lsls	r1, r1, #25
 8004efc:	bf48      	it	mi
 8004efe:	b2ad      	uxthmi	r5, r5
 8004f00:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f02:	4853      	ldr	r0, [pc, #332]	@ (8005050 <_printf_i+0x238>)
 8004f04:	6033      	str	r3, [r6, #0]
 8004f06:	bf14      	ite	ne
 8004f08:	230a      	movne	r3, #10
 8004f0a:	2308      	moveq	r3, #8
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f12:	6866      	ldr	r6, [r4, #4]
 8004f14:	60a6      	str	r6, [r4, #8]
 8004f16:	2e00      	cmp	r6, #0
 8004f18:	bfa2      	ittt	ge
 8004f1a:	6821      	ldrge	r1, [r4, #0]
 8004f1c:	f021 0104 	bicge.w	r1, r1, #4
 8004f20:	6021      	strge	r1, [r4, #0]
 8004f22:	b90d      	cbnz	r5, 8004f28 <_printf_i+0x110>
 8004f24:	2e00      	cmp	r6, #0
 8004f26:	d04b      	beq.n	8004fc0 <_printf_i+0x1a8>
 8004f28:	4616      	mov	r6, r2
 8004f2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f2e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f32:	5dc7      	ldrb	r7, [r0, r7]
 8004f34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f38:	462f      	mov	r7, r5
 8004f3a:	42bb      	cmp	r3, r7
 8004f3c:	460d      	mov	r5, r1
 8004f3e:	d9f4      	bls.n	8004f2a <_printf_i+0x112>
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d10b      	bne.n	8004f5c <_printf_i+0x144>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	07df      	lsls	r7, r3, #31
 8004f48:	d508      	bpl.n	8004f5c <_printf_i+0x144>
 8004f4a:	6923      	ldr	r3, [r4, #16]
 8004f4c:	6861      	ldr	r1, [r4, #4]
 8004f4e:	4299      	cmp	r1, r3
 8004f50:	bfde      	ittt	le
 8004f52:	2330      	movle	r3, #48	@ 0x30
 8004f54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f58:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004f5c:	1b92      	subs	r2, r2, r6
 8004f5e:	6122      	str	r2, [r4, #16]
 8004f60:	f8cd a000 	str.w	sl, [sp]
 8004f64:	464b      	mov	r3, r9
 8004f66:	aa03      	add	r2, sp, #12
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	f7ff fee6 	bl	8004d3c <_printf_common>
 8004f70:	3001      	adds	r0, #1
 8004f72:	d14a      	bne.n	800500a <_printf_i+0x1f2>
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f78:	b004      	add	sp, #16
 8004f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	f043 0320 	orr.w	r3, r3, #32
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	4833      	ldr	r0, [pc, #204]	@ (8005054 <_printf_i+0x23c>)
 8004f88:	2778      	movs	r7, #120	@ 0x78
 8004f8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	6831      	ldr	r1, [r6, #0]
 8004f92:	061f      	lsls	r7, r3, #24
 8004f94:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f98:	d402      	bmi.n	8004fa0 <_printf_i+0x188>
 8004f9a:	065f      	lsls	r7, r3, #25
 8004f9c:	bf48      	it	mi
 8004f9e:	b2ad      	uxthmi	r5, r5
 8004fa0:	6031      	str	r1, [r6, #0]
 8004fa2:	07d9      	lsls	r1, r3, #31
 8004fa4:	bf44      	itt	mi
 8004fa6:	f043 0320 	orrmi.w	r3, r3, #32
 8004faa:	6023      	strmi	r3, [r4, #0]
 8004fac:	b11d      	cbz	r5, 8004fb6 <_printf_i+0x19e>
 8004fae:	2310      	movs	r3, #16
 8004fb0:	e7ac      	b.n	8004f0c <_printf_i+0xf4>
 8004fb2:	4827      	ldr	r0, [pc, #156]	@ (8005050 <_printf_i+0x238>)
 8004fb4:	e7e9      	b.n	8004f8a <_printf_i+0x172>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	f023 0320 	bic.w	r3, r3, #32
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	e7f6      	b.n	8004fae <_printf_i+0x196>
 8004fc0:	4616      	mov	r6, r2
 8004fc2:	e7bd      	b.n	8004f40 <_printf_i+0x128>
 8004fc4:	6833      	ldr	r3, [r6, #0]
 8004fc6:	6825      	ldr	r5, [r4, #0]
 8004fc8:	6961      	ldr	r1, [r4, #20]
 8004fca:	1d18      	adds	r0, r3, #4
 8004fcc:	6030      	str	r0, [r6, #0]
 8004fce:	062e      	lsls	r6, r5, #24
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	d501      	bpl.n	8004fd8 <_printf_i+0x1c0>
 8004fd4:	6019      	str	r1, [r3, #0]
 8004fd6:	e002      	b.n	8004fde <_printf_i+0x1c6>
 8004fd8:	0668      	lsls	r0, r5, #25
 8004fda:	d5fb      	bpl.n	8004fd4 <_printf_i+0x1bc>
 8004fdc:	8019      	strh	r1, [r3, #0]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	4616      	mov	r6, r2
 8004fe4:	e7bc      	b.n	8004f60 <_printf_i+0x148>
 8004fe6:	6833      	ldr	r3, [r6, #0]
 8004fe8:	1d1a      	adds	r2, r3, #4
 8004fea:	6032      	str	r2, [r6, #0]
 8004fec:	681e      	ldr	r6, [r3, #0]
 8004fee:	6862      	ldr	r2, [r4, #4]
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f7fb f91c 	bl	8000230 <memchr>
 8004ff8:	b108      	cbz	r0, 8004ffe <_printf_i+0x1e6>
 8004ffa:	1b80      	subs	r0, r0, r6
 8004ffc:	6060      	str	r0, [r4, #4]
 8004ffe:	6863      	ldr	r3, [r4, #4]
 8005000:	6123      	str	r3, [r4, #16]
 8005002:	2300      	movs	r3, #0
 8005004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005008:	e7aa      	b.n	8004f60 <_printf_i+0x148>
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	4632      	mov	r2, r6
 800500e:	4649      	mov	r1, r9
 8005010:	4640      	mov	r0, r8
 8005012:	47d0      	blx	sl
 8005014:	3001      	adds	r0, #1
 8005016:	d0ad      	beq.n	8004f74 <_printf_i+0x15c>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	079b      	lsls	r3, r3, #30
 800501c:	d413      	bmi.n	8005046 <_printf_i+0x22e>
 800501e:	68e0      	ldr	r0, [r4, #12]
 8005020:	9b03      	ldr	r3, [sp, #12]
 8005022:	4298      	cmp	r0, r3
 8005024:	bfb8      	it	lt
 8005026:	4618      	movlt	r0, r3
 8005028:	e7a6      	b.n	8004f78 <_printf_i+0x160>
 800502a:	2301      	movs	r3, #1
 800502c:	4632      	mov	r2, r6
 800502e:	4649      	mov	r1, r9
 8005030:	4640      	mov	r0, r8
 8005032:	47d0      	blx	sl
 8005034:	3001      	adds	r0, #1
 8005036:	d09d      	beq.n	8004f74 <_printf_i+0x15c>
 8005038:	3501      	adds	r5, #1
 800503a:	68e3      	ldr	r3, [r4, #12]
 800503c:	9903      	ldr	r1, [sp, #12]
 800503e:	1a5b      	subs	r3, r3, r1
 8005040:	42ab      	cmp	r3, r5
 8005042:	dcf2      	bgt.n	800502a <_printf_i+0x212>
 8005044:	e7eb      	b.n	800501e <_printf_i+0x206>
 8005046:	2500      	movs	r5, #0
 8005048:	f104 0619 	add.w	r6, r4, #25
 800504c:	e7f5      	b.n	800503a <_printf_i+0x222>
 800504e:	bf00      	nop
 8005050:	080054e1 	.word	0x080054e1
 8005054:	080054f2 	.word	0x080054f2

08005058 <__sflush_r>:
 8005058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800505c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005060:	0716      	lsls	r6, r2, #28
 8005062:	4605      	mov	r5, r0
 8005064:	460c      	mov	r4, r1
 8005066:	d454      	bmi.n	8005112 <__sflush_r+0xba>
 8005068:	684b      	ldr	r3, [r1, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	dc02      	bgt.n	8005074 <__sflush_r+0x1c>
 800506e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	dd48      	ble.n	8005106 <__sflush_r+0xae>
 8005074:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005076:	2e00      	cmp	r6, #0
 8005078:	d045      	beq.n	8005106 <__sflush_r+0xae>
 800507a:	2300      	movs	r3, #0
 800507c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005080:	682f      	ldr	r7, [r5, #0]
 8005082:	6a21      	ldr	r1, [r4, #32]
 8005084:	602b      	str	r3, [r5, #0]
 8005086:	d030      	beq.n	80050ea <__sflush_r+0x92>
 8005088:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	0759      	lsls	r1, r3, #29
 800508e:	d505      	bpl.n	800509c <__sflush_r+0x44>
 8005090:	6863      	ldr	r3, [r4, #4]
 8005092:	1ad2      	subs	r2, r2, r3
 8005094:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005096:	b10b      	cbz	r3, 800509c <__sflush_r+0x44>
 8005098:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	2300      	movs	r3, #0
 800509e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80050a0:	6a21      	ldr	r1, [r4, #32]
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b0      	blx	r6
 80050a6:	1c43      	adds	r3, r0, #1
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	d106      	bne.n	80050ba <__sflush_r+0x62>
 80050ac:	6829      	ldr	r1, [r5, #0]
 80050ae:	291d      	cmp	r1, #29
 80050b0:	d82b      	bhi.n	800510a <__sflush_r+0xb2>
 80050b2:	4a2a      	ldr	r2, [pc, #168]	@ (800515c <__sflush_r+0x104>)
 80050b4:	410a      	asrs	r2, r1
 80050b6:	07d6      	lsls	r6, r2, #31
 80050b8:	d427      	bmi.n	800510a <__sflush_r+0xb2>
 80050ba:	2200      	movs	r2, #0
 80050bc:	6062      	str	r2, [r4, #4]
 80050be:	04d9      	lsls	r1, r3, #19
 80050c0:	6922      	ldr	r2, [r4, #16]
 80050c2:	6022      	str	r2, [r4, #0]
 80050c4:	d504      	bpl.n	80050d0 <__sflush_r+0x78>
 80050c6:	1c42      	adds	r2, r0, #1
 80050c8:	d101      	bne.n	80050ce <__sflush_r+0x76>
 80050ca:	682b      	ldr	r3, [r5, #0]
 80050cc:	b903      	cbnz	r3, 80050d0 <__sflush_r+0x78>
 80050ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80050d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050d2:	602f      	str	r7, [r5, #0]
 80050d4:	b1b9      	cbz	r1, 8005106 <__sflush_r+0xae>
 80050d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050da:	4299      	cmp	r1, r3
 80050dc:	d002      	beq.n	80050e4 <__sflush_r+0x8c>
 80050de:	4628      	mov	r0, r5
 80050e0:	f7ff fbf2 	bl	80048c8 <_free_r>
 80050e4:	2300      	movs	r3, #0
 80050e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80050e8:	e00d      	b.n	8005106 <__sflush_r+0xae>
 80050ea:	2301      	movs	r3, #1
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b0      	blx	r6
 80050f0:	4602      	mov	r2, r0
 80050f2:	1c50      	adds	r0, r2, #1
 80050f4:	d1c9      	bne.n	800508a <__sflush_r+0x32>
 80050f6:	682b      	ldr	r3, [r5, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0c6      	beq.n	800508a <__sflush_r+0x32>
 80050fc:	2b1d      	cmp	r3, #29
 80050fe:	d001      	beq.n	8005104 <__sflush_r+0xac>
 8005100:	2b16      	cmp	r3, #22
 8005102:	d11e      	bne.n	8005142 <__sflush_r+0xea>
 8005104:	602f      	str	r7, [r5, #0]
 8005106:	2000      	movs	r0, #0
 8005108:	e022      	b.n	8005150 <__sflush_r+0xf8>
 800510a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800510e:	b21b      	sxth	r3, r3
 8005110:	e01b      	b.n	800514a <__sflush_r+0xf2>
 8005112:	690f      	ldr	r7, [r1, #16]
 8005114:	2f00      	cmp	r7, #0
 8005116:	d0f6      	beq.n	8005106 <__sflush_r+0xae>
 8005118:	0793      	lsls	r3, r2, #30
 800511a:	680e      	ldr	r6, [r1, #0]
 800511c:	bf08      	it	eq
 800511e:	694b      	ldreq	r3, [r1, #20]
 8005120:	600f      	str	r7, [r1, #0]
 8005122:	bf18      	it	ne
 8005124:	2300      	movne	r3, #0
 8005126:	eba6 0807 	sub.w	r8, r6, r7
 800512a:	608b      	str	r3, [r1, #8]
 800512c:	f1b8 0f00 	cmp.w	r8, #0
 8005130:	dde9      	ble.n	8005106 <__sflush_r+0xae>
 8005132:	6a21      	ldr	r1, [r4, #32]
 8005134:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005136:	4643      	mov	r3, r8
 8005138:	463a      	mov	r2, r7
 800513a:	4628      	mov	r0, r5
 800513c:	47b0      	blx	r6
 800513e:	2800      	cmp	r0, #0
 8005140:	dc08      	bgt.n	8005154 <__sflush_r+0xfc>
 8005142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005154:	4407      	add	r7, r0
 8005156:	eba8 0800 	sub.w	r8, r8, r0
 800515a:	e7e7      	b.n	800512c <__sflush_r+0xd4>
 800515c:	dfbffffe 	.word	0xdfbffffe

08005160 <_fflush_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	690b      	ldr	r3, [r1, #16]
 8005164:	4605      	mov	r5, r0
 8005166:	460c      	mov	r4, r1
 8005168:	b913      	cbnz	r3, 8005170 <_fflush_r+0x10>
 800516a:	2500      	movs	r5, #0
 800516c:	4628      	mov	r0, r5
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	b118      	cbz	r0, 800517a <_fflush_r+0x1a>
 8005172:	6a03      	ldr	r3, [r0, #32]
 8005174:	b90b      	cbnz	r3, 800517a <_fflush_r+0x1a>
 8005176:	f7ff fa9f 	bl	80046b8 <__sinit>
 800517a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f3      	beq.n	800516a <_fflush_r+0xa>
 8005182:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005184:	07d0      	lsls	r0, r2, #31
 8005186:	d404      	bmi.n	8005192 <_fflush_r+0x32>
 8005188:	0599      	lsls	r1, r3, #22
 800518a:	d402      	bmi.n	8005192 <_fflush_r+0x32>
 800518c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800518e:	f7ff fb98 	bl	80048c2 <__retarget_lock_acquire_recursive>
 8005192:	4628      	mov	r0, r5
 8005194:	4621      	mov	r1, r4
 8005196:	f7ff ff5f 	bl	8005058 <__sflush_r>
 800519a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800519c:	07da      	lsls	r2, r3, #31
 800519e:	4605      	mov	r5, r0
 80051a0:	d4e4      	bmi.n	800516c <_fflush_r+0xc>
 80051a2:	89a3      	ldrh	r3, [r4, #12]
 80051a4:	059b      	lsls	r3, r3, #22
 80051a6:	d4e1      	bmi.n	800516c <_fflush_r+0xc>
 80051a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051aa:	f7ff fb8b 	bl	80048c4 <__retarget_lock_release_recursive>
 80051ae:	e7dd      	b.n	800516c <_fflush_r+0xc>

080051b0 <__swbuf_r>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	460e      	mov	r6, r1
 80051b4:	4614      	mov	r4, r2
 80051b6:	4605      	mov	r5, r0
 80051b8:	b118      	cbz	r0, 80051c2 <__swbuf_r+0x12>
 80051ba:	6a03      	ldr	r3, [r0, #32]
 80051bc:	b90b      	cbnz	r3, 80051c2 <__swbuf_r+0x12>
 80051be:	f7ff fa7b 	bl	80046b8 <__sinit>
 80051c2:	69a3      	ldr	r3, [r4, #24]
 80051c4:	60a3      	str	r3, [r4, #8]
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	071a      	lsls	r2, r3, #28
 80051ca:	d501      	bpl.n	80051d0 <__swbuf_r+0x20>
 80051cc:	6923      	ldr	r3, [r4, #16]
 80051ce:	b943      	cbnz	r3, 80051e2 <__swbuf_r+0x32>
 80051d0:	4621      	mov	r1, r4
 80051d2:	4628      	mov	r0, r5
 80051d4:	f000 f82a 	bl	800522c <__swsetup_r>
 80051d8:	b118      	cbz	r0, 80051e2 <__swbuf_r+0x32>
 80051da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80051de:	4638      	mov	r0, r7
 80051e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	6922      	ldr	r2, [r4, #16]
 80051e6:	1a98      	subs	r0, r3, r2
 80051e8:	6963      	ldr	r3, [r4, #20]
 80051ea:	b2f6      	uxtb	r6, r6
 80051ec:	4283      	cmp	r3, r0
 80051ee:	4637      	mov	r7, r6
 80051f0:	dc05      	bgt.n	80051fe <__swbuf_r+0x4e>
 80051f2:	4621      	mov	r1, r4
 80051f4:	4628      	mov	r0, r5
 80051f6:	f7ff ffb3 	bl	8005160 <_fflush_r>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	d1ed      	bne.n	80051da <__swbuf_r+0x2a>
 80051fe:	68a3      	ldr	r3, [r4, #8]
 8005200:	3b01      	subs	r3, #1
 8005202:	60a3      	str	r3, [r4, #8]
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	6022      	str	r2, [r4, #0]
 800520a:	701e      	strb	r6, [r3, #0]
 800520c:	6962      	ldr	r2, [r4, #20]
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	429a      	cmp	r2, r3
 8005212:	d004      	beq.n	800521e <__swbuf_r+0x6e>
 8005214:	89a3      	ldrh	r3, [r4, #12]
 8005216:	07db      	lsls	r3, r3, #31
 8005218:	d5e1      	bpl.n	80051de <__swbuf_r+0x2e>
 800521a:	2e0a      	cmp	r6, #10
 800521c:	d1df      	bne.n	80051de <__swbuf_r+0x2e>
 800521e:	4621      	mov	r1, r4
 8005220:	4628      	mov	r0, r5
 8005222:	f7ff ff9d 	bl	8005160 <_fflush_r>
 8005226:	2800      	cmp	r0, #0
 8005228:	d0d9      	beq.n	80051de <__swbuf_r+0x2e>
 800522a:	e7d6      	b.n	80051da <__swbuf_r+0x2a>

0800522c <__swsetup_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4b29      	ldr	r3, [pc, #164]	@ (80052d4 <__swsetup_r+0xa8>)
 8005230:	4605      	mov	r5, r0
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	460c      	mov	r4, r1
 8005236:	b118      	cbz	r0, 8005240 <__swsetup_r+0x14>
 8005238:	6a03      	ldr	r3, [r0, #32]
 800523a:	b90b      	cbnz	r3, 8005240 <__swsetup_r+0x14>
 800523c:	f7ff fa3c 	bl	80046b8 <__sinit>
 8005240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005244:	0719      	lsls	r1, r3, #28
 8005246:	d422      	bmi.n	800528e <__swsetup_r+0x62>
 8005248:	06da      	lsls	r2, r3, #27
 800524a:	d407      	bmi.n	800525c <__swsetup_r+0x30>
 800524c:	2209      	movs	r2, #9
 800524e:	602a      	str	r2, [r5, #0]
 8005250:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005254:	81a3      	strh	r3, [r4, #12]
 8005256:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800525a:	e033      	b.n	80052c4 <__swsetup_r+0x98>
 800525c:	0758      	lsls	r0, r3, #29
 800525e:	d512      	bpl.n	8005286 <__swsetup_r+0x5a>
 8005260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005262:	b141      	cbz	r1, 8005276 <__swsetup_r+0x4a>
 8005264:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005268:	4299      	cmp	r1, r3
 800526a:	d002      	beq.n	8005272 <__swsetup_r+0x46>
 800526c:	4628      	mov	r0, r5
 800526e:	f7ff fb2b 	bl	80048c8 <_free_r>
 8005272:	2300      	movs	r3, #0
 8005274:	6363      	str	r3, [r4, #52]	@ 0x34
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800527c:	81a3      	strh	r3, [r4, #12]
 800527e:	2300      	movs	r3, #0
 8005280:	6063      	str	r3, [r4, #4]
 8005282:	6923      	ldr	r3, [r4, #16]
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	89a3      	ldrh	r3, [r4, #12]
 8005288:	f043 0308 	orr.w	r3, r3, #8
 800528c:	81a3      	strh	r3, [r4, #12]
 800528e:	6923      	ldr	r3, [r4, #16]
 8005290:	b94b      	cbnz	r3, 80052a6 <__swsetup_r+0x7a>
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800529c:	d003      	beq.n	80052a6 <__swsetup_r+0x7a>
 800529e:	4621      	mov	r1, r4
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 f84f 	bl	8005344 <__smakebuf_r>
 80052a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052aa:	f013 0201 	ands.w	r2, r3, #1
 80052ae:	d00a      	beq.n	80052c6 <__swsetup_r+0x9a>
 80052b0:	2200      	movs	r2, #0
 80052b2:	60a2      	str	r2, [r4, #8]
 80052b4:	6962      	ldr	r2, [r4, #20]
 80052b6:	4252      	negs	r2, r2
 80052b8:	61a2      	str	r2, [r4, #24]
 80052ba:	6922      	ldr	r2, [r4, #16]
 80052bc:	b942      	cbnz	r2, 80052d0 <__swsetup_r+0xa4>
 80052be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80052c2:	d1c5      	bne.n	8005250 <__swsetup_r+0x24>
 80052c4:	bd38      	pop	{r3, r4, r5, pc}
 80052c6:	0799      	lsls	r1, r3, #30
 80052c8:	bf58      	it	pl
 80052ca:	6962      	ldrpl	r2, [r4, #20]
 80052cc:	60a2      	str	r2, [r4, #8]
 80052ce:	e7f4      	b.n	80052ba <__swsetup_r+0x8e>
 80052d0:	2000      	movs	r0, #0
 80052d2:	e7f7      	b.n	80052c4 <__swsetup_r+0x98>
 80052d4:	2000001c 	.word	0x2000001c

080052d8 <_sbrk_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d06      	ldr	r5, [pc, #24]	@ (80052f4 <_sbrk_r+0x1c>)
 80052dc:	2300      	movs	r3, #0
 80052de:	4604      	mov	r4, r0
 80052e0:	4608      	mov	r0, r1
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	f7fc f942 	bl	800156c <_sbrk>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_sbrk_r+0x1a>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_sbrk_r+0x1a>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	200002f8 	.word	0x200002f8

080052f8 <__swhatbuf_r>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	460c      	mov	r4, r1
 80052fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005300:	2900      	cmp	r1, #0
 8005302:	b096      	sub	sp, #88	@ 0x58
 8005304:	4615      	mov	r5, r2
 8005306:	461e      	mov	r6, r3
 8005308:	da0d      	bge.n	8005326 <__swhatbuf_r+0x2e>
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005310:	f04f 0100 	mov.w	r1, #0
 8005314:	bf14      	ite	ne
 8005316:	2340      	movne	r3, #64	@ 0x40
 8005318:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800531c:	2000      	movs	r0, #0
 800531e:	6031      	str	r1, [r6, #0]
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	b016      	add	sp, #88	@ 0x58
 8005324:	bd70      	pop	{r4, r5, r6, pc}
 8005326:	466a      	mov	r2, sp
 8005328:	f000 f848 	bl	80053bc <_fstat_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	dbec      	blt.n	800530a <__swhatbuf_r+0x12>
 8005330:	9901      	ldr	r1, [sp, #4]
 8005332:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005336:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800533a:	4259      	negs	r1, r3
 800533c:	4159      	adcs	r1, r3
 800533e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005342:	e7eb      	b.n	800531c <__swhatbuf_r+0x24>

08005344 <__smakebuf_r>:
 8005344:	898b      	ldrh	r3, [r1, #12]
 8005346:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005348:	079d      	lsls	r5, r3, #30
 800534a:	4606      	mov	r6, r0
 800534c:	460c      	mov	r4, r1
 800534e:	d507      	bpl.n	8005360 <__smakebuf_r+0x1c>
 8005350:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	2301      	movs	r3, #1
 800535a:	6163      	str	r3, [r4, #20]
 800535c:	b003      	add	sp, #12
 800535e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005360:	ab01      	add	r3, sp, #4
 8005362:	466a      	mov	r2, sp
 8005364:	f7ff ffc8 	bl	80052f8 <__swhatbuf_r>
 8005368:	9f00      	ldr	r7, [sp, #0]
 800536a:	4605      	mov	r5, r0
 800536c:	4639      	mov	r1, r7
 800536e:	4630      	mov	r0, r6
 8005370:	f7ff fb16 	bl	80049a0 <_malloc_r>
 8005374:	b948      	cbnz	r0, 800538a <__smakebuf_r+0x46>
 8005376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800537a:	059a      	lsls	r2, r3, #22
 800537c:	d4ee      	bmi.n	800535c <__smakebuf_r+0x18>
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	f043 0302 	orr.w	r3, r3, #2
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	e7e2      	b.n	8005350 <__smakebuf_r+0xc>
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	6020      	str	r0, [r4, #0]
 800538e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005392:	81a3      	strh	r3, [r4, #12]
 8005394:	9b01      	ldr	r3, [sp, #4]
 8005396:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800539a:	b15b      	cbz	r3, 80053b4 <__smakebuf_r+0x70>
 800539c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053a0:	4630      	mov	r0, r6
 80053a2:	f000 f81d 	bl	80053e0 <_isatty_r>
 80053a6:	b128      	cbz	r0, 80053b4 <__smakebuf_r+0x70>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f023 0303 	bic.w	r3, r3, #3
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	431d      	orrs	r5, r3
 80053b8:	81a5      	strh	r5, [r4, #12]
 80053ba:	e7cf      	b.n	800535c <__smakebuf_r+0x18>

080053bc <_fstat_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4d07      	ldr	r5, [pc, #28]	@ (80053dc <_fstat_r+0x20>)
 80053c0:	2300      	movs	r3, #0
 80053c2:	4604      	mov	r4, r0
 80053c4:	4608      	mov	r0, r1
 80053c6:	4611      	mov	r1, r2
 80053c8:	602b      	str	r3, [r5, #0]
 80053ca:	f7fc f8a7 	bl	800151c <_fstat>
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	d102      	bne.n	80053d8 <_fstat_r+0x1c>
 80053d2:	682b      	ldr	r3, [r5, #0]
 80053d4:	b103      	cbz	r3, 80053d8 <_fstat_r+0x1c>
 80053d6:	6023      	str	r3, [r4, #0]
 80053d8:	bd38      	pop	{r3, r4, r5, pc}
 80053da:	bf00      	nop
 80053dc:	200002f8 	.word	0x200002f8

080053e0 <_isatty_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4d06      	ldr	r5, [pc, #24]	@ (80053fc <_isatty_r+0x1c>)
 80053e4:	2300      	movs	r3, #0
 80053e6:	4604      	mov	r4, r0
 80053e8:	4608      	mov	r0, r1
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	f7fc f8a6 	bl	800153c <_isatty>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_isatty_r+0x1a>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_isatty_r+0x1a>
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	200002f8 	.word	0x200002f8

08005400 <_init>:
 8005400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005402:	bf00      	nop
 8005404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005406:	bc08      	pop	{r3}
 8005408:	469e      	mov	lr, r3
 800540a:	4770      	bx	lr

0800540c <_fini>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr
