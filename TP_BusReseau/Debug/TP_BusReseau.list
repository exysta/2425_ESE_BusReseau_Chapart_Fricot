
TP_BusReseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007578  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08007748  08007748  00008748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007880  08007880  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  08007880  08007880  00008880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007888  08007888  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007888  08007888  00008888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800788c  0800788c  0000888c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007890  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004614  20000078  08007908  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000468c  08007908  0000968c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a63d  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004093  00000000  00000000  000236e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00027778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001200  00000000  00000000  00028ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026500  00000000  00000000  0002a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c276  00000000  00000000  000505a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0c1d  00000000  00000000  0006c816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014d433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069cc  00000000  00000000  0014d478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00153e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007730 	.word	0x08007730

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08007730 	.word	0x08007730

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005a4:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005a6:	4a17      	ldr	r2, [pc, #92]	@ (8000604 <MX_CAN1_Init+0x64>)
 80005a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005ac:	2210      	movs	r2, #16
 80005ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005b0:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b6:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005bc:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005dc:	2200      	movs	r2, #0
 80005de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_CAN1_Init+0x60>)
 80005ee:	f000 fd87 	bl	8001100 <HAL_CAN_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80005f8:	f000 fa96 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000094 	.word	0x20000094
 8000604:	40006400 	.word	0x40006400

08000608 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	@ 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a19      	ldr	r2, [pc, #100]	@ (800068c <HAL_CAN_MspInit+0x84>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d12c      	bne.n	8000684 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <HAL_CAN_MspInit+0x88>)
 8000630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000632:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <HAL_CAN_MspInit+0x88>)
 8000634:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000638:	6413      	str	r3, [r2, #64]	@ 0x40
 800063a:	4b15      	ldr	r3, [pc, #84]	@ (8000690 <HAL_CAN_MspInit+0x88>)
 800063c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800063e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <HAL_CAN_MspInit+0x88>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a10      	ldr	r2, [pc, #64]	@ (8000690 <HAL_CAN_MspInit+0x88>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <HAL_CAN_MspInit+0x88>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000662:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000674:	2309      	movs	r3, #9
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	4619      	mov	r1, r3
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <HAL_CAN_MspInit+0x8c>)
 8000680:	f000 ffae 	bl	80015e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000684:	bf00      	nop
 8000686:	3728      	adds	r7, #40	@ 0x28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40006400 	.word	0x40006400
 8000690:	40023800 	.word	0x40023800
 8000694:	40020000 	.word	0x40020000

08000698 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80006a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	4a06      	ldr	r2, [pc, #24]	@ (80006c8 <vApplicationGetIdleTaskMemory+0x30>)
 80006ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	200000c0 	.word	0x200000c0
 80006c8:	20000160 	.word	0x20000160

080006cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006d2:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_FREERTOS_Init+0x30>)
 80006d4:	1d3c      	adds	r4, r7, #4
 80006d6:	461d      	mov	r5, r3
 80006d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f004 fa94 	bl	8004c16 <osThreadCreate>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a03      	ldr	r2, [pc, #12]	@ (8000700 <MX_FREERTOS_Init+0x34>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bdb0      	pop	{r4, r5, r7, pc}
 80006fc:	08007754 	.word	0x08007754
 8000700:	200000bc 	.word	0x200000bc

08000704 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f004 face 	bl	8004cae <osDelay>
 8000712:	e7fb      	b.n	800070c <StartDefaultTask+0x8>

08000714 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b2d      	ldr	r3, [pc, #180]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a2c      	ldr	r2, [pc, #176]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b2a      	ldr	r3, [pc, #168]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a25      	ldr	r2, [pc, #148]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b23      	ldr	r3, [pc, #140]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a1e      	ldr	r2, [pc, #120]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a17      	ldr	r2, [pc, #92]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	4812      	ldr	r0, [pc, #72]	@ (80007e8 <MX_GPIO_Init+0xd4>)
 80007a0:	f001 f8b2 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	480c      	ldr	r0, [pc, #48]	@ (80007ec <MX_GPIO_Init+0xd8>)
 80007bc:	f000 ff10 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c0:	2320      	movs	r3, #32
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_GPIO_Init+0xd4>)
 80007d8:	f000 ff02 	bl	80015e0 <HAL_GPIO_Init>

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	@ 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40020800 	.word	0x40020800

080007f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_I2C1_Init+0x50>)
 80007f6:	4a13      	ldr	r2, [pc, #76]	@ (8000844 <MX_I2C1_Init+0x54>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007fa:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <MX_I2C1_Init+0x50>)
 80007fc:	4a12      	ldr	r2, [pc, #72]	@ (8000848 <MX_I2C1_Init+0x58>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <MX_I2C1_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_I2C1_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <MX_I2C1_Init+0x50>)
 800080e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000812:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000820:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	@ (8000840 <MX_I2C1_Init+0x50>)
 800082e:	f001 f885 	bl	800193c <HAL_I2C_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000838:	f000 f976 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000360 	.word	0x20000360
 8000844:	40005400 	.word	0x40005400
 8000848:	000186a0 	.word	0x000186a0

0800084c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a19      	ldr	r2, [pc, #100]	@ (80008d0 <HAL_I2C_MspInit+0x84>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d12c      	bne.n	80008c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <HAL_I2C_MspInit+0x88>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a17      	ldr	r2, [pc, #92]	@ (80008d4 <HAL_I2C_MspInit+0x88>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <HAL_I2C_MspInit+0x88>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800088a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000890:	2312      	movs	r3, #18
 8000892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800089c:	2304      	movs	r3, #4
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <HAL_I2C_MspInit+0x8c>)
 80008a8:	f000 fe9a 	bl	80015e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <HAL_I2C_MspInit+0x88>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	4a07      	ldr	r2, [pc, #28]	@ (80008d4 <HAL_I2C_MspInit+0x88>)
 80008b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <HAL_I2C_MspInit+0x88>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	@ 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40005400 	.word	0x40005400
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020400 	.word	0x40020400

080008dc <convertBufferToUint32>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t convertBufferToUint32(uint8_t buffer[3]) {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    return (uint32_t)buffer[0] << 16 | (uint32_t)buffer[1] << 8 | (uint32_t)buffer[2];
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	041a      	lsls	r2, r3, #16
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3301      	adds	r3, #1
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	4313      	orrs	r3, r2
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	3202      	adds	r2, #2
 80008f8:	7812      	ldrb	r2, [r2, #0]
 80008fa:	4313      	orrs	r3, r2
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <GET_T>:

int GET_T(h_shell_t * h_shell,int argc, char ** argv)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	@ 0x30
 800090c:	af02      	add	r7, sp, #8
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
	//récupération de la température
	uint8_t temp_start_addr = 0xFA; // l'adresse de départ du registre température
 8000914:	23fa      	movs	r3, #250	@ 0xfa
 8000916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t temp_value_buffer[3]; //chaque adresse sera stocké dans un byte puis on combinera les bytes
	uint8_t current_temp_addr = temp_start_addr;
 800091a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800091e:	75fb      	strb	r3, [r7, #23]
	uint8_t temp_value; //chaque adresse sera stocké dans un byte puis on combinera les bytes

	for(int i = 0; i <3;i++)
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
 8000924:	e023      	b.n	800096e <GET_T+0x66>
	{

		HAL_I2C_Master_Transmit(&hi2c1, bmp280_addr_shifted, &current_temp_addr, 1, 1000); // on demande à récup valeur de l'adresse courante
 8000926:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <GET_T+0x8c>)
 8000928:	8819      	ldrh	r1, [r3, #0]
 800092a:	f107 0217 	add.w	r2, r7, #23
 800092e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	4818      	ldr	r0, [pc, #96]	@ (8000998 <GET_T+0x90>)
 8000938:	f001 f944 	bl	8001bc4 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, bmp280_addr_shifted, &temp_value, 1, 1000); // on récupère la valeur de calibration de l'adresse courante
 800093c:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <GET_T+0x8c>)
 800093e:	8819      	ldrh	r1, [r3, #0]
 8000940:	f107 0216 	add.w	r2, r7, #22
 8000944:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2301      	movs	r3, #1
 800094c:	4812      	ldr	r0, [pc, #72]	@ (8000998 <GET_T+0x90>)
 800094e:	f001 fa37 	bl	8001dc0 <HAL_I2C_Master_Receive>
		temp_value_buffer[i] = temp_value; // on la range dans le buffer
 8000952:	7db9      	ldrb	r1, [r7, #22]
 8000954:	f107 0218 	add.w	r2, r7, #24
 8000958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800095a:	4413      	add	r3, r2
 800095c:	460a      	mov	r2, r1
 800095e:	701a      	strb	r2, [r3, #0]
		current_temp_addr++; // on incrémente l'adresse
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	3301      	adds	r3, #1
 8000964:	b2db      	uxtb	r3, r3
 8000966:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i <3;i++)
 8000968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800096a:	3301      	adds	r3, #1
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
 800096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000970:	2b02      	cmp	r3, #2
 8000972:	ddd8      	ble.n	8000926 <GET_T+0x1e>
	}
	uint32_t temp_value_32  =	convertBufferToUint32(temp_value_buffer);
 8000974:	f107 0318 	add.w	r3, r7, #24
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ffaf 	bl	80008dc <convertBufferToUint32>
 800097e:	61f8      	str	r0, [r7, #28]


	printf("température non compensée %d \r\n",temp_value_32);
 8000980:	69f9      	ldr	r1, [r7, #28]
 8000982:	4806      	ldr	r0, [pc, #24]	@ (800099c <GET_T+0x94>)
 8000984:	f005 fe26 	bl	80065d4 <iprintf>
	return 0;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3728      	adds	r7, #40	@ 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000000 	.word	0x20000000
 8000998:	20000360 	.word	0x20000360
 800099c:	08007770 	.word	0x08007770

080009a0 <task_shell>:
	return chr;
}


void task_shell(void * unused)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	shell_init(&h_shell);
 80009a8:	4807      	ldr	r0, [pc, #28]	@ (80009c8 <task_shell+0x28>)
 80009aa:	f005 fc05 	bl	80061b8 <shell_init>
	shell_add(&h_shell,'t', GET_T, "Une fonction qui lit la température youppii !!");
 80009ae:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <task_shell+0x2c>)
 80009b0:	4a07      	ldr	r2, [pc, #28]	@ (80009d0 <task_shell+0x30>)
 80009b2:	2174      	movs	r1, #116	@ 0x74
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <task_shell+0x28>)
 80009b6:	f005 fc29 	bl	800620c <shell_add>
	shell_run(&h_shell);
 80009ba:	4803      	ldr	r0, [pc, #12]	@ (80009c8 <task_shell+0x28>)
 80009bc:	f005 fcce 	bl	800635c <shell_run>
	// shell_run() infinie donc la task ne se finie jamais
	//rappel : une tache ne doit jamais retourner
	// si on arrete une tache, il faut appeler vTaskDelete(0);

}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200003b4 	.word	0x200003b4
 80009cc:	08007794 	.word	0x08007794
 80009d0:	08000909 	.word	0x08000909

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 fb4f 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f823 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f7ff fe97 	bl	8000714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e6:	f000 fa6f 	bl	8000ec8 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80009ea:	f7ff fdd9 	bl	80005a0 <MX_CAN1_Init>
  MX_I2C1_Init();
 80009ee:	f7ff feff 	bl	80007f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80009f2:	f000 fa3f 	bl	8000e74 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BaseType_t ret;
  ret = xTaskCreate(task_shell, "shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_shell_handle);
 80009f6:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <main+0x48>)
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	2301      	movs	r3, #1
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	2300      	movs	r3, #0
 8000a00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a04:	4906      	ldr	r1, [pc, #24]	@ (8000a20 <main+0x4c>)
 8000a06:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <main+0x50>)
 8000a08:	f004 fa79 	bl	8004efe <xTaskCreate>
 8000a0c:	6078      	str	r0, [r7, #4]

	//--------------------------------------------------------------------------------------
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000a0e:	f7ff fe5d 	bl	80006cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a12:	f004 f8f9 	bl	8004c08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000a16:	bf00      	nop
 8000a18:	e7fd      	b.n	8000a16 <main+0x42>
 8000a1a:	bf00      	nop
 8000a1c:	20000708 	.word	0x20000708
 8000a20:	080077c4 	.word	0x080077c4
 8000a24:	080009a1 	.word	0x080009a1

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	@ 0x50
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	2234      	movs	r2, #52	@ 0x34
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f005 fe55 	bl	80066e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <SystemClock_Config+0xd4>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a54:	4a29      	ldr	r2, [pc, #164]	@ (8000afc <SystemClock_Config+0xd4>)
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5c:	4b27      	ldr	r3, [pc, #156]	@ (8000afc <SystemClock_Config+0xd4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <SystemClock_Config+0xd8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a74:	4a22      	ldr	r2, [pc, #136]	@ (8000b00 <SystemClock_Config+0xd8>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <SystemClock_Config+0xd8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a90:	2310      	movs	r3, #16
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a94:	2302      	movs	r3, #2
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aa0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000aa4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fab6 	bl	8003028 <HAL_RCC_OscConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ac2:	f000 f831 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac6:	230f      	movs	r3, #15
 8000ac8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2302      	movs	r3, #2
 8000acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 ff24 	bl	8002930 <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000aee:	f000 f81b 	bl	8000b28 <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3750      	adds	r7, #80	@ 0x50
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40007000 	.word	0x40007000

08000b04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b16:	f000 fad3 	bl	80010c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40001000 	.word	0x40001000

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <HAL_MspInit+0x54>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a11      	ldr	r2, [pc, #68]	@ (8000b88 <HAL_MspInit+0x54>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <HAL_MspInit+0x54>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <HAL_MspInit+0x54>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <HAL_MspInit+0x54>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b66:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <HAL_MspInit+0x54>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	210f      	movs	r1, #15
 8000b76:	f06f 0001 	mvn.w	r0, #1
 8000b7a:	f000 fc75 	bl	8001468 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000b94:	1d39      	adds	r1, r7, #4
 8000b96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4803      	ldr	r0, [pc, #12]	@ (8000bac <__io_putchar+0x20>)
 8000b9e:	f002 ffd3 	bl	8003b48 <HAL_UART_Transmit>

  return ch;
 8000ba2:	687b      	ldr	r3, [r7, #4]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200007a0 	.word	0x200007a0

08000bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	@ 0x38
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b33      	ldr	r3, [pc, #204]	@ (8000c94 <HAL_InitTick+0xe4>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	4a32      	ldr	r2, [pc, #200]	@ (8000c94 <HAL_InitTick+0xe4>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd0:	4b30      	ldr	r3, [pc, #192]	@ (8000c94 <HAL_InitTick+0xe4>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bdc:	f107 0210 	add.w	r2, r7, #16
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 ffbc 	bl	8002b64 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d103      	bne.n	8000bfe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bf6:	f001 ff8d 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 8000bfa:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bfc:	e004      	b.n	8000c08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bfe:	f001 ff89 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 8000c02:	4603      	mov	r3, r0
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c0a:	4a23      	ldr	r2, [pc, #140]	@ (8000c98 <HAL_InitTick+0xe8>)
 8000c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c10:	0c9b      	lsrs	r3, r3, #18
 8000c12:	3b01      	subs	r3, #1
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c16:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <HAL_InitTick+0xec>)
 8000c18:	4a21      	ldr	r2, [pc, #132]	@ (8000ca0 <HAL_InitTick+0xf0>)
 8000c1a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <HAL_InitTick+0xec>)
 8000c1e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c22:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c24:	4a1d      	ldr	r2, [pc, #116]	@ (8000c9c <HAL_InitTick+0xec>)
 8000c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c28:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c9c <HAL_InitTick+0xec>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <HAL_InitTick+0xec>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <HAL_InitTick+0xec>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c3c:	4817      	ldr	r0, [pc, #92]	@ (8000c9c <HAL_InitTick+0xec>)
 8000c3e:	f002 fc91 	bl	8003564 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d11b      	bne.n	8000c88 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c50:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <HAL_InitTick+0xec>)
 8000c52:	f002 fce1 	bl	8003618 <HAL_TIM_Base_Start_IT>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d111      	bne.n	8000c88 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c64:	2036      	movs	r0, #54	@ 0x36
 8000c66:	f000 fc1b 	bl	80014a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d808      	bhi.n	8000c82 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	2036      	movs	r0, #54	@ 0x36
 8000c76:	f000 fbf7 	bl	8001468 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <HAL_InitTick+0xf4>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	e002      	b.n	8000c88 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3738      	adds	r7, #56	@ 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	431bde83 	.word	0x431bde83
 8000c9c:	2000070c 	.word	0x2000070c
 8000ca0:	40001000 	.word	0x40001000
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <NMI_Handler+0x4>

08000cb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <MemManage_Handler+0x4>

08000cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f003 f851 	bl	8003d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000758 	.word	0x20000758

08000cf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <TIM6_DAC_IRQHandler+0x10>)
 8000cfa:	f002 fcfd 	bl	80036f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000070c 	.word	0x2000070c

08000d08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e00a      	b.n	8000d30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d1a:	f3af 8000 	nop.w
 8000d1e:	4601      	mov	r1, r0
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	60ba      	str	r2, [r7, #8]
 8000d26:	b2ca      	uxtb	r2, r1
 8000d28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	dbf0      	blt.n	8000d1a <_read+0x12>
  }

  return len;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	60f8      	str	r0, [r7, #12]
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	e009      	b.n	8000d68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	60ba      	str	r2, [r7, #8]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff15 	bl	8000b8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697a      	ldr	r2, [r7, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dbf1      	blt.n	8000d54 <_write+0x12>
  }
  return len;
 8000d70:	687b      	ldr	r3, [r7, #4]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <_close>:

int _close(int file)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000da2:	605a      	str	r2, [r3, #4]
  return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_isatty>:

int _isatty(int file)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <_sbrk+0x5c>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <_sbrk+0x60>)
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <_sbrk+0x64>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <_sbrk+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e14:	f005 fd0c 	bl	8006830 <__errno>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e22:	e009      	b.n	8000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a05      	ldr	r2, [pc, #20]	@ (8000e48 <_sbrk+0x64>)
 8000e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20020000 	.word	0x20020000
 8000e44:	00000400 	.word	0x00000400
 8000e48:	20000754 	.word	0x20000754
 8000e4c:	20004690 	.word	0x20004690

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <MX_USART1_UART_Init+0x50>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_USART1_UART_Init+0x4c>)
 8000eac:	f002 fdfc 	bl	8003aa8 <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eb6:	f7ff fe37 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000758 	.word	0x20000758
 8000ec4:	40011000 	.word	0x40011000

08000ec8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <MX_USART2_UART_Init+0x50>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ed8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_USART2_UART_Init+0x4c>)
 8000f00:	f002 fdd2 	bl	8003aa8 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f0a:	f7ff fe0d 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200007a0 	.word	0x200007a0
 8000f18:	40004400 	.word	0x40004400

08000f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	@ 0x30
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a36      	ldr	r2, [pc, #216]	@ (8001014 <HAL_UART_MspInit+0xf8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d134      	bne.n	8000fa8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
 8000f42:	4b35      	ldr	r3, [pc, #212]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a34      	ldr	r2, [pc, #208]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b32      	ldr	r3, [pc, #200]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a2d      	ldr	r2, [pc, #180]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f76:	23c0      	movs	r3, #192	@ 0xc0
 8000f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f86:	2307      	movs	r3, #7
 8000f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4822      	ldr	r0, [pc, #136]	@ (800101c <HAL_UART_MspInit+0x100>)
 8000f92:	f000 fb25 	bl	80015e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2105      	movs	r1, #5
 8000f9a:	2025      	movs	r0, #37	@ 0x25
 8000f9c:	f000 fa64 	bl	8001468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fa0:	2025      	movs	r0, #37	@ 0x25
 8000fa2:	f000 fa7d 	bl	80014a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fa6:	e030      	b.n	800100a <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <HAL_UART_MspInit+0x104>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d12b      	bne.n	800100a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a17      	ldr	r2, [pc, #92]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_UART_MspInit+0xfc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fea:	230c      	movs	r3, #12
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4807      	ldr	r0, [pc, #28]	@ (8001024 <HAL_UART_MspInit+0x108>)
 8001006:	f000 faeb 	bl	80015e0 <HAL_GPIO_Init>
}
 800100a:	bf00      	nop
 800100c:	3730      	adds	r7, #48	@ 0x30
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40011000 	.word	0x40011000
 8001018:	40023800 	.word	0x40023800
 800101c:	40020400 	.word	0x40020400
 8001020:	40004400 	.word	0x40004400
 8001024:	40020000 	.word	0x40020000

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001060 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800102c:	f7ff ff10 	bl	8000e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	@ (8001064 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	@ (8001068 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	@ (8001074 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001056:	f005 fbf1 	bl	800683c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fcbb 	bl	80009d4 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800106c:	08007890 	.word	0x08007890
  ldr r2, =_sbss
 8001070:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001074:	2000468c 	.word	0x2000468c

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	@ (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f9d4 	bl	8001452 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	200f      	movs	r0, #15
 80010ac:	f7ff fd80 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fd40 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	200007e8 	.word	0x200007e8

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	200007e8 	.word	0x200007e8

08001100 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e0ed      	b.n	80012ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fa72 	bl	8000608 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001134:	f7ff ffd8 	bl	80010e8 <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800113a:	e012      	b.n	8001162 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800113c:	f7ff ffd4 	bl	80010e8 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b0a      	cmp	r3, #10
 8001148:	d90b      	bls.n	8001162 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2205      	movs	r2, #5
 800115a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0c5      	b.n	80012ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0e5      	beq.n	800113c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0202 	bic.w	r2, r2, #2
 800117e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001180:	f7ff ffb2 	bl	80010e8 <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001186:	e012      	b.n	80011ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001188:	f7ff ffae 	bl	80010e8 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b0a      	cmp	r3, #10
 8001194:	d90b      	bls.n	80011ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2205      	movs	r2, #5
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e09f      	b.n	80012ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1e5      	bne.n	8001188 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7e1b      	ldrb	r3, [r3, #24]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d108      	bne.n	80011d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	e007      	b.n	80011e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7e5b      	ldrb	r3, [r3, #25]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d108      	bne.n	8001200 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	e007      	b.n	8001210 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800120e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7e9b      	ldrb	r3, [r3, #26]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d108      	bne.n	800122a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0220 	orr.w	r2, r2, #32
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	e007      	b.n	800123a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0220 	bic.w	r2, r2, #32
 8001238:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7edb      	ldrb	r3, [r3, #27]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d108      	bne.n	8001254 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0210 	bic.w	r2, r2, #16
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e007      	b.n	8001264 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0210 	orr.w	r2, r2, #16
 8001262:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7f1b      	ldrb	r3, [r3, #28]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d108      	bne.n	800127e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0208 	orr.w	r2, r2, #8
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e007      	b.n	800128e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0208 	bic.w	r2, r2, #8
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7f5b      	ldrb	r3, [r3, #29]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d108      	bne.n	80012a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0204 	orr.w	r2, r2, #4
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e007      	b.n	80012b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0204 	bic.w	r2, r2, #4
 80012b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	ea42 0103 	orr.w	r1, r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	1e5a      	subs	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	@ (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	@ 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff4c 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800147a:	f7ff ff61 	bl	8001340 <__NVIC_GetPriorityGrouping>
 800147e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	6978      	ldr	r0, [r7, #20]
 8001486:	f7ff ffb1 	bl	80013ec <NVIC_EncodePriority>
 800148a:	4602      	mov	r2, r0
 800148c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff80 	bl	8001398 <__NVIC_SetPriority>
}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff54 	bl	800135c <__NVIC_EnableIRQ>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014ca:	f7ff fe0d 	bl	80010e8 <HAL_GetTick>
 80014ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d008      	beq.n	80014ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2280      	movs	r2, #128	@ 0x80
 80014e0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e052      	b.n	8001594 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 0216 	bic.w	r2, r2, #22
 80014fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800150c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	2b00      	cmp	r3, #0
 8001514:	d103      	bne.n	800151e <HAL_DMA_Abort+0x62>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800151a:	2b00      	cmp	r3, #0
 800151c:	d007      	beq.n	800152e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0208 	bic.w	r2, r2, #8
 800152c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0201 	bic.w	r2, r2, #1
 800153c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800153e:	e013      	b.n	8001568 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001540:	f7ff fdd2 	bl	80010e8 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b05      	cmp	r3, #5
 800154c:	d90c      	bls.n	8001568 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2220      	movs	r2, #32
 8001552:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2203      	movs	r2, #3
 8001558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e015      	b.n	8001594 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1e4      	bne.n	8001540 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800157a:	223f      	movs	r2, #63	@ 0x3f
 800157c:	409a      	lsls	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d004      	beq.n	80015ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2280      	movs	r2, #128	@ 0x80
 80015b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00c      	b.n	80015d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e165      	b.n	80018c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	429a      	cmp	r2, r3
 8001616:	f040 8154 	bne.w	80018c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b01      	cmp	r3, #1
 8001624:	d005      	beq.n	8001632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162e:	2b02      	cmp	r3, #2
 8001630:	d130      	bne.n	8001694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001668:	2201      	movs	r2, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	f003 0201 	and.w	r2, r3, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b03      	cmp	r3, #3
 800169e:	d017      	beq.n	80016d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d123      	bne.n	8001724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	08da      	lsrs	r2, r3, #3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3208      	adds	r2, #8
 80016e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0203 	and.w	r2, r3, #3
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80ae 	beq.w	80018c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	4b5d      	ldr	r3, [pc, #372]	@ (80018e0 <HAL_GPIO_Init+0x300>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	4a5c      	ldr	r2, [pc, #368]	@ (80018e0 <HAL_GPIO_Init+0x300>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001774:	6453      	str	r3, [r2, #68]	@ 0x44
 8001776:	4b5a      	ldr	r3, [pc, #360]	@ (80018e0 <HAL_GPIO_Init+0x300>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001782:	4a58      	ldr	r2, [pc, #352]	@ (80018e4 <HAL_GPIO_Init+0x304>)
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	3302      	adds	r3, #2
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	220f      	movs	r2, #15
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4f      	ldr	r2, [pc, #316]	@ (80018e8 <HAL_GPIO_Init+0x308>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x21a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4e      	ldr	r2, [pc, #312]	@ (80018ec <HAL_GPIO_Init+0x30c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x216>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4d      	ldr	r2, [pc, #308]	@ (80018f0 <HAL_GPIO_Init+0x310>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x212>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4c      	ldr	r2, [pc, #304]	@ (80018f4 <HAL_GPIO_Init+0x314>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x20e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4b      	ldr	r2, [pc, #300]	@ (80018f8 <HAL_GPIO_Init+0x318>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x20a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4a      	ldr	r2, [pc, #296]	@ (80018fc <HAL_GPIO_Init+0x31c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x206>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a49      	ldr	r2, [pc, #292]	@ (8001900 <HAL_GPIO_Init+0x320>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x202>
 80017de:	2306      	movs	r3, #6
 80017e0:	e00c      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017e2:	2307      	movs	r3, #7
 80017e4:	e00a      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017e6:	2305      	movs	r3, #5
 80017e8:	e008      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017ea:	2304      	movs	r3, #4
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017ee:	2303      	movs	r3, #3
 80017f0:	e004      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x21c>
 80017fa:	2300      	movs	r3, #0
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	f002 0203 	and.w	r2, r2, #3
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	4093      	lsls	r3, r2
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800180c:	4935      	ldr	r1, [pc, #212]	@ (80018e4 <HAL_GPIO_Init+0x304>)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800181a:	4b3a      	ldr	r3, [pc, #232]	@ (8001904 <HAL_GPIO_Init+0x324>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800183e:	4a31      	ldr	r2, [pc, #196]	@ (8001904 <HAL_GPIO_Init+0x324>)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001844:	4b2f      	ldr	r3, [pc, #188]	@ (8001904 <HAL_GPIO_Init+0x324>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001868:	4a26      	ldr	r2, [pc, #152]	@ (8001904 <HAL_GPIO_Init+0x324>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800186e:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <HAL_GPIO_Init+0x324>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001892:	4a1c      	ldr	r2, [pc, #112]	@ (8001904 <HAL_GPIO_Init+0x324>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001898:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <HAL_GPIO_Init+0x324>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018bc:	4a11      	ldr	r2, [pc, #68]	@ (8001904 <HAL_GPIO_Init+0x324>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3301      	adds	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	f67f ae96 	bls.w	80015fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3724      	adds	r7, #36	@ 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40013800 	.word	0x40013800
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020c00 	.word	0x40020c00
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40021400 	.word	0x40021400
 8001900:	40021800 	.word	0x40021800
 8001904:	40013c00 	.word	0x40013c00

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001924:	e003      	b.n	800192e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001926:	887b      	ldrh	r3, [r7, #2]
 8001928:	041a      	lsls	r2, r3, #16
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	619a      	str	r2, [r3, #24]
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e12b      	b.n	8001ba6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7fe ff72 	bl	800084c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2224      	movs	r2, #36	@ 0x24
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0201 	bic.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800198e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800199e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019a0:	f001 f8b8 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 80019a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4a81      	ldr	r2, [pc, #516]	@ (8001bb0 <HAL_I2C_Init+0x274>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d807      	bhi.n	80019c0 <HAL_I2C_Init+0x84>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4a80      	ldr	r2, [pc, #512]	@ (8001bb4 <HAL_I2C_Init+0x278>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	bf94      	ite	ls
 80019b8:	2301      	movls	r3, #1
 80019ba:	2300      	movhi	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	e006      	b.n	80019ce <HAL_I2C_Init+0x92>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a7d      	ldr	r2, [pc, #500]	@ (8001bb8 <HAL_I2C_Init+0x27c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	bf94      	ite	ls
 80019c8:	2301      	movls	r3, #1
 80019ca:	2300      	movhi	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0e7      	b.n	8001ba6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4a78      	ldr	r2, [pc, #480]	@ (8001bbc <HAL_I2C_Init+0x280>)
 80019da:	fba2 2303 	umull	r2, r3, r2, r3
 80019de:	0c9b      	lsrs	r3, r3, #18
 80019e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4a6a      	ldr	r2, [pc, #424]	@ (8001bb0 <HAL_I2C_Init+0x274>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d802      	bhi.n	8001a10 <HAL_I2C_Init+0xd4>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	e009      	b.n	8001a24 <HAL_I2C_Init+0xe8>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	4a69      	ldr	r2, [pc, #420]	@ (8001bc0 <HAL_I2C_Init+0x284>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	099b      	lsrs	r3, r3, #6
 8001a22:	3301      	adds	r3, #1
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	495c      	ldr	r1, [pc, #368]	@ (8001bb0 <HAL_I2C_Init+0x274>)
 8001a40:	428b      	cmp	r3, r1
 8001a42:	d819      	bhi.n	8001a78 <HAL_I2C_Init+0x13c>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1e59      	subs	r1, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a52:	1c59      	adds	r1, r3, #1
 8001a54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a58:	400b      	ands	r3, r1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00a      	beq.n	8001a74 <HAL_I2C_Init+0x138>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1e59      	subs	r1, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a72:	e051      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001a74:	2304      	movs	r3, #4
 8001a76:	e04f      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d111      	bne.n	8001aa4 <HAL_I2C_Init+0x168>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1e58      	subs	r0, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	440b      	add	r3, r1
 8001a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e012      	b.n	8001aca <HAL_I2C_Init+0x18e>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1e58      	subs	r0, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	0099      	lsls	r1, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_I2C_Init+0x196>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e022      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10e      	bne.n	8001af8 <HAL_I2C_Init+0x1bc>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1e58      	subs	r0, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	440b      	add	r3, r1
 8001ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001af6:	e00f      	b.n	8001b18 <HAL_I2C_Init+0x1dc>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	1e58      	subs	r0, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	440b      	add	r3, r1
 8001b06:	0099      	lsls	r1, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	6809      	ldr	r1, [r1, #0]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6911      	ldr	r1, [r2, #16]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68d2      	ldr	r2, [r2, #12]
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2220      	movs	r2, #32
 8001b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	000186a0 	.word	0x000186a0
 8001bb4:	001e847f 	.word	0x001e847f
 8001bb8:	003d08ff 	.word	0x003d08ff
 8001bbc:	431bde83 	.word	0x431bde83
 8001bc0:	10624dd3 	.word	0x10624dd3

08001bc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af02      	add	r7, sp, #8
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	817b      	strh	r3, [r7, #10]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff fa86 	bl	80010e8 <HAL_GetTick>
 8001bdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	f040 80e0 	bne.w	8001dac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2319      	movs	r3, #25
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4970      	ldr	r1, [pc, #448]	@ (8001db8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fc64 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c02:	2302      	movs	r3, #2
 8001c04:	e0d3      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_I2C_Master_Transmit+0x50>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e0cc      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d007      	beq.n	8001c3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2221      	movs	r2, #33	@ 0x21
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2210      	movs	r2, #16
 8001c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	893a      	ldrh	r2, [r7, #8]
 8001c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4a50      	ldr	r2, [pc, #320]	@ (8001dbc <HAL_I2C_Master_Transmit+0x1f8>)
 8001c7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c7c:	8979      	ldrh	r1, [r7, #10]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	6a3a      	ldr	r2, [r7, #32]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 face 	bl	8002224 <I2C_MasterRequestWrite>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e08d      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ca8:	e066      	b.n	8001d78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	6a39      	ldr	r1, [r7, #32]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fd22 	bl	80026f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d107      	bne.n	8001cd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06b      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d11b      	bne.n	8001d4c <HAL_I2C_Master_Transmit+0x188>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d017      	beq.n	8001d4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	6a39      	ldr	r1, [r7, #32]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 fd19 	bl	8002788 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00d      	beq.n	8001d78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d107      	bne.n	8001d74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e01a      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d194      	bne.n	8001caa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	e000      	b.n	8001dae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001dac:	2302      	movs	r3, #2
  }
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	00100002 	.word	0x00100002
 8001dbc:	ffff0000 	.word	0xffff0000

08001dc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	@ 0x30
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	460b      	mov	r3, r1
 8001dce:	817b      	strh	r3, [r7, #10]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff f988 	bl	80010e8 <HAL_GetTick>
 8001dd8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b20      	cmp	r3, #32
 8001de4:	f040 8217 	bne.w	8002216 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2319      	movs	r3, #25
 8001dee:	2201      	movs	r2, #1
 8001df0:	497c      	ldr	r1, [pc, #496]	@ (8001fe4 <HAL_I2C_Master_Receive+0x224>)
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 fb66 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e20a      	b.n	8002218 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_I2C_Master_Receive+0x50>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e203      	b.n	8002218 <HAL_I2C_Master_Receive+0x458>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d007      	beq.n	8001e36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2222      	movs	r2, #34	@ 0x22
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2210      	movs	r2, #16
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	893a      	ldrh	r2, [r7, #8]
 8001e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4a5c      	ldr	r2, [pc, #368]	@ (8001fe8 <HAL_I2C_Master_Receive+0x228>)
 8001e76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e78:	8979      	ldrh	r1, [r7, #10]
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 fa52 	bl	8002328 <I2C_MasterRequestRead>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e1c4      	b.n	8002218 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d113      	bne.n	8001ebe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e96:	2300      	movs	r3, #0
 8001e98:	623b      	str	r3, [r7, #32]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	623b      	str	r3, [r7, #32]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	623b      	str	r3, [r7, #32]
 8001eaa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e198      	b.n	80021f0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d11b      	bne.n	8001efe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ed4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e178      	b.n	80021f0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d11b      	bne.n	8001f3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	e158      	b.n	80021f0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001f4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f64:	e144      	b.n	80021f0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	f200 80f1 	bhi.w	8002152 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d123      	bne.n	8001fc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 fc4b 	bl	8002818 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e145      	b.n	8002218 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fbe:	e117      	b.n	80021f0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d14e      	bne.n	8002066 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4906      	ldr	r1, [pc, #24]	@ (8001fec <HAL_I2C_Master_Receive+0x22c>)
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fa76 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e11a      	b.n	8002218 <HAL_I2C_Master_Receive+0x458>
 8001fe2:	bf00      	nop
 8001fe4:	00100002 	.word	0x00100002
 8001fe8:	ffff0000 	.word	0xffff0000
 8001fec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	3b01      	subs	r3, #1
 800202c:	b29a      	uxth	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002064:	e0c4      	b.n	80021f0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800206c:	2200      	movs	r2, #0
 800206e:	496c      	ldr	r1, [pc, #432]	@ (8002220 <HAL_I2C_Master_Receive+0x460>)
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fa27 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0cb      	b.n	8002218 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800208e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c8:	2200      	movs	r2, #0
 80020ca:	4955      	ldr	r1, [pc, #340]	@ (8002220 <HAL_I2C_Master_Receive+0x460>)
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 f9f9 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e09d      	b.n	8002218 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002150:	e04e      	b.n	80021f0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002154:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fb5e 	bl	8002818 <I2C_WaitOnRXNEFlagUntilTimeout>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e058      	b.n	8002218 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002182:	3b01      	subs	r3, #1
 8002184:	b29a      	uxth	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d124      	bne.n	80021f0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d107      	bne.n	80021be <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021bc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f47f aeb6 	bne.w	8001f66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e000      	b.n	8002218 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002216:	2302      	movs	r3, #2
  }
}
 8002218:	4618      	mov	r0, r3
 800221a:	3728      	adds	r7, #40	@ 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	00010004 	.word	0x00010004

08002224 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	603b      	str	r3, [r7, #0]
 8002230:	460b      	mov	r3, r1
 8002232:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002238:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d006      	beq.n	800224e <I2C_MasterRequestWrite+0x2a>
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d003      	beq.n	800224e <I2C_MasterRequestWrite+0x2a>
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800224c:	d108      	bne.n	8002260 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e00b      	b.n	8002278 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	2b12      	cmp	r3, #18
 8002266:	d107      	bne.n	8002278 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002276:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f91d 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d00d      	beq.n	80022ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800229e:	d103      	bne.n	80022a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e035      	b.n	8002318 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022b4:	d108      	bne.n	80022c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022b6:	897b      	ldrh	r3, [r7, #10]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022c4:	611a      	str	r2, [r3, #16]
 80022c6:	e01b      	b.n	8002300 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022c8:	897b      	ldrh	r3, [r7, #10]
 80022ca:	11db      	asrs	r3, r3, #7
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f003 0306 	and.w	r3, r3, #6
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f063 030f 	orn	r3, r3, #15
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	490e      	ldr	r1, [pc, #56]	@ (8002320 <I2C_MasterRequestWrite+0xfc>)
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f966 	bl	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e010      	b.n	8002318 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022f6:	897b      	ldrh	r3, [r7, #10]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4907      	ldr	r1, [pc, #28]	@ (8002324 <I2C_MasterRequestWrite+0x100>)
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f956 	bl	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	00010008 	.word	0x00010008
 8002324:	00010002 	.word	0x00010002

08002328 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	460b      	mov	r3, r1
 8002336:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800234c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b08      	cmp	r3, #8
 8002352:	d006      	beq.n	8002362 <I2C_MasterRequestRead+0x3a>
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d003      	beq.n	8002362 <I2C_MasterRequestRead+0x3a>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002360:	d108      	bne.n	8002374 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e00b      	b.n	800238c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002378:	2b11      	cmp	r3, #17
 800237a:	d107      	bne.n	800238c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800238a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f893 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00d      	beq.n	80023c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023b2:	d103      	bne.n	80023bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e079      	b.n	80024b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023c8:	d108      	bne.n	80023dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023ca:	897b      	ldrh	r3, [r7, #10]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	611a      	str	r2, [r3, #16]
 80023da:	e05f      	b.n	800249c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023dc:	897b      	ldrh	r3, [r7, #10]
 80023de:	11db      	asrs	r3, r3, #7
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f003 0306 	and.w	r3, r3, #6
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	f063 030f 	orn	r3, r3, #15
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4930      	ldr	r1, [pc, #192]	@ (80024bc <I2C_MasterRequestRead+0x194>)
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f8dc 	bl	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e054      	b.n	80024b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800240a:	897b      	ldrh	r3, [r7, #10]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4929      	ldr	r1, [pc, #164]	@ (80024c0 <I2C_MasterRequestRead+0x198>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f8cc 	bl	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e044      	b.n	80024b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800244e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f831 	bl	80024c4 <I2C_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002476:	d103      	bne.n	8002480 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800247e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e017      	b.n	80024b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002484:	897b      	ldrh	r3, [r7, #10]
 8002486:	11db      	asrs	r3, r3, #7
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 0306 	and.w	r3, r3, #6
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f063 030e 	orn	r3, r3, #14
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4907      	ldr	r1, [pc, #28]	@ (80024c0 <I2C_MasterRequestRead+0x198>)
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f888 	bl	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	00010008 	.word	0x00010008
 80024c0:	00010002 	.word	0x00010002

080024c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d4:	e048      	b.n	8002568 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024dc:	d044      	beq.n	8002568 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024de:	f7fe fe03 	bl	80010e8 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d302      	bcc.n	80024f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d139      	bne.n	8002568 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	0c1b      	lsrs	r3, r3, #16
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d10d      	bne.n	800251a <I2C_WaitOnFlagUntilTimeout+0x56>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	43da      	mvns	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	4013      	ands	r3, r2
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	bf0c      	ite	eq
 8002510:	2301      	moveq	r3, #1
 8002512:	2300      	movne	r3, #0
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	e00c      	b.n	8002534 <I2C_WaitOnFlagUntilTimeout+0x70>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	43da      	mvns	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	4013      	ands	r3, r2
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	429a      	cmp	r2, r3
 8002538:	d116      	bne.n	8002568 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e023      	b.n	80025b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	0c1b      	lsrs	r3, r3, #16
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d10d      	bne.n	800258e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	43da      	mvns	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	4013      	ands	r3, r2
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	e00c      	b.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	43da      	mvns	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4013      	ands	r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d093      	beq.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025c6:	e071      	b.n	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d6:	d123      	bne.n	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	f043 0204 	orr.w	r2, r3, #4
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e067      	b.n	80026f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002626:	d041      	beq.n	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002628:	f7fe fd5e 	bl	80010e8 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	d302      	bcc.n	800263e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d136      	bne.n	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0c1b      	lsrs	r3, r3, #16
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d10c      	bne.n	8002662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	43da      	mvns	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4013      	ands	r3, r2
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e00b      	b.n	800267a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	43da      	mvns	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4013      	ands	r3, r2
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f043 0220 	orr.w	r2, r3, #32
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e021      	b.n	80026f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	0c1b      	lsrs	r3, r3, #16
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10c      	bne.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	43da      	mvns	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4013      	ands	r3, r2
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	e00b      	b.n	80026e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4013      	ands	r3, r2
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf14      	ite	ne
 80026e2:	2301      	movne	r3, #1
 80026e4:	2300      	moveq	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f47f af6d 	bne.w	80025c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002704:	e034      	b.n	8002770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 f8e3 	bl	80028d2 <I2C_IsAcknowledgeFailed>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e034      	b.n	8002780 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800271c:	d028      	beq.n	8002770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271e:	f7fe fce3 	bl	80010e8 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	d302      	bcc.n	8002734 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d11d      	bne.n	8002770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273e:	2b80      	cmp	r3, #128	@ 0x80
 8002740:	d016      	beq.n	8002770 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e007      	b.n	8002780 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800277a:	2b80      	cmp	r3, #128	@ 0x80
 800277c:	d1c3      	bne.n	8002706 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002794:	e034      	b.n	8002800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f89b 	bl	80028d2 <I2C_IsAcknowledgeFailed>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e034      	b.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027ac:	d028      	beq.n	8002800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ae:	f7fe fc9b 	bl	80010e8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d302      	bcc.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11d      	bne.n	8002800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d016      	beq.n	8002800 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e007      	b.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b04      	cmp	r3, #4
 800280c:	d1c3      	bne.n	8002796 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002824:	e049      	b.n	80028ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b10      	cmp	r3, #16
 8002832:	d119      	bne.n	8002868 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0210 	mvn.w	r2, #16
 800283c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e030      	b.n	80028ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002868:	f7fe fc3e 	bl	80010e8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	429a      	cmp	r2, r3
 8002876:	d302      	bcc.n	800287e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11d      	bne.n	80028ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002888:	2b40      	cmp	r3, #64	@ 0x40
 800288a:	d016      	beq.n	80028ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	f043 0220 	orr.w	r2, r3, #32
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e007      	b.n	80028ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028c4:	2b40      	cmp	r3, #64	@ 0x40
 80028c6:	d1ae      	bne.n	8002826 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028e8:	d11b      	bne.n	8002922 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f043 0204 	orr.w	r2, r3, #4
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0cc      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	4b68      	ldr	r3, [pc, #416]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d90c      	bls.n	800296c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b65      	ldr	r3, [pc, #404]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a58      	ldr	r2, [pc, #352]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800298e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a52      	ldr	r2, [pc, #328]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d044      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ee:	4b3f      	ldr	r3, [pc, #252]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	4b3b      	ldr	r3, [pc, #236]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e067      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0e:	4b37      	ldr	r3, [pc, #220]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4934      	ldr	r1, [pc, #208]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a20:	f7fe fb62 	bl	80010e8 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f7fe fb5e 	bl	80010e8 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e04f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 020c 	and.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1eb      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a50:	4b25      	ldr	r3, [pc, #148]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d20c      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f887 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490a      	ldr	r1, [pc, #40]	@ (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	@ (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe f86a 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08007834 	.word	0x08007834
 8002af4:	20000004 	.word	0x20000004
 8002af8:	20000008 	.word	0x20000008

08002afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b00:	4b03      	ldr	r3, [pc, #12]	@ (8002b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000004 	.word	0x20000004

08002b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b18:	f7ff fff0 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	0a9b      	lsrs	r3, r3, #10
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	4903      	ldr	r1, [pc, #12]	@ (8002b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b2a:	5ccb      	ldrb	r3, [r1, r3]
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40023800 	.word	0x40023800
 8002b38:	08007844 	.word	0x08007844

08002b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b40:	f7ff ffdc 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0b5b      	lsrs	r3, r3, #13
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4903      	ldr	r1, [pc, #12]	@ (8002b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	08007844 	.word	0x08007844

08002b64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	220f      	movs	r2, #15
 8002b72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b74:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0203 	and.w	r2, r3, #3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b80:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ba6:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <HAL_RCC_GetClockConfig+0x60>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 020f 	and.w	r2, r3, #15
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40023c00 	.word	0x40023c00

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bcc:	b0ae      	sub	sp, #184	@ 0xb8
 8002bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bee:	4bcb      	ldr	r3, [pc, #812]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	f200 8206 	bhi.w	8003008 <HAL_RCC_GetSysClockFreq+0x440>
 8002bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002c04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c39 	.word	0x08002c39
 8002c08:	08003009 	.word	0x08003009
 8002c0c:	08003009 	.word	0x08003009
 8002c10:	08003009 	.word	0x08003009
 8002c14:	08002c41 	.word	0x08002c41
 8002c18:	08003009 	.word	0x08003009
 8002c1c:	08003009 	.word	0x08003009
 8002c20:	08003009 	.word	0x08003009
 8002c24:	08002c49 	.word	0x08002c49
 8002c28:	08003009 	.word	0x08003009
 8002c2c:	08003009 	.word	0x08003009
 8002c30:	08003009 	.word	0x08003009
 8002c34:	08002e39 	.word	0x08002e39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4bb9      	ldr	r3, [pc, #740]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c3e:	e1e7      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c40:	4bb8      	ldr	r3, [pc, #736]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c46:	e1e3      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c48:	4bb4      	ldr	r3, [pc, #720]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c54:	4bb1      	ldr	r3, [pc, #708]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d071      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c60:	4bae      	ldr	r3, [pc, #696]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c86:	4622      	mov	r2, r4
 8002c88:	462b      	mov	r3, r5
 8002c8a:	f04f 0000 	mov.w	r0, #0
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	0159      	lsls	r1, r3, #5
 8002c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c98:	0150      	lsls	r0, r2, #5
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	1a51      	subs	r1, r2, r1
 8002ca2:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8002caa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002cb8:	4649      	mov	r1, r9
 8002cba:	018b      	lsls	r3, r1, #6
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	018a      	lsls	r2, r1, #6
 8002cc6:	4641      	mov	r1, r8
 8002cc8:	1a51      	subs	r1, r2, r1
 8002cca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ccc:	4649      	mov	r1, r9
 8002cce:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	00cb      	lsls	r3, r1, #3
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cea:	4641      	mov	r1, r8
 8002cec:	00ca      	lsls	r2, r1, #3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	189b      	adds	r3, r3, r2
 8002cf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cfa:	462b      	mov	r3, r5
 8002cfc:	460a      	mov	r2, r1
 8002cfe:	eb42 0303 	adc.w	r3, r2, r3
 8002d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d10:	4629      	mov	r1, r5
 8002d12:	024b      	lsls	r3, r1, #9
 8002d14:	4621      	mov	r1, r4
 8002d16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	024a      	lsls	r2, r1, #9
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002d34:	f7fd fabc 	bl	80002b0 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d42:	e067      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d44:	4b75      	ldr	r3, [pc, #468]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	099b      	lsrs	r3, r3, #6
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d50:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d5e:	2300      	movs	r3, #0
 8002d60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002d66:	4622      	mov	r2, r4
 8002d68:	462b      	mov	r3, r5
 8002d6a:	f04f 0000 	mov.w	r0, #0
 8002d6e:	f04f 0100 	mov.w	r1, #0
 8002d72:	0159      	lsls	r1, r3, #5
 8002d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d78:	0150      	lsls	r0, r2, #5
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4621      	mov	r1, r4
 8002d80:	1a51      	subs	r1, r2, r1
 8002d82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002d84:	4629      	mov	r1, r5
 8002d86:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d98:	4649      	mov	r1, r9
 8002d9a:	018b      	lsls	r3, r1, #6
 8002d9c:	4641      	mov	r1, r8
 8002d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002da2:	4641      	mov	r1, r8
 8002da4:	018a      	lsls	r2, r1, #6
 8002da6:	4641      	mov	r1, r8
 8002da8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dac:	4649      	mov	r1, r9
 8002dae:	eb63 0b01 	sbc.w	fp, r3, r1
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	469b      	mov	fp, r3
 8002dca:	4623      	mov	r3, r4
 8002dcc:	eb1a 0303 	adds.w	r3, sl, r3
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	462b      	mov	r3, r5
 8002dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002de6:	4629      	mov	r1, r5
 8002de8:	028b      	lsls	r3, r1, #10
 8002dea:	4621      	mov	r1, r4
 8002dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002df0:	4621      	mov	r1, r4
 8002df2:	028a      	lsls	r2, r1, #10
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e00:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002e06:	f7fd fa53 	bl	80002b0 <__aeabi_uldivmod>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4613      	mov	r3, r2
 8002e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e14:	4b41      	ldr	r3, [pc, #260]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e36:	e0eb      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e38:	4b38      	ldr	r3, [pc, #224]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e44:	4b35      	ldr	r3, [pc, #212]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d06b      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e50:	4b32      	ldr	r3, [pc, #200]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	2200      	movs	r2, #0
 8002e58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e62:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e64:	2300      	movs	r3, #0
 8002e66:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002e6c:	4622      	mov	r2, r4
 8002e6e:	462b      	mov	r3, r5
 8002e70:	f04f 0000 	mov.w	r0, #0
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	0159      	lsls	r1, r3, #5
 8002e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e7e:	0150      	lsls	r0, r2, #5
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4621      	mov	r1, r4
 8002e86:	1a51      	subs	r1, r2, r1
 8002e88:	61b9      	str	r1, [r7, #24]
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e9e:	4659      	mov	r1, fp
 8002ea0:	018b      	lsls	r3, r1, #6
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ea8:	4651      	mov	r1, sl
 8002eaa:	018a      	lsls	r2, r1, #6
 8002eac:	4651      	mov	r1, sl
 8002eae:	ebb2 0801 	subs.w	r8, r2, r1
 8002eb2:	4659      	mov	r1, fp
 8002eb4:	eb63 0901 	sbc.w	r9, r3, r1
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ec4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ec8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ecc:	4690      	mov	r8, r2
 8002ece:	4699      	mov	r9, r3
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	eb18 0303 	adds.w	r3, r8, r3
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	462b      	mov	r3, r5
 8002eda:	eb49 0303 	adc.w	r3, r9, r3
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002eec:	4629      	mov	r1, r5
 8002eee:	024b      	lsls	r3, r1, #9
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	024a      	lsls	r2, r1, #9
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f02:	2200      	movs	r2, #0
 8002f04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f06:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f0c:	f7fd f9d0 	bl	80002b0 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f1a:	e065      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x420>
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	00f42400 	.word	0x00f42400
 8002f24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f28:	4b3d      	ldr	r3, [pc, #244]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	4611      	mov	r1, r2
 8002f34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f38:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002f42:	4642      	mov	r2, r8
 8002f44:	464b      	mov	r3, r9
 8002f46:	f04f 0000 	mov.w	r0, #0
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	0159      	lsls	r1, r3, #5
 8002f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f54:	0150      	lsls	r0, r2, #5
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4641      	mov	r1, r8
 8002f5c:	1a51      	subs	r1, r2, r1
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	4649      	mov	r1, r9
 8002f62:	eb63 0301 	sbc.w	r3, r3, r1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f74:	4659      	mov	r1, fp
 8002f76:	018b      	lsls	r3, r1, #6
 8002f78:	4651      	mov	r1, sl
 8002f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f7e:	4651      	mov	r1, sl
 8002f80:	018a      	lsls	r2, r1, #6
 8002f82:	4651      	mov	r1, sl
 8002f84:	1a54      	subs	r4, r2, r1
 8002f86:	4659      	mov	r1, fp
 8002f88:	eb63 0501 	sbc.w	r5, r3, r1
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	00eb      	lsls	r3, r5, #3
 8002f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f9a:	00e2      	lsls	r2, r4, #3
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	461d      	mov	r5, r3
 8002fa0:	4643      	mov	r3, r8
 8002fa2:	18e3      	adds	r3, r4, r3
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	eb45 0303 	adc.w	r3, r5, r3
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fba:	4629      	mov	r1, r5
 8002fbc:	028b      	lsls	r3, r1, #10
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	028a      	lsls	r2, r1, #10
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fd4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002fd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fda:	f7fd f969 	bl	80002b0 <__aeabi_uldivmod>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	0f1b      	lsrs	r3, r3, #28
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002ff6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003006:	e003      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4b06      	ldr	r3, [pc, #24]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x45c>)
 800300a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800300e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003010:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003014:	4618      	mov	r0, r3
 8003016:	37b8      	adds	r7, #184	@ 0xb8
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400

08003028 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e28d      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8083 	beq.w	800314e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003048:	4b94      	ldr	r3, [pc, #592]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b04      	cmp	r3, #4
 8003052:	d019      	beq.n	8003088 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003054:	4b91      	ldr	r3, [pc, #580]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030c 	and.w	r3, r3, #12
        || \
 800305c:	2b08      	cmp	r3, #8
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003060:	4b8e      	ldr	r3, [pc, #568]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003068:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800306c:	d00c      	beq.n	8003088 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306e:	4b8b      	ldr	r3, [pc, #556]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d112      	bne.n	80030a0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307a:	4b88      	ldr	r3, [pc, #544]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003082:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003086:	d10b      	bne.n	80030a0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	4b84      	ldr	r3, [pc, #528]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d05b      	beq.n	800314c <HAL_RCC_OscConfig+0x124>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d157      	bne.n	800314c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e25a      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a8:	d106      	bne.n	80030b8 <HAL_RCC_OscConfig+0x90>
 80030aa:	4b7c      	ldr	r3, [pc, #496]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a7b      	ldr	r2, [pc, #492]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e01d      	b.n	80030f4 <HAL_RCC_OscConfig+0xcc>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0xb4>
 80030c2:	4b76      	ldr	r3, [pc, #472]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a75      	ldr	r2, [pc, #468]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b73      	ldr	r3, [pc, #460]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a72      	ldr	r2, [pc, #456]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0xcc>
 80030dc:	4b6f      	ldr	r3, [pc, #444]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a6e      	ldr	r2, [pc, #440]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b6c      	ldr	r3, [pc, #432]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6b      	ldr	r2, [pc, #428]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80030ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fd fff4 	bl	80010e8 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003104:	f7fd fff0 	bl	80010e8 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	@ 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e21f      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b61      	ldr	r3, [pc, #388]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0xdc>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fd ffe0 	bl	80010e8 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800312c:	f7fd ffdc 	bl	80010e8 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	@ 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e20b      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	4b57      	ldr	r3, [pc, #348]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x104>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d06f      	beq.n	800323a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800315a:	4b50      	ldr	r3, [pc, #320]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b00      	cmp	r3, #0
 8003164:	d017      	beq.n	8003196 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003166:	4b4d      	ldr	r3, [pc, #308]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
        || \
 800316e:	2b08      	cmp	r3, #8
 8003170:	d105      	bne.n	800317e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003172:	4b4a      	ldr	r3, [pc, #296]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b47      	ldr	r3, [pc, #284]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d11c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b44      	ldr	r3, [pc, #272]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	4b41      	ldr	r3, [pc, #260]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x186>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e1d3      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b3b      	ldr	r3, [pc, #236]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4937      	ldr	r1, [pc, #220]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	e03a      	b.n	800323a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031cc:	4b34      	ldr	r3, [pc, #208]	@ (80032a0 <HAL_RCC_OscConfig+0x278>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fd ff89 	bl	80010e8 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031da:	f7fd ff85 	bl	80010e8 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e1b4      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ec:	4b2b      	ldr	r3, [pc, #172]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f8:	4b28      	ldr	r3, [pc, #160]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4925      	ldr	r1, [pc, #148]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	e015      	b.n	800323a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320e:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <HAL_RCC_OscConfig+0x278>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fd ff68 	bl	80010e8 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321c:	f7fd ff64 	bl	80010e8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e193      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d036      	beq.n	80032b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324e:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <HAL_RCC_OscConfig+0x27c>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fd ff48 	bl	80010e8 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fd ff44 	bl	80010e8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e173      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <HAL_RCC_OscConfig+0x274>)
 8003270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x234>
 800327a:	e01b      	b.n	80032b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327c:	4b09      	ldr	r3, [pc, #36]	@ (80032a4 <HAL_RCC_OscConfig+0x27c>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fd ff31 	bl	80010e8 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	e00e      	b.n	80032a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328a:	f7fd ff2d 	bl	80010e8 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d907      	bls.n	80032a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e15c      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
 800329c:	40023800 	.word	0x40023800
 80032a0:	42470000 	.word	0x42470000
 80032a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	4b8a      	ldr	r3, [pc, #552]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80032aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ea      	bne.n	800328a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8097 	beq.w	80033f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c6:	4b83      	ldr	r3, [pc, #524]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10f      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	4b7f      	ldr	r3, [pc, #508]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	4a7e      	ldr	r2, [pc, #504]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e2:	4b7c      	ldr	r3, [pc, #496]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b79      	ldr	r3, [pc, #484]	@ (80034d8 <HAL_RCC_OscConfig+0x4b0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fe:	4b76      	ldr	r3, [pc, #472]	@ (80034d8 <HAL_RCC_OscConfig+0x4b0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a75      	ldr	r2, [pc, #468]	@ (80034d8 <HAL_RCC_OscConfig+0x4b0>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fd feed 	bl	80010e8 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7fd fee9 	bl	80010e8 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e118      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	4b6c      	ldr	r3, [pc, #432]	@ (80034d8 <HAL_RCC_OscConfig+0x4b0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x31e>
 8003338:	4b66      	ldr	r3, [pc, #408]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333c:	4a65      	ldr	r2, [pc, #404]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6713      	str	r3, [r2, #112]	@ 0x70
 8003344:	e01c      	b.n	8003380 <HAL_RCC_OscConfig+0x358>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x340>
 800334e:	4b61      	ldr	r3, [pc, #388]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003352:	4a60      	ldr	r2, [pc, #384]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003354:	f043 0304 	orr.w	r3, r3, #4
 8003358:	6713      	str	r3, [r2, #112]	@ 0x70
 800335a:	4b5e      	ldr	r3, [pc, #376]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335e:	4a5d      	ldr	r2, [pc, #372]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	@ 0x70
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0x358>
 8003368:	4b5a      	ldr	r3, [pc, #360]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336c:	4a59      	ldr	r2, [pc, #356]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	6713      	str	r3, [r2, #112]	@ 0x70
 8003374:	4b57      	ldr	r3, [pc, #348]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	4a56      	ldr	r2, [pc, #344]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800337a:	f023 0304 	bic.w	r3, r3, #4
 800337e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d015      	beq.n	80033b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fd feae 	bl	80010e8 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fd feaa 	bl	80010e8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0d7      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a6:	4b4b      	ldr	r3, [pc, #300]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ee      	beq.n	8003390 <HAL_RCC_OscConfig+0x368>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fd fe98 	bl	80010e8 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fd fe94 	bl	80010e8 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0c1      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d2:	4b40      	ldr	r3, [pc, #256]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1ee      	bne.n	80033bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e4:	4b3b      	ldr	r3, [pc, #236]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	4a3a      	ldr	r2, [pc, #232]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80033ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80ad 	beq.w	8003554 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033fa:	4b36      	ldr	r3, [pc, #216]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b08      	cmp	r3, #8
 8003404:	d060      	beq.n	80034c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d145      	bne.n	800349a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	4b33      	ldr	r3, [pc, #204]	@ (80034dc <HAL_RCC_OscConfig+0x4b4>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd fe68 	bl	80010e8 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341c:	f7fd fe64 	bl	80010e8 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e093      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	4b29      	ldr	r3, [pc, #164]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	3b01      	subs	r3, #1
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003464:	071b      	lsls	r3, r3, #28
 8003466:	491b      	ldr	r1, [pc, #108]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800346c:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <HAL_RCC_OscConfig+0x4b4>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fd fe39 	bl	80010e8 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347a:	f7fd fe35 	bl	80010e8 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e064      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348c:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x452>
 8003498:	e05c      	b.n	8003554 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349a:	4b10      	ldr	r3, [pc, #64]	@ (80034dc <HAL_RCC_OscConfig+0x4b4>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fd fe22 	bl	80010e8 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fd fe1e 	bl	80010e8 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e04d      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x480>
 80034c6:	e045      	b.n	8003554 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e040      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40007000 	.word	0x40007000
 80034dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003560 <HAL_RCC_OscConfig+0x538>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d030      	beq.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d129      	bne.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d122      	bne.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003510:	4013      	ands	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003518:	4293      	cmp	r3, r2
 800351a:	d119      	bne.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	3b01      	subs	r3, #1
 800352a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d10f      	bne.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800

08003564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e041      	b.n	80035fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f839 	bl	8003602 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f000 f9c0 	bl	8003928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e04e      	b.n	80036ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a23      	ldr	r2, [pc, #140]	@ (80036dc <HAL_TIM_Base_Start_IT+0xc4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d022      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365a:	d01d      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1f      	ldr	r2, [pc, #124]	@ (80036e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d018      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1e      	ldr	r2, [pc, #120]	@ (80036e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1c      	ldr	r2, [pc, #112]	@ (80036e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00e      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1b      	ldr	r2, [pc, #108]	@ (80036ec <HAL_TIM_Base_Start_IT+0xd4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d009      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a19      	ldr	r2, [pc, #100]	@ (80036f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x80>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a18      	ldr	r2, [pc, #96]	@ (80036f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d111      	bne.n	80036bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b06      	cmp	r3, #6
 80036a8:	d010      	beq.n	80036cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	e007      	b.n	80036cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0201 	orr.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40010000 	.word	0x40010000
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800
 80036e8:	40000c00 	.word	0x40000c00
 80036ec:	40010400 	.word	0x40010400
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40001800 	.word	0x40001800

080036f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d020      	beq.n	800375c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01b      	beq.n	800375c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0202 	mvn.w	r2, #2
 800372c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f8d2 	bl	80038ec <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8c4 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8d5 	bl	8003900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d020      	beq.n	80037a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01b      	beq.n	80037a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0204 	mvn.w	r2, #4
 8003778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2202      	movs	r2, #2
 800377e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f8ac 	bl	80038ec <HAL_TIM_IC_CaptureCallback>
 8003794:	e005      	b.n	80037a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f89e 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f8af 	bl	8003900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d020      	beq.n	80037f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01b      	beq.n	80037f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0208 	mvn.w	r2, #8
 80037c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2204      	movs	r2, #4
 80037ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f886 	bl	80038ec <HAL_TIM_IC_CaptureCallback>
 80037e0:	e005      	b.n	80037ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f878 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f889 	bl	8003900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d020      	beq.n	8003840 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01b      	beq.n	8003840 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0210 	mvn.w	r2, #16
 8003810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2208      	movs	r2, #8
 8003816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f860 	bl	80038ec <HAL_TIM_IC_CaptureCallback>
 800382c:	e005      	b.n	800383a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f852 	bl	80038d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f863 	bl	8003900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0201 	mvn.w	r2, #1
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd f950 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f906 	bl	8003a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00c      	beq.n	80038ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f834 	bl	8003914 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0220 	mvn.w	r2, #32
 80038c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8d8 	bl	8003a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a46      	ldr	r2, [pc, #280]	@ (8003a54 <TIM_Base_SetConfig+0x12c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d013      	beq.n	8003968 <TIM_Base_SetConfig+0x40>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003946:	d00f      	beq.n	8003968 <TIM_Base_SetConfig+0x40>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a43      	ldr	r2, [pc, #268]	@ (8003a58 <TIM_Base_SetConfig+0x130>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00b      	beq.n	8003968 <TIM_Base_SetConfig+0x40>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a42      	ldr	r2, [pc, #264]	@ (8003a5c <TIM_Base_SetConfig+0x134>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d007      	beq.n	8003968 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a41      	ldr	r2, [pc, #260]	@ (8003a60 <TIM_Base_SetConfig+0x138>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a40      	ldr	r2, [pc, #256]	@ (8003a64 <TIM_Base_SetConfig+0x13c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d108      	bne.n	800397a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800396e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a35      	ldr	r2, [pc, #212]	@ (8003a54 <TIM_Base_SetConfig+0x12c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d02b      	beq.n	80039da <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003988:	d027      	beq.n	80039da <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a32      	ldr	r2, [pc, #200]	@ (8003a58 <TIM_Base_SetConfig+0x130>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d023      	beq.n	80039da <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a31      	ldr	r2, [pc, #196]	@ (8003a5c <TIM_Base_SetConfig+0x134>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d01f      	beq.n	80039da <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a30      	ldr	r2, [pc, #192]	@ (8003a60 <TIM_Base_SetConfig+0x138>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01b      	beq.n	80039da <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2f      	ldr	r2, [pc, #188]	@ (8003a64 <TIM_Base_SetConfig+0x13c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d017      	beq.n	80039da <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003a68 <TIM_Base_SetConfig+0x140>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d013      	beq.n	80039da <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2d      	ldr	r2, [pc, #180]	@ (8003a6c <TIM_Base_SetConfig+0x144>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00f      	beq.n	80039da <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003a70 <TIM_Base_SetConfig+0x148>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00b      	beq.n	80039da <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2b      	ldr	r2, [pc, #172]	@ (8003a74 <TIM_Base_SetConfig+0x14c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d007      	beq.n	80039da <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003a78 <TIM_Base_SetConfig+0x150>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a29      	ldr	r2, [pc, #164]	@ (8003a7c <TIM_Base_SetConfig+0x154>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d108      	bne.n	80039ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a10      	ldr	r2, [pc, #64]	@ (8003a54 <TIM_Base_SetConfig+0x12c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_Base_SetConfig+0xf8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a12      	ldr	r2, [pc, #72]	@ (8003a64 <TIM_Base_SetConfig+0x13c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d103      	bne.n	8003a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d105      	bne.n	8003a46 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f023 0201 	bic.w	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	611a      	str	r2, [r3, #16]
  }
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40000c00 	.word	0x40000c00
 8003a64:	40010400 	.word	0x40010400
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800
 8003a74:	40001800 	.word	0x40001800
 8003a78:	40001c00 	.word	0x40001c00
 8003a7c:	40002000 	.word	0x40002000

08003a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e042      	b.n	8003b40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd fa24 	bl	8000f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	@ 0x24
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fdff 	bl	80046f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	@ 0x28
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	d175      	bne.n	8003c54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_UART_Transmit+0x2c>
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e06e      	b.n	8003c56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2221      	movs	r2, #33	@ 0x21
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b86:	f7fd faaf 	bl	80010e8 <HAL_GetTick>
 8003b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	88fa      	ldrh	r2, [r7, #6]
 8003b90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	88fa      	ldrh	r2, [r7, #6]
 8003b96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba0:	d108      	bne.n	8003bb4 <HAL_UART_Transmit+0x6c>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d104      	bne.n	8003bb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e003      	b.n	8003bbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bbc:	e02e      	b.n	8003c1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2180      	movs	r1, #128	@ 0x80
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fb9b 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e03a      	b.n	8003c56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	e007      	b.n	8003c0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	781a      	ldrb	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1cb      	bne.n	8003bbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2140      	movs	r1, #64	@ 0x40
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fb67 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e006      	b.n	8003c56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b08a      	sub	sp, #40	@ 0x28
 8003c62:	af02      	add	r7, sp, #8
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	f040 8081 	bne.w	8003d82 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_UART_Receive+0x2e>
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e079      	b.n	8003d84 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2222      	movs	r2, #34	@ 0x22
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ca4:	f7fd fa20 	bl	80010e8 <HAL_GetTick>
 8003ca8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cbe:	d108      	bne.n	8003cd2 <HAL_UART_Receive+0x74>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d104      	bne.n	8003cd2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	e003      	b.n	8003cda <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cda:	e047      	b.n	8003d6c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2120      	movs	r1, #32
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 fb0c 	bl	8004304 <UART_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e042      	b.n	8003d84 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10c      	bne.n	8003d1e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	e01f      	b.n	8003d5e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d26:	d007      	beq.n	8003d38 <HAL_UART_Receive+0xda>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10a      	bne.n	8003d46 <HAL_UART_Receive+0xe8>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	e008      	b.n	8003d58 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1b2      	bne.n	8003cdc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e000      	b.n	8003d84 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
  }
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3720      	adds	r7, #32
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b0ba      	sub	sp, #232	@ 0xe8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003dca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_UART_IRQHandler+0x66>
 8003dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fbc2 	bl	8004574 <UART_Receive_IT>
      return;
 8003df0:	e25b      	b.n	80042aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80de 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x22c>
 8003dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80d1 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00b      	beq.n	8003e3a <HAL_UART_IRQHandler+0xae>
 8003e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	f043 0201 	orr.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <HAL_UART_IRQHandler+0xd2>
 8003e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	f043 0202 	orr.w	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_UART_IRQHandler+0xf6>
 8003e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7a:	f043 0204 	orr.w	r2, r3, #4
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d011      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x126>
 8003e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d105      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d005      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eaa:	f043 0208 	orr.w	r2, r3, #8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 81f2 	beq.w	80042a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_UART_IRQHandler+0x14e>
 8003ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fb4d 	bl	8004574 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee4:	2b40      	cmp	r3, #64	@ 0x40
 8003ee6:	bf0c      	ite	eq
 8003ee8:	2301      	moveq	r3, #1
 8003eea:	2300      	movne	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <HAL_UART_IRQHandler+0x17a>
 8003efe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d04f      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa55 	bl	80043b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f16:	2b40      	cmp	r3, #64	@ 0x40
 8003f18:	d141      	bne.n	8003f9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3314      	adds	r3, #20
 8003f42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1d9      	bne.n	8003f1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d013      	beq.n	8003f96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	4a7e      	ldr	r2, [pc, #504]	@ (800416c <HAL_UART_IRQHandler+0x3e0>)
 8003f74:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd fb0e 	bl	800159c <HAL_DMA_Abort_IT>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f90:	4610      	mov	r0, r2
 8003f92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	e00e      	b.n	8003fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f99e 	bl	80042d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	e00a      	b.n	8003fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f99a 	bl	80042d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	e006      	b.n	8003fb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f996 	bl	80042d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003fb2:	e175      	b.n	80042a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	bf00      	nop
    return;
 8003fb6:	e173      	b.n	80042a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	f040 814f 	bne.w	8004260 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8148 	beq.w	8004260 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 8141 	beq.w	8004260 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffe:	2b40      	cmp	r3, #64	@ 0x40
 8004000:	f040 80b6 	bne.w	8004170 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004010:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8145 	beq.w	80042a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800401e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004022:	429a      	cmp	r2, r3
 8004024:	f080 813e 	bcs.w	80042a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800402e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800403a:	f000 8088 	beq.w	800414e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004054:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800405c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800406a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800406e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004076:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1d9      	bne.n	800403e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800409a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3314      	adds	r3, #20
 80040aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80040ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80040b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80040b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80040c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e1      	bne.n	800408a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3314      	adds	r3, #20
 80040cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3314      	adds	r3, #20
 80040e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e3      	bne.n	80040c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800411c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800411e:	f023 0310 	bic.w	r3, r3, #16
 8004122:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004130:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004132:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004136:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800413e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e3      	bne.n	800410c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004148:	4618      	mov	r0, r3
 800414a:	f7fd f9b7 	bl	80014bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800415c:	b29b      	uxth	r3, r3
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	b29b      	uxth	r3, r3
 8004162:	4619      	mov	r1, r3
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f8c1 	bl	80042ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800416a:	e09b      	b.n	80042a4 <HAL_UART_IRQHandler+0x518>
 800416c:	0800447d 	.word	0x0800447d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004178:	b29b      	uxth	r3, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 808e 	beq.w	80042a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800418c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8089 	beq.w	80042a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	330c      	adds	r3, #12
 800419c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	330c      	adds	r3, #12
 80041b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80041ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80041bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e3      	bne.n	8004196 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3314      	adds	r3, #20
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	623b      	str	r3, [r7, #32]
   return(result);
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3314      	adds	r3, #20
 80041ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80041f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e3      	bne.n	80041ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	60fb      	str	r3, [r7, #12]
   return(result);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0310 	bic.w	r3, r3, #16
 800422a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004238:	61fa      	str	r2, [r7, #28]
 800423a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	69b9      	ldr	r1, [r7, #24]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	617b      	str	r3, [r7, #20]
   return(result);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e3      	bne.n	8004214 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004252:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004256:	4619      	mov	r1, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f847 	bl	80042ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800425e:	e023      	b.n	80042a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <HAL_UART_IRQHandler+0x4f4>
 800426c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f913 	bl	80044a4 <UART_Transmit_IT>
    return;
 800427e:	e014      	b.n	80042aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00e      	beq.n	80042aa <HAL_UART_IRQHandler+0x51e>
 800428c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f953 	bl	8004544 <UART_EndTransmit_IT>
    return;
 800429e:	e004      	b.n	80042aa <HAL_UART_IRQHandler+0x51e>
    return;
 80042a0:	bf00      	nop
 80042a2:	e002      	b.n	80042aa <HAL_UART_IRQHandler+0x51e>
      return;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <HAL_UART_IRQHandler+0x51e>
      return;
 80042a8:	bf00      	nop
  }
}
 80042aa:	37e8      	adds	r7, #232	@ 0xe8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	460b      	mov	r3, r1
 80042f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004314:	e03b      	b.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800431c:	d037      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431e:	f7fc fee3 	bl	80010e8 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	429a      	cmp	r2, r3
 800432c:	d302      	bcc.n	8004334 <UART_WaitOnFlagUntilTimeout+0x30>
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e03a      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d023      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b80      	cmp	r3, #128	@ 0x80
 800434a:	d020      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b40      	cmp	r3, #64	@ 0x40
 8004350:	d01d      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d116      	bne.n	800438e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f81d 	bl	80043b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2208      	movs	r2, #8
 8004380:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e00f      	b.n	80043ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d0b4      	beq.n	8004316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b095      	sub	sp, #84	@ 0x54
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	330c      	adds	r3, #12
 80043c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	330c      	adds	r3, #12
 80043dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043de:	643a      	str	r2, [r7, #64]	@ 0x40
 80043e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e5      	bne.n	80043be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3314      	adds	r3, #20
 80043f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	61fb      	str	r3, [r7, #28]
   return(result);
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f023 0301 	bic.w	r3, r3, #1
 8004408:	64bb      	str	r3, [r7, #72]	@ 0x48
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3314      	adds	r3, #20
 8004410:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004412:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004414:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e5      	bne.n	80043f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442a:	2b01      	cmp	r3, #1
 800442c:	d119      	bne.n	8004462 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	60bb      	str	r3, [r7, #8]
   return(result);
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f023 0310 	bic.w	r3, r3, #16
 8004444:	647b      	str	r3, [r7, #68]	@ 0x44
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800444e:	61ba      	str	r2, [r7, #24]
 8004450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6979      	ldr	r1, [r7, #20]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	613b      	str	r3, [r7, #16]
   return(result);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e5      	bne.n	800442e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004470:	bf00      	nop
 8004472:	3754      	adds	r7, #84	@ 0x54
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004488:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f7ff ff1e 	bl	80042d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b21      	cmp	r3, #33	@ 0x21
 80044b6:	d13e      	bne.n	8004536 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c0:	d114      	bne.n	80044ec <UART_Transmit_IT+0x48>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d110      	bne.n	80044ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	1c9a      	adds	r2, r3, #2
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	621a      	str	r2, [r3, #32]
 80044ea:	e008      	b.n	80044fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	1c59      	adds	r1, r3, #1
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6211      	str	r1, [r2, #32]
 80044f6:	781a      	ldrb	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004502:	b29b      	uxth	r3, r3
 8004504:	3b01      	subs	r3, #1
 8004506:	b29b      	uxth	r3, r3
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4619      	mov	r1, r3
 800450c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004520:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004530:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e000      	b.n	8004538 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800455a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff fea3 	bl	80042b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08c      	sub	sp, #48	@ 0x30
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b22      	cmp	r3, #34	@ 0x22
 8004586:	f040 80ae 	bne.w	80046e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004592:	d117      	bne.n	80045c4 <UART_Receive_IT+0x50>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d113      	bne.n	80045c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800459c:	2300      	movs	r3, #0
 800459e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045bc:	1c9a      	adds	r2, r3, #2
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80045c2:	e026      	b.n	8004612 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045d6:	d007      	beq.n	80045e8 <UART_Receive_IT+0x74>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <UART_Receive_IT+0x82>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e008      	b.n	8004608 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004602:	b2da      	uxtb	r2, r3
 8004604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004606:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29b      	uxth	r3, r3
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	4619      	mov	r1, r3
 8004620:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004622:	2b00      	cmp	r3, #0
 8004624:	d15d      	bne.n	80046e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0220 	bic.w	r2, r2, #32
 8004634:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004644:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695a      	ldr	r2, [r3, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004668:	2b01      	cmp	r3, #1
 800466a:	d135      	bne.n	80046d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	613b      	str	r3, [r7, #16]
   return(result);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f023 0310 	bic.w	r3, r3, #16
 8004688:	627b      	str	r3, [r7, #36]	@ 0x24
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004692:	623a      	str	r2, [r7, #32]
 8004694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	69f9      	ldr	r1, [r7, #28]
 8004698:	6a3a      	ldr	r2, [r7, #32]
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	61bb      	str	r3, [r7, #24]
   return(result);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e5      	bne.n	8004672 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0310 	and.w	r3, r3, #16
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d10a      	bne.n	80046ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046ce:	4619      	mov	r1, r3
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff fe0b 	bl	80042ec <HAL_UARTEx_RxEventCallback>
 80046d6:	e002      	b.n	80046de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff fdf3 	bl	80042c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e002      	b.n	80046e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e000      	b.n	80046e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80046e6:	2302      	movs	r3, #2
  }
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3730      	adds	r7, #48	@ 0x30
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f4:	b0c0      	sub	sp, #256	@ 0x100
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	68d9      	ldr	r1, [r3, #12]
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	ea40 0301 	orr.w	r3, r0, r1
 8004718:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	431a      	orrs	r2, r3
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	431a      	orrs	r2, r3
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800473c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004748:	f021 010c 	bic.w	r1, r1, #12
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004756:	430b      	orrs	r3, r1
 8004758:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800475a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476a:	6999      	ldr	r1, [r3, #24]
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	ea40 0301 	orr.w	r3, r0, r1
 8004776:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b8f      	ldr	r3, [pc, #572]	@ (80049bc <UART_SetConfig+0x2cc>)
 8004780:	429a      	cmp	r2, r3
 8004782:	d005      	beq.n	8004790 <UART_SetConfig+0xa0>
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b8d      	ldr	r3, [pc, #564]	@ (80049c0 <UART_SetConfig+0x2d0>)
 800478c:	429a      	cmp	r2, r3
 800478e:	d104      	bne.n	800479a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004790:	f7fe f9d4 	bl	8002b3c <HAL_RCC_GetPCLK2Freq>
 8004794:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004798:	e003      	b.n	80047a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800479a:	f7fe f9bb 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 800479e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ac:	f040 810c 	bne.w	80049c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047c2:	4622      	mov	r2, r4
 80047c4:	462b      	mov	r3, r5
 80047c6:	1891      	adds	r1, r2, r2
 80047c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80047ca:	415b      	adcs	r3, r3
 80047cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047d2:	4621      	mov	r1, r4
 80047d4:	eb12 0801 	adds.w	r8, r2, r1
 80047d8:	4629      	mov	r1, r5
 80047da:	eb43 0901 	adc.w	r9, r3, r1
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047f2:	4690      	mov	r8, r2
 80047f4:	4699      	mov	r9, r3
 80047f6:	4623      	mov	r3, r4
 80047f8:	eb18 0303 	adds.w	r3, r8, r3
 80047fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004800:	462b      	mov	r3, r5
 8004802:	eb49 0303 	adc.w	r3, r9, r3
 8004806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004816:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800481a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800481e:	460b      	mov	r3, r1
 8004820:	18db      	adds	r3, r3, r3
 8004822:	653b      	str	r3, [r7, #80]	@ 0x50
 8004824:	4613      	mov	r3, r2
 8004826:	eb42 0303 	adc.w	r3, r2, r3
 800482a:	657b      	str	r3, [r7, #84]	@ 0x54
 800482c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004830:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004834:	f7fb fd3c 	bl	80002b0 <__aeabi_uldivmod>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4b61      	ldr	r3, [pc, #388]	@ (80049c4 <UART_SetConfig+0x2d4>)
 800483e:	fba3 2302 	umull	r2, r3, r3, r2
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	011c      	lsls	r4, r3, #4
 8004846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800484a:	2200      	movs	r2, #0
 800484c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004850:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004854:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004858:	4642      	mov	r2, r8
 800485a:	464b      	mov	r3, r9
 800485c:	1891      	adds	r1, r2, r2
 800485e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004860:	415b      	adcs	r3, r3
 8004862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004864:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004868:	4641      	mov	r1, r8
 800486a:	eb12 0a01 	adds.w	sl, r2, r1
 800486e:	4649      	mov	r1, r9
 8004870:	eb43 0b01 	adc.w	fp, r3, r1
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004880:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004888:	4692      	mov	sl, r2
 800488a:	469b      	mov	fp, r3
 800488c:	4643      	mov	r3, r8
 800488e:	eb1a 0303 	adds.w	r3, sl, r3
 8004892:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004896:	464b      	mov	r3, r9
 8004898:	eb4b 0303 	adc.w	r3, fp, r3
 800489c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80048b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048b4:	460b      	mov	r3, r1
 80048b6:	18db      	adds	r3, r3, r3
 80048b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80048ba:	4613      	mov	r3, r2
 80048bc:	eb42 0303 	adc.w	r3, r2, r3
 80048c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80048ca:	f7fb fcf1 	bl	80002b0 <__aeabi_uldivmod>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4611      	mov	r1, r2
 80048d4:	4b3b      	ldr	r3, [pc, #236]	@ (80049c4 <UART_SetConfig+0x2d4>)
 80048d6:	fba3 2301 	umull	r2, r3, r3, r1
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2264      	movs	r2, #100	@ 0x64
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	1acb      	subs	r3, r1, r3
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80048ea:	4b36      	ldr	r3, [pc, #216]	@ (80049c4 <UART_SetConfig+0x2d4>)
 80048ec:	fba3 2302 	umull	r2, r3, r3, r2
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80048f8:	441c      	add	r4, r3
 80048fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004904:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004908:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800490c:	4642      	mov	r2, r8
 800490e:	464b      	mov	r3, r9
 8004910:	1891      	adds	r1, r2, r2
 8004912:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004914:	415b      	adcs	r3, r3
 8004916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004918:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800491c:	4641      	mov	r1, r8
 800491e:	1851      	adds	r1, r2, r1
 8004920:	6339      	str	r1, [r7, #48]	@ 0x30
 8004922:	4649      	mov	r1, r9
 8004924:	414b      	adcs	r3, r1
 8004926:	637b      	str	r3, [r7, #52]	@ 0x34
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004934:	4659      	mov	r1, fp
 8004936:	00cb      	lsls	r3, r1, #3
 8004938:	4651      	mov	r1, sl
 800493a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800493e:	4651      	mov	r1, sl
 8004940:	00ca      	lsls	r2, r1, #3
 8004942:	4610      	mov	r0, r2
 8004944:	4619      	mov	r1, r3
 8004946:	4603      	mov	r3, r0
 8004948:	4642      	mov	r2, r8
 800494a:	189b      	adds	r3, r3, r2
 800494c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004950:	464b      	mov	r3, r9
 8004952:	460a      	mov	r2, r1
 8004954:	eb42 0303 	adc.w	r3, r2, r3
 8004958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004968:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800496c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004970:	460b      	mov	r3, r1
 8004972:	18db      	adds	r3, r3, r3
 8004974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004976:	4613      	mov	r3, r2
 8004978:	eb42 0303 	adc.w	r3, r2, r3
 800497c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800497e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004982:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004986:	f7fb fc93 	bl	80002b0 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <UART_SetConfig+0x2d4>)
 8004990:	fba3 1302 	umull	r1, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	2164      	movs	r1, #100	@ 0x64
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	3332      	adds	r3, #50	@ 0x32
 80049a2:	4a08      	ldr	r2, [pc, #32]	@ (80049c4 <UART_SetConfig+0x2d4>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	f003 0207 	and.w	r2, r3, #7
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4422      	add	r2, r4
 80049b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049b8:	e106      	b.n	8004bc8 <UART_SetConfig+0x4d8>
 80049ba:	bf00      	nop
 80049bc:	40011000 	.word	0x40011000
 80049c0:	40011400 	.word	0x40011400
 80049c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049da:	4642      	mov	r2, r8
 80049dc:	464b      	mov	r3, r9
 80049de:	1891      	adds	r1, r2, r2
 80049e0:	6239      	str	r1, [r7, #32]
 80049e2:	415b      	adcs	r3, r3
 80049e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049ea:	4641      	mov	r1, r8
 80049ec:	1854      	adds	r4, r2, r1
 80049ee:	4649      	mov	r1, r9
 80049f0:	eb43 0501 	adc.w	r5, r3, r1
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	00eb      	lsls	r3, r5, #3
 80049fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a02:	00e2      	lsls	r2, r4, #3
 8004a04:	4614      	mov	r4, r2
 8004a06:	461d      	mov	r5, r3
 8004a08:	4643      	mov	r3, r8
 8004a0a:	18e3      	adds	r3, r4, r3
 8004a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a10:	464b      	mov	r3, r9
 8004a12:	eb45 0303 	adc.w	r3, r5, r3
 8004a16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a36:	4629      	mov	r1, r5
 8004a38:	008b      	lsls	r3, r1, #2
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a40:	4621      	mov	r1, r4
 8004a42:	008a      	lsls	r2, r1, #2
 8004a44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a48:	f7fb fc32 	bl	80002b0 <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4b60      	ldr	r3, [pc, #384]	@ (8004bd4 <UART_SetConfig+0x4e4>)
 8004a52:	fba3 2302 	umull	r2, r3, r3, r2
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	011c      	lsls	r4, r3, #4
 8004a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	464b      	mov	r3, r9
 8004a70:	1891      	adds	r1, r2, r2
 8004a72:	61b9      	str	r1, [r7, #24]
 8004a74:	415b      	adcs	r3, r3
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	1851      	adds	r1, r2, r1
 8004a80:	6139      	str	r1, [r7, #16]
 8004a82:	4649      	mov	r1, r9
 8004a84:	414b      	adcs	r3, r1
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a94:	4659      	mov	r1, fp
 8004a96:	00cb      	lsls	r3, r1, #3
 8004a98:	4651      	mov	r1, sl
 8004a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a9e:	4651      	mov	r1, sl
 8004aa0:	00ca      	lsls	r2, r1, #3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	189b      	adds	r3, r3, r2
 8004aac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	460a      	mov	r2, r1
 8004ab4:	eb42 0303 	adc.w	r3, r2, r3
 8004ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ac6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ad4:	4649      	mov	r1, r9
 8004ad6:	008b      	lsls	r3, r1, #2
 8004ad8:	4641      	mov	r1, r8
 8004ada:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ade:	4641      	mov	r1, r8
 8004ae0:	008a      	lsls	r2, r1, #2
 8004ae2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ae6:	f7fb fbe3 	bl	80002b0 <__aeabi_uldivmod>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	4b38      	ldr	r3, [pc, #224]	@ (8004bd4 <UART_SetConfig+0x4e4>)
 8004af2:	fba3 2301 	umull	r2, r3, r3, r1
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2264      	movs	r2, #100	@ 0x64
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	1acb      	subs	r3, r1, r3
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	3332      	adds	r3, #50	@ 0x32
 8004b04:	4a33      	ldr	r2, [pc, #204]	@ (8004bd4 <UART_SetConfig+0x4e4>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b10:	441c      	add	r4, r3
 8004b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b16:	2200      	movs	r2, #0
 8004b18:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	1891      	adds	r1, r2, r2
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	415b      	adcs	r3, r3
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b30:	4641      	mov	r1, r8
 8004b32:	1851      	adds	r1, r2, r1
 8004b34:	6039      	str	r1, [r7, #0]
 8004b36:	4649      	mov	r1, r9
 8004b38:	414b      	adcs	r3, r1
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b48:	4659      	mov	r1, fp
 8004b4a:	00cb      	lsls	r3, r1, #3
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b52:	4651      	mov	r1, sl
 8004b54:	00ca      	lsls	r2, r1, #3
 8004b56:	4610      	mov	r0, r2
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	189b      	adds	r3, r3, r2
 8004b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b62:	464b      	mov	r3, r9
 8004b64:	460a      	mov	r2, r1
 8004b66:	eb42 0303 	adc.w	r3, r2, r3
 8004b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b76:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b84:	4649      	mov	r1, r9
 8004b86:	008b      	lsls	r3, r1, #2
 8004b88:	4641      	mov	r1, r8
 8004b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b8e:	4641      	mov	r1, r8
 8004b90:	008a      	lsls	r2, r1, #2
 8004b92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b96:	f7fb fb8b 	bl	80002b0 <__aeabi_uldivmod>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd4 <UART_SetConfig+0x4e4>)
 8004ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	2164      	movs	r1, #100	@ 0x64
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	3332      	adds	r3, #50	@ 0x32
 8004bb2:	4a08      	ldr	r2, [pc, #32]	@ (8004bd4 <UART_SetConfig+0x4e4>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	f003 020f 	and.w	r2, r3, #15
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4422      	add	r2, r4
 8004bc6:	609a      	str	r2, [r3, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd4:	51eb851f 	.word	0x51eb851f

08004bd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bea:	2b84      	cmp	r3, #132	@ 0x84
 8004bec:	d005      	beq.n	8004bfa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004bee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3303      	adds	r3, #3
 8004bf8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c0c:	f000 fafc 	bl	8005208 <vTaskStartScheduler>
  
  return osOK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c18:	b089      	sub	sp, #36	@ 0x24
 8004c1a:	af04      	add	r7, sp, #16
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d020      	beq.n	8004c6a <osThreadCreate+0x54>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01c      	beq.n	8004c6a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685c      	ldr	r4, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691e      	ldr	r6, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff ffc8 	bl	8004bd8 <makeFreeRtosPriority>
 8004c48:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c52:	9202      	str	r2, [sp, #8]
 8004c54:	9301      	str	r3, [sp, #4]
 8004c56:	9100      	str	r1, [sp, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	4632      	mov	r2, r6
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f000 f8ed 	bl	8004e3e <xTaskCreateStatic>
 8004c64:	4603      	mov	r3, r0
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	e01c      	b.n	8004ca4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685c      	ldr	r4, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c76:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff ffaa 	bl	8004bd8 <makeFreeRtosPriority>
 8004c84:	4602      	mov	r2, r0
 8004c86:	f107 030c 	add.w	r3, r7, #12
 8004c8a:	9301      	str	r3, [sp, #4]
 8004c8c:	9200      	str	r2, [sp, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	4632      	mov	r2, r6
 8004c92:	4629      	mov	r1, r5
 8004c94:	4620      	mov	r0, r4
 8004c96:	f000 f932 	bl	8004efe <xTaskCreate>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d001      	beq.n	8004ca4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <osDelay+0x16>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	e000      	b.n	8004cc6 <osDelay+0x18>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fa68 	bl	800519c <vTaskDelay>
  
  return osOK;
 8004ccc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f103 0208 	add.w	r2, r3, #8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f103 0208 	add.w	r2, r3, #8
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f103 0208 	add.w	r2, r3, #8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	601a      	str	r2, [r3, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d8e:	d103      	bne.n	8004d98 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e00c      	b.n	8004db2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e002      	b.n	8004da6 <vListInsert+0x2e>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d2f6      	bcs.n	8004da0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
}
 8004dde:	bf00      	nop
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dea:	b480      	push	{r7}
 8004dec:	b085      	sub	sp, #20
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6892      	ldr	r2, [r2, #8]
 8004e00:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6852      	ldr	r2, [r2, #4]
 8004e0a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d103      	bne.n	8004e1e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	1e5a      	subs	r2, r3, #1
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b08e      	sub	sp, #56	@ 0x38
 8004e42:	af04      	add	r7, sp, #16
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10b      	bne.n	8004e6a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	e7fd      	b.n	8004e66 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	61fb      	str	r3, [r7, #28]
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e88:	23a0      	movs	r3, #160	@ 0xa0
 8004e8a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e90:	d00b      	beq.n	8004eaa <xTaskCreateStatic+0x6c>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	61bb      	str	r3, [r7, #24]
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	e7fd      	b.n	8004ea6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004eaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01e      	beq.n	8004ef0 <xTaskCreateStatic+0xb2>
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01b      	beq.n	8004ef0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	2202      	movs	r2, #2
 8004ec6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004eca:	2300      	movs	r3, #0
 8004ecc:	9303      	str	r3, [sp, #12]
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	9302      	str	r3, [sp, #8]
 8004ed2:	f107 0314 	add.w	r3, r7, #20
 8004ed6:	9301      	str	r3, [sp, #4]
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f850 	bl	8004f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ee8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004eea:	f000 f8ed 	bl	80050c8 <prvAddNewTaskToReadyList>
 8004eee:	e001      	b.n	8004ef4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ef4:	697b      	ldr	r3, [r7, #20]
	}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3728      	adds	r7, #40	@ 0x28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b08c      	sub	sp, #48	@ 0x30
 8004f02:	af04      	add	r7, sp, #16
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 ff00 	bl	8005d18 <pvPortMalloc>
 8004f18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00e      	beq.n	8004f3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f20:	20a0      	movs	r0, #160	@ 0xa0
 8004f22:	f000 fef9 	bl	8005d18 <pvPortMalloc>
 8004f26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f34:	e005      	b.n	8004f42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f36:	6978      	ldr	r0, [r7, #20]
 8004f38:	f000 ffbc 	bl	8005eb4 <vPortFree>
 8004f3c:	e001      	b.n	8004f42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d017      	beq.n	8004f78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f50:	88fa      	ldrh	r2, [r7, #6]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9303      	str	r3, [sp, #12]
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	9302      	str	r3, [sp, #8]
 8004f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f80e 	bl	8004f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f6c:	69f8      	ldr	r0, [r7, #28]
 8004f6e:	f000 f8ab 	bl	80050c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f72:	2301      	movs	r3, #1
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e002      	b.n	8004f7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f023 0307 	bic.w	r3, r3, #7
 8004fae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	617b      	str	r3, [r7, #20]
}
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	e7fd      	b.n	8004fce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01f      	beq.n	8005018 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	e012      	b.n	8005004 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	7819      	ldrb	r1, [r3, #0]
 8004fe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	3334      	adds	r3, #52	@ 0x34
 8004fee:	460a      	mov	r2, r1
 8004ff0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d006      	beq.n	800500c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3301      	adds	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b0f      	cmp	r3, #15
 8005008:	d9e9      	bls.n	8004fde <prvInitialiseNewTask+0x56>
 800500a:	e000      	b.n	800500e <prvInitialiseNewTask+0x86>
			{
				break;
 800500c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800500e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005016:	e003      	b.n	8005020 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005022:	2b06      	cmp	r3, #6
 8005024:	d901      	bls.n	800502a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005026:	2306      	movs	r3, #6
 8005028:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800502e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005034:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005038:	2200      	movs	r2, #0
 800503a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800503c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503e:	3304      	adds	r3, #4
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fe68 	bl	8004d16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005048:	3318      	adds	r3, #24
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fe63 	bl	8004d16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005054:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005058:	f1c3 0207 	rsb	r2, r3, #7
 800505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005064:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005068:	2200      	movs	r2, #0
 800506a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	2200      	movs	r2, #0
 8005072:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	334c      	adds	r3, #76	@ 0x4c
 800507a:	224c      	movs	r2, #76	@ 0x4c
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f001 fb31 	bl	80066e6 <memset>
 8005084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005086:	4a0d      	ldr	r2, [pc, #52]	@ (80050bc <prvInitialiseNewTask+0x134>)
 8005088:	651a      	str	r2, [r3, #80]	@ 0x50
 800508a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508c:	4a0c      	ldr	r2, [pc, #48]	@ (80050c0 <prvInitialiseNewTask+0x138>)
 800508e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005092:	4a0c      	ldr	r2, [pc, #48]	@ (80050c4 <prvInitialiseNewTask+0x13c>)
 8005094:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	68f9      	ldr	r1, [r7, #12]
 800509a:	69b8      	ldr	r0, [r7, #24]
 800509c:	f000 fc2a 	bl	80058f4 <pxPortInitialiseStack>
 80050a0:	4602      	mov	r2, r0
 80050a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050b2:	bf00      	nop
 80050b4:	3720      	adds	r7, #32
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20004540 	.word	0x20004540
 80050c0:	200045a8 	.word	0x200045a8
 80050c4:	20004610 	.word	0x20004610

080050c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050d0:	f000 fd42 	bl	8005b58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005180 <prvAddNewTaskToReadyList+0xb8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	4a29      	ldr	r2, [pc, #164]	@ (8005180 <prvAddNewTaskToReadyList+0xb8>)
 80050dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050de:	4b29      	ldr	r3, [pc, #164]	@ (8005184 <prvAddNewTaskToReadyList+0xbc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050e6:	4a27      	ldr	r2, [pc, #156]	@ (8005184 <prvAddNewTaskToReadyList+0xbc>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050ec:	4b24      	ldr	r3, [pc, #144]	@ (8005180 <prvAddNewTaskToReadyList+0xb8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d110      	bne.n	8005116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050f4:	f000 fad4 	bl	80056a0 <prvInitialiseTaskLists>
 80050f8:	e00d      	b.n	8005116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050fa:	4b23      	ldr	r3, [pc, #140]	@ (8005188 <prvAddNewTaskToReadyList+0xc0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005102:	4b20      	ldr	r3, [pc, #128]	@ (8005184 <prvAddNewTaskToReadyList+0xbc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	429a      	cmp	r2, r3
 800510e:	d802      	bhi.n	8005116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005110:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <prvAddNewTaskToReadyList+0xbc>)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005116:	4b1d      	ldr	r3, [pc, #116]	@ (800518c <prvAddNewTaskToReadyList+0xc4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3301      	adds	r3, #1
 800511c:	4a1b      	ldr	r2, [pc, #108]	@ (800518c <prvAddNewTaskToReadyList+0xc4>)
 800511e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	2201      	movs	r2, #1
 8005126:	409a      	lsls	r2, r3
 8005128:	4b19      	ldr	r3, [pc, #100]	@ (8005190 <prvAddNewTaskToReadyList+0xc8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4313      	orrs	r3, r2
 800512e:	4a18      	ldr	r2, [pc, #96]	@ (8005190 <prvAddNewTaskToReadyList+0xc8>)
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4a15      	ldr	r2, [pc, #84]	@ (8005194 <prvAddNewTaskToReadyList+0xcc>)
 8005140:	441a      	add	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	4619      	mov	r1, r3
 8005148:	4610      	mov	r0, r2
 800514a:	f7ff fdf1 	bl	8004d30 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800514e:	f000 fd35 	bl	8005bbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005152:	4b0d      	ldr	r3, [pc, #52]	@ (8005188 <prvAddNewTaskToReadyList+0xc0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00e      	beq.n	8005178 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800515a:	4b0a      	ldr	r3, [pc, #40]	@ (8005184 <prvAddNewTaskToReadyList+0xbc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	429a      	cmp	r2, r3
 8005166:	d207      	bcs.n	8005178 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005168:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <prvAddNewTaskToReadyList+0xd0>)
 800516a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	200008ec 	.word	0x200008ec
 8005184:	200007ec 	.word	0x200007ec
 8005188:	200008f8 	.word	0x200008f8
 800518c:	20000908 	.word	0x20000908
 8005190:	200008f4 	.word	0x200008f4
 8005194:	200007f0 	.word	0x200007f0
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d018      	beq.n	80051e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051ae:	4b14      	ldr	r3, [pc, #80]	@ (8005200 <vTaskDelay+0x64>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <vTaskDelay+0x32>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	60bb      	str	r3, [r7, #8]
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	e7fd      	b.n	80051ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051ce:	f000 f885 	bl	80052dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051d2:	2100      	movs	r1, #0
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fb27 	bl	8005828 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051da:	f000 f88d 	bl	80052f8 <xTaskResumeAll>
 80051de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d107      	bne.n	80051f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80051e6:	4b07      	ldr	r3, [pc, #28]	@ (8005204 <vTaskDelay+0x68>)
 80051e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051f6:	bf00      	nop
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000914 	.word	0x20000914
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	@ 0x28
 800520c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800520e:	2300      	movs	r3, #0
 8005210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005216:	463a      	mov	r2, r7
 8005218:	1d39      	adds	r1, r7, #4
 800521a:	f107 0308 	add.w	r3, r7, #8
 800521e:	4618      	mov	r0, r3
 8005220:	f7fb fa3a 	bl	8000698 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	9202      	str	r2, [sp, #8]
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	2300      	movs	r3, #0
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	2300      	movs	r3, #0
 8005234:	460a      	mov	r2, r1
 8005236:	4921      	ldr	r1, [pc, #132]	@ (80052bc <vTaskStartScheduler+0xb4>)
 8005238:	4821      	ldr	r0, [pc, #132]	@ (80052c0 <vTaskStartScheduler+0xb8>)
 800523a:	f7ff fe00 	bl	8004e3e <xTaskCreateStatic>
 800523e:	4603      	mov	r3, r0
 8005240:	4a20      	ldr	r2, [pc, #128]	@ (80052c4 <vTaskStartScheduler+0xbc>)
 8005242:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005244:	4b1f      	ldr	r3, [pc, #124]	@ (80052c4 <vTaskStartScheduler+0xbc>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800524c:	2301      	movs	r3, #1
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e001      	b.n	8005256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005252:	2300      	movs	r3, #0
 8005254:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d11b      	bne.n	8005294 <vTaskStartScheduler+0x8c>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	613b      	str	r3, [r7, #16]
}
 800526e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005270:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <vTaskStartScheduler+0xc0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	334c      	adds	r3, #76	@ 0x4c
 8005276:	4a15      	ldr	r2, [pc, #84]	@ (80052cc <vTaskStartScheduler+0xc4>)
 8005278:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800527a:	4b15      	ldr	r3, [pc, #84]	@ (80052d0 <vTaskStartScheduler+0xc8>)
 800527c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005280:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005282:	4b14      	ldr	r3, [pc, #80]	@ (80052d4 <vTaskStartScheduler+0xcc>)
 8005284:	2201      	movs	r2, #1
 8005286:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005288:	4b13      	ldr	r3, [pc, #76]	@ (80052d8 <vTaskStartScheduler+0xd0>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800528e:	f000 fbbf 	bl	8005a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005292:	e00f      	b.n	80052b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800529a:	d10b      	bne.n	80052b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	60fb      	str	r3, [r7, #12]
}
 80052ae:	bf00      	nop
 80052b0:	bf00      	nop
 80052b2:	e7fd      	b.n	80052b0 <vTaskStartScheduler+0xa8>
}
 80052b4:	bf00      	nop
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	080077cc 	.word	0x080077cc
 80052c0:	08005671 	.word	0x08005671
 80052c4:	20000910 	.word	0x20000910
 80052c8:	200007ec 	.word	0x200007ec
 80052cc:	20000028 	.word	0x20000028
 80052d0:	2000090c 	.word	0x2000090c
 80052d4:	200008f8 	.word	0x200008f8
 80052d8:	200008f0 	.word	0x200008f0

080052dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052e0:	4b04      	ldr	r3, [pc, #16]	@ (80052f4 <vTaskSuspendAll+0x18>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3301      	adds	r3, #1
 80052e6:	4a03      	ldr	r2, [pc, #12]	@ (80052f4 <vTaskSuspendAll+0x18>)
 80052e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052ea:	bf00      	nop
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	20000914 	.word	0x20000914

080052f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005306:	4b42      	ldr	r3, [pc, #264]	@ (8005410 <xTaskResumeAll+0x118>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10b      	bne.n	8005326 <xTaskResumeAll+0x2e>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	603b      	str	r3, [r7, #0]
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	e7fd      	b.n	8005322 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005326:	f000 fc17 	bl	8005b58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800532a:	4b39      	ldr	r3, [pc, #228]	@ (8005410 <xTaskResumeAll+0x118>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3b01      	subs	r3, #1
 8005330:	4a37      	ldr	r2, [pc, #220]	@ (8005410 <xTaskResumeAll+0x118>)
 8005332:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005334:	4b36      	ldr	r3, [pc, #216]	@ (8005410 <xTaskResumeAll+0x118>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d161      	bne.n	8005400 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800533c:	4b35      	ldr	r3, [pc, #212]	@ (8005414 <xTaskResumeAll+0x11c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d05d      	beq.n	8005400 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005344:	e02e      	b.n	80053a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005346:	4b34      	ldr	r3, [pc, #208]	@ (8005418 <xTaskResumeAll+0x120>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	3318      	adds	r3, #24
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fd49 	bl	8004dea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fd44 	bl	8004dea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	2201      	movs	r2, #1
 8005368:	409a      	lsls	r2, r3
 800536a:	4b2c      	ldr	r3, [pc, #176]	@ (800541c <xTaskResumeAll+0x124>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4313      	orrs	r3, r2
 8005370:	4a2a      	ldr	r2, [pc, #168]	@ (800541c <xTaskResumeAll+0x124>)
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4a27      	ldr	r2, [pc, #156]	@ (8005420 <xTaskResumeAll+0x128>)
 8005382:	441a      	add	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3304      	adds	r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f7ff fcd0 	bl	8004d30 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005394:	4b23      	ldr	r3, [pc, #140]	@ (8005424 <xTaskResumeAll+0x12c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800539e:	4b22      	ldr	r3, [pc, #136]	@ (8005428 <xTaskResumeAll+0x130>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005418 <xTaskResumeAll+0x120>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1cc      	bne.n	8005346 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053b2:	f000 fa19 	bl	80057e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053b6:	4b1d      	ldr	r3, [pc, #116]	@ (800542c <xTaskResumeAll+0x134>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d010      	beq.n	80053e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053c2:	f000 f837 	bl	8005434 <xTaskIncrementTick>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80053cc:	4b16      	ldr	r3, [pc, #88]	@ (8005428 <xTaskResumeAll+0x130>)
 80053ce:	2201      	movs	r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f1      	bne.n	80053c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80053de:	4b13      	ldr	r3, [pc, #76]	@ (800542c <xTaskResumeAll+0x134>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053e4:	4b10      	ldr	r3, [pc, #64]	@ (8005428 <xTaskResumeAll+0x130>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d009      	beq.n	8005400 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053ec:	2301      	movs	r3, #1
 80053ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005430 <xTaskResumeAll+0x138>)
 80053f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005400:	f000 fbdc 	bl	8005bbc <vPortExitCritical>

	return xAlreadyYielded;
 8005404:	68bb      	ldr	r3, [r7, #8]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000914 	.word	0x20000914
 8005414:	200008ec 	.word	0x200008ec
 8005418:	200008ac 	.word	0x200008ac
 800541c:	200008f4 	.word	0x200008f4
 8005420:	200007f0 	.word	0x200007f0
 8005424:	200007ec 	.word	0x200007ec
 8005428:	20000900 	.word	0x20000900
 800542c:	200008fc 	.word	0x200008fc
 8005430:	e000ed04 	.word	0xe000ed04

08005434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800543e:	4b4f      	ldr	r3, [pc, #316]	@ (800557c <xTaskIncrementTick+0x148>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f040 808f 	bne.w	8005566 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005448:	4b4d      	ldr	r3, [pc, #308]	@ (8005580 <xTaskIncrementTick+0x14c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3301      	adds	r3, #1
 800544e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005450:	4a4b      	ldr	r2, [pc, #300]	@ (8005580 <xTaskIncrementTick+0x14c>)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d121      	bne.n	80054a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800545c:	4b49      	ldr	r3, [pc, #292]	@ (8005584 <xTaskIncrementTick+0x150>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	603b      	str	r3, [r7, #0]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xTaskIncrementTick+0x46>
 800547e:	4b41      	ldr	r3, [pc, #260]	@ (8005584 <xTaskIncrementTick+0x150>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	4b40      	ldr	r3, [pc, #256]	@ (8005588 <xTaskIncrementTick+0x154>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3e      	ldr	r2, [pc, #248]	@ (8005584 <xTaskIncrementTick+0x150>)
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	4a3e      	ldr	r2, [pc, #248]	@ (8005588 <xTaskIncrementTick+0x154>)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6013      	str	r3, [r2, #0]
 8005492:	4b3e      	ldr	r3, [pc, #248]	@ (800558c <xTaskIncrementTick+0x158>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	4a3c      	ldr	r2, [pc, #240]	@ (800558c <xTaskIncrementTick+0x158>)
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	f000 f9a4 	bl	80057e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005590 <xTaskIncrementTick+0x15c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d348      	bcc.n	800553c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054aa:	4b36      	ldr	r3, [pc, #216]	@ (8005584 <xTaskIncrementTick+0x150>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d104      	bne.n	80054be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054b4:	4b36      	ldr	r3, [pc, #216]	@ (8005590 <xTaskIncrementTick+0x15c>)
 80054b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054ba:	601a      	str	r2, [r3, #0]
					break;
 80054bc:	e03e      	b.n	800553c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054be:	4b31      	ldr	r3, [pc, #196]	@ (8005584 <xTaskIncrementTick+0x150>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d203      	bcs.n	80054de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005590 <xTaskIncrementTick+0x15c>)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054dc:	e02e      	b.n	800553c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fc81 	bl	8004dea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	3318      	adds	r3, #24
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fc78 	bl	8004dea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fe:	2201      	movs	r2, #1
 8005500:	409a      	lsls	r2, r3
 8005502:	4b24      	ldr	r3, [pc, #144]	@ (8005594 <xTaskIncrementTick+0x160>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4313      	orrs	r3, r2
 8005508:	4a22      	ldr	r2, [pc, #136]	@ (8005594 <xTaskIncrementTick+0x160>)
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4a1f      	ldr	r2, [pc, #124]	@ (8005598 <xTaskIncrementTick+0x164>)
 800551a:	441a      	add	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f7ff fc04 	bl	8004d30 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552c:	4b1b      	ldr	r3, [pc, #108]	@ (800559c <xTaskIncrementTick+0x168>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	429a      	cmp	r2, r3
 8005534:	d3b9      	bcc.n	80054aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005536:	2301      	movs	r3, #1
 8005538:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800553a:	e7b6      	b.n	80054aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800553c:	4b17      	ldr	r3, [pc, #92]	@ (800559c <xTaskIncrementTick+0x168>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005542:	4915      	ldr	r1, [pc, #84]	@ (8005598 <xTaskIncrementTick+0x164>)
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b01      	cmp	r3, #1
 8005552:	d901      	bls.n	8005558 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005554:	2301      	movs	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005558:	4b11      	ldr	r3, [pc, #68]	@ (80055a0 <xTaskIncrementTick+0x16c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005560:	2301      	movs	r3, #1
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e004      	b.n	8005570 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005566:	4b0f      	ldr	r3, [pc, #60]	@ (80055a4 <xTaskIncrementTick+0x170>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3301      	adds	r3, #1
 800556c:	4a0d      	ldr	r2, [pc, #52]	@ (80055a4 <xTaskIncrementTick+0x170>)
 800556e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005570:	697b      	ldr	r3, [r7, #20]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000914 	.word	0x20000914
 8005580:	200008f0 	.word	0x200008f0
 8005584:	200008a4 	.word	0x200008a4
 8005588:	200008a8 	.word	0x200008a8
 800558c:	20000904 	.word	0x20000904
 8005590:	2000090c 	.word	0x2000090c
 8005594:	200008f4 	.word	0x200008f4
 8005598:	200007f0 	.word	0x200007f0
 800559c:	200007ec 	.word	0x200007ec
 80055a0:	20000900 	.word	0x20000900
 80055a4:	200008fc 	.word	0x200008fc

080055a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005658 <vTaskSwitchContext+0xb0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055b6:	4b29      	ldr	r3, [pc, #164]	@ (800565c <vTaskSwitchContext+0xb4>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055bc:	e045      	b.n	800564a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80055be:	4b27      	ldr	r3, [pc, #156]	@ (800565c <vTaskSwitchContext+0xb4>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c4:	4b26      	ldr	r3, [pc, #152]	@ (8005660 <vTaskSwitchContext+0xb8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	fab3 f383 	clz	r3, r3
 80055d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80055d2:	7afb      	ldrb	r3, [r7, #11]
 80055d4:	f1c3 031f 	rsb	r3, r3, #31
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	4922      	ldr	r1, [pc, #136]	@ (8005664 <vTaskSwitchContext+0xbc>)
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4613      	mov	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <vTaskSwitchContext+0x5e>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	607b      	str	r3, [r7, #4]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <vTaskSwitchContext+0x5a>
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4a14      	ldr	r2, [pc, #80]	@ (8005664 <vTaskSwitchContext+0xbc>)
 8005612:	4413      	add	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	605a      	str	r2, [r3, #4]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	3308      	adds	r3, #8
 8005628:	429a      	cmp	r2, r3
 800562a:	d104      	bne.n	8005636 <vTaskSwitchContext+0x8e>
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4a0a      	ldr	r2, [pc, #40]	@ (8005668 <vTaskSwitchContext+0xc0>)
 800563e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005640:	4b09      	ldr	r3, [pc, #36]	@ (8005668 <vTaskSwitchContext+0xc0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	334c      	adds	r3, #76	@ 0x4c
 8005646:	4a09      	ldr	r2, [pc, #36]	@ (800566c <vTaskSwitchContext+0xc4>)
 8005648:	6013      	str	r3, [r2, #0]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20000914 	.word	0x20000914
 800565c:	20000900 	.word	0x20000900
 8005660:	200008f4 	.word	0x200008f4
 8005664:	200007f0 	.word	0x200007f0
 8005668:	200007ec 	.word	0x200007ec
 800566c:	20000028 	.word	0x20000028

08005670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005678:	f000 f852 	bl	8005720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800567c:	4b06      	ldr	r3, [pc, #24]	@ (8005698 <prvIdleTask+0x28>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d9f9      	bls.n	8005678 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005684:	4b05      	ldr	r3, [pc, #20]	@ (800569c <prvIdleTask+0x2c>)
 8005686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005694:	e7f0      	b.n	8005678 <prvIdleTask+0x8>
 8005696:	bf00      	nop
 8005698:	200007f0 	.word	0x200007f0
 800569c:	e000ed04 	.word	0xe000ed04

080056a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056a6:	2300      	movs	r3, #0
 80056a8:	607b      	str	r3, [r7, #4]
 80056aa:	e00c      	b.n	80056c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4a12      	ldr	r2, [pc, #72]	@ (8005700 <prvInitialiseTaskLists+0x60>)
 80056b8:	4413      	add	r3, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fb0b 	bl	8004cd6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3301      	adds	r3, #1
 80056c4:	607b      	str	r3, [r7, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b06      	cmp	r3, #6
 80056ca:	d9ef      	bls.n	80056ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80056cc:	480d      	ldr	r0, [pc, #52]	@ (8005704 <prvInitialiseTaskLists+0x64>)
 80056ce:	f7ff fb02 	bl	8004cd6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80056d2:	480d      	ldr	r0, [pc, #52]	@ (8005708 <prvInitialiseTaskLists+0x68>)
 80056d4:	f7ff faff 	bl	8004cd6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056d8:	480c      	ldr	r0, [pc, #48]	@ (800570c <prvInitialiseTaskLists+0x6c>)
 80056da:	f7ff fafc 	bl	8004cd6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056de:	480c      	ldr	r0, [pc, #48]	@ (8005710 <prvInitialiseTaskLists+0x70>)
 80056e0:	f7ff faf9 	bl	8004cd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056e4:	480b      	ldr	r0, [pc, #44]	@ (8005714 <prvInitialiseTaskLists+0x74>)
 80056e6:	f7ff faf6 	bl	8004cd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <prvInitialiseTaskLists+0x78>)
 80056ec:	4a05      	ldr	r2, [pc, #20]	@ (8005704 <prvInitialiseTaskLists+0x64>)
 80056ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056f0:	4b0a      	ldr	r3, [pc, #40]	@ (800571c <prvInitialiseTaskLists+0x7c>)
 80056f2:	4a05      	ldr	r2, [pc, #20]	@ (8005708 <prvInitialiseTaskLists+0x68>)
 80056f4:	601a      	str	r2, [r3, #0]
}
 80056f6:	bf00      	nop
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	200007f0 	.word	0x200007f0
 8005704:	2000087c 	.word	0x2000087c
 8005708:	20000890 	.word	0x20000890
 800570c:	200008ac 	.word	0x200008ac
 8005710:	200008c0 	.word	0x200008c0
 8005714:	200008d8 	.word	0x200008d8
 8005718:	200008a4 	.word	0x200008a4
 800571c:	200008a8 	.word	0x200008a8

08005720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005726:	e019      	b.n	800575c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005728:	f000 fa16 	bl	8005b58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800572c:	4b10      	ldr	r3, [pc, #64]	@ (8005770 <prvCheckTasksWaitingTermination+0x50>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3304      	adds	r3, #4
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fb56 	bl	8004dea <uxListRemove>
				--uxCurrentNumberOfTasks;
 800573e:	4b0d      	ldr	r3, [pc, #52]	@ (8005774 <prvCheckTasksWaitingTermination+0x54>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3b01      	subs	r3, #1
 8005744:	4a0b      	ldr	r2, [pc, #44]	@ (8005774 <prvCheckTasksWaitingTermination+0x54>)
 8005746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005748:	4b0b      	ldr	r3, [pc, #44]	@ (8005778 <prvCheckTasksWaitingTermination+0x58>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	3b01      	subs	r3, #1
 800574e:	4a0a      	ldr	r2, [pc, #40]	@ (8005778 <prvCheckTasksWaitingTermination+0x58>)
 8005750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005752:	f000 fa33 	bl	8005bbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f810 	bl	800577c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800575c:	4b06      	ldr	r3, [pc, #24]	@ (8005778 <prvCheckTasksWaitingTermination+0x58>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e1      	bne.n	8005728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	200008c0 	.word	0x200008c0
 8005774:	200008ec 	.word	0x200008ec
 8005778:	200008d4 	.word	0x200008d4

0800577c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	334c      	adds	r3, #76	@ 0x4c
 8005788:	4618      	mov	r0, r3
 800578a:	f000 ffc5 	bl	8006718 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fb89 	bl	8005eb4 <vPortFree>
				vPortFree( pxTCB );
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fb86 	bl	8005eb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057a8:	e019      	b.n	80057de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d103      	bne.n	80057bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fb7d 	bl	8005eb4 <vPortFree>
	}
 80057ba:	e010      	b.n	80057de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d00b      	beq.n	80057de <prvDeleteTCB+0x62>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	60fb      	str	r3, [r7, #12]
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	e7fd      	b.n	80057da <prvDeleteTCB+0x5e>
	}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <prvResetNextTaskUnblockTime+0x38>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d104      	bne.n	8005802 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005824 <prvResetNextTaskUnblockTime+0x3c>)
 80057fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005800:	e008      	b.n	8005814 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005802:	4b07      	ldr	r3, [pc, #28]	@ (8005820 <prvResetNextTaskUnblockTime+0x38>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4a04      	ldr	r2, [pc, #16]	@ (8005824 <prvResetNextTaskUnblockTime+0x3c>)
 8005812:	6013      	str	r3, [r2, #0]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	200008a4 	.word	0x200008a4
 8005824:	2000090c 	.word	0x2000090c

08005828 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005832:	4b29      	ldr	r3, [pc, #164]	@ (80058d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005838:	4b28      	ldr	r3, [pc, #160]	@ (80058dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3304      	adds	r3, #4
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fad3 	bl	8004dea <uxListRemove>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800584a:	4b24      	ldr	r3, [pc, #144]	@ (80058dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	2201      	movs	r2, #1
 8005852:	fa02 f303 	lsl.w	r3, r2, r3
 8005856:	43da      	mvns	r2, r3
 8005858:	4b21      	ldr	r3, [pc, #132]	@ (80058e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4013      	ands	r3, r2
 800585e:	4a20      	ldr	r2, [pc, #128]	@ (80058e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005860:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005868:	d10a      	bne.n	8005880 <prvAddCurrentTaskToDelayedList+0x58>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d007      	beq.n	8005880 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005870:	4b1a      	ldr	r3, [pc, #104]	@ (80058dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3304      	adds	r3, #4
 8005876:	4619      	mov	r1, r3
 8005878:	481a      	ldr	r0, [pc, #104]	@ (80058e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800587a:	f7ff fa59 	bl	8004d30 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800587e:	e026      	b.n	80058ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4413      	add	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005888:	4b14      	ldr	r3, [pc, #80]	@ (80058dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	429a      	cmp	r2, r3
 8005896:	d209      	bcs.n	80058ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005898:	4b13      	ldr	r3, [pc, #76]	@ (80058e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	4b0f      	ldr	r3, [pc, #60]	@ (80058dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3304      	adds	r3, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f7ff fa67 	bl	8004d78 <vListInsert>
}
 80058aa:	e010      	b.n	80058ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ac:	4b0f      	ldr	r3, [pc, #60]	@ (80058ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	4b0a      	ldr	r3, [pc, #40]	@ (80058dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f7ff fa5d 	bl	8004d78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058be:	4b0c      	ldr	r3, [pc, #48]	@ (80058f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d202      	bcs.n	80058ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80058c8:	4a09      	ldr	r2, [pc, #36]	@ (80058f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6013      	str	r3, [r2, #0]
}
 80058ce:	bf00      	nop
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	200008f0 	.word	0x200008f0
 80058dc:	200007ec 	.word	0x200007ec
 80058e0:	200008f4 	.word	0x200008f4
 80058e4:	200008d8 	.word	0x200008d8
 80058e8:	200008a8 	.word	0x200008a8
 80058ec:	200008a4 	.word	0x200008a4
 80058f0:	2000090c 	.word	0x2000090c

080058f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3b04      	subs	r3, #4
 8005904:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800590c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3b04      	subs	r3, #4
 8005912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f023 0201 	bic.w	r2, r3, #1
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3b04      	subs	r3, #4
 8005922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005924:	4a0c      	ldr	r2, [pc, #48]	@ (8005958 <pxPortInitialiseStack+0x64>)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3b14      	subs	r3, #20
 800592e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3b04      	subs	r3, #4
 800593a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f06f 0202 	mvn.w	r2, #2
 8005942:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3b20      	subs	r3, #32
 8005948:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800594a:	68fb      	ldr	r3, [r7, #12]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	0800595d 	.word	0x0800595d

0800595c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005962:	2300      	movs	r3, #0
 8005964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005966:	4b13      	ldr	r3, [pc, #76]	@ (80059b4 <prvTaskExitError+0x58>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800596e:	d00b      	beq.n	8005988 <prvTaskExitError+0x2c>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	60fb      	str	r3, [r7, #12]
}
 8005982:	bf00      	nop
 8005984:	bf00      	nop
 8005986:	e7fd      	b.n	8005984 <prvTaskExitError+0x28>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	60bb      	str	r3, [r7, #8]
}
 800599a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800599c:	bf00      	nop
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0fc      	beq.n	800599e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	20000010 	.word	0x20000010
	...

080059c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059c0:	4b07      	ldr	r3, [pc, #28]	@ (80059e0 <pxCurrentTCBConst2>)
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	6808      	ldr	r0, [r1, #0]
 80059c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ca:	f380 8809 	msr	PSP, r0
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f04f 0000 	mov.w	r0, #0
 80059d6:	f380 8811 	msr	BASEPRI, r0
 80059da:	4770      	bx	lr
 80059dc:	f3af 8000 	nop.w

080059e0 <pxCurrentTCBConst2>:
 80059e0:	200007ec 	.word	0x200007ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop

080059e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059e8:	4808      	ldr	r0, [pc, #32]	@ (8005a0c <prvPortStartFirstTask+0x24>)
 80059ea:	6800      	ldr	r0, [r0, #0]
 80059ec:	6800      	ldr	r0, [r0, #0]
 80059ee:	f380 8808 	msr	MSP, r0
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8814 	msr	CONTROL, r0
 80059fa:	b662      	cpsie	i
 80059fc:	b661      	cpsie	f
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	df00      	svc	0
 8005a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a0a:	bf00      	nop
 8005a0c:	e000ed08 	.word	0xe000ed08

08005a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a16:	4b47      	ldr	r3, [pc, #284]	@ (8005b34 <xPortStartScheduler+0x124>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a47      	ldr	r2, [pc, #284]	@ (8005b38 <xPortStartScheduler+0x128>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10b      	bne.n	8005a38 <xPortStartScheduler+0x28>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	613b      	str	r3, [r7, #16]
}
 8005a32:	bf00      	nop
 8005a34:	bf00      	nop
 8005a36:	e7fd      	b.n	8005a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a38:	4b3e      	ldr	r3, [pc, #248]	@ (8005b34 <xPortStartScheduler+0x124>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a3f      	ldr	r2, [pc, #252]	@ (8005b3c <xPortStartScheduler+0x12c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10b      	bne.n	8005a5a <xPortStartScheduler+0x4a>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	60fb      	str	r3, [r7, #12]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a5a:	4b39      	ldr	r3, [pc, #228]	@ (8005b40 <xPortStartScheduler+0x130>)
 8005a5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	22ff      	movs	r2, #255	@ 0xff
 8005a6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4b31      	ldr	r3, [pc, #196]	@ (8005b44 <xPortStartScheduler+0x134>)
 8005a80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a82:	4b31      	ldr	r3, [pc, #196]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005a84:	2207      	movs	r2, #7
 8005a86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a88:	e009      	b.n	8005a9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	4a2d      	ldr	r2, [pc, #180]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005a92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa6:	2b80      	cmp	r3, #128	@ 0x80
 8005aa8:	d0ef      	beq.n	8005a8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005aaa:	4b27      	ldr	r3, [pc, #156]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f1c3 0307 	rsb	r3, r3, #7
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d00b      	beq.n	8005ace <xPortStartScheduler+0xbe>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60bb      	str	r3, [r7, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	e7fd      	b.n	8005aca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ace:	4b1e      	ldr	r3, [pc, #120]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005ad6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ae0:	4a19      	ldr	r2, [pc, #100]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005ae2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005aec:	4b17      	ldr	r3, [pc, #92]	@ (8005b4c <xPortStartScheduler+0x13c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a16      	ldr	r2, [pc, #88]	@ (8005b4c <xPortStartScheduler+0x13c>)
 8005af2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005af6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005af8:	4b14      	ldr	r3, [pc, #80]	@ (8005b4c <xPortStartScheduler+0x13c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a13      	ldr	r2, [pc, #76]	@ (8005b4c <xPortStartScheduler+0x13c>)
 8005afe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005b02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b04:	f000 f8da 	bl	8005cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b08:	4b11      	ldr	r3, [pc, #68]	@ (8005b50 <xPortStartScheduler+0x140>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b0e:	f000 f8f9 	bl	8005d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b12:	4b10      	ldr	r3, [pc, #64]	@ (8005b54 <xPortStartScheduler+0x144>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a0f      	ldr	r2, [pc, #60]	@ (8005b54 <xPortStartScheduler+0x144>)
 8005b18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005b1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b1e:	f7ff ff63 	bl	80059e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b22:	f7ff fd41 	bl	80055a8 <vTaskSwitchContext>
	prvTaskExitError();
 8005b26:	f7ff ff19 	bl	800595c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	e000ed00 	.word	0xe000ed00
 8005b38:	410fc271 	.word	0x410fc271
 8005b3c:	410fc270 	.word	0x410fc270
 8005b40:	e000e400 	.word	0xe000e400
 8005b44:	20000918 	.word	0x20000918
 8005b48:	2000091c 	.word	0x2000091c
 8005b4c:	e000ed20 	.word	0xe000ed20
 8005b50:	20000010 	.word	0x20000010
 8005b54:	e000ef34 	.word	0xe000ef34

08005b58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
}
 8005b70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b72:	4b10      	ldr	r3, [pc, #64]	@ (8005bb4 <vPortEnterCritical+0x5c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3301      	adds	r3, #1
 8005b78:	4a0e      	ldr	r2, [pc, #56]	@ (8005bb4 <vPortEnterCritical+0x5c>)
 8005b7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb4 <vPortEnterCritical+0x5c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d110      	bne.n	8005ba6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b84:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb8 <vPortEnterCritical+0x60>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	603b      	str	r3, [r7, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	e7fd      	b.n	8005ba2 <vPortEnterCritical+0x4a>
	}
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20000010 	.word	0x20000010
 8005bb8:	e000ed04 	.word	0xe000ed04

08005bbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bc2:	4b12      	ldr	r3, [pc, #72]	@ (8005c0c <vPortExitCritical+0x50>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10b      	bne.n	8005be2 <vPortExitCritical+0x26>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	607b      	str	r3, [r7, #4]
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	e7fd      	b.n	8005bde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005be2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <vPortExitCritical+0x50>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	4a08      	ldr	r2, [pc, #32]	@ (8005c0c <vPortExitCritical+0x50>)
 8005bea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bec:	4b07      	ldr	r3, [pc, #28]	@ (8005c0c <vPortExitCritical+0x50>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d105      	bne.n	8005c00 <vPortExitCritical+0x44>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	20000010 	.word	0x20000010

08005c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c10:	f3ef 8009 	mrs	r0, PSP
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	4b15      	ldr	r3, [pc, #84]	@ (8005c70 <pxCurrentTCBConst>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	f01e 0f10 	tst.w	lr, #16
 8005c20:	bf08      	it	eq
 8005c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2a:	6010      	str	r0, [r2, #0]
 8005c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005c34:	f380 8811 	msr	BASEPRI, r0
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f7ff fcb2 	bl	80055a8 <vTaskSwitchContext>
 8005c44:	f04f 0000 	mov.w	r0, #0
 8005c48:	f380 8811 	msr	BASEPRI, r0
 8005c4c:	bc09      	pop	{r0, r3}
 8005c4e:	6819      	ldr	r1, [r3, #0]
 8005c50:	6808      	ldr	r0, [r1, #0]
 8005c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c56:	f01e 0f10 	tst.w	lr, #16
 8005c5a:	bf08      	it	eq
 8005c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c60:	f380 8809 	msr	PSP, r0
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	f3af 8000 	nop.w

08005c70 <pxCurrentTCBConst>:
 8005c70:	200007ec 	.word	0x200007ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop

08005c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	607b      	str	r3, [r7, #4]
}
 8005c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c92:	f7ff fbcf 	bl	8005434 <xTaskIncrementTick>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c9c:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <SysTick_Handler+0x40>)
 8005c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	f383 8811 	msr	BASEPRI, r3
}
 8005cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	e000ed04 	.word	0xe000ed04

08005cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <vPortSetupTimerInterrupt+0x34>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <vPortSetupTimerInterrupt+0x38>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf8 <vPortSetupTimerInterrupt+0x3c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8005cfc <vPortSetupTimerInterrupt+0x40>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	099b      	lsrs	r3, r3, #6
 8005cd8:	4a09      	ldr	r2, [pc, #36]	@ (8005d00 <vPortSetupTimerInterrupt+0x44>)
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cde:	4b04      	ldr	r3, [pc, #16]	@ (8005cf0 <vPortSetupTimerInterrupt+0x34>)
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	601a      	str	r2, [r3, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	e000e010 	.word	0xe000e010
 8005cf4:	e000e018 	.word	0xe000e018
 8005cf8:	20000004 	.word	0x20000004
 8005cfc:	10624dd3 	.word	0x10624dd3
 8005d00:	e000e014 	.word	0xe000e014

08005d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005d14 <vPortEnableVFP+0x10>
 8005d08:	6801      	ldr	r1, [r0, #0]
 8005d0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005d0e:	6001      	str	r1, [r0, #0]
 8005d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d12:	bf00      	nop
 8005d14:	e000ed88 	.word	0xe000ed88

08005d18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	@ 0x28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d24:	f7ff fada 	bl	80052dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d28:	4b5c      	ldr	r3, [pc, #368]	@ (8005e9c <pvPortMalloc+0x184>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d30:	f000 f924 	bl	8005f7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d34:	4b5a      	ldr	r3, [pc, #360]	@ (8005ea0 <pvPortMalloc+0x188>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f040 8095 	bne.w	8005e6c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01e      	beq.n	8005d86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005d48:	2208      	movs	r2, #8
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d015      	beq.n	8005d86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f023 0307 	bic.w	r3, r3, #7
 8005d60:	3308      	adds	r3, #8
 8005d62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <pvPortMalloc+0x6e>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	617b      	str	r3, [r7, #20]
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	e7fd      	b.n	8005d82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d06f      	beq.n	8005e6c <pvPortMalloc+0x154>
 8005d8c:	4b45      	ldr	r3, [pc, #276]	@ (8005ea4 <pvPortMalloc+0x18c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d86a      	bhi.n	8005e6c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d96:	4b44      	ldr	r3, [pc, #272]	@ (8005ea8 <pvPortMalloc+0x190>)
 8005d98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d9a:	4b43      	ldr	r3, [pc, #268]	@ (8005ea8 <pvPortMalloc+0x190>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005da0:	e004      	b.n	8005dac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d903      	bls.n	8005dbe <pvPortMalloc+0xa6>
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f1      	bne.n	8005da2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005dbe:	4b37      	ldr	r3, [pc, #220]	@ (8005e9c <pvPortMalloc+0x184>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d051      	beq.n	8005e6c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	4413      	add	r3, r2
 8005dd0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	1ad2      	subs	r2, r2, r3
 8005de2:	2308      	movs	r3, #8
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d920      	bls.n	8005e2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4413      	add	r3, r2
 8005df0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00b      	beq.n	8005e14 <pvPortMalloc+0xfc>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	613b      	str	r3, [r7, #16]
}
 8005e0e:	bf00      	nop
 8005e10:	bf00      	nop
 8005e12:	e7fd      	b.n	8005e10 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	1ad2      	subs	r2, r2, r3
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e26:	69b8      	ldr	r0, [r7, #24]
 8005e28:	f000 f90a 	bl	8006040 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea4 <pvPortMalloc+0x18c>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea4 <pvPortMalloc+0x18c>)
 8005e38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea4 <pvPortMalloc+0x18c>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8005eac <pvPortMalloc+0x194>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d203      	bcs.n	8005e4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e46:	4b17      	ldr	r3, [pc, #92]	@ (8005ea4 <pvPortMalloc+0x18c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a18      	ldr	r2, [pc, #96]	@ (8005eac <pvPortMalloc+0x194>)
 8005e4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	4b13      	ldr	r3, [pc, #76]	@ (8005ea0 <pvPortMalloc+0x188>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e62:	4b13      	ldr	r3, [pc, #76]	@ (8005eb0 <pvPortMalloc+0x198>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	4a11      	ldr	r2, [pc, #68]	@ (8005eb0 <pvPortMalloc+0x198>)
 8005e6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e6c:	f7ff fa44 	bl	80052f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00b      	beq.n	8005e92 <pvPortMalloc+0x17a>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	60fb      	str	r3, [r7, #12]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <pvPortMalloc+0x176>
	return pvReturn;
 8005e92:	69fb      	ldr	r3, [r7, #28]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3728      	adds	r7, #40	@ 0x28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20004528 	.word	0x20004528
 8005ea0:	2000453c 	.word	0x2000453c
 8005ea4:	2000452c 	.word	0x2000452c
 8005ea8:	20004520 	.word	0x20004520
 8005eac:	20004530 	.word	0x20004530
 8005eb0:	20004534 	.word	0x20004534

08005eb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d04f      	beq.n	8005f66 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	425b      	negs	r3, r3
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4413      	add	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	4b25      	ldr	r3, [pc, #148]	@ (8005f70 <vPortFree+0xbc>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4013      	ands	r3, r2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <vPortFree+0x46>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	60fb      	str	r3, [r7, #12]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00b      	beq.n	8005f1a <vPortFree+0x66>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	60bb      	str	r3, [r7, #8]
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	e7fd      	b.n	8005f16 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	4b14      	ldr	r3, [pc, #80]	@ (8005f70 <vPortFree+0xbc>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01e      	beq.n	8005f66 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11a      	bne.n	8005f66 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	4b0e      	ldr	r3, [pc, #56]	@ (8005f70 <vPortFree+0xbc>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	401a      	ands	r2, r3
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f40:	f7ff f9cc 	bl	80052dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	4b0a      	ldr	r3, [pc, #40]	@ (8005f74 <vPortFree+0xc0>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	4a09      	ldr	r2, [pc, #36]	@ (8005f74 <vPortFree+0xc0>)
 8005f50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f52:	6938      	ldr	r0, [r7, #16]
 8005f54:	f000 f874 	bl	8006040 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f58:	4b07      	ldr	r3, [pc, #28]	@ (8005f78 <vPortFree+0xc4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	4a06      	ldr	r2, [pc, #24]	@ (8005f78 <vPortFree+0xc4>)
 8005f60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f62:	f7ff f9c9 	bl	80052f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f66:	bf00      	nop
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	2000453c 	.word	0x2000453c
 8005f74:	2000452c 	.word	0x2000452c
 8005f78:	20004538 	.word	0x20004538

08005f7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f82:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005f86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f88:	4b27      	ldr	r3, [pc, #156]	@ (8006028 <prvHeapInit+0xac>)
 8005f8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00c      	beq.n	8005fb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3307      	adds	r3, #7
 8005f9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0307 	bic.w	r3, r3, #7
 8005fa2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	4a1f      	ldr	r2, [pc, #124]	@ (8006028 <prvHeapInit+0xac>)
 8005fac:	4413      	add	r3, r2
 8005fae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800602c <prvHeapInit+0xb0>)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fba:	4b1c      	ldr	r3, [pc, #112]	@ (800602c <prvHeapInit+0xb0>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fc8:	2208      	movs	r2, #8
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0307 	bic.w	r3, r3, #7
 8005fd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <prvHeapInit+0xb4>)
 8005fdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fde:	4b14      	ldr	r3, [pc, #80]	@ (8006030 <prvHeapInit+0xb4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fe6:	4b12      	ldr	r3, [pc, #72]	@ (8006030 <prvHeapInit+0xb4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	1ad2      	subs	r2, r2, r3
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8006030 <prvHeapInit+0xb4>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4a0a      	ldr	r2, [pc, #40]	@ (8006034 <prvHeapInit+0xb8>)
 800600a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	4a09      	ldr	r2, [pc, #36]	@ (8006038 <prvHeapInit+0xbc>)
 8006012:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006014:	4b09      	ldr	r3, [pc, #36]	@ (800603c <prvHeapInit+0xc0>)
 8006016:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800601a:	601a      	str	r2, [r3, #0]
}
 800601c:	bf00      	nop
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	20000920 	.word	0x20000920
 800602c:	20004520 	.word	0x20004520
 8006030:	20004528 	.word	0x20004528
 8006034:	20004530 	.word	0x20004530
 8006038:	2000452c 	.word	0x2000452c
 800603c:	2000453c 	.word	0x2000453c

08006040 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006048:	4b28      	ldr	r3, [pc, #160]	@ (80060ec <prvInsertBlockIntoFreeList+0xac>)
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	e002      	b.n	8006054 <prvInsertBlockIntoFreeList+0x14>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	429a      	cmp	r2, r3
 800605c:	d8f7      	bhi.n	800604e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	4413      	add	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d108      	bne.n	8006082 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	441a      	add	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	441a      	add	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d118      	bne.n	80060c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b15      	ldr	r3, [pc, #84]	@ (80060f0 <prvInsertBlockIntoFreeList+0xb0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d00d      	beq.n	80060be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	441a      	add	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	e008      	b.n	80060d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060be:	4b0c      	ldr	r3, [pc, #48]	@ (80060f0 <prvInsertBlockIntoFreeList+0xb0>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	e003      	b.n	80060d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d002      	beq.n	80060de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060de:	bf00      	nop
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	20004520 	.word	0x20004520
 80060f0:	20004528 	.word	0x20004528

080060f4 <uart_read>:
#include <stdio.h>

#include "usart.h"
#include "gpio.h"

static char uart_read() {
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, HAL_MAX_DELAY);
 80060fa:	1df9      	adds	r1, r7, #7
 80060fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006100:	2201      	movs	r2, #1
 8006102:	4804      	ldr	r0, [pc, #16]	@ (8006114 <uart_read+0x20>)
 8006104:	f7fd fdab 	bl	8003c5e <HAL_UART_Receive>

	return c;
 8006108:	79fb      	ldrb	r3, [r7, #7]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	200007a0 	.word	0x200007a0

08006118 <uart_write>:

static int uart_write(char * s, uint16_t size) {
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8006124:	887a      	ldrh	r2, [r7, #2]
 8006126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4803      	ldr	r0, [pc, #12]	@ (800613c <uart_write+0x24>)
 800612e:	f7fd fd0b 	bl	8003b48 <HAL_UART_Transmit>
	return size;
 8006132:	887b      	ldrh	r3, [r7, #2]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	200007a0 	.word	0x200007a0

08006140 <sh_help>:

static int sh_help(h_shell_t * h_shell,int argc, char ** argv) {
 8006140:	b590      	push	{r4, r7, lr}
 8006142:	b089      	sub	sp, #36	@ 0x24
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->shell_func_list_size ; i++) {
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	e026      	b.n	80061a0 <sh_help+0x60>
		int size;
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", h_shell->shell_func_list[i].c, h_shell->shell_func_list[i].description);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1d18      	adds	r0, r3, #4
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	4613      	mov	r3, r2
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	332c      	adds	r3, #44	@ 0x2c
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	461c      	mov	r4, r3
 800616a:	68f9      	ldr	r1, [r7, #12]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4613      	mov	r3, r2
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	3334      	adds	r3, #52	@ 0x34
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	4623      	mov	r3, r4
 8006180:	4a0c      	ldr	r2, [pc, #48]	@ (80061b4 <sh_help+0x74>)
 8006182:	2128      	movs	r1, #40	@ 0x28
 8006184:	f000 fa38 	bl	80065f8 <sniprintf>
 8006188:	6138      	str	r0, [r7, #16]
		uart_write(h_shell->print_buffer, size);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3304      	adds	r3, #4
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	b292      	uxth	r2, r2
 8006192:	4611      	mov	r1, r2
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff ffbf 	bl	8006118 <uart_write>
	for(i = 0 ; i < h_shell->shell_func_list_size ; i++) {
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	3301      	adds	r3, #1
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	dbd3      	blt.n	8006152 <sh_help+0x12>
	}

	return 0;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd90      	pop	{r4, r7, pc}
 80061b4:	080077d4 	.word	0x080077d4

080061b8 <shell_init>:

void shell_init(h_shell_t * h_shell) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
	int size = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
	h_shell->shell_func_list_size = 0;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006200 <shell_init+0x48>)
 80061d0:	2128      	movs	r1, #40	@ 0x28
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fa10 	bl	80065f8 <sniprintf>
 80061d8:	60f8      	str	r0, [r7, #12]
	uart_write(h_shell->print_buffer, size);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3304      	adds	r3, #4
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	b292      	uxth	r2, r2
 80061e2:	4611      	mov	r1, r2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff ff97 	bl	8006118 <uart_write>

	shell_add(h_shell,'h', sh_help, "Help");
 80061ea:	4b06      	ldr	r3, [pc, #24]	@ (8006204 <shell_init+0x4c>)
 80061ec:	4a06      	ldr	r2, [pc, #24]	@ (8006208 <shell_init+0x50>)
 80061ee:	2168      	movs	r1, #104	@ 0x68
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f80b 	bl	800620c <shell_add>
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	080077e0 	.word	0x080077e0
 8006204:	08007808 	.word	0x08007808
 8006208:	08006141 	.word	0x08006141

0800620c <shell_add>:

int shell_add(h_shell_t * h_shell,char c, shell_func_pointer_t pfunc, char * description) {
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	460b      	mov	r3, r1
 800621a:	72fb      	strb	r3, [r7, #11]
	if (h_shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b3f      	cmp	r3, #63	@ 0x3f
 8006222:	dc27      	bgt.n	8006274 <shell_add+0x68>
		h_shell->shell_func_list[h_shell->shell_func_list_size].c = c;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68f9      	ldr	r1, [r7, #12]
 800622a:	4613      	mov	r3, r2
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	332c      	adds	r3, #44	@ 0x2c
 8006236:	7afa      	ldrb	r2, [r7, #11]
 8006238:	701a      	strb	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].func = pfunc;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68f9      	ldr	r1, [r7, #12]
 8006240:	4613      	mov	r3, r2
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	3330      	adds	r3, #48	@ 0x30
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].description = description;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68f9      	ldr	r1, [r7, #12]
 8006256:	4613      	mov	r3, r2
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	3334      	adds	r3, #52	@ 0x34
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list_size++;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	601a      	str	r2, [r3, #0]
		return 0;
 8006270:	2300      	movs	r3, #0
 8006272:	e001      	b.n	8006278 <shell_add+0x6c>
	}

	return -1;
 8006274:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <shell_exec>:

static int shell_exec(char * buf,h_shell_t * h_shell) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b090      	sub	sp, #64	@ 0x40
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
	int i;

	char c = buf[0];
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < h_shell->shell_func_list_size ; i++) {
 8006296:	2300      	movs	r3, #0
 8006298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800629a:	e041      	b.n	8006320 <shell_exec+0x9c>
		if (h_shell->shell_func_list[i].c == c) {
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062a0:	4613      	mov	r3, r2
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	332c      	adds	r3, #44	@ 0x2c
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d131      	bne.n	800631a <shell_exec+0x96>
			argc = 1;
 80062b6:	2301      	movs	r3, #1
 80062b8:	63bb      	str	r3, [r7, #56]	@ 0x38
			argv[0] = buf;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c2:	e013      	b.n	80062ec <shell_exec+0x68>
				if(*p == ' ') {
 80062c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b20      	cmp	r3, #32
 80062ca:	d10c      	bne.n	80062e6 <shell_exec+0x62>
					*p = '\0';
 80062cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ce:	2200      	movs	r2, #0
 80062d0:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80062d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062da:	3201      	adds	r2, #1
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	3340      	adds	r3, #64	@ 0x40
 80062e0:	443b      	add	r3, r7
 80062e2:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 80062e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e8:	3301      	adds	r3, #1
 80062ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <shell_exec+0x76>
 80062f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f6:	2b07      	cmp	r3, #7
 80062f8:	dde4      	ble.n	80062c4 <shell_exec+0x40>
				}
			}

			return h_shell->shell_func_list[i].func(h_shell,argc, argv);
 80062fa:	6839      	ldr	r1, [r7, #0]
 80062fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062fe:	4613      	mov	r3, r2
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	3330      	adds	r3, #48	@ 0x30
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f107 020c 	add.w	r2, r7, #12
 8006310:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006312:	6838      	ldr	r0, [r7, #0]
 8006314:	4798      	blx	r3
 8006316:	4603      	mov	r3, r0
 8006318:	e01a      	b.n	8006350 <shell_exec+0xcc>
	for(i = 0 ; i < h_shell->shell_func_list_size ; i++) {
 800631a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631c:	3301      	adds	r3, #1
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006326:	429a      	cmp	r2, r3
 8006328:	dbb8      	blt.n	800629c <shell_exec+0x18>
		}
	}

	int size;
	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	1d18      	adds	r0, r3, #4
 800632e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006332:	4a09      	ldr	r2, [pc, #36]	@ (8006358 <shell_exec+0xd4>)
 8006334:	2128      	movs	r1, #40	@ 0x28
 8006336:	f000 f95f 	bl	80065f8 <sniprintf>
 800633a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uart_write(h_shell->print_buffer, size);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	3304      	adds	r3, #4
 8006340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006342:	b292      	uxth	r2, r2
 8006344:	4611      	mov	r1, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff fee6 	bl	8006118 <uart_write>
	return -1;
 800634c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006350:	4618      	mov	r0, r3
 8006352:	3740      	adds	r7, #64	@ 0x40
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	08007810 	.word	0x08007810

0800635c <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run(h_shell_t * h_shell) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
	int pos = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	613b      	str	r3, [r7, #16]


	while (1) {
		uart_write(prompt, 2);
 800636c:	2102      	movs	r1, #2
 800636e:	4834      	ldr	r0, [pc, #208]	@ (8006440 <shell_run+0xe4>)
 8006370:	f7ff fed2 	bl	8006118 <uart_write>
		reading = 1;
 8006374:	2301      	movs	r3, #1
 8006376:	617b      	str	r3, [r7, #20]

		while(reading) {
 8006378:	e056      	b.n	8006428 <shell_run+0xcc>
			char c = uart_read();
 800637a:	f7ff febb 	bl	80060f4 <uart_read>
 800637e:	4603      	mov	r3, r0
 8006380:	72fb      	strb	r3, [r7, #11]
			int size;

			switch (c) {
 8006382:	7afb      	ldrb	r3, [r7, #11]
 8006384:	2b08      	cmp	r3, #8
 8006386:	d030      	beq.n	80063ea <shell_run+0x8e>
 8006388:	2b0d      	cmp	r3, #13
 800638a:	d139      	bne.n	8006400 <shell_run+0xa4>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	4a2c      	ldr	r2, [pc, #176]	@ (8006444 <shell_run+0xe8>)
 8006392:	2128      	movs	r1, #40	@ 0x28
 8006394:	4618      	mov	r0, r3
 8006396:	f000 f92f 	bl	80065f8 <sniprintf>
 800639a:	60f8      	str	r0, [r7, #12]
				uart_write(h_shell->print_buffer, size);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3304      	adds	r3, #4
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	b292      	uxth	r2, r2
 80063a4:	4611      	mov	r1, r2
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff feb6 	bl	8006118 <uart_write>
				h_shell->cmd_buffer[pos++] = 0;     //add \0 char at end of string
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	613a      	str	r2, [r7, #16]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	4413      	add	r3, r2
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
				size = snprintf (h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	1d18      	adds	r0, r3, #4
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80063c6:	4a20      	ldr	r2, [pc, #128]	@ (8006448 <shell_run+0xec>)
 80063c8:	2128      	movs	r1, #40	@ 0x28
 80063ca:	f000 f915 	bl	80065f8 <sniprintf>
 80063ce:	60f8      	str	r0, [r7, #12]
				uart_write(h_shell->print_buffer, size);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3304      	adds	r3, #4
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	b292      	uxth	r2, r2
 80063d8:	4611      	mov	r1, r2
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fe9c 	bl	8006118 <uart_write>
				reading = 0;        //exit read loop
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]
				pos = 0;            //reset buffer
 80063e4:	2300      	movs	r3, #0
 80063e6:	613b      	str	r3, [r7, #16]
				break;
 80063e8:	e01e      	b.n	8006428 <shell_run+0xcc>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dd1a      	ble.n	8006426 <shell_run+0xca>
					pos--;          //remove it in buffer
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	613b      	str	r3, [r7, #16]

					uart_write(backspace, 3);	// delete the char on the terminal
 80063f6:	2103      	movs	r1, #3
 80063f8:	4814      	ldr	r0, [pc, #80]	@ (800644c <shell_run+0xf0>)
 80063fa:	f7ff fe8d 	bl	8006118 <uart_write>
				}
				break;
 80063fe:	e012      	b.n	8006426 <shell_run+0xca>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	2b27      	cmp	r3, #39	@ 0x27
 8006404:	dc10      	bgt.n	8006428 <shell_run+0xcc>
					uart_write(&c, 1);
 8006406:	f107 030b 	add.w	r3, r7, #11
 800640a:	2101      	movs	r1, #1
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fe83 	bl	8006118 <uart_write>
					h_shell->cmd_buffer[pos++] = c; //store
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	613a      	str	r2, [r7, #16]
 8006418:	7af9      	ldrb	r1, [r7, #11]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	4413      	add	r3, r2
 800641e:	460a      	mov	r2, r1
 8006420:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
 8006424:	e000      	b.n	8006428 <shell_run+0xcc>
				break;
 8006426:	bf00      	nop
		while(reading) {
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1a5      	bne.n	800637a <shell_run+0x1e>
				}
			}
		}
		shell_exec(h_shell->cmd_buffer,h_shell);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff ff24 	bl	8006284 <shell_exec>
		uart_write(prompt, 2);
 800643c:	e796      	b.n	800636c <shell_run+0x10>
 800643e:	bf00      	nop
 8006440:	20000018 	.word	0x20000018
 8006444:	08007828 	.word	0x08007828
 8006448:	0800782c 	.word	0x0800782c
 800644c:	20000014 	.word	0x20000014

08006450 <std>:
 8006450:	2300      	movs	r3, #0
 8006452:	b510      	push	{r4, lr}
 8006454:	4604      	mov	r4, r0
 8006456:	e9c0 3300 	strd	r3, r3, [r0]
 800645a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800645e:	6083      	str	r3, [r0, #8]
 8006460:	8181      	strh	r1, [r0, #12]
 8006462:	6643      	str	r3, [r0, #100]	@ 0x64
 8006464:	81c2      	strh	r2, [r0, #14]
 8006466:	6183      	str	r3, [r0, #24]
 8006468:	4619      	mov	r1, r3
 800646a:	2208      	movs	r2, #8
 800646c:	305c      	adds	r0, #92	@ 0x5c
 800646e:	f000 f93a 	bl	80066e6 <memset>
 8006472:	4b0d      	ldr	r3, [pc, #52]	@ (80064a8 <std+0x58>)
 8006474:	6263      	str	r3, [r4, #36]	@ 0x24
 8006476:	4b0d      	ldr	r3, [pc, #52]	@ (80064ac <std+0x5c>)
 8006478:	62a3      	str	r3, [r4, #40]	@ 0x28
 800647a:	4b0d      	ldr	r3, [pc, #52]	@ (80064b0 <std+0x60>)
 800647c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800647e:	4b0d      	ldr	r3, [pc, #52]	@ (80064b4 <std+0x64>)
 8006480:	6323      	str	r3, [r4, #48]	@ 0x30
 8006482:	4b0d      	ldr	r3, [pc, #52]	@ (80064b8 <std+0x68>)
 8006484:	6224      	str	r4, [r4, #32]
 8006486:	429c      	cmp	r4, r3
 8006488:	d006      	beq.n	8006498 <std+0x48>
 800648a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800648e:	4294      	cmp	r4, r2
 8006490:	d002      	beq.n	8006498 <std+0x48>
 8006492:	33d0      	adds	r3, #208	@ 0xd0
 8006494:	429c      	cmp	r4, r3
 8006496:	d105      	bne.n	80064a4 <std+0x54>
 8006498:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800649c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a0:	f000 b9f0 	b.w	8006884 <__retarget_lock_init_recursive>
 80064a4:	bd10      	pop	{r4, pc}
 80064a6:	bf00      	nop
 80064a8:	08006661 	.word	0x08006661
 80064ac:	08006683 	.word	0x08006683
 80064b0:	080066bb 	.word	0x080066bb
 80064b4:	080066df 	.word	0x080066df
 80064b8:	20004540 	.word	0x20004540

080064bc <stdio_exit_handler>:
 80064bc:	4a02      	ldr	r2, [pc, #8]	@ (80064c8 <stdio_exit_handler+0xc>)
 80064be:	4903      	ldr	r1, [pc, #12]	@ (80064cc <stdio_exit_handler+0x10>)
 80064c0:	4803      	ldr	r0, [pc, #12]	@ (80064d0 <stdio_exit_handler+0x14>)
 80064c2:	f000 b869 	b.w	8006598 <_fwalk_sglue>
 80064c6:	bf00      	nop
 80064c8:	2000001c 	.word	0x2000001c
 80064cc:	080073f1 	.word	0x080073f1
 80064d0:	2000002c 	.word	0x2000002c

080064d4 <cleanup_stdio>:
 80064d4:	6841      	ldr	r1, [r0, #4]
 80064d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <cleanup_stdio+0x34>)
 80064d8:	4299      	cmp	r1, r3
 80064da:	b510      	push	{r4, lr}
 80064dc:	4604      	mov	r4, r0
 80064de:	d001      	beq.n	80064e4 <cleanup_stdio+0x10>
 80064e0:	f000 ff86 	bl	80073f0 <_fflush_r>
 80064e4:	68a1      	ldr	r1, [r4, #8]
 80064e6:	4b09      	ldr	r3, [pc, #36]	@ (800650c <cleanup_stdio+0x38>)
 80064e8:	4299      	cmp	r1, r3
 80064ea:	d002      	beq.n	80064f2 <cleanup_stdio+0x1e>
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 ff7f 	bl	80073f0 <_fflush_r>
 80064f2:	68e1      	ldr	r1, [r4, #12]
 80064f4:	4b06      	ldr	r3, [pc, #24]	@ (8006510 <cleanup_stdio+0x3c>)
 80064f6:	4299      	cmp	r1, r3
 80064f8:	d004      	beq.n	8006504 <cleanup_stdio+0x30>
 80064fa:	4620      	mov	r0, r4
 80064fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006500:	f000 bf76 	b.w	80073f0 <_fflush_r>
 8006504:	bd10      	pop	{r4, pc}
 8006506:	bf00      	nop
 8006508:	20004540 	.word	0x20004540
 800650c:	200045a8 	.word	0x200045a8
 8006510:	20004610 	.word	0x20004610

08006514 <global_stdio_init.part.0>:
 8006514:	b510      	push	{r4, lr}
 8006516:	4b0b      	ldr	r3, [pc, #44]	@ (8006544 <global_stdio_init.part.0+0x30>)
 8006518:	4c0b      	ldr	r4, [pc, #44]	@ (8006548 <global_stdio_init.part.0+0x34>)
 800651a:	4a0c      	ldr	r2, [pc, #48]	@ (800654c <global_stdio_init.part.0+0x38>)
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	4620      	mov	r0, r4
 8006520:	2200      	movs	r2, #0
 8006522:	2104      	movs	r1, #4
 8006524:	f7ff ff94 	bl	8006450 <std>
 8006528:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800652c:	2201      	movs	r2, #1
 800652e:	2109      	movs	r1, #9
 8006530:	f7ff ff8e 	bl	8006450 <std>
 8006534:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006538:	2202      	movs	r2, #2
 800653a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800653e:	2112      	movs	r1, #18
 8006540:	f7ff bf86 	b.w	8006450 <std>
 8006544:	20004678 	.word	0x20004678
 8006548:	20004540 	.word	0x20004540
 800654c:	080064bd 	.word	0x080064bd

08006550 <__sfp_lock_acquire>:
 8006550:	4801      	ldr	r0, [pc, #4]	@ (8006558 <__sfp_lock_acquire+0x8>)
 8006552:	f000 b998 	b.w	8006886 <__retarget_lock_acquire_recursive>
 8006556:	bf00      	nop
 8006558:	20004681 	.word	0x20004681

0800655c <__sfp_lock_release>:
 800655c:	4801      	ldr	r0, [pc, #4]	@ (8006564 <__sfp_lock_release+0x8>)
 800655e:	f000 b993 	b.w	8006888 <__retarget_lock_release_recursive>
 8006562:	bf00      	nop
 8006564:	20004681 	.word	0x20004681

08006568 <__sinit>:
 8006568:	b510      	push	{r4, lr}
 800656a:	4604      	mov	r4, r0
 800656c:	f7ff fff0 	bl	8006550 <__sfp_lock_acquire>
 8006570:	6a23      	ldr	r3, [r4, #32]
 8006572:	b11b      	cbz	r3, 800657c <__sinit+0x14>
 8006574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006578:	f7ff bff0 	b.w	800655c <__sfp_lock_release>
 800657c:	4b04      	ldr	r3, [pc, #16]	@ (8006590 <__sinit+0x28>)
 800657e:	6223      	str	r3, [r4, #32]
 8006580:	4b04      	ldr	r3, [pc, #16]	@ (8006594 <__sinit+0x2c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f5      	bne.n	8006574 <__sinit+0xc>
 8006588:	f7ff ffc4 	bl	8006514 <global_stdio_init.part.0>
 800658c:	e7f2      	b.n	8006574 <__sinit+0xc>
 800658e:	bf00      	nop
 8006590:	080064d5 	.word	0x080064d5
 8006594:	20004678 	.word	0x20004678

08006598 <_fwalk_sglue>:
 8006598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800659c:	4607      	mov	r7, r0
 800659e:	4688      	mov	r8, r1
 80065a0:	4614      	mov	r4, r2
 80065a2:	2600      	movs	r6, #0
 80065a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065a8:	f1b9 0901 	subs.w	r9, r9, #1
 80065ac:	d505      	bpl.n	80065ba <_fwalk_sglue+0x22>
 80065ae:	6824      	ldr	r4, [r4, #0]
 80065b0:	2c00      	cmp	r4, #0
 80065b2:	d1f7      	bne.n	80065a4 <_fwalk_sglue+0xc>
 80065b4:	4630      	mov	r0, r6
 80065b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ba:	89ab      	ldrh	r3, [r5, #12]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d907      	bls.n	80065d0 <_fwalk_sglue+0x38>
 80065c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065c4:	3301      	adds	r3, #1
 80065c6:	d003      	beq.n	80065d0 <_fwalk_sglue+0x38>
 80065c8:	4629      	mov	r1, r5
 80065ca:	4638      	mov	r0, r7
 80065cc:	47c0      	blx	r8
 80065ce:	4306      	orrs	r6, r0
 80065d0:	3568      	adds	r5, #104	@ 0x68
 80065d2:	e7e9      	b.n	80065a8 <_fwalk_sglue+0x10>

080065d4 <iprintf>:
 80065d4:	b40f      	push	{r0, r1, r2, r3}
 80065d6:	b507      	push	{r0, r1, r2, lr}
 80065d8:	4906      	ldr	r1, [pc, #24]	@ (80065f4 <iprintf+0x20>)
 80065da:	ab04      	add	r3, sp, #16
 80065dc:	6808      	ldr	r0, [r1, #0]
 80065de:	f853 2b04 	ldr.w	r2, [r3], #4
 80065e2:	6881      	ldr	r1, [r0, #8]
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	f000 fbd9 	bl	8006d9c <_vfiprintf_r>
 80065ea:	b003      	add	sp, #12
 80065ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80065f0:	b004      	add	sp, #16
 80065f2:	4770      	bx	lr
 80065f4:	20000028 	.word	0x20000028

080065f8 <sniprintf>:
 80065f8:	b40c      	push	{r2, r3}
 80065fa:	b530      	push	{r4, r5, lr}
 80065fc:	4b17      	ldr	r3, [pc, #92]	@ (800665c <sniprintf+0x64>)
 80065fe:	1e0c      	subs	r4, r1, #0
 8006600:	681d      	ldr	r5, [r3, #0]
 8006602:	b09d      	sub	sp, #116	@ 0x74
 8006604:	da08      	bge.n	8006618 <sniprintf+0x20>
 8006606:	238b      	movs	r3, #139	@ 0x8b
 8006608:	602b      	str	r3, [r5, #0]
 800660a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800660e:	b01d      	add	sp, #116	@ 0x74
 8006610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006614:	b002      	add	sp, #8
 8006616:	4770      	bx	lr
 8006618:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800661c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006620:	bf14      	ite	ne
 8006622:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006626:	4623      	moveq	r3, r4
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	9307      	str	r3, [sp, #28]
 800662c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006630:	9002      	str	r0, [sp, #8]
 8006632:	9006      	str	r0, [sp, #24]
 8006634:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006638:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800663a:	ab21      	add	r3, sp, #132	@ 0x84
 800663c:	a902      	add	r1, sp, #8
 800663e:	4628      	mov	r0, r5
 8006640:	9301      	str	r3, [sp, #4]
 8006642:	f000 fa85 	bl	8006b50 <_svfiprintf_r>
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	bfbc      	itt	lt
 800664a:	238b      	movlt	r3, #139	@ 0x8b
 800664c:	602b      	strlt	r3, [r5, #0]
 800664e:	2c00      	cmp	r4, #0
 8006650:	d0dd      	beq.n	800660e <sniprintf+0x16>
 8006652:	9b02      	ldr	r3, [sp, #8]
 8006654:	2200      	movs	r2, #0
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	e7d9      	b.n	800660e <sniprintf+0x16>
 800665a:	bf00      	nop
 800665c:	20000028 	.word	0x20000028

08006660 <__sread>:
 8006660:	b510      	push	{r4, lr}
 8006662:	460c      	mov	r4, r1
 8006664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006668:	f000 f8be 	bl	80067e8 <_read_r>
 800666c:	2800      	cmp	r0, #0
 800666e:	bfab      	itete	ge
 8006670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006672:	89a3      	ldrhlt	r3, [r4, #12]
 8006674:	181b      	addge	r3, r3, r0
 8006676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800667a:	bfac      	ite	ge
 800667c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800667e:	81a3      	strhlt	r3, [r4, #12]
 8006680:	bd10      	pop	{r4, pc}

08006682 <__swrite>:
 8006682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006686:	461f      	mov	r7, r3
 8006688:	898b      	ldrh	r3, [r1, #12]
 800668a:	05db      	lsls	r3, r3, #23
 800668c:	4605      	mov	r5, r0
 800668e:	460c      	mov	r4, r1
 8006690:	4616      	mov	r6, r2
 8006692:	d505      	bpl.n	80066a0 <__swrite+0x1e>
 8006694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006698:	2302      	movs	r3, #2
 800669a:	2200      	movs	r2, #0
 800669c:	f000 f892 	bl	80067c4 <_lseek_r>
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066aa:	81a3      	strh	r3, [r4, #12]
 80066ac:	4632      	mov	r2, r6
 80066ae:	463b      	mov	r3, r7
 80066b0:	4628      	mov	r0, r5
 80066b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066b6:	f000 b8a9 	b.w	800680c <_write_r>

080066ba <__sseek>:
 80066ba:	b510      	push	{r4, lr}
 80066bc:	460c      	mov	r4, r1
 80066be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c2:	f000 f87f 	bl	80067c4 <_lseek_r>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	bf15      	itete	ne
 80066cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066d6:	81a3      	strheq	r3, [r4, #12]
 80066d8:	bf18      	it	ne
 80066da:	81a3      	strhne	r3, [r4, #12]
 80066dc:	bd10      	pop	{r4, pc}

080066de <__sclose>:
 80066de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e2:	f000 b809 	b.w	80066f8 <_close_r>

080066e6 <memset>:
 80066e6:	4402      	add	r2, r0
 80066e8:	4603      	mov	r3, r0
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d100      	bne.n	80066f0 <memset+0xa>
 80066ee:	4770      	bx	lr
 80066f0:	f803 1b01 	strb.w	r1, [r3], #1
 80066f4:	e7f9      	b.n	80066ea <memset+0x4>
	...

080066f8 <_close_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d06      	ldr	r5, [pc, #24]	@ (8006714 <_close_r+0x1c>)
 80066fc:	2300      	movs	r3, #0
 80066fe:	4604      	mov	r4, r0
 8006700:	4608      	mov	r0, r1
 8006702:	602b      	str	r3, [r5, #0]
 8006704:	f7fa fb39 	bl	8000d7a <_close>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_close_r+0x1a>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_close_r+0x1a>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	2000467c 	.word	0x2000467c

08006718 <_reclaim_reent>:
 8006718:	4b29      	ldr	r3, [pc, #164]	@ (80067c0 <_reclaim_reent+0xa8>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4283      	cmp	r3, r0
 800671e:	b570      	push	{r4, r5, r6, lr}
 8006720:	4604      	mov	r4, r0
 8006722:	d04b      	beq.n	80067bc <_reclaim_reent+0xa4>
 8006724:	69c3      	ldr	r3, [r0, #28]
 8006726:	b1ab      	cbz	r3, 8006754 <_reclaim_reent+0x3c>
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	b16b      	cbz	r3, 8006748 <_reclaim_reent+0x30>
 800672c:	2500      	movs	r5, #0
 800672e:	69e3      	ldr	r3, [r4, #28]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	5959      	ldr	r1, [r3, r5]
 8006734:	2900      	cmp	r1, #0
 8006736:	d13b      	bne.n	80067b0 <_reclaim_reent+0x98>
 8006738:	3504      	adds	r5, #4
 800673a:	2d80      	cmp	r5, #128	@ 0x80
 800673c:	d1f7      	bne.n	800672e <_reclaim_reent+0x16>
 800673e:	69e3      	ldr	r3, [r4, #28]
 8006740:	4620      	mov	r0, r4
 8006742:	68d9      	ldr	r1, [r3, #12]
 8006744:	f000 f8b0 	bl	80068a8 <_free_r>
 8006748:	69e3      	ldr	r3, [r4, #28]
 800674a:	6819      	ldr	r1, [r3, #0]
 800674c:	b111      	cbz	r1, 8006754 <_reclaim_reent+0x3c>
 800674e:	4620      	mov	r0, r4
 8006750:	f000 f8aa 	bl	80068a8 <_free_r>
 8006754:	6961      	ldr	r1, [r4, #20]
 8006756:	b111      	cbz	r1, 800675e <_reclaim_reent+0x46>
 8006758:	4620      	mov	r0, r4
 800675a:	f000 f8a5 	bl	80068a8 <_free_r>
 800675e:	69e1      	ldr	r1, [r4, #28]
 8006760:	b111      	cbz	r1, 8006768 <_reclaim_reent+0x50>
 8006762:	4620      	mov	r0, r4
 8006764:	f000 f8a0 	bl	80068a8 <_free_r>
 8006768:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800676a:	b111      	cbz	r1, 8006772 <_reclaim_reent+0x5a>
 800676c:	4620      	mov	r0, r4
 800676e:	f000 f89b 	bl	80068a8 <_free_r>
 8006772:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006774:	b111      	cbz	r1, 800677c <_reclaim_reent+0x64>
 8006776:	4620      	mov	r0, r4
 8006778:	f000 f896 	bl	80068a8 <_free_r>
 800677c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800677e:	b111      	cbz	r1, 8006786 <_reclaim_reent+0x6e>
 8006780:	4620      	mov	r0, r4
 8006782:	f000 f891 	bl	80068a8 <_free_r>
 8006786:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006788:	b111      	cbz	r1, 8006790 <_reclaim_reent+0x78>
 800678a:	4620      	mov	r0, r4
 800678c:	f000 f88c 	bl	80068a8 <_free_r>
 8006790:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006792:	b111      	cbz	r1, 800679a <_reclaim_reent+0x82>
 8006794:	4620      	mov	r0, r4
 8006796:	f000 f887 	bl	80068a8 <_free_r>
 800679a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800679c:	b111      	cbz	r1, 80067a4 <_reclaim_reent+0x8c>
 800679e:	4620      	mov	r0, r4
 80067a0:	f000 f882 	bl	80068a8 <_free_r>
 80067a4:	6a23      	ldr	r3, [r4, #32]
 80067a6:	b14b      	cbz	r3, 80067bc <_reclaim_reent+0xa4>
 80067a8:	4620      	mov	r0, r4
 80067aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067ae:	4718      	bx	r3
 80067b0:	680e      	ldr	r6, [r1, #0]
 80067b2:	4620      	mov	r0, r4
 80067b4:	f000 f878 	bl	80068a8 <_free_r>
 80067b8:	4631      	mov	r1, r6
 80067ba:	e7bb      	b.n	8006734 <_reclaim_reent+0x1c>
 80067bc:	bd70      	pop	{r4, r5, r6, pc}
 80067be:	bf00      	nop
 80067c0:	20000028 	.word	0x20000028

080067c4 <_lseek_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d07      	ldr	r5, [pc, #28]	@ (80067e4 <_lseek_r+0x20>)
 80067c8:	4604      	mov	r4, r0
 80067ca:	4608      	mov	r0, r1
 80067cc:	4611      	mov	r1, r2
 80067ce:	2200      	movs	r2, #0
 80067d0:	602a      	str	r2, [r5, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	f7fa faf8 	bl	8000dc8 <_lseek>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_lseek_r+0x1e>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_lseek_r+0x1e>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	2000467c 	.word	0x2000467c

080067e8 <_read_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4d07      	ldr	r5, [pc, #28]	@ (8006808 <_read_r+0x20>)
 80067ec:	4604      	mov	r4, r0
 80067ee:	4608      	mov	r0, r1
 80067f0:	4611      	mov	r1, r2
 80067f2:	2200      	movs	r2, #0
 80067f4:	602a      	str	r2, [r5, #0]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f7fa fa86 	bl	8000d08 <_read>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_read_r+0x1e>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	b103      	cbz	r3, 8006806 <_read_r+0x1e>
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	2000467c 	.word	0x2000467c

0800680c <_write_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4d07      	ldr	r5, [pc, #28]	@ (800682c <_write_r+0x20>)
 8006810:	4604      	mov	r4, r0
 8006812:	4608      	mov	r0, r1
 8006814:	4611      	mov	r1, r2
 8006816:	2200      	movs	r2, #0
 8006818:	602a      	str	r2, [r5, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	f7fa fa91 	bl	8000d42 <_write>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_write_r+0x1e>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_write_r+0x1e>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	2000467c 	.word	0x2000467c

08006830 <__errno>:
 8006830:	4b01      	ldr	r3, [pc, #4]	@ (8006838 <__errno+0x8>)
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	20000028 	.word	0x20000028

0800683c <__libc_init_array>:
 800683c:	b570      	push	{r4, r5, r6, lr}
 800683e:	4d0d      	ldr	r5, [pc, #52]	@ (8006874 <__libc_init_array+0x38>)
 8006840:	4c0d      	ldr	r4, [pc, #52]	@ (8006878 <__libc_init_array+0x3c>)
 8006842:	1b64      	subs	r4, r4, r5
 8006844:	10a4      	asrs	r4, r4, #2
 8006846:	2600      	movs	r6, #0
 8006848:	42a6      	cmp	r6, r4
 800684a:	d109      	bne.n	8006860 <__libc_init_array+0x24>
 800684c:	4d0b      	ldr	r5, [pc, #44]	@ (800687c <__libc_init_array+0x40>)
 800684e:	4c0c      	ldr	r4, [pc, #48]	@ (8006880 <__libc_init_array+0x44>)
 8006850:	f000 ff6e 	bl	8007730 <_init>
 8006854:	1b64      	subs	r4, r4, r5
 8006856:	10a4      	asrs	r4, r4, #2
 8006858:	2600      	movs	r6, #0
 800685a:	42a6      	cmp	r6, r4
 800685c:	d105      	bne.n	800686a <__libc_init_array+0x2e>
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	f855 3b04 	ldr.w	r3, [r5], #4
 8006864:	4798      	blx	r3
 8006866:	3601      	adds	r6, #1
 8006868:	e7ee      	b.n	8006848 <__libc_init_array+0xc>
 800686a:	f855 3b04 	ldr.w	r3, [r5], #4
 800686e:	4798      	blx	r3
 8006870:	3601      	adds	r6, #1
 8006872:	e7f2      	b.n	800685a <__libc_init_array+0x1e>
 8006874:	08007888 	.word	0x08007888
 8006878:	08007888 	.word	0x08007888
 800687c:	08007888 	.word	0x08007888
 8006880:	0800788c 	.word	0x0800788c

08006884 <__retarget_lock_init_recursive>:
 8006884:	4770      	bx	lr

08006886 <__retarget_lock_acquire_recursive>:
 8006886:	4770      	bx	lr

08006888 <__retarget_lock_release_recursive>:
 8006888:	4770      	bx	lr

0800688a <memcpy>:
 800688a:	440a      	add	r2, r1
 800688c:	4291      	cmp	r1, r2
 800688e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006892:	d100      	bne.n	8006896 <memcpy+0xc>
 8006894:	4770      	bx	lr
 8006896:	b510      	push	{r4, lr}
 8006898:	f811 4b01 	ldrb.w	r4, [r1], #1
 800689c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068a0:	4291      	cmp	r1, r2
 80068a2:	d1f9      	bne.n	8006898 <memcpy+0xe>
 80068a4:	bd10      	pop	{r4, pc}
	...

080068a8 <_free_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4605      	mov	r5, r0
 80068ac:	2900      	cmp	r1, #0
 80068ae:	d041      	beq.n	8006934 <_free_r+0x8c>
 80068b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068b4:	1f0c      	subs	r4, r1, #4
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bfb8      	it	lt
 80068ba:	18e4      	addlt	r4, r4, r3
 80068bc:	f000 f8e0 	bl	8006a80 <__malloc_lock>
 80068c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006938 <_free_r+0x90>)
 80068c2:	6813      	ldr	r3, [r2, #0]
 80068c4:	b933      	cbnz	r3, 80068d4 <_free_r+0x2c>
 80068c6:	6063      	str	r3, [r4, #4]
 80068c8:	6014      	str	r4, [r2, #0]
 80068ca:	4628      	mov	r0, r5
 80068cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068d0:	f000 b8dc 	b.w	8006a8c <__malloc_unlock>
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d908      	bls.n	80068ea <_free_r+0x42>
 80068d8:	6820      	ldr	r0, [r4, #0]
 80068da:	1821      	adds	r1, r4, r0
 80068dc:	428b      	cmp	r3, r1
 80068de:	bf01      	itttt	eq
 80068e0:	6819      	ldreq	r1, [r3, #0]
 80068e2:	685b      	ldreq	r3, [r3, #4]
 80068e4:	1809      	addeq	r1, r1, r0
 80068e6:	6021      	streq	r1, [r4, #0]
 80068e8:	e7ed      	b.n	80068c6 <_free_r+0x1e>
 80068ea:	461a      	mov	r2, r3
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	b10b      	cbz	r3, 80068f4 <_free_r+0x4c>
 80068f0:	42a3      	cmp	r3, r4
 80068f2:	d9fa      	bls.n	80068ea <_free_r+0x42>
 80068f4:	6811      	ldr	r1, [r2, #0]
 80068f6:	1850      	adds	r0, r2, r1
 80068f8:	42a0      	cmp	r0, r4
 80068fa:	d10b      	bne.n	8006914 <_free_r+0x6c>
 80068fc:	6820      	ldr	r0, [r4, #0]
 80068fe:	4401      	add	r1, r0
 8006900:	1850      	adds	r0, r2, r1
 8006902:	4283      	cmp	r3, r0
 8006904:	6011      	str	r1, [r2, #0]
 8006906:	d1e0      	bne.n	80068ca <_free_r+0x22>
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	6053      	str	r3, [r2, #4]
 800690e:	4408      	add	r0, r1
 8006910:	6010      	str	r0, [r2, #0]
 8006912:	e7da      	b.n	80068ca <_free_r+0x22>
 8006914:	d902      	bls.n	800691c <_free_r+0x74>
 8006916:	230c      	movs	r3, #12
 8006918:	602b      	str	r3, [r5, #0]
 800691a:	e7d6      	b.n	80068ca <_free_r+0x22>
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	1821      	adds	r1, r4, r0
 8006920:	428b      	cmp	r3, r1
 8006922:	bf04      	itt	eq
 8006924:	6819      	ldreq	r1, [r3, #0]
 8006926:	685b      	ldreq	r3, [r3, #4]
 8006928:	6063      	str	r3, [r4, #4]
 800692a:	bf04      	itt	eq
 800692c:	1809      	addeq	r1, r1, r0
 800692e:	6021      	streq	r1, [r4, #0]
 8006930:	6054      	str	r4, [r2, #4]
 8006932:	e7ca      	b.n	80068ca <_free_r+0x22>
 8006934:	bd38      	pop	{r3, r4, r5, pc}
 8006936:	bf00      	nop
 8006938:	20004688 	.word	0x20004688

0800693c <sbrk_aligned>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	4e0f      	ldr	r6, [pc, #60]	@ (800697c <sbrk_aligned+0x40>)
 8006940:	460c      	mov	r4, r1
 8006942:	6831      	ldr	r1, [r6, #0]
 8006944:	4605      	mov	r5, r0
 8006946:	b911      	cbnz	r1, 800694e <sbrk_aligned+0x12>
 8006948:	f000 fe28 	bl	800759c <_sbrk_r>
 800694c:	6030      	str	r0, [r6, #0]
 800694e:	4621      	mov	r1, r4
 8006950:	4628      	mov	r0, r5
 8006952:	f000 fe23 	bl	800759c <_sbrk_r>
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	d103      	bne.n	8006962 <sbrk_aligned+0x26>
 800695a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800695e:	4620      	mov	r0, r4
 8006960:	bd70      	pop	{r4, r5, r6, pc}
 8006962:	1cc4      	adds	r4, r0, #3
 8006964:	f024 0403 	bic.w	r4, r4, #3
 8006968:	42a0      	cmp	r0, r4
 800696a:	d0f8      	beq.n	800695e <sbrk_aligned+0x22>
 800696c:	1a21      	subs	r1, r4, r0
 800696e:	4628      	mov	r0, r5
 8006970:	f000 fe14 	bl	800759c <_sbrk_r>
 8006974:	3001      	adds	r0, #1
 8006976:	d1f2      	bne.n	800695e <sbrk_aligned+0x22>
 8006978:	e7ef      	b.n	800695a <sbrk_aligned+0x1e>
 800697a:	bf00      	nop
 800697c:	20004684 	.word	0x20004684

08006980 <_malloc_r>:
 8006980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006984:	1ccd      	adds	r5, r1, #3
 8006986:	f025 0503 	bic.w	r5, r5, #3
 800698a:	3508      	adds	r5, #8
 800698c:	2d0c      	cmp	r5, #12
 800698e:	bf38      	it	cc
 8006990:	250c      	movcc	r5, #12
 8006992:	2d00      	cmp	r5, #0
 8006994:	4606      	mov	r6, r0
 8006996:	db01      	blt.n	800699c <_malloc_r+0x1c>
 8006998:	42a9      	cmp	r1, r5
 800699a:	d904      	bls.n	80069a6 <_malloc_r+0x26>
 800699c:	230c      	movs	r3, #12
 800699e:	6033      	str	r3, [r6, #0]
 80069a0:	2000      	movs	r0, #0
 80069a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a7c <_malloc_r+0xfc>
 80069aa:	f000 f869 	bl	8006a80 <__malloc_lock>
 80069ae:	f8d8 3000 	ldr.w	r3, [r8]
 80069b2:	461c      	mov	r4, r3
 80069b4:	bb44      	cbnz	r4, 8006a08 <_malloc_r+0x88>
 80069b6:	4629      	mov	r1, r5
 80069b8:	4630      	mov	r0, r6
 80069ba:	f7ff ffbf 	bl	800693c <sbrk_aligned>
 80069be:	1c43      	adds	r3, r0, #1
 80069c0:	4604      	mov	r4, r0
 80069c2:	d158      	bne.n	8006a76 <_malloc_r+0xf6>
 80069c4:	f8d8 4000 	ldr.w	r4, [r8]
 80069c8:	4627      	mov	r7, r4
 80069ca:	2f00      	cmp	r7, #0
 80069cc:	d143      	bne.n	8006a56 <_malloc_r+0xd6>
 80069ce:	2c00      	cmp	r4, #0
 80069d0:	d04b      	beq.n	8006a6a <_malloc_r+0xea>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	4639      	mov	r1, r7
 80069d6:	4630      	mov	r0, r6
 80069d8:	eb04 0903 	add.w	r9, r4, r3
 80069dc:	f000 fdde 	bl	800759c <_sbrk_r>
 80069e0:	4581      	cmp	r9, r0
 80069e2:	d142      	bne.n	8006a6a <_malloc_r+0xea>
 80069e4:	6821      	ldr	r1, [r4, #0]
 80069e6:	1a6d      	subs	r5, r5, r1
 80069e8:	4629      	mov	r1, r5
 80069ea:	4630      	mov	r0, r6
 80069ec:	f7ff ffa6 	bl	800693c <sbrk_aligned>
 80069f0:	3001      	adds	r0, #1
 80069f2:	d03a      	beq.n	8006a6a <_malloc_r+0xea>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	442b      	add	r3, r5
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	f8d8 3000 	ldr.w	r3, [r8]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	bb62      	cbnz	r2, 8006a5c <_malloc_r+0xdc>
 8006a02:	f8c8 7000 	str.w	r7, [r8]
 8006a06:	e00f      	b.n	8006a28 <_malloc_r+0xa8>
 8006a08:	6822      	ldr	r2, [r4, #0]
 8006a0a:	1b52      	subs	r2, r2, r5
 8006a0c:	d420      	bmi.n	8006a50 <_malloc_r+0xd0>
 8006a0e:	2a0b      	cmp	r2, #11
 8006a10:	d917      	bls.n	8006a42 <_malloc_r+0xc2>
 8006a12:	1961      	adds	r1, r4, r5
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	6025      	str	r5, [r4, #0]
 8006a18:	bf18      	it	ne
 8006a1a:	6059      	strne	r1, [r3, #4]
 8006a1c:	6863      	ldr	r3, [r4, #4]
 8006a1e:	bf08      	it	eq
 8006a20:	f8c8 1000 	streq.w	r1, [r8]
 8006a24:	5162      	str	r2, [r4, r5]
 8006a26:	604b      	str	r3, [r1, #4]
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f000 f82f 	bl	8006a8c <__malloc_unlock>
 8006a2e:	f104 000b 	add.w	r0, r4, #11
 8006a32:	1d23      	adds	r3, r4, #4
 8006a34:	f020 0007 	bic.w	r0, r0, #7
 8006a38:	1ac2      	subs	r2, r0, r3
 8006a3a:	bf1c      	itt	ne
 8006a3c:	1a1b      	subne	r3, r3, r0
 8006a3e:	50a3      	strne	r3, [r4, r2]
 8006a40:	e7af      	b.n	80069a2 <_malloc_r+0x22>
 8006a42:	6862      	ldr	r2, [r4, #4]
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	bf0c      	ite	eq
 8006a48:	f8c8 2000 	streq.w	r2, [r8]
 8006a4c:	605a      	strne	r2, [r3, #4]
 8006a4e:	e7eb      	b.n	8006a28 <_malloc_r+0xa8>
 8006a50:	4623      	mov	r3, r4
 8006a52:	6864      	ldr	r4, [r4, #4]
 8006a54:	e7ae      	b.n	80069b4 <_malloc_r+0x34>
 8006a56:	463c      	mov	r4, r7
 8006a58:	687f      	ldr	r7, [r7, #4]
 8006a5a:	e7b6      	b.n	80069ca <_malloc_r+0x4a>
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	42a3      	cmp	r3, r4
 8006a62:	d1fb      	bne.n	8006a5c <_malloc_r+0xdc>
 8006a64:	2300      	movs	r3, #0
 8006a66:	6053      	str	r3, [r2, #4]
 8006a68:	e7de      	b.n	8006a28 <_malloc_r+0xa8>
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	6033      	str	r3, [r6, #0]
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f000 f80c 	bl	8006a8c <__malloc_unlock>
 8006a74:	e794      	b.n	80069a0 <_malloc_r+0x20>
 8006a76:	6005      	str	r5, [r0, #0]
 8006a78:	e7d6      	b.n	8006a28 <_malloc_r+0xa8>
 8006a7a:	bf00      	nop
 8006a7c:	20004688 	.word	0x20004688

08006a80 <__malloc_lock>:
 8006a80:	4801      	ldr	r0, [pc, #4]	@ (8006a88 <__malloc_lock+0x8>)
 8006a82:	f7ff bf00 	b.w	8006886 <__retarget_lock_acquire_recursive>
 8006a86:	bf00      	nop
 8006a88:	20004680 	.word	0x20004680

08006a8c <__malloc_unlock>:
 8006a8c:	4801      	ldr	r0, [pc, #4]	@ (8006a94 <__malloc_unlock+0x8>)
 8006a8e:	f7ff befb 	b.w	8006888 <__retarget_lock_release_recursive>
 8006a92:	bf00      	nop
 8006a94:	20004680 	.word	0x20004680

08006a98 <__ssputs_r>:
 8006a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a9c:	688e      	ldr	r6, [r1, #8]
 8006a9e:	461f      	mov	r7, r3
 8006aa0:	42be      	cmp	r6, r7
 8006aa2:	680b      	ldr	r3, [r1, #0]
 8006aa4:	4682      	mov	sl, r0
 8006aa6:	460c      	mov	r4, r1
 8006aa8:	4690      	mov	r8, r2
 8006aaa:	d82d      	bhi.n	8006b08 <__ssputs_r+0x70>
 8006aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ab0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006ab4:	d026      	beq.n	8006b04 <__ssputs_r+0x6c>
 8006ab6:	6965      	ldr	r5, [r4, #20]
 8006ab8:	6909      	ldr	r1, [r1, #16]
 8006aba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006abe:	eba3 0901 	sub.w	r9, r3, r1
 8006ac2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ac6:	1c7b      	adds	r3, r7, #1
 8006ac8:	444b      	add	r3, r9
 8006aca:	106d      	asrs	r5, r5, #1
 8006acc:	429d      	cmp	r5, r3
 8006ace:	bf38      	it	cc
 8006ad0:	461d      	movcc	r5, r3
 8006ad2:	0553      	lsls	r3, r2, #21
 8006ad4:	d527      	bpl.n	8006b26 <__ssputs_r+0x8e>
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	f7ff ff52 	bl	8006980 <_malloc_r>
 8006adc:	4606      	mov	r6, r0
 8006ade:	b360      	cbz	r0, 8006b3a <__ssputs_r+0xa2>
 8006ae0:	6921      	ldr	r1, [r4, #16]
 8006ae2:	464a      	mov	r2, r9
 8006ae4:	f7ff fed1 	bl	800688a <memcpy>
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	6126      	str	r6, [r4, #16]
 8006af6:	6165      	str	r5, [r4, #20]
 8006af8:	444e      	add	r6, r9
 8006afa:	eba5 0509 	sub.w	r5, r5, r9
 8006afe:	6026      	str	r6, [r4, #0]
 8006b00:	60a5      	str	r5, [r4, #8]
 8006b02:	463e      	mov	r6, r7
 8006b04:	42be      	cmp	r6, r7
 8006b06:	d900      	bls.n	8006b0a <__ssputs_r+0x72>
 8006b08:	463e      	mov	r6, r7
 8006b0a:	6820      	ldr	r0, [r4, #0]
 8006b0c:	4632      	mov	r2, r6
 8006b0e:	4641      	mov	r1, r8
 8006b10:	f000 fd2a 	bl	8007568 <memmove>
 8006b14:	68a3      	ldr	r3, [r4, #8]
 8006b16:	1b9b      	subs	r3, r3, r6
 8006b18:	60a3      	str	r3, [r4, #8]
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	4433      	add	r3, r6
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	2000      	movs	r0, #0
 8006b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b26:	462a      	mov	r2, r5
 8006b28:	f000 fd48 	bl	80075bc <_realloc_r>
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d1e0      	bne.n	8006af4 <__ssputs_r+0x5c>
 8006b32:	6921      	ldr	r1, [r4, #16]
 8006b34:	4650      	mov	r0, sl
 8006b36:	f7ff feb7 	bl	80068a8 <_free_r>
 8006b3a:	230c      	movs	r3, #12
 8006b3c:	f8ca 3000 	str.w	r3, [sl]
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b46:	81a3      	strh	r3, [r4, #12]
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b4c:	e7e9      	b.n	8006b22 <__ssputs_r+0x8a>
	...

08006b50 <_svfiprintf_r>:
 8006b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b54:	4698      	mov	r8, r3
 8006b56:	898b      	ldrh	r3, [r1, #12]
 8006b58:	061b      	lsls	r3, r3, #24
 8006b5a:	b09d      	sub	sp, #116	@ 0x74
 8006b5c:	4607      	mov	r7, r0
 8006b5e:	460d      	mov	r5, r1
 8006b60:	4614      	mov	r4, r2
 8006b62:	d510      	bpl.n	8006b86 <_svfiprintf_r+0x36>
 8006b64:	690b      	ldr	r3, [r1, #16]
 8006b66:	b973      	cbnz	r3, 8006b86 <_svfiprintf_r+0x36>
 8006b68:	2140      	movs	r1, #64	@ 0x40
 8006b6a:	f7ff ff09 	bl	8006980 <_malloc_r>
 8006b6e:	6028      	str	r0, [r5, #0]
 8006b70:	6128      	str	r0, [r5, #16]
 8006b72:	b930      	cbnz	r0, 8006b82 <_svfiprintf_r+0x32>
 8006b74:	230c      	movs	r3, #12
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006b7c:	b01d      	add	sp, #116	@ 0x74
 8006b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b82:	2340      	movs	r3, #64	@ 0x40
 8006b84:	616b      	str	r3, [r5, #20]
 8006b86:	2300      	movs	r3, #0
 8006b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b8a:	2320      	movs	r3, #32
 8006b8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b94:	2330      	movs	r3, #48	@ 0x30
 8006b96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d34 <_svfiprintf_r+0x1e4>
 8006b9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b9e:	f04f 0901 	mov.w	r9, #1
 8006ba2:	4623      	mov	r3, r4
 8006ba4:	469a      	mov	sl, r3
 8006ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006baa:	b10a      	cbz	r2, 8006bb0 <_svfiprintf_r+0x60>
 8006bac:	2a25      	cmp	r2, #37	@ 0x25
 8006bae:	d1f9      	bne.n	8006ba4 <_svfiprintf_r+0x54>
 8006bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8006bb4:	d00b      	beq.n	8006bce <_svfiprintf_r+0x7e>
 8006bb6:	465b      	mov	r3, fp
 8006bb8:	4622      	mov	r2, r4
 8006bba:	4629      	mov	r1, r5
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	f7ff ff6b 	bl	8006a98 <__ssputs_r>
 8006bc2:	3001      	adds	r0, #1
 8006bc4:	f000 80a7 	beq.w	8006d16 <_svfiprintf_r+0x1c6>
 8006bc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bca:	445a      	add	r2, fp
 8006bcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bce:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 809f 	beq.w	8006d16 <_svfiprintf_r+0x1c6>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006be2:	f10a 0a01 	add.w	sl, sl, #1
 8006be6:	9304      	str	r3, [sp, #16]
 8006be8:	9307      	str	r3, [sp, #28]
 8006bea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bee:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bf0:	4654      	mov	r4, sl
 8006bf2:	2205      	movs	r2, #5
 8006bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf8:	484e      	ldr	r0, [pc, #312]	@ (8006d34 <_svfiprintf_r+0x1e4>)
 8006bfa:	f7f9 fb09 	bl	8000210 <memchr>
 8006bfe:	9a04      	ldr	r2, [sp, #16]
 8006c00:	b9d8      	cbnz	r0, 8006c3a <_svfiprintf_r+0xea>
 8006c02:	06d0      	lsls	r0, r2, #27
 8006c04:	bf44      	itt	mi
 8006c06:	2320      	movmi	r3, #32
 8006c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c0c:	0711      	lsls	r1, r2, #28
 8006c0e:	bf44      	itt	mi
 8006c10:	232b      	movmi	r3, #43	@ 0x2b
 8006c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c16:	f89a 3000 	ldrb.w	r3, [sl]
 8006c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c1c:	d015      	beq.n	8006c4a <_svfiprintf_r+0xfa>
 8006c1e:	9a07      	ldr	r2, [sp, #28]
 8006c20:	4654      	mov	r4, sl
 8006c22:	2000      	movs	r0, #0
 8006c24:	f04f 0c0a 	mov.w	ip, #10
 8006c28:	4621      	mov	r1, r4
 8006c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c2e:	3b30      	subs	r3, #48	@ 0x30
 8006c30:	2b09      	cmp	r3, #9
 8006c32:	d94b      	bls.n	8006ccc <_svfiprintf_r+0x17c>
 8006c34:	b1b0      	cbz	r0, 8006c64 <_svfiprintf_r+0x114>
 8006c36:	9207      	str	r2, [sp, #28]
 8006c38:	e014      	b.n	8006c64 <_svfiprintf_r+0x114>
 8006c3a:	eba0 0308 	sub.w	r3, r0, r8
 8006c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8006c42:	4313      	orrs	r3, r2
 8006c44:	9304      	str	r3, [sp, #16]
 8006c46:	46a2      	mov	sl, r4
 8006c48:	e7d2      	b.n	8006bf0 <_svfiprintf_r+0xa0>
 8006c4a:	9b03      	ldr	r3, [sp, #12]
 8006c4c:	1d19      	adds	r1, r3, #4
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	9103      	str	r1, [sp, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	bfbb      	ittet	lt
 8006c56:	425b      	neglt	r3, r3
 8006c58:	f042 0202 	orrlt.w	r2, r2, #2
 8006c5c:	9307      	strge	r3, [sp, #28]
 8006c5e:	9307      	strlt	r3, [sp, #28]
 8006c60:	bfb8      	it	lt
 8006c62:	9204      	strlt	r2, [sp, #16]
 8006c64:	7823      	ldrb	r3, [r4, #0]
 8006c66:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c68:	d10a      	bne.n	8006c80 <_svfiprintf_r+0x130>
 8006c6a:	7863      	ldrb	r3, [r4, #1]
 8006c6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c6e:	d132      	bne.n	8006cd6 <_svfiprintf_r+0x186>
 8006c70:	9b03      	ldr	r3, [sp, #12]
 8006c72:	1d1a      	adds	r2, r3, #4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	9203      	str	r2, [sp, #12]
 8006c78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c7c:	3402      	adds	r4, #2
 8006c7e:	9305      	str	r3, [sp, #20]
 8006c80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d44 <_svfiprintf_r+0x1f4>
 8006c84:	7821      	ldrb	r1, [r4, #0]
 8006c86:	2203      	movs	r2, #3
 8006c88:	4650      	mov	r0, sl
 8006c8a:	f7f9 fac1 	bl	8000210 <memchr>
 8006c8e:	b138      	cbz	r0, 8006ca0 <_svfiprintf_r+0x150>
 8006c90:	9b04      	ldr	r3, [sp, #16]
 8006c92:	eba0 000a 	sub.w	r0, r0, sl
 8006c96:	2240      	movs	r2, #64	@ 0x40
 8006c98:	4082      	lsls	r2, r0
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	3401      	adds	r4, #1
 8006c9e:	9304      	str	r3, [sp, #16]
 8006ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca4:	4824      	ldr	r0, [pc, #144]	@ (8006d38 <_svfiprintf_r+0x1e8>)
 8006ca6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006caa:	2206      	movs	r2, #6
 8006cac:	f7f9 fab0 	bl	8000210 <memchr>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d036      	beq.n	8006d22 <_svfiprintf_r+0x1d2>
 8006cb4:	4b21      	ldr	r3, [pc, #132]	@ (8006d3c <_svfiprintf_r+0x1ec>)
 8006cb6:	bb1b      	cbnz	r3, 8006d00 <_svfiprintf_r+0x1b0>
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	3307      	adds	r3, #7
 8006cbc:	f023 0307 	bic.w	r3, r3, #7
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	9303      	str	r3, [sp, #12]
 8006cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc6:	4433      	add	r3, r6
 8006cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cca:	e76a      	b.n	8006ba2 <_svfiprintf_r+0x52>
 8006ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cd0:	460c      	mov	r4, r1
 8006cd2:	2001      	movs	r0, #1
 8006cd4:	e7a8      	b.n	8006c28 <_svfiprintf_r+0xd8>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	3401      	adds	r4, #1
 8006cda:	9305      	str	r3, [sp, #20]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	f04f 0c0a 	mov.w	ip, #10
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ce8:	3a30      	subs	r2, #48	@ 0x30
 8006cea:	2a09      	cmp	r2, #9
 8006cec:	d903      	bls.n	8006cf6 <_svfiprintf_r+0x1a6>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0c6      	beq.n	8006c80 <_svfiprintf_r+0x130>
 8006cf2:	9105      	str	r1, [sp, #20]
 8006cf4:	e7c4      	b.n	8006c80 <_svfiprintf_r+0x130>
 8006cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e7f0      	b.n	8006ce2 <_svfiprintf_r+0x192>
 8006d00:	ab03      	add	r3, sp, #12
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	462a      	mov	r2, r5
 8006d06:	4b0e      	ldr	r3, [pc, #56]	@ (8006d40 <_svfiprintf_r+0x1f0>)
 8006d08:	a904      	add	r1, sp, #16
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	f3af 8000 	nop.w
 8006d10:	1c42      	adds	r2, r0, #1
 8006d12:	4606      	mov	r6, r0
 8006d14:	d1d6      	bne.n	8006cc4 <_svfiprintf_r+0x174>
 8006d16:	89ab      	ldrh	r3, [r5, #12]
 8006d18:	065b      	lsls	r3, r3, #25
 8006d1a:	f53f af2d 	bmi.w	8006b78 <_svfiprintf_r+0x28>
 8006d1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d20:	e72c      	b.n	8006b7c <_svfiprintf_r+0x2c>
 8006d22:	ab03      	add	r3, sp, #12
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	462a      	mov	r2, r5
 8006d28:	4b05      	ldr	r3, [pc, #20]	@ (8006d40 <_svfiprintf_r+0x1f0>)
 8006d2a:	a904      	add	r1, sp, #16
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	f000 f9bb 	bl	80070a8 <_printf_i>
 8006d32:	e7ed      	b.n	8006d10 <_svfiprintf_r+0x1c0>
 8006d34:	0800784c 	.word	0x0800784c
 8006d38:	08007856 	.word	0x08007856
 8006d3c:	00000000 	.word	0x00000000
 8006d40:	08006a99 	.word	0x08006a99
 8006d44:	08007852 	.word	0x08007852

08006d48 <__sfputc_r>:
 8006d48:	6893      	ldr	r3, [r2, #8]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	b410      	push	{r4}
 8006d50:	6093      	str	r3, [r2, #8]
 8006d52:	da08      	bge.n	8006d66 <__sfputc_r+0x1e>
 8006d54:	6994      	ldr	r4, [r2, #24]
 8006d56:	42a3      	cmp	r3, r4
 8006d58:	db01      	blt.n	8006d5e <__sfputc_r+0x16>
 8006d5a:	290a      	cmp	r1, #10
 8006d5c:	d103      	bne.n	8006d66 <__sfputc_r+0x1e>
 8006d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d62:	f000 bb6d 	b.w	8007440 <__swbuf_r>
 8006d66:	6813      	ldr	r3, [r2, #0]
 8006d68:	1c58      	adds	r0, r3, #1
 8006d6a:	6010      	str	r0, [r2, #0]
 8006d6c:	7019      	strb	r1, [r3, #0]
 8006d6e:	4608      	mov	r0, r1
 8006d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <__sfputs_r>:
 8006d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d78:	4606      	mov	r6, r0
 8006d7a:	460f      	mov	r7, r1
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	18d5      	adds	r5, r2, r3
 8006d80:	42ac      	cmp	r4, r5
 8006d82:	d101      	bne.n	8006d88 <__sfputs_r+0x12>
 8006d84:	2000      	movs	r0, #0
 8006d86:	e007      	b.n	8006d98 <__sfputs_r+0x22>
 8006d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d8c:	463a      	mov	r2, r7
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7ff ffda 	bl	8006d48 <__sfputc_r>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d1f3      	bne.n	8006d80 <__sfputs_r+0xa>
 8006d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d9c <_vfiprintf_r>:
 8006d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da0:	460d      	mov	r5, r1
 8006da2:	b09d      	sub	sp, #116	@ 0x74
 8006da4:	4614      	mov	r4, r2
 8006da6:	4698      	mov	r8, r3
 8006da8:	4606      	mov	r6, r0
 8006daa:	b118      	cbz	r0, 8006db4 <_vfiprintf_r+0x18>
 8006dac:	6a03      	ldr	r3, [r0, #32]
 8006dae:	b90b      	cbnz	r3, 8006db4 <_vfiprintf_r+0x18>
 8006db0:	f7ff fbda 	bl	8006568 <__sinit>
 8006db4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006db6:	07d9      	lsls	r1, r3, #31
 8006db8:	d405      	bmi.n	8006dc6 <_vfiprintf_r+0x2a>
 8006dba:	89ab      	ldrh	r3, [r5, #12]
 8006dbc:	059a      	lsls	r2, r3, #22
 8006dbe:	d402      	bmi.n	8006dc6 <_vfiprintf_r+0x2a>
 8006dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dc2:	f7ff fd60 	bl	8006886 <__retarget_lock_acquire_recursive>
 8006dc6:	89ab      	ldrh	r3, [r5, #12]
 8006dc8:	071b      	lsls	r3, r3, #28
 8006dca:	d501      	bpl.n	8006dd0 <_vfiprintf_r+0x34>
 8006dcc:	692b      	ldr	r3, [r5, #16]
 8006dce:	b99b      	cbnz	r3, 8006df8 <_vfiprintf_r+0x5c>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f000 fb72 	bl	80074bc <__swsetup_r>
 8006dd8:	b170      	cbz	r0, 8006df8 <_vfiprintf_r+0x5c>
 8006dda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ddc:	07dc      	lsls	r4, r3, #31
 8006dde:	d504      	bpl.n	8006dea <_vfiprintf_r+0x4e>
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006de4:	b01d      	add	sp, #116	@ 0x74
 8006de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dea:	89ab      	ldrh	r3, [r5, #12]
 8006dec:	0598      	lsls	r0, r3, #22
 8006dee:	d4f7      	bmi.n	8006de0 <_vfiprintf_r+0x44>
 8006df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006df2:	f7ff fd49 	bl	8006888 <__retarget_lock_release_recursive>
 8006df6:	e7f3      	b.n	8006de0 <_vfiprintf_r+0x44>
 8006df8:	2300      	movs	r3, #0
 8006dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dfc:	2320      	movs	r3, #32
 8006dfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e06:	2330      	movs	r3, #48	@ 0x30
 8006e08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006fb8 <_vfiprintf_r+0x21c>
 8006e0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e10:	f04f 0901 	mov.w	r9, #1
 8006e14:	4623      	mov	r3, r4
 8006e16:	469a      	mov	sl, r3
 8006e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e1c:	b10a      	cbz	r2, 8006e22 <_vfiprintf_r+0x86>
 8006e1e:	2a25      	cmp	r2, #37	@ 0x25
 8006e20:	d1f9      	bne.n	8006e16 <_vfiprintf_r+0x7a>
 8006e22:	ebba 0b04 	subs.w	fp, sl, r4
 8006e26:	d00b      	beq.n	8006e40 <_vfiprintf_r+0xa4>
 8006e28:	465b      	mov	r3, fp
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f7ff ffa1 	bl	8006d76 <__sfputs_r>
 8006e34:	3001      	adds	r0, #1
 8006e36:	f000 80a7 	beq.w	8006f88 <_vfiprintf_r+0x1ec>
 8006e3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e3c:	445a      	add	r2, fp
 8006e3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e40:	f89a 3000 	ldrb.w	r3, [sl]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 809f 	beq.w	8006f88 <_vfiprintf_r+0x1ec>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e54:	f10a 0a01 	add.w	sl, sl, #1
 8006e58:	9304      	str	r3, [sp, #16]
 8006e5a:	9307      	str	r3, [sp, #28]
 8006e5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e60:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e62:	4654      	mov	r4, sl
 8006e64:	2205      	movs	r2, #5
 8006e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6a:	4853      	ldr	r0, [pc, #332]	@ (8006fb8 <_vfiprintf_r+0x21c>)
 8006e6c:	f7f9 f9d0 	bl	8000210 <memchr>
 8006e70:	9a04      	ldr	r2, [sp, #16]
 8006e72:	b9d8      	cbnz	r0, 8006eac <_vfiprintf_r+0x110>
 8006e74:	06d1      	lsls	r1, r2, #27
 8006e76:	bf44      	itt	mi
 8006e78:	2320      	movmi	r3, #32
 8006e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e7e:	0713      	lsls	r3, r2, #28
 8006e80:	bf44      	itt	mi
 8006e82:	232b      	movmi	r3, #43	@ 0x2b
 8006e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e88:	f89a 3000 	ldrb.w	r3, [sl]
 8006e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e8e:	d015      	beq.n	8006ebc <_vfiprintf_r+0x120>
 8006e90:	9a07      	ldr	r2, [sp, #28]
 8006e92:	4654      	mov	r4, sl
 8006e94:	2000      	movs	r0, #0
 8006e96:	f04f 0c0a 	mov.w	ip, #10
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ea0:	3b30      	subs	r3, #48	@ 0x30
 8006ea2:	2b09      	cmp	r3, #9
 8006ea4:	d94b      	bls.n	8006f3e <_vfiprintf_r+0x1a2>
 8006ea6:	b1b0      	cbz	r0, 8006ed6 <_vfiprintf_r+0x13a>
 8006ea8:	9207      	str	r2, [sp, #28]
 8006eaa:	e014      	b.n	8006ed6 <_vfiprintf_r+0x13a>
 8006eac:	eba0 0308 	sub.w	r3, r0, r8
 8006eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	9304      	str	r3, [sp, #16]
 8006eb8:	46a2      	mov	sl, r4
 8006eba:	e7d2      	b.n	8006e62 <_vfiprintf_r+0xc6>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	1d19      	adds	r1, r3, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	9103      	str	r1, [sp, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfbb      	ittet	lt
 8006ec8:	425b      	neglt	r3, r3
 8006eca:	f042 0202 	orrlt.w	r2, r2, #2
 8006ece:	9307      	strge	r3, [sp, #28]
 8006ed0:	9307      	strlt	r3, [sp, #28]
 8006ed2:	bfb8      	it	lt
 8006ed4:	9204      	strlt	r2, [sp, #16]
 8006ed6:	7823      	ldrb	r3, [r4, #0]
 8006ed8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006eda:	d10a      	bne.n	8006ef2 <_vfiprintf_r+0x156>
 8006edc:	7863      	ldrb	r3, [r4, #1]
 8006ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ee0:	d132      	bne.n	8006f48 <_vfiprintf_r+0x1ac>
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	1d1a      	adds	r2, r3, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	9203      	str	r2, [sp, #12]
 8006eea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006eee:	3402      	adds	r4, #2
 8006ef0:	9305      	str	r3, [sp, #20]
 8006ef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006fc8 <_vfiprintf_r+0x22c>
 8006ef6:	7821      	ldrb	r1, [r4, #0]
 8006ef8:	2203      	movs	r2, #3
 8006efa:	4650      	mov	r0, sl
 8006efc:	f7f9 f988 	bl	8000210 <memchr>
 8006f00:	b138      	cbz	r0, 8006f12 <_vfiprintf_r+0x176>
 8006f02:	9b04      	ldr	r3, [sp, #16]
 8006f04:	eba0 000a 	sub.w	r0, r0, sl
 8006f08:	2240      	movs	r2, #64	@ 0x40
 8006f0a:	4082      	lsls	r2, r0
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	3401      	adds	r4, #1
 8006f10:	9304      	str	r3, [sp, #16]
 8006f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f16:	4829      	ldr	r0, [pc, #164]	@ (8006fbc <_vfiprintf_r+0x220>)
 8006f18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f1c:	2206      	movs	r2, #6
 8006f1e:	f7f9 f977 	bl	8000210 <memchr>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d03f      	beq.n	8006fa6 <_vfiprintf_r+0x20a>
 8006f26:	4b26      	ldr	r3, [pc, #152]	@ (8006fc0 <_vfiprintf_r+0x224>)
 8006f28:	bb1b      	cbnz	r3, 8006f72 <_vfiprintf_r+0x1d6>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	3307      	adds	r3, #7
 8006f2e:	f023 0307 	bic.w	r3, r3, #7
 8006f32:	3308      	adds	r3, #8
 8006f34:	9303      	str	r3, [sp, #12]
 8006f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f38:	443b      	add	r3, r7
 8006f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f3c:	e76a      	b.n	8006e14 <_vfiprintf_r+0x78>
 8006f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f42:	460c      	mov	r4, r1
 8006f44:	2001      	movs	r0, #1
 8006f46:	e7a8      	b.n	8006e9a <_vfiprintf_r+0xfe>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	3401      	adds	r4, #1
 8006f4c:	9305      	str	r3, [sp, #20]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	f04f 0c0a 	mov.w	ip, #10
 8006f54:	4620      	mov	r0, r4
 8006f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f5a:	3a30      	subs	r2, #48	@ 0x30
 8006f5c:	2a09      	cmp	r2, #9
 8006f5e:	d903      	bls.n	8006f68 <_vfiprintf_r+0x1cc>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0c6      	beq.n	8006ef2 <_vfiprintf_r+0x156>
 8006f64:	9105      	str	r1, [sp, #20]
 8006f66:	e7c4      	b.n	8006ef2 <_vfiprintf_r+0x156>
 8006f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e7f0      	b.n	8006f54 <_vfiprintf_r+0x1b8>
 8006f72:	ab03      	add	r3, sp, #12
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	462a      	mov	r2, r5
 8006f78:	4b12      	ldr	r3, [pc, #72]	@ (8006fc4 <_vfiprintf_r+0x228>)
 8006f7a:	a904      	add	r1, sp, #16
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f3af 8000 	nop.w
 8006f82:	4607      	mov	r7, r0
 8006f84:	1c78      	adds	r0, r7, #1
 8006f86:	d1d6      	bne.n	8006f36 <_vfiprintf_r+0x19a>
 8006f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f8a:	07d9      	lsls	r1, r3, #31
 8006f8c:	d405      	bmi.n	8006f9a <_vfiprintf_r+0x1fe>
 8006f8e:	89ab      	ldrh	r3, [r5, #12]
 8006f90:	059a      	lsls	r2, r3, #22
 8006f92:	d402      	bmi.n	8006f9a <_vfiprintf_r+0x1fe>
 8006f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f96:	f7ff fc77 	bl	8006888 <__retarget_lock_release_recursive>
 8006f9a:	89ab      	ldrh	r3, [r5, #12]
 8006f9c:	065b      	lsls	r3, r3, #25
 8006f9e:	f53f af1f 	bmi.w	8006de0 <_vfiprintf_r+0x44>
 8006fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fa4:	e71e      	b.n	8006de4 <_vfiprintf_r+0x48>
 8006fa6:	ab03      	add	r3, sp, #12
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	462a      	mov	r2, r5
 8006fac:	4b05      	ldr	r3, [pc, #20]	@ (8006fc4 <_vfiprintf_r+0x228>)
 8006fae:	a904      	add	r1, sp, #16
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f000 f879 	bl	80070a8 <_printf_i>
 8006fb6:	e7e4      	b.n	8006f82 <_vfiprintf_r+0x1e6>
 8006fb8:	0800784c 	.word	0x0800784c
 8006fbc:	08007856 	.word	0x08007856
 8006fc0:	00000000 	.word	0x00000000
 8006fc4:	08006d77 	.word	0x08006d77
 8006fc8:	08007852 	.word	0x08007852

08006fcc <_printf_common>:
 8006fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	4616      	mov	r6, r2
 8006fd2:	4698      	mov	r8, r3
 8006fd4:	688a      	ldr	r2, [r1, #8]
 8006fd6:	690b      	ldr	r3, [r1, #16]
 8006fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	bfb8      	it	lt
 8006fe0:	4613      	movlt	r3, r2
 8006fe2:	6033      	str	r3, [r6, #0]
 8006fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fe8:	4607      	mov	r7, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	b10a      	cbz	r2, 8006ff2 <_printf_common+0x26>
 8006fee:	3301      	adds	r3, #1
 8006ff0:	6033      	str	r3, [r6, #0]
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	0699      	lsls	r1, r3, #26
 8006ff6:	bf42      	ittt	mi
 8006ff8:	6833      	ldrmi	r3, [r6, #0]
 8006ffa:	3302      	addmi	r3, #2
 8006ffc:	6033      	strmi	r3, [r6, #0]
 8006ffe:	6825      	ldr	r5, [r4, #0]
 8007000:	f015 0506 	ands.w	r5, r5, #6
 8007004:	d106      	bne.n	8007014 <_printf_common+0x48>
 8007006:	f104 0a19 	add.w	sl, r4, #25
 800700a:	68e3      	ldr	r3, [r4, #12]
 800700c:	6832      	ldr	r2, [r6, #0]
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	42ab      	cmp	r3, r5
 8007012:	dc26      	bgt.n	8007062 <_printf_common+0x96>
 8007014:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007018:	6822      	ldr	r2, [r4, #0]
 800701a:	3b00      	subs	r3, #0
 800701c:	bf18      	it	ne
 800701e:	2301      	movne	r3, #1
 8007020:	0692      	lsls	r2, r2, #26
 8007022:	d42b      	bmi.n	800707c <_printf_common+0xb0>
 8007024:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007028:	4641      	mov	r1, r8
 800702a:	4638      	mov	r0, r7
 800702c:	47c8      	blx	r9
 800702e:	3001      	adds	r0, #1
 8007030:	d01e      	beq.n	8007070 <_printf_common+0xa4>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	6922      	ldr	r2, [r4, #16]
 8007036:	f003 0306 	and.w	r3, r3, #6
 800703a:	2b04      	cmp	r3, #4
 800703c:	bf02      	ittt	eq
 800703e:	68e5      	ldreq	r5, [r4, #12]
 8007040:	6833      	ldreq	r3, [r6, #0]
 8007042:	1aed      	subeq	r5, r5, r3
 8007044:	68a3      	ldr	r3, [r4, #8]
 8007046:	bf0c      	ite	eq
 8007048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800704c:	2500      	movne	r5, #0
 800704e:	4293      	cmp	r3, r2
 8007050:	bfc4      	itt	gt
 8007052:	1a9b      	subgt	r3, r3, r2
 8007054:	18ed      	addgt	r5, r5, r3
 8007056:	2600      	movs	r6, #0
 8007058:	341a      	adds	r4, #26
 800705a:	42b5      	cmp	r5, r6
 800705c:	d11a      	bne.n	8007094 <_printf_common+0xc8>
 800705e:	2000      	movs	r0, #0
 8007060:	e008      	b.n	8007074 <_printf_common+0xa8>
 8007062:	2301      	movs	r3, #1
 8007064:	4652      	mov	r2, sl
 8007066:	4641      	mov	r1, r8
 8007068:	4638      	mov	r0, r7
 800706a:	47c8      	blx	r9
 800706c:	3001      	adds	r0, #1
 800706e:	d103      	bne.n	8007078 <_printf_common+0xac>
 8007070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007078:	3501      	adds	r5, #1
 800707a:	e7c6      	b.n	800700a <_printf_common+0x3e>
 800707c:	18e1      	adds	r1, r4, r3
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	2030      	movs	r0, #48	@ 0x30
 8007082:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007086:	4422      	add	r2, r4
 8007088:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800708c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007090:	3302      	adds	r3, #2
 8007092:	e7c7      	b.n	8007024 <_printf_common+0x58>
 8007094:	2301      	movs	r3, #1
 8007096:	4622      	mov	r2, r4
 8007098:	4641      	mov	r1, r8
 800709a:	4638      	mov	r0, r7
 800709c:	47c8      	blx	r9
 800709e:	3001      	adds	r0, #1
 80070a0:	d0e6      	beq.n	8007070 <_printf_common+0xa4>
 80070a2:	3601      	adds	r6, #1
 80070a4:	e7d9      	b.n	800705a <_printf_common+0x8e>
	...

080070a8 <_printf_i>:
 80070a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	7e0f      	ldrb	r7, [r1, #24]
 80070ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070b0:	2f78      	cmp	r7, #120	@ 0x78
 80070b2:	4691      	mov	r9, r2
 80070b4:	4680      	mov	r8, r0
 80070b6:	460c      	mov	r4, r1
 80070b8:	469a      	mov	sl, r3
 80070ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070be:	d807      	bhi.n	80070d0 <_printf_i+0x28>
 80070c0:	2f62      	cmp	r7, #98	@ 0x62
 80070c2:	d80a      	bhi.n	80070da <_printf_i+0x32>
 80070c4:	2f00      	cmp	r7, #0
 80070c6:	f000 80d2 	beq.w	800726e <_printf_i+0x1c6>
 80070ca:	2f58      	cmp	r7, #88	@ 0x58
 80070cc:	f000 80b9 	beq.w	8007242 <_printf_i+0x19a>
 80070d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070d8:	e03a      	b.n	8007150 <_printf_i+0xa8>
 80070da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070de:	2b15      	cmp	r3, #21
 80070e0:	d8f6      	bhi.n	80070d0 <_printf_i+0x28>
 80070e2:	a101      	add	r1, pc, #4	@ (adr r1, 80070e8 <_printf_i+0x40>)
 80070e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070e8:	08007141 	.word	0x08007141
 80070ec:	08007155 	.word	0x08007155
 80070f0:	080070d1 	.word	0x080070d1
 80070f4:	080070d1 	.word	0x080070d1
 80070f8:	080070d1 	.word	0x080070d1
 80070fc:	080070d1 	.word	0x080070d1
 8007100:	08007155 	.word	0x08007155
 8007104:	080070d1 	.word	0x080070d1
 8007108:	080070d1 	.word	0x080070d1
 800710c:	080070d1 	.word	0x080070d1
 8007110:	080070d1 	.word	0x080070d1
 8007114:	08007255 	.word	0x08007255
 8007118:	0800717f 	.word	0x0800717f
 800711c:	0800720f 	.word	0x0800720f
 8007120:	080070d1 	.word	0x080070d1
 8007124:	080070d1 	.word	0x080070d1
 8007128:	08007277 	.word	0x08007277
 800712c:	080070d1 	.word	0x080070d1
 8007130:	0800717f 	.word	0x0800717f
 8007134:	080070d1 	.word	0x080070d1
 8007138:	080070d1 	.word	0x080070d1
 800713c:	08007217 	.word	0x08007217
 8007140:	6833      	ldr	r3, [r6, #0]
 8007142:	1d1a      	adds	r2, r3, #4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6032      	str	r2, [r6, #0]
 8007148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800714c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007150:	2301      	movs	r3, #1
 8007152:	e09d      	b.n	8007290 <_printf_i+0x1e8>
 8007154:	6833      	ldr	r3, [r6, #0]
 8007156:	6820      	ldr	r0, [r4, #0]
 8007158:	1d19      	adds	r1, r3, #4
 800715a:	6031      	str	r1, [r6, #0]
 800715c:	0606      	lsls	r6, r0, #24
 800715e:	d501      	bpl.n	8007164 <_printf_i+0xbc>
 8007160:	681d      	ldr	r5, [r3, #0]
 8007162:	e003      	b.n	800716c <_printf_i+0xc4>
 8007164:	0645      	lsls	r5, r0, #25
 8007166:	d5fb      	bpl.n	8007160 <_printf_i+0xb8>
 8007168:	f9b3 5000 	ldrsh.w	r5, [r3]
 800716c:	2d00      	cmp	r5, #0
 800716e:	da03      	bge.n	8007178 <_printf_i+0xd0>
 8007170:	232d      	movs	r3, #45	@ 0x2d
 8007172:	426d      	negs	r5, r5
 8007174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007178:	4859      	ldr	r0, [pc, #356]	@ (80072e0 <_printf_i+0x238>)
 800717a:	230a      	movs	r3, #10
 800717c:	e011      	b.n	80071a2 <_printf_i+0xfa>
 800717e:	6821      	ldr	r1, [r4, #0]
 8007180:	6833      	ldr	r3, [r6, #0]
 8007182:	0608      	lsls	r0, r1, #24
 8007184:	f853 5b04 	ldr.w	r5, [r3], #4
 8007188:	d402      	bmi.n	8007190 <_printf_i+0xe8>
 800718a:	0649      	lsls	r1, r1, #25
 800718c:	bf48      	it	mi
 800718e:	b2ad      	uxthmi	r5, r5
 8007190:	2f6f      	cmp	r7, #111	@ 0x6f
 8007192:	4853      	ldr	r0, [pc, #332]	@ (80072e0 <_printf_i+0x238>)
 8007194:	6033      	str	r3, [r6, #0]
 8007196:	bf14      	ite	ne
 8007198:	230a      	movne	r3, #10
 800719a:	2308      	moveq	r3, #8
 800719c:	2100      	movs	r1, #0
 800719e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071a2:	6866      	ldr	r6, [r4, #4]
 80071a4:	60a6      	str	r6, [r4, #8]
 80071a6:	2e00      	cmp	r6, #0
 80071a8:	bfa2      	ittt	ge
 80071aa:	6821      	ldrge	r1, [r4, #0]
 80071ac:	f021 0104 	bicge.w	r1, r1, #4
 80071b0:	6021      	strge	r1, [r4, #0]
 80071b2:	b90d      	cbnz	r5, 80071b8 <_printf_i+0x110>
 80071b4:	2e00      	cmp	r6, #0
 80071b6:	d04b      	beq.n	8007250 <_printf_i+0x1a8>
 80071b8:	4616      	mov	r6, r2
 80071ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80071be:	fb03 5711 	mls	r7, r3, r1, r5
 80071c2:	5dc7      	ldrb	r7, [r0, r7]
 80071c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071c8:	462f      	mov	r7, r5
 80071ca:	42bb      	cmp	r3, r7
 80071cc:	460d      	mov	r5, r1
 80071ce:	d9f4      	bls.n	80071ba <_printf_i+0x112>
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d10b      	bne.n	80071ec <_printf_i+0x144>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	07df      	lsls	r7, r3, #31
 80071d8:	d508      	bpl.n	80071ec <_printf_i+0x144>
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	6861      	ldr	r1, [r4, #4]
 80071de:	4299      	cmp	r1, r3
 80071e0:	bfde      	ittt	le
 80071e2:	2330      	movle	r3, #48	@ 0x30
 80071e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071e8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80071ec:	1b92      	subs	r2, r2, r6
 80071ee:	6122      	str	r2, [r4, #16]
 80071f0:	f8cd a000 	str.w	sl, [sp]
 80071f4:	464b      	mov	r3, r9
 80071f6:	aa03      	add	r2, sp, #12
 80071f8:	4621      	mov	r1, r4
 80071fa:	4640      	mov	r0, r8
 80071fc:	f7ff fee6 	bl	8006fcc <_printf_common>
 8007200:	3001      	adds	r0, #1
 8007202:	d14a      	bne.n	800729a <_printf_i+0x1f2>
 8007204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007208:	b004      	add	sp, #16
 800720a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	f043 0320 	orr.w	r3, r3, #32
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	4833      	ldr	r0, [pc, #204]	@ (80072e4 <_printf_i+0x23c>)
 8007218:	2778      	movs	r7, #120	@ 0x78
 800721a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	6831      	ldr	r1, [r6, #0]
 8007222:	061f      	lsls	r7, r3, #24
 8007224:	f851 5b04 	ldr.w	r5, [r1], #4
 8007228:	d402      	bmi.n	8007230 <_printf_i+0x188>
 800722a:	065f      	lsls	r7, r3, #25
 800722c:	bf48      	it	mi
 800722e:	b2ad      	uxthmi	r5, r5
 8007230:	6031      	str	r1, [r6, #0]
 8007232:	07d9      	lsls	r1, r3, #31
 8007234:	bf44      	itt	mi
 8007236:	f043 0320 	orrmi.w	r3, r3, #32
 800723a:	6023      	strmi	r3, [r4, #0]
 800723c:	b11d      	cbz	r5, 8007246 <_printf_i+0x19e>
 800723e:	2310      	movs	r3, #16
 8007240:	e7ac      	b.n	800719c <_printf_i+0xf4>
 8007242:	4827      	ldr	r0, [pc, #156]	@ (80072e0 <_printf_i+0x238>)
 8007244:	e7e9      	b.n	800721a <_printf_i+0x172>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	f023 0320 	bic.w	r3, r3, #32
 800724c:	6023      	str	r3, [r4, #0]
 800724e:	e7f6      	b.n	800723e <_printf_i+0x196>
 8007250:	4616      	mov	r6, r2
 8007252:	e7bd      	b.n	80071d0 <_printf_i+0x128>
 8007254:	6833      	ldr	r3, [r6, #0]
 8007256:	6825      	ldr	r5, [r4, #0]
 8007258:	6961      	ldr	r1, [r4, #20]
 800725a:	1d18      	adds	r0, r3, #4
 800725c:	6030      	str	r0, [r6, #0]
 800725e:	062e      	lsls	r6, r5, #24
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	d501      	bpl.n	8007268 <_printf_i+0x1c0>
 8007264:	6019      	str	r1, [r3, #0]
 8007266:	e002      	b.n	800726e <_printf_i+0x1c6>
 8007268:	0668      	lsls	r0, r5, #25
 800726a:	d5fb      	bpl.n	8007264 <_printf_i+0x1bc>
 800726c:	8019      	strh	r1, [r3, #0]
 800726e:	2300      	movs	r3, #0
 8007270:	6123      	str	r3, [r4, #16]
 8007272:	4616      	mov	r6, r2
 8007274:	e7bc      	b.n	80071f0 <_printf_i+0x148>
 8007276:	6833      	ldr	r3, [r6, #0]
 8007278:	1d1a      	adds	r2, r3, #4
 800727a:	6032      	str	r2, [r6, #0]
 800727c:	681e      	ldr	r6, [r3, #0]
 800727e:	6862      	ldr	r2, [r4, #4]
 8007280:	2100      	movs	r1, #0
 8007282:	4630      	mov	r0, r6
 8007284:	f7f8 ffc4 	bl	8000210 <memchr>
 8007288:	b108      	cbz	r0, 800728e <_printf_i+0x1e6>
 800728a:	1b80      	subs	r0, r0, r6
 800728c:	6060      	str	r0, [r4, #4]
 800728e:	6863      	ldr	r3, [r4, #4]
 8007290:	6123      	str	r3, [r4, #16]
 8007292:	2300      	movs	r3, #0
 8007294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007298:	e7aa      	b.n	80071f0 <_printf_i+0x148>
 800729a:	6923      	ldr	r3, [r4, #16]
 800729c:	4632      	mov	r2, r6
 800729e:	4649      	mov	r1, r9
 80072a0:	4640      	mov	r0, r8
 80072a2:	47d0      	blx	sl
 80072a4:	3001      	adds	r0, #1
 80072a6:	d0ad      	beq.n	8007204 <_printf_i+0x15c>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	079b      	lsls	r3, r3, #30
 80072ac:	d413      	bmi.n	80072d6 <_printf_i+0x22e>
 80072ae:	68e0      	ldr	r0, [r4, #12]
 80072b0:	9b03      	ldr	r3, [sp, #12]
 80072b2:	4298      	cmp	r0, r3
 80072b4:	bfb8      	it	lt
 80072b6:	4618      	movlt	r0, r3
 80072b8:	e7a6      	b.n	8007208 <_printf_i+0x160>
 80072ba:	2301      	movs	r3, #1
 80072bc:	4632      	mov	r2, r6
 80072be:	4649      	mov	r1, r9
 80072c0:	4640      	mov	r0, r8
 80072c2:	47d0      	blx	sl
 80072c4:	3001      	adds	r0, #1
 80072c6:	d09d      	beq.n	8007204 <_printf_i+0x15c>
 80072c8:	3501      	adds	r5, #1
 80072ca:	68e3      	ldr	r3, [r4, #12]
 80072cc:	9903      	ldr	r1, [sp, #12]
 80072ce:	1a5b      	subs	r3, r3, r1
 80072d0:	42ab      	cmp	r3, r5
 80072d2:	dcf2      	bgt.n	80072ba <_printf_i+0x212>
 80072d4:	e7eb      	b.n	80072ae <_printf_i+0x206>
 80072d6:	2500      	movs	r5, #0
 80072d8:	f104 0619 	add.w	r6, r4, #25
 80072dc:	e7f5      	b.n	80072ca <_printf_i+0x222>
 80072de:	bf00      	nop
 80072e0:	0800785d 	.word	0x0800785d
 80072e4:	0800786e 	.word	0x0800786e

080072e8 <__sflush_r>:
 80072e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f0:	0716      	lsls	r6, r2, #28
 80072f2:	4605      	mov	r5, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	d454      	bmi.n	80073a2 <__sflush_r+0xba>
 80072f8:	684b      	ldr	r3, [r1, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	dc02      	bgt.n	8007304 <__sflush_r+0x1c>
 80072fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	dd48      	ble.n	8007396 <__sflush_r+0xae>
 8007304:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007306:	2e00      	cmp	r6, #0
 8007308:	d045      	beq.n	8007396 <__sflush_r+0xae>
 800730a:	2300      	movs	r3, #0
 800730c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007310:	682f      	ldr	r7, [r5, #0]
 8007312:	6a21      	ldr	r1, [r4, #32]
 8007314:	602b      	str	r3, [r5, #0]
 8007316:	d030      	beq.n	800737a <__sflush_r+0x92>
 8007318:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	0759      	lsls	r1, r3, #29
 800731e:	d505      	bpl.n	800732c <__sflush_r+0x44>
 8007320:	6863      	ldr	r3, [r4, #4]
 8007322:	1ad2      	subs	r2, r2, r3
 8007324:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007326:	b10b      	cbz	r3, 800732c <__sflush_r+0x44>
 8007328:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800732a:	1ad2      	subs	r2, r2, r3
 800732c:	2300      	movs	r3, #0
 800732e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007330:	6a21      	ldr	r1, [r4, #32]
 8007332:	4628      	mov	r0, r5
 8007334:	47b0      	blx	r6
 8007336:	1c43      	adds	r3, r0, #1
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	d106      	bne.n	800734a <__sflush_r+0x62>
 800733c:	6829      	ldr	r1, [r5, #0]
 800733e:	291d      	cmp	r1, #29
 8007340:	d82b      	bhi.n	800739a <__sflush_r+0xb2>
 8007342:	4a2a      	ldr	r2, [pc, #168]	@ (80073ec <__sflush_r+0x104>)
 8007344:	410a      	asrs	r2, r1
 8007346:	07d6      	lsls	r6, r2, #31
 8007348:	d427      	bmi.n	800739a <__sflush_r+0xb2>
 800734a:	2200      	movs	r2, #0
 800734c:	6062      	str	r2, [r4, #4]
 800734e:	04d9      	lsls	r1, r3, #19
 8007350:	6922      	ldr	r2, [r4, #16]
 8007352:	6022      	str	r2, [r4, #0]
 8007354:	d504      	bpl.n	8007360 <__sflush_r+0x78>
 8007356:	1c42      	adds	r2, r0, #1
 8007358:	d101      	bne.n	800735e <__sflush_r+0x76>
 800735a:	682b      	ldr	r3, [r5, #0]
 800735c:	b903      	cbnz	r3, 8007360 <__sflush_r+0x78>
 800735e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007362:	602f      	str	r7, [r5, #0]
 8007364:	b1b9      	cbz	r1, 8007396 <__sflush_r+0xae>
 8007366:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800736a:	4299      	cmp	r1, r3
 800736c:	d002      	beq.n	8007374 <__sflush_r+0x8c>
 800736e:	4628      	mov	r0, r5
 8007370:	f7ff fa9a 	bl	80068a8 <_free_r>
 8007374:	2300      	movs	r3, #0
 8007376:	6363      	str	r3, [r4, #52]	@ 0x34
 8007378:	e00d      	b.n	8007396 <__sflush_r+0xae>
 800737a:	2301      	movs	r3, #1
 800737c:	4628      	mov	r0, r5
 800737e:	47b0      	blx	r6
 8007380:	4602      	mov	r2, r0
 8007382:	1c50      	adds	r0, r2, #1
 8007384:	d1c9      	bne.n	800731a <__sflush_r+0x32>
 8007386:	682b      	ldr	r3, [r5, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d0c6      	beq.n	800731a <__sflush_r+0x32>
 800738c:	2b1d      	cmp	r3, #29
 800738e:	d001      	beq.n	8007394 <__sflush_r+0xac>
 8007390:	2b16      	cmp	r3, #22
 8007392:	d11e      	bne.n	80073d2 <__sflush_r+0xea>
 8007394:	602f      	str	r7, [r5, #0]
 8007396:	2000      	movs	r0, #0
 8007398:	e022      	b.n	80073e0 <__sflush_r+0xf8>
 800739a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800739e:	b21b      	sxth	r3, r3
 80073a0:	e01b      	b.n	80073da <__sflush_r+0xf2>
 80073a2:	690f      	ldr	r7, [r1, #16]
 80073a4:	2f00      	cmp	r7, #0
 80073a6:	d0f6      	beq.n	8007396 <__sflush_r+0xae>
 80073a8:	0793      	lsls	r3, r2, #30
 80073aa:	680e      	ldr	r6, [r1, #0]
 80073ac:	bf08      	it	eq
 80073ae:	694b      	ldreq	r3, [r1, #20]
 80073b0:	600f      	str	r7, [r1, #0]
 80073b2:	bf18      	it	ne
 80073b4:	2300      	movne	r3, #0
 80073b6:	eba6 0807 	sub.w	r8, r6, r7
 80073ba:	608b      	str	r3, [r1, #8]
 80073bc:	f1b8 0f00 	cmp.w	r8, #0
 80073c0:	dde9      	ble.n	8007396 <__sflush_r+0xae>
 80073c2:	6a21      	ldr	r1, [r4, #32]
 80073c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80073c6:	4643      	mov	r3, r8
 80073c8:	463a      	mov	r2, r7
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b0      	blx	r6
 80073ce:	2800      	cmp	r0, #0
 80073d0:	dc08      	bgt.n	80073e4 <__sflush_r+0xfc>
 80073d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073da:	81a3      	strh	r3, [r4, #12]
 80073dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073e4:	4407      	add	r7, r0
 80073e6:	eba8 0800 	sub.w	r8, r8, r0
 80073ea:	e7e7      	b.n	80073bc <__sflush_r+0xd4>
 80073ec:	dfbffffe 	.word	0xdfbffffe

080073f0 <_fflush_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	690b      	ldr	r3, [r1, #16]
 80073f4:	4605      	mov	r5, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	b913      	cbnz	r3, 8007400 <_fflush_r+0x10>
 80073fa:	2500      	movs	r5, #0
 80073fc:	4628      	mov	r0, r5
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	b118      	cbz	r0, 800740a <_fflush_r+0x1a>
 8007402:	6a03      	ldr	r3, [r0, #32]
 8007404:	b90b      	cbnz	r3, 800740a <_fflush_r+0x1a>
 8007406:	f7ff f8af 	bl	8006568 <__sinit>
 800740a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f3      	beq.n	80073fa <_fflush_r+0xa>
 8007412:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007414:	07d0      	lsls	r0, r2, #31
 8007416:	d404      	bmi.n	8007422 <_fflush_r+0x32>
 8007418:	0599      	lsls	r1, r3, #22
 800741a:	d402      	bmi.n	8007422 <_fflush_r+0x32>
 800741c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800741e:	f7ff fa32 	bl	8006886 <__retarget_lock_acquire_recursive>
 8007422:	4628      	mov	r0, r5
 8007424:	4621      	mov	r1, r4
 8007426:	f7ff ff5f 	bl	80072e8 <__sflush_r>
 800742a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800742c:	07da      	lsls	r2, r3, #31
 800742e:	4605      	mov	r5, r0
 8007430:	d4e4      	bmi.n	80073fc <_fflush_r+0xc>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	059b      	lsls	r3, r3, #22
 8007436:	d4e1      	bmi.n	80073fc <_fflush_r+0xc>
 8007438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800743a:	f7ff fa25 	bl	8006888 <__retarget_lock_release_recursive>
 800743e:	e7dd      	b.n	80073fc <_fflush_r+0xc>

08007440 <__swbuf_r>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	460e      	mov	r6, r1
 8007444:	4614      	mov	r4, r2
 8007446:	4605      	mov	r5, r0
 8007448:	b118      	cbz	r0, 8007452 <__swbuf_r+0x12>
 800744a:	6a03      	ldr	r3, [r0, #32]
 800744c:	b90b      	cbnz	r3, 8007452 <__swbuf_r+0x12>
 800744e:	f7ff f88b 	bl	8006568 <__sinit>
 8007452:	69a3      	ldr	r3, [r4, #24]
 8007454:	60a3      	str	r3, [r4, #8]
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	071a      	lsls	r2, r3, #28
 800745a:	d501      	bpl.n	8007460 <__swbuf_r+0x20>
 800745c:	6923      	ldr	r3, [r4, #16]
 800745e:	b943      	cbnz	r3, 8007472 <__swbuf_r+0x32>
 8007460:	4621      	mov	r1, r4
 8007462:	4628      	mov	r0, r5
 8007464:	f000 f82a 	bl	80074bc <__swsetup_r>
 8007468:	b118      	cbz	r0, 8007472 <__swbuf_r+0x32>
 800746a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800746e:	4638      	mov	r0, r7
 8007470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	6922      	ldr	r2, [r4, #16]
 8007476:	1a98      	subs	r0, r3, r2
 8007478:	6963      	ldr	r3, [r4, #20]
 800747a:	b2f6      	uxtb	r6, r6
 800747c:	4283      	cmp	r3, r0
 800747e:	4637      	mov	r7, r6
 8007480:	dc05      	bgt.n	800748e <__swbuf_r+0x4e>
 8007482:	4621      	mov	r1, r4
 8007484:	4628      	mov	r0, r5
 8007486:	f7ff ffb3 	bl	80073f0 <_fflush_r>
 800748a:	2800      	cmp	r0, #0
 800748c:	d1ed      	bne.n	800746a <__swbuf_r+0x2a>
 800748e:	68a3      	ldr	r3, [r4, #8]
 8007490:	3b01      	subs	r3, #1
 8007492:	60a3      	str	r3, [r4, #8]
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	6022      	str	r2, [r4, #0]
 800749a:	701e      	strb	r6, [r3, #0]
 800749c:	6962      	ldr	r2, [r4, #20]
 800749e:	1c43      	adds	r3, r0, #1
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d004      	beq.n	80074ae <__swbuf_r+0x6e>
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	07db      	lsls	r3, r3, #31
 80074a8:	d5e1      	bpl.n	800746e <__swbuf_r+0x2e>
 80074aa:	2e0a      	cmp	r6, #10
 80074ac:	d1df      	bne.n	800746e <__swbuf_r+0x2e>
 80074ae:	4621      	mov	r1, r4
 80074b0:	4628      	mov	r0, r5
 80074b2:	f7ff ff9d 	bl	80073f0 <_fflush_r>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d0d9      	beq.n	800746e <__swbuf_r+0x2e>
 80074ba:	e7d6      	b.n	800746a <__swbuf_r+0x2a>

080074bc <__swsetup_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4b29      	ldr	r3, [pc, #164]	@ (8007564 <__swsetup_r+0xa8>)
 80074c0:	4605      	mov	r5, r0
 80074c2:	6818      	ldr	r0, [r3, #0]
 80074c4:	460c      	mov	r4, r1
 80074c6:	b118      	cbz	r0, 80074d0 <__swsetup_r+0x14>
 80074c8:	6a03      	ldr	r3, [r0, #32]
 80074ca:	b90b      	cbnz	r3, 80074d0 <__swsetup_r+0x14>
 80074cc:	f7ff f84c 	bl	8006568 <__sinit>
 80074d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074d4:	0719      	lsls	r1, r3, #28
 80074d6:	d422      	bmi.n	800751e <__swsetup_r+0x62>
 80074d8:	06da      	lsls	r2, r3, #27
 80074da:	d407      	bmi.n	80074ec <__swsetup_r+0x30>
 80074dc:	2209      	movs	r2, #9
 80074de:	602a      	str	r2, [r5, #0]
 80074e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074e4:	81a3      	strh	r3, [r4, #12]
 80074e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074ea:	e033      	b.n	8007554 <__swsetup_r+0x98>
 80074ec:	0758      	lsls	r0, r3, #29
 80074ee:	d512      	bpl.n	8007516 <__swsetup_r+0x5a>
 80074f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074f2:	b141      	cbz	r1, 8007506 <__swsetup_r+0x4a>
 80074f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074f8:	4299      	cmp	r1, r3
 80074fa:	d002      	beq.n	8007502 <__swsetup_r+0x46>
 80074fc:	4628      	mov	r0, r5
 80074fe:	f7ff f9d3 	bl	80068a8 <_free_r>
 8007502:	2300      	movs	r3, #0
 8007504:	6363      	str	r3, [r4, #52]	@ 0x34
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800750c:	81a3      	strh	r3, [r4, #12]
 800750e:	2300      	movs	r3, #0
 8007510:	6063      	str	r3, [r4, #4]
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f043 0308 	orr.w	r3, r3, #8
 800751c:	81a3      	strh	r3, [r4, #12]
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	b94b      	cbnz	r3, 8007536 <__swsetup_r+0x7a>
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800752c:	d003      	beq.n	8007536 <__swsetup_r+0x7a>
 800752e:	4621      	mov	r1, r4
 8007530:	4628      	mov	r0, r5
 8007532:	f000 f897 	bl	8007664 <__smakebuf_r>
 8007536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800753a:	f013 0201 	ands.w	r2, r3, #1
 800753e:	d00a      	beq.n	8007556 <__swsetup_r+0x9a>
 8007540:	2200      	movs	r2, #0
 8007542:	60a2      	str	r2, [r4, #8]
 8007544:	6962      	ldr	r2, [r4, #20]
 8007546:	4252      	negs	r2, r2
 8007548:	61a2      	str	r2, [r4, #24]
 800754a:	6922      	ldr	r2, [r4, #16]
 800754c:	b942      	cbnz	r2, 8007560 <__swsetup_r+0xa4>
 800754e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007552:	d1c5      	bne.n	80074e0 <__swsetup_r+0x24>
 8007554:	bd38      	pop	{r3, r4, r5, pc}
 8007556:	0799      	lsls	r1, r3, #30
 8007558:	bf58      	it	pl
 800755a:	6962      	ldrpl	r2, [r4, #20]
 800755c:	60a2      	str	r2, [r4, #8]
 800755e:	e7f4      	b.n	800754a <__swsetup_r+0x8e>
 8007560:	2000      	movs	r0, #0
 8007562:	e7f7      	b.n	8007554 <__swsetup_r+0x98>
 8007564:	20000028 	.word	0x20000028

08007568 <memmove>:
 8007568:	4288      	cmp	r0, r1
 800756a:	b510      	push	{r4, lr}
 800756c:	eb01 0402 	add.w	r4, r1, r2
 8007570:	d902      	bls.n	8007578 <memmove+0x10>
 8007572:	4284      	cmp	r4, r0
 8007574:	4623      	mov	r3, r4
 8007576:	d807      	bhi.n	8007588 <memmove+0x20>
 8007578:	1e43      	subs	r3, r0, #1
 800757a:	42a1      	cmp	r1, r4
 800757c:	d008      	beq.n	8007590 <memmove+0x28>
 800757e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007586:	e7f8      	b.n	800757a <memmove+0x12>
 8007588:	4402      	add	r2, r0
 800758a:	4601      	mov	r1, r0
 800758c:	428a      	cmp	r2, r1
 800758e:	d100      	bne.n	8007592 <memmove+0x2a>
 8007590:	bd10      	pop	{r4, pc}
 8007592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800759a:	e7f7      	b.n	800758c <memmove+0x24>

0800759c <_sbrk_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d06      	ldr	r5, [pc, #24]	@ (80075b8 <_sbrk_r+0x1c>)
 80075a0:	2300      	movs	r3, #0
 80075a2:	4604      	mov	r4, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	f7f9 fc1c 	bl	8000de4 <_sbrk>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_sbrk_r+0x1a>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_sbrk_r+0x1a>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	2000467c 	.word	0x2000467c

080075bc <_realloc_r>:
 80075bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c0:	4680      	mov	r8, r0
 80075c2:	4615      	mov	r5, r2
 80075c4:	460c      	mov	r4, r1
 80075c6:	b921      	cbnz	r1, 80075d2 <_realloc_r+0x16>
 80075c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075cc:	4611      	mov	r1, r2
 80075ce:	f7ff b9d7 	b.w	8006980 <_malloc_r>
 80075d2:	b92a      	cbnz	r2, 80075e0 <_realloc_r+0x24>
 80075d4:	f7ff f968 	bl	80068a8 <_free_r>
 80075d8:	2400      	movs	r4, #0
 80075da:	4620      	mov	r0, r4
 80075dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e0:	f000 f89e 	bl	8007720 <_malloc_usable_size_r>
 80075e4:	4285      	cmp	r5, r0
 80075e6:	4606      	mov	r6, r0
 80075e8:	d802      	bhi.n	80075f0 <_realloc_r+0x34>
 80075ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80075ee:	d8f4      	bhi.n	80075da <_realloc_r+0x1e>
 80075f0:	4629      	mov	r1, r5
 80075f2:	4640      	mov	r0, r8
 80075f4:	f7ff f9c4 	bl	8006980 <_malloc_r>
 80075f8:	4607      	mov	r7, r0
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d0ec      	beq.n	80075d8 <_realloc_r+0x1c>
 80075fe:	42b5      	cmp	r5, r6
 8007600:	462a      	mov	r2, r5
 8007602:	4621      	mov	r1, r4
 8007604:	bf28      	it	cs
 8007606:	4632      	movcs	r2, r6
 8007608:	f7ff f93f 	bl	800688a <memcpy>
 800760c:	4621      	mov	r1, r4
 800760e:	4640      	mov	r0, r8
 8007610:	f7ff f94a 	bl	80068a8 <_free_r>
 8007614:	463c      	mov	r4, r7
 8007616:	e7e0      	b.n	80075da <_realloc_r+0x1e>

08007618 <__swhatbuf_r>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	460c      	mov	r4, r1
 800761c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007620:	2900      	cmp	r1, #0
 8007622:	b096      	sub	sp, #88	@ 0x58
 8007624:	4615      	mov	r5, r2
 8007626:	461e      	mov	r6, r3
 8007628:	da0d      	bge.n	8007646 <__swhatbuf_r+0x2e>
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007630:	f04f 0100 	mov.w	r1, #0
 8007634:	bf14      	ite	ne
 8007636:	2340      	movne	r3, #64	@ 0x40
 8007638:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800763c:	2000      	movs	r0, #0
 800763e:	6031      	str	r1, [r6, #0]
 8007640:	602b      	str	r3, [r5, #0]
 8007642:	b016      	add	sp, #88	@ 0x58
 8007644:	bd70      	pop	{r4, r5, r6, pc}
 8007646:	466a      	mov	r2, sp
 8007648:	f000 f848 	bl	80076dc <_fstat_r>
 800764c:	2800      	cmp	r0, #0
 800764e:	dbec      	blt.n	800762a <__swhatbuf_r+0x12>
 8007650:	9901      	ldr	r1, [sp, #4]
 8007652:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007656:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800765a:	4259      	negs	r1, r3
 800765c:	4159      	adcs	r1, r3
 800765e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007662:	e7eb      	b.n	800763c <__swhatbuf_r+0x24>

08007664 <__smakebuf_r>:
 8007664:	898b      	ldrh	r3, [r1, #12]
 8007666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007668:	079d      	lsls	r5, r3, #30
 800766a:	4606      	mov	r6, r0
 800766c:	460c      	mov	r4, r1
 800766e:	d507      	bpl.n	8007680 <__smakebuf_r+0x1c>
 8007670:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	6123      	str	r3, [r4, #16]
 8007678:	2301      	movs	r3, #1
 800767a:	6163      	str	r3, [r4, #20]
 800767c:	b003      	add	sp, #12
 800767e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007680:	ab01      	add	r3, sp, #4
 8007682:	466a      	mov	r2, sp
 8007684:	f7ff ffc8 	bl	8007618 <__swhatbuf_r>
 8007688:	9f00      	ldr	r7, [sp, #0]
 800768a:	4605      	mov	r5, r0
 800768c:	4639      	mov	r1, r7
 800768e:	4630      	mov	r0, r6
 8007690:	f7ff f976 	bl	8006980 <_malloc_r>
 8007694:	b948      	cbnz	r0, 80076aa <__smakebuf_r+0x46>
 8007696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800769a:	059a      	lsls	r2, r3, #22
 800769c:	d4ee      	bmi.n	800767c <__smakebuf_r+0x18>
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	f043 0302 	orr.w	r3, r3, #2
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	e7e2      	b.n	8007670 <__smakebuf_r+0xc>
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	6020      	str	r0, [r4, #0]
 80076ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b2:	81a3      	strh	r3, [r4, #12]
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076ba:	b15b      	cbz	r3, 80076d4 <__smakebuf_r+0x70>
 80076bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c0:	4630      	mov	r0, r6
 80076c2:	f000 f81d 	bl	8007700 <_isatty_r>
 80076c6:	b128      	cbz	r0, 80076d4 <__smakebuf_r+0x70>
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	f023 0303 	bic.w	r3, r3, #3
 80076ce:	f043 0301 	orr.w	r3, r3, #1
 80076d2:	81a3      	strh	r3, [r4, #12]
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	431d      	orrs	r5, r3
 80076d8:	81a5      	strh	r5, [r4, #12]
 80076da:	e7cf      	b.n	800767c <__smakebuf_r+0x18>

080076dc <_fstat_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4d07      	ldr	r5, [pc, #28]	@ (80076fc <_fstat_r+0x20>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4604      	mov	r4, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	4611      	mov	r1, r2
 80076e8:	602b      	str	r3, [r5, #0]
 80076ea:	f7f9 fb52 	bl	8000d92 <_fstat>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	d102      	bne.n	80076f8 <_fstat_r+0x1c>
 80076f2:	682b      	ldr	r3, [r5, #0]
 80076f4:	b103      	cbz	r3, 80076f8 <_fstat_r+0x1c>
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
 80076fa:	bf00      	nop
 80076fc:	2000467c 	.word	0x2000467c

08007700 <_isatty_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	4d06      	ldr	r5, [pc, #24]	@ (800771c <_isatty_r+0x1c>)
 8007704:	2300      	movs	r3, #0
 8007706:	4604      	mov	r4, r0
 8007708:	4608      	mov	r0, r1
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	f7f9 fb51 	bl	8000db2 <_isatty>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d102      	bne.n	800771a <_isatty_r+0x1a>
 8007714:	682b      	ldr	r3, [r5, #0]
 8007716:	b103      	cbz	r3, 800771a <_isatty_r+0x1a>
 8007718:	6023      	str	r3, [r4, #0]
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	2000467c 	.word	0x2000467c

08007720 <_malloc_usable_size_r>:
 8007720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007724:	1f18      	subs	r0, r3, #4
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfbc      	itt	lt
 800772a:	580b      	ldrlt	r3, [r1, r0]
 800772c:	18c0      	addlt	r0, r0, r3
 800772e:	4770      	bx	lr

08007730 <_init>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	bf00      	nop
 8007734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007736:	bc08      	pop	{r3}
 8007738:	469e      	mov	lr, r3
 800773a:	4770      	bx	lr

0800773c <_fini>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr
