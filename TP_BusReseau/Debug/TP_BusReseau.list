
TP_BusReseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006140  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08006310  08006310  00007310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006628  08006628  00008118  2**0
                  CONTENTS
  4 .ARM          00000008  08006628  08006628  00007628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006630  08006630  00008118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006630  08006630  00007630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006634  08006634  00007634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000118  20000000  08006638  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000118  08006750  00008118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08006750  00008478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008118  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc45  00000000  00000000  00008148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bda  00000000  00000000  00017d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  0001a968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a64  00000000  00000000  0001b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023996  00000000  00000000  0001c14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012388  00000000  00000000  0003fae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0469  00000000  00000000  00051e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001222d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004310  00000000  00000000  00122318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00126628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000118 	.word	0x20000118
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080062f8 	.word	0x080062f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000011c 	.word	0x2000011c
 800020c:	080062f8 	.word	0x080062f8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005d4:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_CAN1_Init+0x64>)
 80005d6:	4a18      	ldr	r2, [pc, #96]	@ (8000638 <MX_CAN1_Init+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80005da:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_CAN1_Init+0x64>)
 80005dc:	2206      	movs	r2, #6
 80005de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_CAN1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <MX_CAN1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_CAN1_Init+0x64>)
 80005ee:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80005f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_CAN1_Init+0x64>)
 80005f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005fa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <MX_CAN1_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_CAN1_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000608:	4b0a      	ldr	r3, [pc, #40]	@ (8000634 <MX_CAN1_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <MX_CAN1_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <MX_CAN1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <MX_CAN1_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	@ (8000634 <MX_CAN1_Init+0x64>)
 8000622:	f000 fffd 	bl	8001620 <HAL_CAN_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800062c:	f000 f9da 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000134 	.word	0x20000134
 8000638:	40006400 	.word	0x40006400

0800063c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	@ 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a19      	ldr	r2, [pc, #100]	@ (80006c0 <HAL_CAN_MspInit+0x84>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d12c      	bne.n	80006b8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <HAL_CAN_MspInit+0x88>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000666:	4a17      	ldr	r2, [pc, #92]	@ (80006c4 <HAL_CAN_MspInit+0x88>)
 8000668:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800066c:	6413      	str	r3, [r2, #64]	@ 0x40
 800066e:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <HAL_CAN_MspInit+0x88>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <HAL_CAN_MspInit+0x88>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a10      	ldr	r2, [pc, #64]	@ (80006c4 <HAL_CAN_MspInit+0x88>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <HAL_CAN_MspInit+0x88>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000696:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006a8:	2309      	movs	r3, #9
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <HAL_CAN_MspInit+0x8c>)
 80006b4:	f001 fb68 	bl	8001d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	@ 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40006400 	.word	0x40006400
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40020400 	.word	0x40020400

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b2d      	ldr	r3, [pc, #180]	@ (800079c <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a2c      	ldr	r2, [pc, #176]	@ (800079c <MX_GPIO_Init+0xd0>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b2a      	ldr	r3, [pc, #168]	@ (800079c <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b26      	ldr	r3, [pc, #152]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a25      	ldr	r2, [pc, #148]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b23      	ldr	r3, [pc, #140]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b18      	ldr	r3, [pc, #96]	@ (800079c <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <MX_GPIO_Init+0xd4>)
 8000758:	f001 fcaa 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000762:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <MX_GPIO_Init+0xd8>)
 8000774:	f001 fb08 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000778:	2320      	movs	r3, #32
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_GPIO_Init+0xd4>)
 8000790:	f001 fafa 	bl	8001d88 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	@ 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020800 	.word	0x40020800

080007a8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2C3_Init+0x50>)
 80007ae:	4a13      	ldr	r2, [pc, #76]	@ (80007fc <MX_I2C3_Init+0x54>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_I2C3_Init+0x50>)
 80007b4:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <MX_I2C3_Init+0x58>)
 80007b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_I2C3_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_I2C3_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_I2C3_Init+0x50>)
 80007c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <MX_I2C3_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_I2C3_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <MX_I2C3_Init+0x50>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_I2C3_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_I2C3_Init+0x50>)
 80007e6:	f001 fc7d 	bl	80020e4 <HAL_I2C_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007f0:	f000 f8f8 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000015c 	.word	0x2000015c
 80007fc:	40005c00 	.word	0x40005c00
 8000800:	000186a0 	.word	0x000186a0

08000804 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a28      	ldr	r2, [pc, #160]	@ (80008c4 <HAL_I2C_MspInit+0xc0>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d14a      	bne.n	80008bc <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <HAL_I2C_MspInit+0xc4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a26      	ldr	r2, [pc, #152]	@ (80008c8 <HAL_I2C_MspInit+0xc4>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <HAL_I2C_MspInit+0xc4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <HAL_I2C_MspInit+0xc4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a1f      	ldr	r2, [pc, #124]	@ (80008c8 <HAL_I2C_MspInit+0xc4>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <HAL_I2C_MspInit+0xc4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800085e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000864:	2312      	movs	r3, #18
 8000866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000870:	2304      	movs	r3, #4
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4814      	ldr	r0, [pc, #80]	@ (80008cc <HAL_I2C_MspInit+0xc8>)
 800087c:	f001 fa84 	bl	8001d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000880:	2310      	movs	r3, #16
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000884:	2312      	movs	r3, #18
 8000886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000890:	2304      	movs	r3, #4
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	480d      	ldr	r0, [pc, #52]	@ (80008d0 <HAL_I2C_MspInit+0xcc>)
 800089c:	f001 fa74 	bl	8001d88 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <HAL_I2C_MspInit+0xc4>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a8:	4a07      	ldr	r2, [pc, #28]	@ (80008c8 <HAL_I2C_MspInit+0xc4>)
 80008aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <HAL_I2C_MspInit+0xc4>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	@ 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40005c00 	.word	0x40005c00
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020400 	.word	0x40020400

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f000 fe30 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f810 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f7ff fef4 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e4:	f000 fd1e 	bl	8001324 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80008e8:	f7ff fe72 	bl	80005d0 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 80008ec:	f000 fd44 	bl	8001378 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 80008f0:	f7ff ff5a 	bl	80007a8 <MX_I2C3_Init>





	Shell_Init();
 80008f4:	f000 fa58 	bl	8000da8 <Shell_Init>
	{
		//				CAN_Send_AutomaticMode(0x54,0x01);
		//				HAL_Delay(1000);
		//				CAN_Send_AutomaticMode(0x54,0x00);
		//				HAL_Delay(1000);
		Shell_Loop();
 80008f8:	f000 faa4 	bl	8000e44 <Shell_Loop>
	{
 80008fc:	bf00      	nop
 80008fe:	e7fb      	b.n	80008f8 <main+0x24>

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	@ 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	2234      	movs	r2, #52	@ 0x34
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f004 fc43 	bl	800519a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <SystemClock_Config+0xdc>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	4a2b      	ldr	r2, [pc, #172]	@ (80009dc <SystemClock_Config+0xdc>)
 800092e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000932:	6413      	str	r3, [r2, #64]	@ 0x40
 8000934:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <SystemClock_Config+0xdc>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000940:	2300      	movs	r3, #0
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	4b26      	ldr	r3, [pc, #152]	@ (80009e0 <SystemClock_Config+0xe0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a25      	ldr	r2, [pc, #148]	@ (80009e0 <SystemClock_Config+0xe0>)
 800094a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <SystemClock_Config+0xe0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095c:	2301      	movs	r3, #1
 800095e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000960:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000964:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800096e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000970:	2304      	movs	r3, #4
 8000972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000974:	23b4      	movs	r3, #180	@ 0xb4
 8000976:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000978:	2302      	movs	r3, #2
 800097a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4618      	mov	r0, r3
 800098a:	f002 ff3f 	bl	800380c <HAL_RCC_OscConfig>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000994:	f000 f826 	bl	80009e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000998:	f002 fb9e 	bl	80030d8 <HAL_PWREx_EnableOverDrive>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009a2:	f000 f81f 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	230f      	movs	r3, #15
 80009a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009aa:	2302      	movs	r3, #2
 80009ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009b2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2105      	movs	r1, #5
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 fbd7 	bl	8003178 <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009d0:	f000 f808 	bl	80009e4 <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3750      	adds	r7, #80	@ 0x50
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <set_angle>:
	CAN_Send_AutomaticMode(motor_angle,sens);
}


int set_angle(char **argv,int argc)
{
 80009f0:	b5b0      	push	{r4, r5, r7, lr}
 80009f2:	b094      	sub	sp, #80	@ 0x50
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	int angle = atoi(argv[1]);//speed in expected in % of max speed
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3304      	adds	r3, #4
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 f9f7 	bl	8004df4 <atoi>
 8000a06:	6478      	str	r0, [r7, #68]	@ 0x44
	if(argc != 2)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d018      	beq.n	8000a40 <set_angle+0x50>
	{
		uint8_t error_message[] = "Error : angle function expect exactly 1 parameter \r\n";
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000abc <set_angle+0xcc>)
 8000a10:	f107 0408 	add.w	r4, r7, #8
 8000a14:	461d      	mov	r5, r3
 8000a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a26:	6020      	str	r0, [r4, #0]
 8000a28:	3404      	adds	r4, #4
 8000a2a:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart3, error_message, sizeof(error_message), HAL_MAX_DELAY);
 8000a2c:	f107 0108 	add.w	r1, r7, #8
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a34:	2235      	movs	r2, #53	@ 0x35
 8000a36:	4822      	ldr	r0, [pc, #136]	@ (8000ac0 <set_angle+0xd0>)
 8000a38:	f003 f9d6 	bl	8003de8 <HAL_UART_Transmit>
		return 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e038      	b.n	8000ab2 <set_angle+0xc2>
	}

	else if(angle > 180)//on vérifie qu'on met pas l'angle au dessus du max
 8000a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a42:	2bb4      	cmp	r3, #180	@ 0xb4
 8000a44:	dd17      	ble.n	8000a76 <set_angle+0x86>
	{
		uint8_t error_message[] = "angle function must not exceed 180  \r\n";
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <set_angle+0xd4>)
 8000a48:	f107 0408 	add.w	r4, r7, #8
 8000a4c:	461d      	mov	r5, r3
 8000a4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a5a:	6020      	str	r0, [r4, #0]
 8000a5c:	3404      	adds	r4, #4
 8000a5e:	8021      	strh	r1, [r4, #0]
 8000a60:	3402      	adds	r4, #2
 8000a62:	0c0b      	lsrs	r3, r1, #16
 8000a64:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart3, error_message, sizeof(error_message), HAL_MAX_DELAY);
 8000a66:	f107 0108 	add.w	r1, r7, #8
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a6e:	2227      	movs	r2, #39	@ 0x27
 8000a70:	4813      	ldr	r0, [pc, #76]	@ (8000ac0 <set_angle+0xd0>)
 8000a72:	f003 f9b9 	bl	8003de8 <HAL_UART_Transmit>
	}
	uint32_t real_angle;
	uint8_t sens;
	if(angle <0)
 8000a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	da06      	bge.n	8000a8a <set_angle+0x9a>
	{
		real_angle = -angle;
 8000a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a7e:	425b      	negs	r3, r3
 8000a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
		sens = NEGATIVE_ROTATION;
 8000a82:	2301      	movs	r3, #1
 8000a84:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8000a88:	e004      	b.n	8000a94 <set_angle+0xa4>
	}
	else
	{
		real_angle = angle;
 8000a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		sens = POSITIVE_ROTATION;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	}
	CAN_Send_AutomaticMode(real_angle,sens);
 8000a94:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000a98:	4619      	mov	r1, r3
 8000a9a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8000a9c:	f000 f816 	bl	8000acc <CAN_Send_AutomaticMode>
	uint8_t * success_message = "angle set to %lu \r\n";
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <set_angle+0xd8>)
 8000aa2:	643b      	str	r3, [r7, #64]	@ 0x40
	//snprintf((char *)success_message, sizeof(success_message), "speed set to %lu of max value \r\n", (unsigned long)speed);
	HAL_UART_Transmit(&huart3, success_message, sizeof(success_message), HAL_MAX_DELAY);
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000aac:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <set_angle+0xd0>)
 8000aae:	f003 f99b 	bl	8003de8 <HAL_UART_Transmit>

}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3750      	adds	r7, #80	@ 0x50
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8000aba:	bf00      	nop
 8000abc:	08006324 	.word	0x08006324
 8000ac0:	200002e0 	.word	0x200002e0
 8000ac4:	0800635c 	.word	0x0800635c
 8000ac8:	08006310 	.word	0x08006310

08000acc <CAN_Send_AutomaticMode>:

void CAN_Send_AutomaticMode(uint8_t angle, uint8_t sign) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	460a      	mov	r2, r1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef txHeader;
	uint8_t data[2];         // Data array for angle and sign
	uint32_t txMailbox;

	// Limit the angle to 180 degrees max
	if (angle > 180) angle = 180;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2bb4      	cmp	r3, #180	@ 0xb4
 8000ae0:	d901      	bls.n	8000ae6 <CAN_Send_AutomaticMode+0x1a>
 8000ae2:	23b4      	movs	r3, #180	@ 0xb4
 8000ae4:	71fb      	strb	r3, [r7, #7]

	// Frame configuration for Automatic Mode
	txHeader.StdId = 0x61;           // ID for Automatic Mode angle setting
 8000ae6:	2361      	movs	r3, #97	@ 0x61
 8000ae8:	613b      	str	r3, [r7, #16]
	txHeader.ExtId = 0x1ABCDE;       // Not used here
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <CAN_Send_AutomaticMode+0x60>)
 8000aec:	617b      	str	r3, [r7, #20]
	txHeader.IDE = CAN_ID_STD;       // Standard CAN ID
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_DATA;     // Data frame
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
	txHeader.DLC = 2;                // 2 bytes: D0 (angle), D1 (sign)
 8000af6:	2302      	movs	r3, #2
 8000af8:	623b      	str	r3, [r7, #32]
	txHeader.TransmitGlobalTime = DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	// Data configuration
	data[0] = angle;                 // D0: Desired angle (0 to 180)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	733b      	strb	r3, [r7, #12]
	data[1] = sign;                  // D1: Angle sign (0x00 for positive, 0x01 for negative)
 8000b04:	79bb      	ldrb	r3, [r7, #6]
 8000b06:	737b      	strb	r3, [r7, #13]

	// Send the frame
	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &txMailbox) != HAL_OK) {
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	f107 020c 	add.w	r2, r7, #12
 8000b10:	f107 0110 	add.w	r1, r7, #16
 8000b14:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <CAN_Send_AutomaticMode+0x64>)
 8000b16:	f000 fec2 	bl	800189e <HAL_CAN_AddTxMessage>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <CAN_Send_AutomaticMode+0x58>
		// Error handling
		Error_Handler();
 8000b20:	f7ff ff60 	bl	80009e4 <Error_Handler>
	}
}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	@ 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	001abcde 	.word	0x001abcde
 8000b30:	20000134 	.word	0x20000134

08000b34 <convertBufferToUint32>:


uint32_t convertBufferToUint32(uint8_t buffer[3]) {
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	return (uint32_t)buffer[0] << 16 | (uint32_t)buffer[1] << 8 | (uint32_t)buffer[2];
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	041a      	lsls	r2, r3, #16
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3301      	adds	r3, #1
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	3202      	adds	r2, #2
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	4313      	orrs	r3, r2
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <bmp280_config>:

int bmp280_config()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af02      	add	r7, sp, #8
	// on config

	uint8_t bmp280_addr_ctrl_meas = 0xF4; // l'adresse du registre contenant le control des mesures
 8000b66:	23f4      	movs	r3, #244	@ 0xf4
 8000b68:	71fb      	strb	r3, [r7, #7]
	uint8_t bmp280_config_ctrl_meas = 0x57; // la valuer de la config a appliqué
 8000b6a:	2357      	movs	r3, #87	@ 0x57
 8000b6c:	71bb      	strb	r3, [r7, #6]
	uint8_t bmp280_ctrl_meas_buffer[2] = {bmp280_addr_ctrl_meas, bmp280_config_ctrl_meas};
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	713b      	strb	r3, [r7, #4]
 8000b72:	79bb      	ldrb	r3, [r7, #6]
 8000b74:	717b      	strb	r3, [r7, #5]
	uint8_t value = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	70fb      	strb	r3, [r7, #3]
	//on envoie la config
	//on envoie buffer avec adresse du registre
	//puis valeur à y écrire
	if( HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, bmp280_addr_shifted, bmp280_ctrl_meas_buffer, 2, 1000))
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <bmp280_config+0x58>)
 8000b7c:	8819      	ldrh	r1, [r3, #0]
 8000b7e:	1d3a      	adds	r2, r7, #4
 8000b80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2302      	movs	r3, #2
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <bmp280_config+0x5c>)
 8000b8a:	f001 fbef 	bl	800236c <HAL_I2C_Master_Transmit>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <bmp280_config+0x38>
	{
		return 1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e00a      	b.n	8000bae <bmp280_config+0x4e>
	}
	//pour vérification
	HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &value, 1, 1000);
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <bmp280_config+0x58>)
 8000b9a:	8819      	ldrh	r1, [r3, #0]
 8000b9c:	1cfa      	adds	r2, r7, #3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <bmp280_config+0x5c>)
 8000ba8:	f001 fcde 	bl	8002568 <HAL_I2C_Master_Receive>
	return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000ae 	.word	0x200000ae
 8000bbc:	2000015c 	.word	0x2000015c

08000bc0 <bmp280_etalonnage>:

int bmp280_etalonnage()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af02      	add	r7, sp, #8
	//--------------------------------------------------------------------------------------
	//Récupération de létalonnage
	uint8_t first_calibration_addr = 0x88; // valeur de la première adresse du registre calibration
 8000bc6:	2388      	movs	r3, #136	@ 0x88
 8000bc8:	70fb      	strb	r3, [r7, #3]
	uint8_t current_calibration_addr = first_calibration_addr; // variable que l'on va incrémenter pour récupérer toutes les adresses
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	70bb      	strb	r3, [r7, #2]
	uint8_t calibration_value;
	for(int i = 0; i <BMP280_CALIBRATION_BUFFER_SIZE;i++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	e02a      	b.n	8000c2a <bmp280_etalonnage+0x6a>
	{
		if( HAL_OK != HAL_I2C_Master_Transmit(&hi2c3, bmp280_addr_shifted, &current_calibration_addr, 1, 1000))  // on demande à récup valeur de l'adresse courante
 8000bd4:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <bmp280_etalonnage+0x7c>)
 8000bd6:	8819      	ldrh	r1, [r3, #0]
 8000bd8:	1cba      	adds	r2, r7, #2
 8000bda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2301      	movs	r3, #1
 8000be2:	4817      	ldr	r0, [pc, #92]	@ (8000c40 <bmp280_etalonnage+0x80>)
 8000be4:	f001 fbc2 	bl	800236c <HAL_I2C_Master_Transmit>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <bmp280_etalonnage+0x32>

		{
			return 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e01f      	b.n	8000c32 <bmp280_etalonnage+0x72>
		}
		if( HAL_OK != HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &calibration_value, 1, 1000))  // on demande à récup valeur de l'adresse courante
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <bmp280_etalonnage+0x7c>)
 8000bf4:	8819      	ldrh	r1, [r3, #0]
 8000bf6:	1c7a      	adds	r2, r7, #1
 8000bf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2301      	movs	r3, #1
 8000c00:	480f      	ldr	r0, [pc, #60]	@ (8000c40 <bmp280_etalonnage+0x80>)
 8000c02:	f001 fcb1 	bl	8002568 <HAL_I2C_Master_Receive>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <bmp280_etalonnage+0x50>
		{
			return 1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e010      	b.n	8000c32 <bmp280_etalonnage+0x72>
		}
		// on récupère la valeur de calibration de l'adresse courante
		calibration_buffer[i] = calibration_value; // on la range dans le buffer
 8000c10:	7879      	ldrb	r1, [r7, #1]
 8000c12:	4a0c      	ldr	r2, [pc, #48]	@ (8000c44 <bmp280_etalonnage+0x84>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4413      	add	r3, r2
 8000c18:	460a      	mov	r2, r1
 8000c1a:	701a      	strb	r2, [r3, #0]
		current_calibration_addr++; // on incrémente l'adresse
 8000c1c:	78bb      	ldrb	r3, [r7, #2]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	70bb      	strb	r3, [r7, #2]
	for(int i = 0; i <BMP280_CALIBRATION_BUFFER_SIZE;i++)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3301      	adds	r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b18      	cmp	r3, #24
 8000c2e:	ddd1      	ble.n	8000bd4 <bmp280_etalonnage+0x14>
	}
	return 0;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000ae 	.word	0x200000ae
 8000c40:	2000015c 	.word	0x2000015c
 8000c44:	200001f8 	.word	0x200001f8

08000c48 <bmp280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value

int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)calibration_buffer[0]<<1))) * ((int32_t)calibration_buffer[1])) >> 11;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	10da      	asrs	r2, r3, #3
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <bmp280_compensate_T_int32+0x70>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	4a16      	ldr	r2, [pc, #88]	@ (8000cb8 <bmp280_compensate_T_int32+0x70>)
 8000c5e:	7852      	ldrb	r2, [r2, #1]
 8000c60:	fb02 f303 	mul.w	r3, r2, r3
 8000c64:	12db      	asrs	r3, r3, #11
 8000c66:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)calibration_buffer[0])) * ((adc_T>>4) - ((int32_t)calibration_buffer[0]))) >> 12) *
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	111b      	asrs	r3, r3, #4
 8000c6c:	4a12      	ldr	r2, [pc, #72]	@ (8000cb8 <bmp280_compensate_T_int32+0x70>)
 8000c6e:	7812      	ldrb	r2, [r2, #0]
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	1112      	asrs	r2, r2, #4
 8000c76:	4910      	ldr	r1, [pc, #64]	@ (8000cb8 <bmp280_compensate_T_int32+0x70>)
 8000c78:	7809      	ldrb	r1, [r1, #0]
 8000c7a:	1a52      	subs	r2, r2, r1
 8000c7c:	fb02 f303 	mul.w	r3, r2, r3
 8000c80:	131b      	asrs	r3, r3, #12
			((int32_t)calibration_buffer[2])) >> 14;
 8000c82:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <bmp280_compensate_T_int32+0x70>)
 8000c84:	7892      	ldrb	r2, [r2, #2]
	var2 = (((((adc_T>>4) - ((int32_t)calibration_buffer[0])) * ((adc_T>>4) - ((int32_t)calibration_buffer[0]))) >> 12) *
 8000c86:	fb02 f303 	mul.w	r3, r2, r3
 8000c8a:	139b      	asrs	r3, r3, #14
 8000c8c:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a09      	ldr	r2, [pc, #36]	@ (8000cbc <bmp280_compensate_T_int32+0x74>)
 8000c96:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <bmp280_compensate_T_int32+0x74>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	3380      	adds	r3, #128	@ 0x80
 8000ca4:	121b      	asrs	r3, r3, #8
 8000ca6:	60fb      	str	r3, [r7, #12]
	return T;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	371c      	adds	r7, #28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	200001f8 	.word	0x200001f8
 8000cbc:	20000218 	.word	0x20000218

08000cc0 <GET_T>:
	p = ((p + var1 + var2) >> 8) + (((int64_t)calibration_buffer[9])<<4);
	return (uint32_t)p;
}

int GET_T(uint32_t * temp)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	6078      	str	r0, [r7, #4]
	//récupération de la température
	uint8_t temp_start_addr = 0xFA; // l'adresse de départ du registre température
 8000cc8:	23fa      	movs	r3, #250	@ 0xfa
 8000cca:	76fb      	strb	r3, [r7, #27]
	uint8_t temp_value_buffer[3]; //chaque adresse sera stocké dans un byte puis on combinera les bytes
	uint8_t current_temp_addr = temp_start_addr;
 8000ccc:	7efb      	ldrb	r3, [r7, #27]
 8000cce:	72fb      	strb	r3, [r7, #11]
	uint8_t temp_value; //chaque adresse sera stocké dans un byte puis on combinera les bytes

	for(int i = 0; i <3;i++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
 8000cd4:	e023      	b.n	8000d1e <GET_T+0x5e>
	{

		HAL_I2C_Master_Transmit(&hi2c3, bmp280_addr_shifted, &current_temp_addr, 1, 1000);
 8000cd6:	4b27      	ldr	r3, [pc, #156]	@ (8000d74 <GET_T+0xb4>)
 8000cd8:	8819      	ldrh	r1, [r3, #0]
 8000cda:	f107 020b 	add.w	r2, r7, #11
 8000cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	4824      	ldr	r0, [pc, #144]	@ (8000d78 <GET_T+0xb8>)
 8000ce8:	f001 fb40 	bl	800236c <HAL_I2C_Master_Transmit>

		HAL_I2C_Master_Receive(&hi2c3, bmp280_addr_shifted, &temp_value, 1, 1000);
 8000cec:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <GET_T+0xb4>)
 8000cee:	8819      	ldrh	r1, [r3, #0]
 8000cf0:	f107 020a 	add.w	r2, r7, #10
 8000cf4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	481e      	ldr	r0, [pc, #120]	@ (8000d78 <GET_T+0xb8>)
 8000cfe:	f001 fc33 	bl	8002568 <HAL_I2C_Master_Receive>

		temp_value_buffer[i] = temp_value; // on la range dans le buffer
 8000d02:	7ab9      	ldrb	r1, [r7, #10]
 8000d04:	f107 020c 	add.w	r2, r7, #12
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	701a      	strb	r2, [r3, #0]
		current_temp_addr++; // on incrémente l'adresse
 8000d10:	7afb      	ldrb	r3, [r7, #11]
 8000d12:	3301      	adds	r3, #1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	72fb      	strb	r3, [r7, #11]
	for(int i = 0; i <3;i++)
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	ddd8      	ble.n	8000cd6 <GET_T+0x16>
	}
	uint32_t temp_value_32  =	convertBufferToUint32(temp_value_buffer);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff03 	bl	8000b34 <convertBufferToUint32>
 8000d2e:	6178      	str	r0, [r7, #20]
	temp_value_32 = bmp280_compensate_T_int32(temp_value_32);
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff88 	bl	8000c48 <bmp280_compensate_T_int32>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	617b      	str	r3, [r7, #20]
	float temp_value_c = temp_value_32 * 0.0025f;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	ee07 3a90 	vmov	s15, r3
 8000d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d46:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000d7c <GET_T+0xbc>
 8000d4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4e:	edc7 7a04 	vstr	s15, [r7, #16]
	*temp = (int)(temp_value_c * 100); //1234 = 12.34 degrés celsius
 8000d52:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d56:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000d80 <GET_T+0xc0>
 8000d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d62:	ee17 2a90 	vmov	r2, s15
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	601a      	str	r2, [r3, #0]

	return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200000ae 	.word	0x200000ae
 8000d78:	2000015c 	.word	0x2000015c
 8000d7c:	3b23d70a 	.word	0x3b23d70a
 8000d80:	42c80000 	.word	0x42c80000

08000d84 <PRINT_T>:

void PRINT_T()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	GET_T(&temp);
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <PRINT_T+0x1c>)
 8000d8a:	f7ff ff99 	bl	8000cc0 <GET_T>
	printf("Temperature (à divisé par 10 ): %lu \r\n", temp);
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <PRINT_T+0x1c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4619      	mov	r1, r3
 8000d94:	4803      	ldr	r0, [pc, #12]	@ (8000da4 <PRINT_T+0x20>)
 8000d96:	f004 f977 	bl	8005088 <iprintf>

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000214 	.word	0x20000214
 8000da4:	08006384 	.word	0x08006384

08000da8 <Shell_Init>:
void SET_K()
{

}

void Shell_Init(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8000dac:	2224      	movs	r2, #36	@ 0x24
 8000dae:	2100      	movs	r1, #0
 8000db0:	481b      	ldr	r0, [pc, #108]	@ (8000e20 <Shell_Init+0x78>)
 8000db2:	f004 f9f2 	bl	800519a <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8000db6:	2240      	movs	r2, #64	@ 0x40
 8000db8:	2100      	movs	r1, #0
 8000dba:	481a      	ldr	r0, [pc, #104]	@ (8000e24 <Shell_Init+0x7c>)
 8000dbc:	f004 f9ed 	bl	800519a <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 8000dc0:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <Shell_Init+0x80>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8000dc6:	2240      	movs	r2, #64	@ 0x40
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4818      	ldr	r0, [pc, #96]	@ (8000e2c <Shell_Init+0x84>)
 8000dcc:	f004 f9e5 	bl	800519a <memset>

	bmp280_config();
 8000dd0:	f7ff fec6 	bl	8000b60 <bmp280_config>
	bmp280_etalonnage();
 8000dd4:	f7ff fef4 	bl	8000bc0 <bmp280_etalonnage>
	HAL_CAN_Start(&hcan1);
 8000dd8:	4815      	ldr	r0, [pc, #84]	@ (8000e30 <Shell_Init+0x88>)
 8000dda:	f000 fd1c 	bl	8001816 <HAL_CAN_Start>
	motor_coeff = 1;
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <Shell_Init+0x8c>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart3, started, strlen((char *)started), HAL_MAX_DELAY);
 8000de4:	4814      	ldr	r0, [pc, #80]	@ (8000e38 <Shell_Init+0x90>)
 8000de6:	f7ff fa1d 	bl	8000224 <strlen>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000df2:	4911      	ldr	r1, [pc, #68]	@ (8000e38 <Shell_Init+0x90>)
 8000df4:	4811      	ldr	r0, [pc, #68]	@ (8000e3c <Shell_Init+0x94>)
 8000df6:	f002 fff7 	bl	8003de8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8000dfa:	4811      	ldr	r0, [pc, #68]	@ (8000e40 <Shell_Init+0x98>)
 8000dfc:	f7ff fa12 	bl	8000224 <strlen>
 8000e00:	4603      	mov	r3, r0
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e08:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <Shell_Init+0x98>)
 8000e0a:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <Shell_Init+0x94>)
 8000e0c:	f002 ffec 	bl	8003de8 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000e10:	2201      	movs	r2, #1
 8000e12:	4905      	ldr	r1, [pc, #20]	@ (8000e28 <Shell_Init+0x80>)
 8000e14:	4809      	ldr	r0, [pc, #36]	@ (8000e3c <Shell_Init+0x94>)
 8000e16:	f003 f872 	bl	8003efe <HAL_UART_Receive_IT>

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000264 	.word	0x20000264
 8000e24:	20000220 	.word	0x20000220
 8000e28:	200001b4 	.word	0x200001b4
 8000e2c:	200001b8 	.word	0x200001b8
 8000e30:	20000134 	.word	0x20000134
 8000e34:	2000021c 	.word	0x2000021c
 8000e38:	20000018 	.word	0x20000018
 8000e3c:	200002e0 	.word	0x200002e0
 8000e40:	20000000 	.word	0x20000000

08000e44 <Shell_Loop>:


// Main shell loop
void Shell_Loop(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	if (uartRxReceived) {  // Check if UART data was received
 8000e4a:	4b66      	ldr	r3, [pc, #408]	@ (8000fe4 <Shell_Loop+0x1a0>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d069      	beq.n	8000f26 <Shell_Loop+0xe2>
		switch (uartRxBuffer[0]) {
 8000e52:	4b65      	ldr	r3, [pc, #404]	@ (8000fe8 <Shell_Loop+0x1a4>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	d034      	beq.n	8000ec4 <Shell_Loop+0x80>
 8000e5a:	2b0d      	cmp	r3, #13
 8000e5c:	d148      	bne.n	8000ef0 <Shell_Loop+0xac>
		case ASCII_CR:  // Newline character, process the command
			HAL_UART_Transmit(&huart3, newline, sizeof(newline), HAL_MAX_DELAY);
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e62:	2203      	movs	r2, #3
 8000e64:	4961      	ldr	r1, [pc, #388]	@ (8000fec <Shell_Loop+0x1a8>)
 8000e66:	4862      	ldr	r0, [pc, #392]	@ (8000ff0 <Shell_Loop+0x1ac>)
 8000e68:	f002 ffbe 	bl	8003de8 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8000e6c:	4b61      	ldr	r3, [pc, #388]	@ (8000ff4 <Shell_Loop+0x1b0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a61      	ldr	r2, [pc, #388]	@ (8000ff8 <Shell_Loop+0x1b4>)
 8000e72:	2100      	movs	r1, #0
 8000e74:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8000e76:	4b61      	ldr	r3, [pc, #388]	@ (8000ffc <Shell_Loop+0x1b8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8000e7c:	4960      	ldr	r1, [pc, #384]	@ (8001000 <Shell_Loop+0x1bc>)
 8000e7e:	485e      	ldr	r0, [pc, #376]	@ (8000ff8 <Shell_Loop+0x1b4>)
 8000e80:	f004 f994 	bl	80051ac <strtok>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a5f      	ldr	r2, [pc, #380]	@ (8001004 <Shell_Loop+0x1c0>)
 8000e88:	6013      	str	r3, [r2, #0]
			while (token != NULL) {
 8000e8a:	e010      	b.n	8000eae <Shell_Loop+0x6a>
				argv[argc++] = token;
 8000e8c:	4b5b      	ldr	r3, [pc, #364]	@ (8000ffc <Shell_Loop+0x1b8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	1c5a      	adds	r2, r3, #1
 8000e92:	495a      	ldr	r1, [pc, #360]	@ (8000ffc <Shell_Loop+0x1b8>)
 8000e94:	600a      	str	r2, [r1, #0]
 8000e96:	4a5b      	ldr	r2, [pc, #364]	@ (8001004 <Shell_Loop+0x1c0>)
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	495b      	ldr	r1, [pc, #364]	@ (8001008 <Shell_Loop+0x1c4>)
 8000e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8000ea0:	4957      	ldr	r1, [pc, #348]	@ (8001000 <Shell_Loop+0x1bc>)
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f004 f982 	bl	80051ac <strtok>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a56      	ldr	r2, [pc, #344]	@ (8001004 <Shell_Loop+0x1c0>)
 8000eac:	6013      	str	r3, [r2, #0]
			while (token != NULL) {
 8000eae:	4b55      	ldr	r3, [pc, #340]	@ (8001004 <Shell_Loop+0x1c0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1ea      	bne.n	8000e8c <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8000eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff4 <Shell_Loop+0x1b0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8000ebc:	4b53      	ldr	r3, [pc, #332]	@ (800100c <Shell_Loop+0x1c8>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
			break;
 8000ec2:	e02d      	b.n	8000f20 <Shell_Loop+0xdc>

		case ASCII_BACK:  // Backspace, delete last character
			if (idx_cmd > 0) {  // Ensure we don't go below 0
 8000ec4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff4 <Shell_Loop+0x1b0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	dd26      	ble.n	8000f1a <Shell_Loop+0xd6>
				cmdBuffer[--idx_cmd] = '\0';
 8000ecc:	4b49      	ldr	r3, [pc, #292]	@ (8000ff4 <Shell_Loop+0x1b0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	4a48      	ldr	r2, [pc, #288]	@ (8000ff4 <Shell_Loop+0x1b0>)
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b47      	ldr	r3, [pc, #284]	@ (8000ff4 <Shell_Loop+0x1b0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a47      	ldr	r2, [pc, #284]	@ (8000ff8 <Shell_Loop+0x1b4>)
 8000edc:	2100      	movs	r1, #0
 8000ede:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&huart3, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	494a      	ldr	r1, [pc, #296]	@ (8001010 <Shell_Loop+0x1cc>)
 8000ee8:	4841      	ldr	r0, [pc, #260]	@ (8000ff0 <Shell_Loop+0x1ac>)
 8000eea:	f002 ff7d 	bl	8003de8 <HAL_UART_Transmit>
			}
			break;
 8000eee:	e014      	b.n	8000f1a <Shell_Loop+0xd6>

		default:  // Add new character to command buffer
			if (idx_cmd < sizeof(cmdBuffer) - 1) {  // Avoid overflow
 8000ef0:	4b40      	ldr	r3, [pc, #256]	@ (8000ff4 <Shell_Loop+0x1b0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b3e      	cmp	r3, #62	@ 0x3e
 8000ef6:	d812      	bhi.n	8000f1e <Shell_Loop+0xda>
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff4 <Shell_Loop+0x1b0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	493d      	ldr	r1, [pc, #244]	@ (8000ff4 <Shell_Loop+0x1b0>)
 8000f00:	600a      	str	r2, [r1, #0]
 8000f02:	4a39      	ldr	r2, [pc, #228]	@ (8000fe8 <Shell_Loop+0x1a4>)
 8000f04:	7811      	ldrb	r1, [r2, #0]
 8000f06:	4a3c      	ldr	r2, [pc, #240]	@ (8000ff8 <Shell_Loop+0x1b4>)
 8000f08:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&huart3, uartRxBuffer, 1, HAL_MAX_DELAY);
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4935      	ldr	r1, [pc, #212]	@ (8000fe8 <Shell_Loop+0x1a4>)
 8000f12:	4837      	ldr	r0, [pc, #220]	@ (8000ff0 <Shell_Loop+0x1ac>)
 8000f14:	f002 ff68 	bl	8003de8 <HAL_UART_Transmit>
			}
			break;
 8000f18:	e001      	b.n	8000f1e <Shell_Loop+0xda>
			break;
 8000f1a:	bf00      	nop
 8000f1c:	e000      	b.n	8000f20 <Shell_Loop+0xdc>
			break;
 8000f1e:	bf00      	nop
		}
		uartRxReceived = 0;  // Reset the received flag after processing
 8000f20:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <Shell_Loop+0x1a0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
	}

	if (newCmdReady) {
 8000f26:	4b39      	ldr	r3, [pc, #228]	@ (800100c <Shell_Loop+0x1c8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d056      	beq.n	8000fdc <Shell_Loop+0x198>
		if (strcmp(argv[0], "WhereisBrian?") == 0) {
 8000f2e:	4b36      	ldr	r3, [pc, #216]	@ (8001008 <Shell_Loop+0x1c4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4938      	ldr	r1, [pc, #224]	@ (8001014 <Shell_Loop+0x1d0>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff f96b 	bl	8000210 <strcmp>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d107      	bne.n	8000f50 <Shell_Loop+0x10c>
			HAL_UART_Transmit(&huart3, brian, sizeof(brian), HAL_MAX_DELAY);
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f44:	221a      	movs	r2, #26
 8000f46:	4934      	ldr	r1, [pc, #208]	@ (8001018 <Shell_Loop+0x1d4>)
 8000f48:	4829      	ldr	r0, [pc, #164]	@ (8000ff0 <Shell_Loop+0x1ac>)
 8000f4a:	f002 ff4d 	bl	8003de8 <HAL_UART_Transmit>
 8000f4e:	e03b      	b.n	8000fc8 <Shell_Loop+0x184>
		} else if (strcmp(argv[0], "help") == 0) {
 8000f50:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <Shell_Loop+0x1c4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4931      	ldr	r1, [pc, #196]	@ (800101c <Shell_Loop+0x1d8>)
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff f95a 	bl	8000210 <strcmp>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10e      	bne.n	8000f80 <Shell_Loop+0x13c>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8000f62:	4a2f      	ldr	r2, [pc, #188]	@ (8001020 <Shell_Loop+0x1dc>)
 8000f64:	2140      	movs	r1, #64	@ 0x40
 8000f66:	482f      	ldr	r0, [pc, #188]	@ (8001024 <Shell_Loop+0x1e0>)
 8000f68:	f004 f8a0 	bl	80050ac <sniprintf>
 8000f6c:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart3, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f76:	492b      	ldr	r1, [pc, #172]	@ (8001024 <Shell_Loop+0x1e0>)
 8000f78:	481d      	ldr	r0, [pc, #116]	@ (8000ff0 <Shell_Loop+0x1ac>)
 8000f7a:	f002 ff35 	bl	8003de8 <HAL_UART_Transmit>
 8000f7e:	e023      	b.n	8000fc8 <Shell_Loop+0x184>
		} else if (strcmp(argv[0], "angle") == 0) {
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <Shell_Loop+0x1c4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4928      	ldr	r1, [pc, #160]	@ (8001028 <Shell_Loop+0x1e4>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff f942 	bl	8000210 <strcmp>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d106      	bne.n	8000fa0 <Shell_Loop+0x15c>
			set_angle(argv, argc);
 8000f92:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <Shell_Loop+0x1b8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4619      	mov	r1, r3
 8000f98:	481b      	ldr	r0, [pc, #108]	@ (8001008 <Shell_Loop+0x1c4>)
 8000f9a:	f7ff fd29 	bl	80009f0 <set_angle>
 8000f9e:	e013      	b.n	8000fc8 <Shell_Loop+0x184>
		}
		else if (strcmp(argv[0], "GET_T") == 0) {
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <Shell_Loop+0x1c4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4921      	ldr	r1, [pc, #132]	@ (800102c <Shell_Loop+0x1e8>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f932 	bl	8000210 <strcmp>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d103      	bne.n	8000fba <Shell_Loop+0x176>
			PRINT_T(&temp);
 8000fb2:	481f      	ldr	r0, [pc, #124]	@ (8001030 <Shell_Loop+0x1ec>)
 8000fb4:	f7ff fee6 	bl	8000d84 <PRINT_T>
 8000fb8:	e006      	b.n	8000fc8 <Shell_Loop+0x184>
		}
		else {
			HAL_UART_Transmit(&huart3, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fbe:	2214      	movs	r2, #20
 8000fc0:	491c      	ldr	r1, [pc, #112]	@ (8001034 <Shell_Loop+0x1f0>)
 8000fc2:	480b      	ldr	r0, [pc, #44]	@ (8000ff0 <Shell_Loop+0x1ac>)
 8000fc4:	f002 ff10 	bl	8003de8 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart3, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fcc:	2218      	movs	r2, #24
 8000fce:	491a      	ldr	r1, [pc, #104]	@ (8001038 <Shell_Loop+0x1f4>)
 8000fd0:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <Shell_Loop+0x1ac>)
 8000fd2:	f002 ff09 	bl	8003de8 <HAL_UART_Transmit>
		newCmdReady = 0;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <Shell_Loop+0x1c8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200001b0 	.word	0x200001b0
 8000fe8:	200001b4 	.word	0x200001b4
 8000fec:	20000078 	.word	0x20000078
 8000ff0:	200002e0 	.word	0x200002e0
 8000ff4:	20000260 	.word	0x20000260
 8000ff8:	20000220 	.word	0x20000220
 8000ffc:	20000288 	.word	0x20000288
 8001000:	080063d8 	.word	0x080063d8
 8001004:	2000028c 	.word	0x2000028c
 8001008:	20000264 	.word	0x20000264
 800100c:	20000290 	.word	0x20000290
 8001010:	2000007c 	.word	0x2000007c
 8001014:	080063dc 	.word	0x080063dc
 8001018:	20000094 	.word	0x20000094
 800101c:	080063ec 	.word	0x080063ec
 8001020:	080063f4 	.word	0x080063f4
 8001024:	200001b8 	.word	0x200001b8
 8001028:	0800641c 	.word	0x0800641c
 800102c:	08006424 	.word	0x08006424
 8001030:	20000214 	.word	0x20000214
 8001034:	20000080 	.word	0x20000080
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_UART_RxCpltCallback>:

// Callback function to handle UART receive completion
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {  // Ensure the callback is for the correct UART instance
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <HAL_UART_RxCpltCallback+0x2c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d107      	bne.n	800105e <HAL_UART_RxCpltCallback+0x22>
		uartRxReceived = 1;  // Set the flag to indicate data is ready to be processed
 800104e:	4b07      	ldr	r3, [pc, #28]	@ (800106c <HAL_UART_RxCpltCallback+0x30>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
		// Restart the UART receive interrupt
		HAL_UART_Receive_IT(&huart3, uartRxBuffer, 1);  // Read 1 byte at a time
 8001054:	2201      	movs	r2, #1
 8001056:	4906      	ldr	r1, [pc, #24]	@ (8001070 <HAL_UART_RxCpltCallback+0x34>)
 8001058:	4806      	ldr	r0, [pc, #24]	@ (8001074 <HAL_UART_RxCpltCallback+0x38>)
 800105a:	f002 ff50 	bl	8003efe <HAL_UART_Receive_IT>
	}
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40004400 	.word	0x40004400
 800106c:	200001b0 	.word	0x200001b0
 8001070:	200001b4 	.word	0x200001b4
 8001074:	200002e0 	.word	0x200002e0

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	4a0f      	ldr	r2, [pc, #60]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800108c:	6453      	str	r3, [r2, #68]	@ 0x44
 800108e:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_MspInit+0x4c>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80010d0:	1d39      	adds	r1, r7, #4
 80010d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010d6:	2201      	movs	r2, #1
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <__io_putchar+0x20>)
 80010da:	f002 fe85 	bl	8003de8 <HAL_UART_Transmit>

  return ch;
 80010de:	687b      	ldr	r3, [r7, #4]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000298 	.word	0x20000298

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <NMI_Handler+0x4>

080010f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <UsageFault_Handler+0x4>

08001114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001142:	f000 fa4d 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <USART2_IRQHandler+0x10>)
 8001152:	f002 fef9 	bl	8003f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000298 	.word	0x20000298

08001160 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001164:	4802      	ldr	r0, [pc, #8]	@ (8001170 <USART3_IRQHandler+0x10>)
 8001166:	f002 feef 	bl	8003f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200002e0 	.word	0x200002e0

08001174 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_kill>:

int _kill(int pid, int sig)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800118e:	f004 f8af 	bl	80052f0 <__errno>
 8001192:	4603      	mov	r3, r0
 8001194:	2216      	movs	r2, #22
 8001196:	601a      	str	r2, [r3, #0]
  return -1;
 8001198:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_exit>:

void _exit (int status)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ffe7 	bl	8001184 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011b6:	bf00      	nop
 80011b8:	e7fd      	b.n	80011b6 <_exit+0x12>

080011ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e00a      	b.n	80011e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011cc:	f3af 8000 	nop.w
 80011d0:	4601      	mov	r1, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	60ba      	str	r2, [r7, #8]
 80011d8:	b2ca      	uxtb	r2, r1
 80011da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbf0      	blt.n	80011cc <_read+0x12>
  }

  return len;
 80011ea:	687b      	ldr	r3, [r7, #4]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e009      	b.n	800121a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff5a 	bl	80010c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbf1      	blt.n	8001206 <_write+0x12>
  }
  return len;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_close>:

int _close(int file)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001254:	605a      	str	r2, [r3, #4]
  return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_isatty>:

int _isatty(int file)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800126c:	2301      	movs	r3, #1
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	@ (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f004 f814 	bl	80052f0 <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20020000 	.word	0x20020000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	20000294 	.word	0x20000294
 80012fc:	20000478 	.word	0x20000478

08001300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <SystemInit+0x20>)
 8001306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800130a:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <SystemInit+0x20>)
 800130c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001310:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001328:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 800132a:	4a12      	ldr	r2, [pc, #72]	@ (8001374 <MX_USART2_UART_Init+0x50>)
 800132c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132e:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 8001330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 800134a:	220c      	movs	r2, #12
 800134c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_USART2_UART_Init+0x4c>)
 800135c:	f002 fcf4 	bl	8003d48 <HAL_UART_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001366:	f7ff fb3d 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000298 	.word	0x20000298
 8001374:	40004400 	.word	0x40004400

08001378 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <MX_USART3_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_USART3_UART_Init+0x4c>)
 80013b0:	f002 fcca 	bl	8003d48 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f7ff fb13 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200002e0 	.word	0x200002e0
 80013c8:	40004800 	.word	0x40004800

080013cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	@ 0x30
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a3a      	ldr	r2, [pc, #232]	@ (80014d4 <HAL_UART_MspInit+0x108>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d134      	bne.n	8001458 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	4b39      	ldr	r3, [pc, #228]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	4a38      	ldr	r2, [pc, #224]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	4b32      	ldr	r3, [pc, #200]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a31      	ldr	r2, [pc, #196]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b2f      	ldr	r3, [pc, #188]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001426:	230c      	movs	r3, #12
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001436:	2307      	movs	r3, #7
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	4826      	ldr	r0, [pc, #152]	@ (80014dc <HAL_UART_MspInit+0x110>)
 8001442:	f000 fca1 	bl	8001d88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2026      	movs	r0, #38	@ 0x26
 800144c:	f000 fbd3 	bl	8001bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001450:	2026      	movs	r0, #38	@ 0x26
 8001452:	f000 fbec 	bl	8001c2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001456:	e039      	b.n	80014cc <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a20      	ldr	r2, [pc, #128]	@ (80014e0 <HAL_UART_MspInit+0x114>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d134      	bne.n	80014cc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	4a1b      	ldr	r2, [pc, #108]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 800146c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001470:	6413      	str	r3, [r2, #64]	@ 0x40
 8001472:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a14      	ldr	r2, [pc, #80]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_UART_MspInit+0x10c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800149a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014ac:	2307      	movs	r3, #7
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	480b      	ldr	r0, [pc, #44]	@ (80014e4 <HAL_UART_MspInit+0x118>)
 80014b8:	f000 fc66 	bl	8001d88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	2027      	movs	r0, #39	@ 0x27
 80014c2:	f000 fb98 	bl	8001bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014c6:	2027      	movs	r0, #39	@ 0x27
 80014c8:	f000 fbb1 	bl	8001c2e <HAL_NVIC_EnableIRQ>
}
 80014cc:	bf00      	nop
 80014ce:	3730      	adds	r7, #48	@ 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40004800 	.word	0x40004800
 80014e4:	40020800 	.word	0x40020800

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001520 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014ec:	f7ff ff08 	bl	8001300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	@ (8001524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	@ (8001528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	@ (8001534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001516:	f003 fef1 	bl	80052fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7ff f9db 	bl	80008d4 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 800152c:	08006638 	.word	0x08006638
  ldr r2, =_sbss
 8001530:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001534:	20000478 	.word	0x20000478

08001538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC_IRQHandler>
	...

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <HAL_Init+0x40>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <HAL_Init+0x40>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <HAL_Init+0x40>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 fb3b 	bl	8001be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	200f      	movs	r0, #15
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fd82 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fb53 	bl	8001c4a <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015bc:	f000 fb1b 	bl	8001bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000b0 	.word	0x200000b0
 80015d8:	200000b8 	.word	0x200000b8
 80015dc:	200000b4 	.word	0x200000b4

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200000b8 	.word	0x200000b8
 8001604:	20000328 	.word	0x20000328

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000328 	.word	0x20000328

08001620 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0ed      	b.n	800180e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7fe fffc 	bl	800063c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001654:	f7ff ffd8 	bl	8001608 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800165a:	e012      	b.n	8001682 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800165c:	f7ff ffd4 	bl	8001608 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d90b      	bls.n	8001682 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2205      	movs	r2, #5
 800167a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0c5      	b.n	800180e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0e5      	beq.n	800165c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0202 	bic.w	r2, r2, #2
 800169e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a0:	f7ff ffb2 	bl	8001608 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016a6:	e012      	b.n	80016ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a8:	f7ff ffae 	bl	8001608 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b0a      	cmp	r3, #10
 80016b4:	d90b      	bls.n	80016ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2205      	movs	r2, #5
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e09f      	b.n	800180e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1e5      	bne.n	80016a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7e1b      	ldrb	r3, [r3, #24]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d108      	bne.n	80016f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e007      	b.n	8001706 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7e5b      	ldrb	r3, [r3, #25]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e007      	b.n	8001730 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800172e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e9b      	ldrb	r3, [r3, #26]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d108      	bne.n	800174a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	e007      	b.n	800175a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0220 	bic.w	r2, r2, #32
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7edb      	ldrb	r3, [r3, #27]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0210 	bic.w	r2, r2, #16
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e007      	b.n	8001784 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0210 	orr.w	r2, r2, #16
 8001782:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7f1b      	ldrb	r3, [r3, #28]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d108      	bne.n	800179e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0208 	orr.w	r2, r2, #8
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	e007      	b.n	80017ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0208 	bic.w	r2, r2, #8
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7f5b      	ldrb	r3, [r3, #29]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0204 	orr.w	r2, r2, #4
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e007      	b.n	80017d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0204 	bic.w	r2, r2, #4
 80017d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	ea42 0103 	orr.w	r1, r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d12e      	bne.n	8001888 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2202      	movs	r2, #2
 800182e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001842:	f7ff fee1 	bl	8001608 <HAL_GetTick>
 8001846:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001848:	e012      	b.n	8001870 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800184a:	f7ff fedd 	bl	8001608 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b0a      	cmp	r3, #10
 8001856:	d90b      	bls.n	8001870 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2205      	movs	r2, #5
 8001868:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e012      	b.n	8001896 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1e5      	bne.n	800184a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	e006      	b.n	8001896 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800189e:	b480      	push	{r7}
 80018a0:	b089      	sub	sp, #36	@ 0x24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80018bc:	7ffb      	ldrb	r3, [r7, #31]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d003      	beq.n	80018ca <HAL_CAN_AddTxMessage+0x2c>
 80018c2:	7ffb      	ldrb	r3, [r7, #31]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	f040 80ad 	bne.w	8001a24 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10a      	bne.n	80018ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d105      	bne.n	80018ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8095 	beq.w	8001a14 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	0e1b      	lsrs	r3, r3, #24
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018f4:	2201      	movs	r2, #1
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	409a      	lsls	r2, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10d      	bne.n	8001922 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001910:	68f9      	ldr	r1, [r7, #12]
 8001912:	6809      	ldr	r1, [r1, #0]
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3318      	adds	r3, #24
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	440b      	add	r3, r1
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e00f      	b.n	8001942 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800192c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001932:	68f9      	ldr	r1, [r7, #12]
 8001934:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001936:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3318      	adds	r3, #24
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	440b      	add	r3, r1
 8001940:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	691a      	ldr	r2, [r3, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3318      	adds	r3, #24
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	440b      	add	r3, r1
 8001952:	3304      	adds	r3, #4
 8001954:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	7d1b      	ldrb	r3, [r3, #20]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d111      	bne.n	8001982 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3318      	adds	r3, #24
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	3304      	adds	r3, #4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	6811      	ldr	r1, [r2, #0]
 8001972:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3318      	adds	r3, #24
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	440b      	add	r3, r1
 800197e:	3304      	adds	r3, #4
 8001980:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3307      	adds	r3, #7
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	061a      	lsls	r2, r3, #24
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3306      	adds	r3, #6
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	041b      	lsls	r3, r3, #16
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3305      	adds	r3, #5
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	4313      	orrs	r3, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	3204      	adds	r2, #4
 80019a2:	7812      	ldrb	r2, [r2, #0]
 80019a4:	4610      	mov	r0, r2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	6811      	ldr	r1, [r2, #0]
 80019aa:	ea43 0200 	orr.w	r2, r3, r0
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	440b      	add	r3, r1
 80019b4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80019b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3303      	adds	r3, #3
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	061a      	lsls	r2, r3, #24
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3302      	adds	r3, #2
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	041b      	lsls	r3, r3, #16
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3301      	adds	r3, #1
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	4313      	orrs	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	7812      	ldrb	r2, [r2, #0]
 80019da:	4610      	mov	r0, r2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	6811      	ldr	r1, [r2, #0]
 80019e0:	ea43 0200 	orr.w	r2, r3, r0
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	440b      	add	r3, r1
 80019ea:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80019ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3318      	adds	r3, #24
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	4413      	add	r3, r2
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	6811      	ldr	r1, [r2, #0]
 8001a02:	f043 0201 	orr.w	r2, r3, #1
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3318      	adds	r3, #24
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	440b      	add	r3, r1
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e00e      	b.n	8001a32 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e006      	b.n	8001a32 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
  }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	@ 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	@ (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db0b      	blt.n	8001ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	f003 021f 	and.w	r2, r3, #31
 8001abc:	4907      	ldr	r1, [pc, #28]	@ (8001adc <__NVIC_EnableIRQ+0x38>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	095b      	lsrs	r3, r3, #5
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	490c      	ldr	r1, [pc, #48]	@ (8001b2c <__NVIC_SetPriority+0x4c>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4908      	ldr	r1, [pc, #32]	@ (8001b30 <__NVIC_SetPriority+0x50>)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	3b04      	subs	r3, #4
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	401a      	ands	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	43d9      	mvns	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	4313      	orrs	r3, r2
         );
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3724      	adds	r7, #36	@ 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bac:	d301      	bcc.n	8001bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00f      	b.n	8001bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <SysTick_Config+0x40>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bba:	210f      	movs	r1, #15
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bc0:	f7ff ff8e 	bl	8001ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <SysTick_Config+0x40>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bca:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <SysTick_Config+0x40>)
 8001bcc:	2207      	movs	r2, #7
 8001bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	e000e010 	.word	0xe000e010

08001be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff29 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	607a      	str	r2, [r7, #4]
 8001c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c08:	f7ff ff3e 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	6978      	ldr	r0, [r7, #20]
 8001c14:	f7ff ff8e 	bl	8001b34 <NVIC_EncodePriority>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff5d 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001c26:	bf00      	nop
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff31 	bl	8001aa4 <__NVIC_EnableIRQ>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ffa2 	bl	8001b9c <SysTick_Config>
 8001c58:	4603      	mov	r3, r0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff fcca 	bl	8001608 <HAL_GetTick>
 8001c74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d008      	beq.n	8001c94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2280      	movs	r2, #128	@ 0x80
 8001c86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e052      	b.n	8001d3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0216 	bic.w	r2, r2, #22
 8001ca2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d103      	bne.n	8001cc4 <HAL_DMA_Abort+0x62>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0208 	bic.w	r2, r2, #8
 8001cd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0201 	bic.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce4:	e013      	b.n	8001d0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ce6:	f7ff fc8f 	bl	8001608 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	d90c      	bls.n	8001d0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e015      	b.n	8001d3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e4      	bne.n	8001ce6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d20:	223f      	movs	r2, #63	@ 0x3f
 8001d22:	409a      	lsls	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d004      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2280      	movs	r2, #128	@ 0x80
 8001d5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e00c      	b.n	8001d7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2205      	movs	r2, #5
 8001d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	@ 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	e165      	b.n	8002070 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	f040 8154 	bne.w	800206a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d005      	beq.n	8001dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d130      	bne.n	8001e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e10:	2201      	movs	r2, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 0201 	and.w	r2, r3, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d017      	beq.n	8001e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d123      	bne.n	8001ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	08da      	lsrs	r2, r3, #3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3208      	adds	r2, #8
 8001e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	08da      	lsrs	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3208      	adds	r2, #8
 8001ec6:	69b9      	ldr	r1, [r7, #24]
 8001ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0203 	and.w	r2, r3, #3
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80ae 	beq.w	800206a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b5d      	ldr	r3, [pc, #372]	@ (8002088 <HAL_GPIO_Init+0x300>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	4a5c      	ldr	r2, [pc, #368]	@ (8002088 <HAL_GPIO_Init+0x300>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1e:	4b5a      	ldr	r3, [pc, #360]	@ (8002088 <HAL_GPIO_Init+0x300>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f2a:	4a58      	ldr	r2, [pc, #352]	@ (800208c <HAL_GPIO_Init+0x304>)
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	220f      	movs	r2, #15
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4f      	ldr	r2, [pc, #316]	@ (8002090 <HAL_GPIO_Init+0x308>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d025      	beq.n	8001fa2 <HAL_GPIO_Init+0x21a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4e      	ldr	r2, [pc, #312]	@ (8002094 <HAL_GPIO_Init+0x30c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01f      	beq.n	8001f9e <HAL_GPIO_Init+0x216>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4d      	ldr	r2, [pc, #308]	@ (8002098 <HAL_GPIO_Init+0x310>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d019      	beq.n	8001f9a <HAL_GPIO_Init+0x212>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a4c      	ldr	r2, [pc, #304]	@ (800209c <HAL_GPIO_Init+0x314>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0x20e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a4b      	ldr	r2, [pc, #300]	@ (80020a0 <HAL_GPIO_Init+0x318>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00d      	beq.n	8001f92 <HAL_GPIO_Init+0x20a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4a      	ldr	r2, [pc, #296]	@ (80020a4 <HAL_GPIO_Init+0x31c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <HAL_GPIO_Init+0x206>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a49      	ldr	r2, [pc, #292]	@ (80020a8 <HAL_GPIO_Init+0x320>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_GPIO_Init+0x202>
 8001f86:	2306      	movs	r3, #6
 8001f88:	e00c      	b.n	8001fa4 <HAL_GPIO_Init+0x21c>
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	e00a      	b.n	8001fa4 <HAL_GPIO_Init+0x21c>
 8001f8e:	2305      	movs	r3, #5
 8001f90:	e008      	b.n	8001fa4 <HAL_GPIO_Init+0x21c>
 8001f92:	2304      	movs	r3, #4
 8001f94:	e006      	b.n	8001fa4 <HAL_GPIO_Init+0x21c>
 8001f96:	2303      	movs	r3, #3
 8001f98:	e004      	b.n	8001fa4 <HAL_GPIO_Init+0x21c>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e002      	b.n	8001fa4 <HAL_GPIO_Init+0x21c>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x21c>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	f002 0203 	and.w	r2, r2, #3
 8001faa:	0092      	lsls	r2, r2, #2
 8001fac:	4093      	lsls	r3, r2
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb4:	4935      	ldr	r1, [pc, #212]	@ (800208c <HAL_GPIO_Init+0x304>)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80020ac <HAL_GPIO_Init+0x324>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fe6:	4a31      	ldr	r2, [pc, #196]	@ (80020ac <HAL_GPIO_Init+0x324>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fec:	4b2f      	ldr	r3, [pc, #188]	@ (80020ac <HAL_GPIO_Init+0x324>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002010:	4a26      	ldr	r2, [pc, #152]	@ (80020ac <HAL_GPIO_Init+0x324>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002016:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <HAL_GPIO_Init+0x324>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800203a:	4a1c      	ldr	r2, [pc, #112]	@ (80020ac <HAL_GPIO_Init+0x324>)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002040:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <HAL_GPIO_Init+0x324>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002064:	4a11      	ldr	r2, [pc, #68]	@ (80020ac <HAL_GPIO_Init+0x324>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3301      	adds	r3, #1
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	2b0f      	cmp	r3, #15
 8002074:	f67f ae96 	bls.w	8001da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3724      	adds	r7, #36	@ 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	40013800 	.word	0x40013800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020400 	.word	0x40020400
 8002098:	40020800 	.word	0x40020800
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40021400 	.word	0x40021400
 80020a8:	40021800 	.word	0x40021800
 80020ac:	40013c00 	.word	0x40013c00

080020b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020cc:	e003      	b.n	80020d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ce:	887b      	ldrh	r3, [r7, #2]
 80020d0:	041a      	lsls	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e12b      	b.n	800234e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fb7a 	bl	8000804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2224      	movs	r2, #36	@ 0x24
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002136:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002146:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002148:	f001 f908 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 800214c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4a81      	ldr	r2, [pc, #516]	@ (8002358 <HAL_I2C_Init+0x274>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d807      	bhi.n	8002168 <HAL_I2C_Init+0x84>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4a80      	ldr	r2, [pc, #512]	@ (800235c <HAL_I2C_Init+0x278>)
 800215c:	4293      	cmp	r3, r2
 800215e:	bf94      	ite	ls
 8002160:	2301      	movls	r3, #1
 8002162:	2300      	movhi	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	e006      	b.n	8002176 <HAL_I2C_Init+0x92>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4a7d      	ldr	r2, [pc, #500]	@ (8002360 <HAL_I2C_Init+0x27c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	bf94      	ite	ls
 8002170:	2301      	movls	r3, #1
 8002172:	2300      	movhi	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0e7      	b.n	800234e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4a78      	ldr	r2, [pc, #480]	@ (8002364 <HAL_I2C_Init+0x280>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	0c9b      	lsrs	r3, r3, #18
 8002188:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	430a      	orrs	r2, r1
 800219c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002358 <HAL_I2C_Init+0x274>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d802      	bhi.n	80021b8 <HAL_I2C_Init+0xd4>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3301      	adds	r3, #1
 80021b6:	e009      	b.n	80021cc <HAL_I2C_Init+0xe8>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	4a69      	ldr	r2, [pc, #420]	@ (8002368 <HAL_I2C_Init+0x284>)
 80021c4:	fba2 2303 	umull	r2, r3, r2, r3
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	3301      	adds	r3, #1
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	430b      	orrs	r3, r1
 80021d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	495c      	ldr	r1, [pc, #368]	@ (8002358 <HAL_I2C_Init+0x274>)
 80021e8:	428b      	cmp	r3, r1
 80021ea:	d819      	bhi.n	8002220 <HAL_I2C_Init+0x13c>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e59      	subs	r1, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021fa:	1c59      	adds	r1, r3, #1
 80021fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002200:	400b      	ands	r3, r1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_I2C_Init+0x138>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e59      	subs	r1, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fbb1 f3f3 	udiv	r3, r1, r3
 8002214:	3301      	adds	r3, #1
 8002216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221a:	e051      	b.n	80022c0 <HAL_I2C_Init+0x1dc>
 800221c:	2304      	movs	r3, #4
 800221e:	e04f      	b.n	80022c0 <HAL_I2C_Init+0x1dc>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d111      	bne.n	800224c <HAL_I2C_Init+0x168>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1e58      	subs	r0, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6859      	ldr	r1, [r3, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	440b      	add	r3, r1
 8002236:	fbb0 f3f3 	udiv	r3, r0, r3
 800223a:	3301      	adds	r3, #1
 800223c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	e012      	b.n	8002272 <HAL_I2C_Init+0x18e>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1e58      	subs	r0, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	0099      	lsls	r1, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002262:	3301      	adds	r3, #1
 8002264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_Init+0x196>
 8002276:	2301      	movs	r3, #1
 8002278:	e022      	b.n	80022c0 <HAL_I2C_Init+0x1dc>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10e      	bne.n	80022a0 <HAL_I2C_Init+0x1bc>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1e58      	subs	r0, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6859      	ldr	r1, [r3, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	440b      	add	r3, r1
 8002290:	fbb0 f3f3 	udiv	r3, r0, r3
 8002294:	3301      	adds	r3, #1
 8002296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800229e:	e00f      	b.n	80022c0 <HAL_I2C_Init+0x1dc>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1e58      	subs	r0, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	0099      	lsls	r1, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	6809      	ldr	r1, [r1, #0]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69da      	ldr	r2, [r3, #28]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6911      	ldr	r1, [r2, #16]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68d2      	ldr	r2, [r2, #12]
 80022fa:	4311      	orrs	r1, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	430b      	orrs	r3, r1
 8002302:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	000186a0 	.word	0x000186a0
 800235c:	001e847f 	.word	0x001e847f
 8002360:	003d08ff 	.word	0x003d08ff
 8002364:	431bde83 	.word	0x431bde83
 8002368:	10624dd3 	.word	0x10624dd3

0800236c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	461a      	mov	r2, r3
 8002378:	460b      	mov	r3, r1
 800237a:	817b      	strh	r3, [r7, #10]
 800237c:	4613      	mov	r3, r2
 800237e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff f942 	bl	8001608 <HAL_GetTick>
 8002384:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b20      	cmp	r3, #32
 8002390:	f040 80e0 	bne.w	8002554 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2319      	movs	r3, #25
 800239a:	2201      	movs	r2, #1
 800239c:	4970      	ldr	r1, [pc, #448]	@ (8002560 <HAL_I2C_Master_Transmit+0x1f4>)
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fc64 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023aa:	2302      	movs	r3, #2
 80023ac:	e0d3      	b.n	8002556 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_I2C_Master_Transmit+0x50>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e0cc      	b.n	8002556 <HAL_I2C_Master_Transmit+0x1ea>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d007      	beq.n	80023e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2221      	movs	r2, #33	@ 0x21
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2210      	movs	r2, #16
 80023fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	893a      	ldrh	r2, [r7, #8]
 8002412:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4a50      	ldr	r2, [pc, #320]	@ (8002564 <HAL_I2C_Master_Transmit+0x1f8>)
 8002422:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002424:	8979      	ldrh	r1, [r7, #10]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	6a3a      	ldr	r2, [r7, #32]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 face 	bl	80029cc <I2C_MasterRequestWrite>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e08d      	b.n	8002556 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002450:	e066      	b.n	8002520 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	6a39      	ldr	r1, [r7, #32]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fd22 	bl	8002ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00d      	beq.n	800247e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	2b04      	cmp	r3, #4
 8002468:	d107      	bne.n	800247a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002478:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e06b      	b.n	8002556 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	781a      	ldrb	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d11b      	bne.n	80024f4 <HAL_I2C_Master_Transmit+0x188>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d017      	beq.n	80024f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	781a      	ldrb	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	6a39      	ldr	r1, [r7, #32]
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fd19 	bl	8002f30 <I2C_WaitOnBTFFlagUntilTimeout>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002508:	2b04      	cmp	r3, #4
 800250a:	d107      	bne.n	800251c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800251a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e01a      	b.n	8002556 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	d194      	bne.n	8002452 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	e000      	b.n	8002556 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002554:	2302      	movs	r3, #2
  }
}
 8002556:	4618      	mov	r0, r3
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	00100002 	.word	0x00100002
 8002564:	ffff0000 	.word	0xffff0000

08002568 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	@ 0x30
 800256c:	af02      	add	r7, sp, #8
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	461a      	mov	r2, r3
 8002574:	460b      	mov	r3, r1
 8002576:	817b      	strh	r3, [r7, #10]
 8002578:	4613      	mov	r3, r2
 800257a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800257c:	f7ff f844 	bl	8001608 <HAL_GetTick>
 8002580:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b20      	cmp	r3, #32
 800258c:	f040 8217 	bne.w	80029be <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2319      	movs	r3, #25
 8002596:	2201      	movs	r2, #1
 8002598:	497c      	ldr	r1, [pc, #496]	@ (800278c <HAL_I2C_Master_Receive+0x224>)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fb66 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80025a6:	2302      	movs	r3, #2
 80025a8:	e20a      	b.n	80029c0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_I2C_Master_Receive+0x50>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e203      	b.n	80029c0 <HAL_I2C_Master_Receive+0x458>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d007      	beq.n	80025de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2222      	movs	r2, #34	@ 0x22
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2210      	movs	r2, #16
 80025fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	893a      	ldrh	r2, [r7, #8]
 800260e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a5c      	ldr	r2, [pc, #368]	@ (8002790 <HAL_I2C_Master_Receive+0x228>)
 800261e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002620:	8979      	ldrh	r1, [r7, #10]
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 fa52 	bl	8002ad0 <I2C_MasterRequestRead>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e1c4      	b.n	80029c0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800263a:	2b00      	cmp	r3, #0
 800263c:	d113      	bne.n	8002666 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	623b      	str	r3, [r7, #32]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	623b      	str	r3, [r7, #32]
 8002652:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e198      	b.n	8002998 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266a:	2b01      	cmp	r3, #1
 800266c:	d11b      	bne.n	80026a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800267c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e178      	b.n	8002998 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d11b      	bne.n	80026e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	e158      	b.n	8002998 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800270c:	e144      	b.n	8002998 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002712:	2b03      	cmp	r3, #3
 8002714:	f200 80f1 	bhi.w	80028fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271c:	2b01      	cmp	r3, #1
 800271e:	d123      	bne.n	8002768 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002722:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fc4b 	bl	8002fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e145      	b.n	80029c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002766:	e117      	b.n	8002998 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276c:	2b02      	cmp	r3, #2
 800276e:	d14e      	bne.n	800280e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002776:	2200      	movs	r2, #0
 8002778:	4906      	ldr	r1, [pc, #24]	@ (8002794 <HAL_I2C_Master_Receive+0x22c>)
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fa76 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e11a      	b.n	80029c0 <HAL_I2C_Master_Receive+0x458>
 800278a:	bf00      	nop
 800278c:	00100002 	.word	0x00100002
 8002790:	ffff0000 	.word	0xffff0000
 8002794:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800280c:	e0c4      	b.n	8002998 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002814:	2200      	movs	r2, #0
 8002816:	496c      	ldr	r1, [pc, #432]	@ (80029c8 <HAL_I2C_Master_Receive+0x460>)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fa27 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0cb      	b.n	80029c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002836:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002860:	b29b      	uxth	r3, r3
 8002862:	3b01      	subs	r3, #1
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002870:	2200      	movs	r2, #0
 8002872:	4955      	ldr	r1, [pc, #340]	@ (80029c8 <HAL_I2C_Master_Receive+0x460>)
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f9f9 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e09d      	b.n	80029c0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b0:	3b01      	subs	r3, #1
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028f8:	e04e      	b.n	8002998 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fb5e 	bl	8002fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e058      	b.n	80029c0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292a:	3b01      	subs	r3, #1
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b04      	cmp	r3, #4
 800294c:	d124      	bne.n	8002998 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002952:	2b03      	cmp	r3, #3
 8002954:	d107      	bne.n	8002966 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002964:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f aeb6 	bne.w	800270e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e000      	b.n	80029c0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3728      	adds	r7, #40	@ 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	00010004 	.word	0x00010004

080029cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	460b      	mov	r3, r1
 80029da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d006      	beq.n	80029f6 <I2C_MasterRequestWrite+0x2a>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d003      	beq.n	80029f6 <I2C_MasterRequestWrite+0x2a>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029f4:	d108      	bne.n	8002a08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e00b      	b.n	8002a20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	2b12      	cmp	r3, #18
 8002a0e:	d107      	bne.n	8002a20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f91d 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00d      	beq.n	8002a54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a46:	d103      	bne.n	8002a50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e035      	b.n	8002ac0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a5c:	d108      	bne.n	8002a70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a5e:	897b      	ldrh	r3, [r7, #10]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a6c:	611a      	str	r2, [r3, #16]
 8002a6e:	e01b      	b.n	8002aa8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a70:	897b      	ldrh	r3, [r7, #10]
 8002a72:	11db      	asrs	r3, r3, #7
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 0306 	and.w	r3, r3, #6
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f063 030f 	orn	r3, r3, #15
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	490e      	ldr	r1, [pc, #56]	@ (8002ac8 <I2C_MasterRequestWrite+0xfc>)
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f966 	bl	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e010      	b.n	8002ac0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4907      	ldr	r1, [pc, #28]	@ (8002acc <I2C_MasterRequestWrite+0x100>)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f956 	bl	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	00010008 	.word	0x00010008
 8002acc:	00010002 	.word	0x00010002

08002ad0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	460b      	mov	r3, r1
 8002ade:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002af4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d006      	beq.n	8002b0a <I2C_MasterRequestRead+0x3a>
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d003      	beq.n	8002b0a <I2C_MasterRequestRead+0x3a>
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b08:	d108      	bne.n	8002b1c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e00b      	b.n	8002b34 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	2b11      	cmp	r3, #17
 8002b22:	d107      	bne.n	8002b34 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f893 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00d      	beq.n	8002b68 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b5a:	d103      	bne.n	8002b64 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e079      	b.n	8002c5c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b70:	d108      	bne.n	8002b84 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	611a      	str	r2, [r3, #16]
 8002b82:	e05f      	b.n	8002c44 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b84:	897b      	ldrh	r3, [r7, #10]
 8002b86:	11db      	asrs	r3, r3, #7
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f003 0306 	and.w	r3, r3, #6
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f063 030f 	orn	r3, r3, #15
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4930      	ldr	r1, [pc, #192]	@ (8002c64 <I2C_MasterRequestRead+0x194>)
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f8dc 	bl	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e054      	b.n	8002c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bb2:	897b      	ldrh	r3, [r7, #10]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	4929      	ldr	r1, [pc, #164]	@ (8002c68 <I2C_MasterRequestRead+0x198>)
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f8cc 	bl	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e044      	b.n	8002c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f831 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c1e:	d103      	bne.n	8002c28 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c26:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e017      	b.n	8002c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c2c:	897b      	ldrh	r3, [r7, #10]
 8002c2e:	11db      	asrs	r3, r3, #7
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f003 0306 	and.w	r3, r3, #6
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f063 030e 	orn	r3, r3, #14
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4907      	ldr	r1, [pc, #28]	@ (8002c68 <I2C_MasterRequestRead+0x198>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f888 	bl	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	00010008 	.word	0x00010008
 8002c68:	00010002 	.word	0x00010002

08002c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7c:	e048      	b.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c84:	d044      	beq.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fe fcbf 	bl	8001608 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d139      	bne.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	0c1b      	lsrs	r3, r3, #16
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d10d      	bne.n	8002cc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	43da      	mvns	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	e00c      	b.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d116      	bne.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e023      	b.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	0c1b      	lsrs	r3, r3, #16
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d10d      	bne.n	8002d36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	43da      	mvns	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4013      	ands	r3, r2
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	e00c      	b.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d093      	beq.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d6e:	e071      	b.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d7e:	d123      	bne.n	8002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	f043 0204 	orr.w	r2, r3, #4
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e067      	b.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dce:	d041      	beq.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd0:	f7fe fc1a 	bl	8001608 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d302      	bcc.n	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d136      	bne.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d10c      	bne.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	bf14      	ite	ne
 8002e02:	2301      	movne	r3, #1
 8002e04:	2300      	moveq	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	e00b      	b.n	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	43da      	mvns	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4013      	ands	r3, r2
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e40:	f043 0220 	orr.w	r2, r3, #32
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e021      	b.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	0c1b      	lsrs	r3, r3, #16
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d10c      	bne.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	43da      	mvns	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf14      	ite	ne
 8002e70:	2301      	movne	r3, #1
 8002e72:	2300      	moveq	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e00b      	b.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f47f af6d 	bne.w	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eac:	e034      	b.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f8e3 	bl	800307a <I2C_IsAcknowledgeFailed>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e034      	b.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ec4:	d028      	beq.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7fe fb9f 	bl	8001608 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11d      	bne.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b80      	cmp	r3, #128	@ 0x80
 8002ee8:	d016      	beq.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e007      	b.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f22:	2b80      	cmp	r3, #128	@ 0x80
 8002f24:	d1c3      	bne.n	8002eae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f3c:	e034      	b.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f89b 	bl	800307a <I2C_IsAcknowledgeFailed>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e034      	b.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f54:	d028      	beq.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fe fb57 	bl	8001608 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d11d      	bne.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d016      	beq.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e007      	b.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d1c3      	bne.n	8002f3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fcc:	e049      	b.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d119      	bne.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0210 	mvn.w	r2, #16
 8002fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e030      	b.n	8003072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003010:	f7fe fafa 	bl	8001608 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	d302      	bcc.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d11d      	bne.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d016      	beq.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e007      	b.n	8003072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d1ae      	bne.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800308c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003090:	d11b      	bne.n	80030ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800309a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f043 0204 	orr.w	r2, r3, #4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	4b20      	ldr	r3, [pc, #128]	@ (8003168 <HAL_PWREx_EnableOverDrive+0x90>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003168 <HAL_PWREx_EnableOverDrive+0x90>)
 80030ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003168 <HAL_PWREx_EnableOverDrive+0x90>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	603b      	str	r3, [r7, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030fe:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <HAL_PWREx_EnableOverDrive+0x94>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003104:	f7fe fa80 	bl	8001608 <HAL_GetTick>
 8003108:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800310a:	e009      	b.n	8003120 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800310c:	f7fe fa7c 	bl	8001608 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800311a:	d901      	bls.n	8003120 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e01f      	b.n	8003160 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003120:	4b13      	ldr	r3, [pc, #76]	@ (8003170 <HAL_PWREx_EnableOverDrive+0x98>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800312c:	d1ee      	bne.n	800310c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800312e:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003134:	f7fe fa68 	bl	8001608 <HAL_GetTick>
 8003138:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800313a:	e009      	b.n	8003150 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800313c:	f7fe fa64 	bl	8001608 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800314a:	d901      	bls.n	8003150 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e007      	b.n	8003160 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003150:	4b07      	ldr	r3, [pc, #28]	@ (8003170 <HAL_PWREx_EnableOverDrive+0x98>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800315c:	d1ee      	bne.n	800313c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800
 800316c:	420e0040 	.word	0x420e0040
 8003170:	40007000 	.word	0x40007000
 8003174:	420e0044 	.word	0x420e0044

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0cc      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b68      	ldr	r3, [pc, #416]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d90c      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b65      	ldr	r3, [pc, #404]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b63      	ldr	r3, [pc, #396]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0b8      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031cc:	4b59      	ldr	r3, [pc, #356]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a58      	ldr	r2, [pc, #352]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e4:	4b53      	ldr	r3, [pc, #332]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a52      	ldr	r2, [pc, #328]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b50      	ldr	r3, [pc, #320]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	494d      	ldr	r1, [pc, #308]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d044      	beq.n	8003298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b47      	ldr	r3, [pc, #284]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d119      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e07f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d003      	beq.n	8003236 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003232:	2b03      	cmp	r3, #3
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	4b3f      	ldr	r3, [pc, #252]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e06f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003246:	4b3b      	ldr	r3, [pc, #236]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e067      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003256:	4b37      	ldr	r3, [pc, #220]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f023 0203 	bic.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4934      	ldr	r1, [pc, #208]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003268:	f7fe f9ce 	bl	8001608 <HAL_GetTick>
 800326c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	e00a      	b.n	8003286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	f7fe f9ca 	bl	8001608 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e04f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	4b2b      	ldr	r3, [pc, #172]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 020c 	and.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	429a      	cmp	r2, r3
 8003296:	d1eb      	bne.n	8003270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b25      	ldr	r3, [pc, #148]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d20c      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b22      	ldr	r3, [pc, #136]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e032      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032cc:	4b19      	ldr	r3, [pc, #100]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4916      	ldr	r1, [pc, #88]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ea:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	490e      	ldr	r1, [pc, #56]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032fe:	f000 f855 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 8003302:	4602      	mov	r2, r0
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	490a      	ldr	r1, [pc, #40]	@ (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	5ccb      	ldrb	r3, [r1, r3]
 8003312:	fa22 f303 	lsr.w	r3, r2, r3
 8003316:	4a09      	ldr	r2, [pc, #36]	@ (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800331a:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe f92e 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023c00 	.word	0x40023c00
 8003334:	40023800 	.word	0x40023800
 8003338:	0800642c 	.word	0x0800642c
 800333c:	200000b0 	.word	0x200000b0
 8003340:	200000b4 	.word	0x200000b4

08003344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003348:	4b03      	ldr	r3, [pc, #12]	@ (8003358 <HAL_RCC_GetHCLKFreq+0x14>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	200000b0 	.word	0x200000b0

0800335c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003360:	f7ff fff0 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b05      	ldr	r3, [pc, #20]	@ (800337c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	0a9b      	lsrs	r3, r3, #10
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4903      	ldr	r1, [pc, #12]	@ (8003380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800
 8003380:	0800643c 	.word	0x0800643c

08003384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003388:	f7ff ffdc 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	0b5b      	lsrs	r3, r3, #13
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	4903      	ldr	r1, [pc, #12]	@ (80033a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40023800 	.word	0x40023800
 80033a8:	0800643c 	.word	0x0800643c

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b0ae      	sub	sp, #184	@ 0xb8
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d2:	4bcb      	ldr	r3, [pc, #812]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	f200 8206 	bhi.w	80037ec <HAL_RCC_GetSysClockFreq+0x440>
 80033e0:	a201      	add	r2, pc, #4	@ (adr r2, 80033e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	0800341d 	.word	0x0800341d
 80033ec:	080037ed 	.word	0x080037ed
 80033f0:	080037ed 	.word	0x080037ed
 80033f4:	080037ed 	.word	0x080037ed
 80033f8:	08003425 	.word	0x08003425
 80033fc:	080037ed 	.word	0x080037ed
 8003400:	080037ed 	.word	0x080037ed
 8003404:	080037ed 	.word	0x080037ed
 8003408:	0800342d 	.word	0x0800342d
 800340c:	080037ed 	.word	0x080037ed
 8003410:	080037ed 	.word	0x080037ed
 8003414:	080037ed 	.word	0x080037ed
 8003418:	0800361d 	.word	0x0800361d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4bb9      	ldr	r3, [pc, #740]	@ (8003704 <HAL_RCC_GetSysClockFreq+0x358>)
 800341e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003422:	e1e7      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003424:	4bb8      	ldr	r3, [pc, #736]	@ (8003708 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800342a:	e1e3      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800342c:	4bb4      	ldr	r3, [pc, #720]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003438:	4bb1      	ldr	r3, [pc, #708]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d071      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003444:	4bae      	ldr	r3, [pc, #696]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	2200      	movs	r2, #0
 800344c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003450:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003460:	2300      	movs	r3, #0
 8003462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800346a:	4622      	mov	r2, r4
 800346c:	462b      	mov	r3, r5
 800346e:	f04f 0000 	mov.w	r0, #0
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	0159      	lsls	r1, r3, #5
 8003478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800347c:	0150      	lsls	r0, r2, #5
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4621      	mov	r1, r4
 8003484:	1a51      	subs	r1, r2, r1
 8003486:	6439      	str	r1, [r7, #64]	@ 0x40
 8003488:	4629      	mov	r1, r5
 800348a:	eb63 0301 	sbc.w	r3, r3, r1
 800348e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800349c:	4649      	mov	r1, r9
 800349e:	018b      	lsls	r3, r1, #6
 80034a0:	4641      	mov	r1, r8
 80034a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034a6:	4641      	mov	r1, r8
 80034a8:	018a      	lsls	r2, r1, #6
 80034aa:	4641      	mov	r1, r8
 80034ac:	1a51      	subs	r1, r2, r1
 80034ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034b0:	4649      	mov	r1, r9
 80034b2:	eb63 0301 	sbc.w	r3, r3, r1
 80034b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80034c4:	4649      	mov	r1, r9
 80034c6:	00cb      	lsls	r3, r1, #3
 80034c8:	4641      	mov	r1, r8
 80034ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ce:	4641      	mov	r1, r8
 80034d0:	00ca      	lsls	r2, r1, #3
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	4622      	mov	r2, r4
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80034de:	462b      	mov	r3, r5
 80034e0:	460a      	mov	r2, r1
 80034e2:	eb42 0303 	adc.w	r3, r2, r3
 80034e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034f4:	4629      	mov	r1, r5
 80034f6:	024b      	lsls	r3, r1, #9
 80034f8:	4621      	mov	r1, r4
 80034fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034fe:	4621      	mov	r1, r4
 8003500:	024a      	lsls	r2, r1, #9
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800350a:	2200      	movs	r2, #0
 800350c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003510:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003514:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003518:	f7fc fee2 	bl	80002e0 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003526:	e067      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003528:	4b75      	ldr	r3, [pc, #468]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	099b      	lsrs	r3, r3, #6
 800352e:	2200      	movs	r2, #0
 8003530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003534:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003538:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800353c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003540:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003542:	2300      	movs	r3, #0
 8003544:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003546:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800354a:	4622      	mov	r2, r4
 800354c:	462b      	mov	r3, r5
 800354e:	f04f 0000 	mov.w	r0, #0
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	0159      	lsls	r1, r3, #5
 8003558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355c:	0150      	lsls	r0, r2, #5
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4621      	mov	r1, r4
 8003564:	1a51      	subs	r1, r2, r1
 8003566:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003568:	4629      	mov	r1, r5
 800356a:	eb63 0301 	sbc.w	r3, r3, r1
 800356e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800357c:	4649      	mov	r1, r9
 800357e:	018b      	lsls	r3, r1, #6
 8003580:	4641      	mov	r1, r8
 8003582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003586:	4641      	mov	r1, r8
 8003588:	018a      	lsls	r2, r1, #6
 800358a:	4641      	mov	r1, r8
 800358c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003590:	4649      	mov	r1, r9
 8003592:	eb63 0b01 	sbc.w	fp, r3, r1
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035aa:	4692      	mov	sl, r2
 80035ac:	469b      	mov	fp, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	eb1a 0303 	adds.w	r3, sl, r3
 80035b4:	623b      	str	r3, [r7, #32]
 80035b6:	462b      	mov	r3, r5
 80035b8:	eb4b 0303 	adc.w	r3, fp, r3
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80035ca:	4629      	mov	r1, r5
 80035cc:	028b      	lsls	r3, r1, #10
 80035ce:	4621      	mov	r1, r4
 80035d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d4:	4621      	mov	r1, r4
 80035d6:	028a      	lsls	r2, r1, #10
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035e0:	2200      	movs	r2, #0
 80035e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80035e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80035e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80035ea:	f7fc fe79 	bl	80002e0 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4613      	mov	r3, r2
 80035f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035f8:	4b41      	ldr	r3, [pc, #260]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	3301      	adds	r3, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800360a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800360e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800361a:	e0eb      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800361c:	4b38      	ldr	r3, [pc, #224]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003628:	4b35      	ldr	r3, [pc, #212]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d06b      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003634:	4b32      	ldr	r3, [pc, #200]	@ (8003700 <HAL_RCC_GetSysClockFreq+0x354>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	099b      	lsrs	r3, r3, #6
 800363a:	2200      	movs	r2, #0
 800363c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800363e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003640:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003646:	663b      	str	r3, [r7, #96]	@ 0x60
 8003648:	2300      	movs	r3, #0
 800364a:	667b      	str	r3, [r7, #100]	@ 0x64
 800364c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003650:	4622      	mov	r2, r4
 8003652:	462b      	mov	r3, r5
 8003654:	f04f 0000 	mov.w	r0, #0
 8003658:	f04f 0100 	mov.w	r1, #0
 800365c:	0159      	lsls	r1, r3, #5
 800365e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003662:	0150      	lsls	r0, r2, #5
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4621      	mov	r1, r4
 800366a:	1a51      	subs	r1, r2, r1
 800366c:	61b9      	str	r1, [r7, #24]
 800366e:	4629      	mov	r1, r5
 8003670:	eb63 0301 	sbc.w	r3, r3, r1
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003682:	4659      	mov	r1, fp
 8003684:	018b      	lsls	r3, r1, #6
 8003686:	4651      	mov	r1, sl
 8003688:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800368c:	4651      	mov	r1, sl
 800368e:	018a      	lsls	r2, r1, #6
 8003690:	4651      	mov	r1, sl
 8003692:	ebb2 0801 	subs.w	r8, r2, r1
 8003696:	4659      	mov	r1, fp
 8003698:	eb63 0901 	sbc.w	r9, r3, r1
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036b0:	4690      	mov	r8, r2
 80036b2:	4699      	mov	r9, r3
 80036b4:	4623      	mov	r3, r4
 80036b6:	eb18 0303 	adds.w	r3, r8, r3
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	462b      	mov	r3, r5
 80036be:	eb49 0303 	adc.w	r3, r9, r3
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80036d0:	4629      	mov	r1, r5
 80036d2:	024b      	lsls	r3, r1, #9
 80036d4:	4621      	mov	r1, r4
 80036d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036da:	4621      	mov	r1, r4
 80036dc:	024a      	lsls	r2, r1, #9
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036e6:	2200      	movs	r2, #0
 80036e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80036ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036f0:	f7fc fdf6 	bl	80002e0 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036fe:	e065      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x420>
 8003700:	40023800 	.word	0x40023800
 8003704:	00f42400 	.word	0x00f42400
 8003708:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370c:	4b3d      	ldr	r3, [pc, #244]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x458>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	2200      	movs	r2, #0
 8003714:	4618      	mov	r0, r3
 8003716:	4611      	mov	r1, r2
 8003718:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800371c:	653b      	str	r3, [r7, #80]	@ 0x50
 800371e:	2300      	movs	r3, #0
 8003720:	657b      	str	r3, [r7, #84]	@ 0x54
 8003722:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003726:	4642      	mov	r2, r8
 8003728:	464b      	mov	r3, r9
 800372a:	f04f 0000 	mov.w	r0, #0
 800372e:	f04f 0100 	mov.w	r1, #0
 8003732:	0159      	lsls	r1, r3, #5
 8003734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003738:	0150      	lsls	r0, r2, #5
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4641      	mov	r1, r8
 8003740:	1a51      	subs	r1, r2, r1
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	4649      	mov	r1, r9
 8003746:	eb63 0301 	sbc.w	r3, r3, r1
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003758:	4659      	mov	r1, fp
 800375a:	018b      	lsls	r3, r1, #6
 800375c:	4651      	mov	r1, sl
 800375e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003762:	4651      	mov	r1, sl
 8003764:	018a      	lsls	r2, r1, #6
 8003766:	4651      	mov	r1, sl
 8003768:	1a54      	subs	r4, r2, r1
 800376a:	4659      	mov	r1, fp
 800376c:	eb63 0501 	sbc.w	r5, r3, r1
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	00eb      	lsls	r3, r5, #3
 800377a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377e:	00e2      	lsls	r2, r4, #3
 8003780:	4614      	mov	r4, r2
 8003782:	461d      	mov	r5, r3
 8003784:	4643      	mov	r3, r8
 8003786:	18e3      	adds	r3, r4, r3
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	464b      	mov	r3, r9
 800378c:	eb45 0303 	adc.w	r3, r5, r3
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379e:	4629      	mov	r1, r5
 80037a0:	028b      	lsls	r3, r1, #10
 80037a2:	4621      	mov	r1, r4
 80037a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a8:	4621      	mov	r1, r4
 80037aa:	028a      	lsls	r2, r1, #10
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037b4:	2200      	movs	r2, #0
 80037b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80037ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037be:	f7fc fd8f 	bl	80002e0 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4613      	mov	r3, r2
 80037c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x458>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0f1b      	lsrs	r3, r3, #28
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80037da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037ea:	e003      	b.n	80037f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b06      	ldr	r3, [pc, #24]	@ (8003808 <HAL_RCC_GetSysClockFreq+0x45c>)
 80037ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	37b8      	adds	r7, #184	@ 0xb8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800
 8003808:	00f42400 	.word	0x00f42400

0800380c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e28d      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8083 	beq.w	8003932 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800382c:	4b94      	ldr	r3, [pc, #592]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 030c 	and.w	r3, r3, #12
 8003834:	2b04      	cmp	r3, #4
 8003836:	d019      	beq.n	800386c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003838:	4b91      	ldr	r3, [pc, #580]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003840:	2b08      	cmp	r3, #8
 8003842:	d106      	bne.n	8003852 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003844:	4b8e      	ldr	r3, [pc, #568]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003850:	d00c      	beq.n	800386c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003852:	4b8b      	ldr	r3, [pc, #556]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d112      	bne.n	8003884 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385e:	4b88      	ldr	r3, [pc, #544]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003866:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800386a:	d10b      	bne.n	8003884 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800386c:	4b84      	ldr	r3, [pc, #528]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d05b      	beq.n	8003930 <HAL_RCC_OscConfig+0x124>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d157      	bne.n	8003930 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e25a      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800388c:	d106      	bne.n	800389c <HAL_RCC_OscConfig+0x90>
 800388e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7b      	ldr	r2, [pc, #492]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e01d      	b.n	80038d8 <HAL_RCC_OscConfig+0xcc>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038a4:	d10c      	bne.n	80038c0 <HAL_RCC_OscConfig+0xb4>
 80038a6:	4b76      	ldr	r3, [pc, #472]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a75      	ldr	r2, [pc, #468]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b73      	ldr	r3, [pc, #460]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a72      	ldr	r2, [pc, #456]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e00b      	b.n	80038d8 <HAL_RCC_OscConfig+0xcc>
 80038c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a6e      	ldr	r2, [pc, #440]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d013      	beq.n	8003908 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fd fe92 	bl	8001608 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e8:	f7fd fe8e 	bl	8001608 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	@ 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e21f      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b61      	ldr	r3, [pc, #388]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0xdc>
 8003906:	e014      	b.n	8003932 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fd fe7e 	bl	8001608 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003910:	f7fd fe7a 	bl	8001608 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b64      	cmp	r3, #100	@ 0x64
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e20b      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003922:	4b57      	ldr	r3, [pc, #348]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x104>
 800392e:	e000      	b.n	8003932 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d06f      	beq.n	8003a1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800393e:	4b50      	ldr	r3, [pc, #320]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b00      	cmp	r3, #0
 8003948:	d017      	beq.n	800397a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800394a:	4b4d      	ldr	r3, [pc, #308]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003952:	2b08      	cmp	r3, #8
 8003954:	d105      	bne.n	8003962 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003956:	4b4a      	ldr	r3, [pc, #296]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b47      	ldr	r3, [pc, #284]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d11c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800396e:	4b44      	ldr	r3, [pc, #272]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	4b41      	ldr	r3, [pc, #260]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d005      	beq.n	8003992 <HAL_RCC_OscConfig+0x186>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e1d3      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003992:	4b3b      	ldr	r3, [pc, #236]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4937      	ldr	r1, [pc, #220]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	e03a      	b.n	8003a1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d020      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b0:	4b34      	ldr	r3, [pc, #208]	@ (8003a84 <HAL_RCC_OscConfig+0x278>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b6:	f7fd fe27 	bl	8001608 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039be:	f7fd fe23 	bl	8001608 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e1b4      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d0f0      	beq.n	80039be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039dc:	4b28      	ldr	r3, [pc, #160]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4925      	ldr	r1, [pc, #148]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	600b      	str	r3, [r1, #0]
 80039f0:	e015      	b.n	8003a1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f2:	4b24      	ldr	r3, [pc, #144]	@ (8003a84 <HAL_RCC_OscConfig+0x278>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f8:	f7fd fe06 	bl	8001608 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a00:	f7fd fe02 	bl	8001608 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e193      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a12:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d036      	beq.n	8003a98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d016      	beq.n	8003a60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a32:	4b15      	ldr	r3, [pc, #84]	@ (8003a88 <HAL_RCC_OscConfig+0x27c>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fd fde6 	bl	8001608 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a40:	f7fd fde2 	bl	8001608 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e173      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a52:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_OscConfig+0x274>)
 8003a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x234>
 8003a5e:	e01b      	b.n	8003a98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a60:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <HAL_RCC_OscConfig+0x27c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a66:	f7fd fdcf 	bl	8001608 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a6c:	e00e      	b.n	8003a8c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6e:	f7fd fdcb 	bl	8001608 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d907      	bls.n	8003a8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e15c      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
 8003a80:	40023800 	.word	0x40023800
 8003a84:	42470000 	.word	0x42470000
 8003a88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8c:	4b8a      	ldr	r3, [pc, #552]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ea      	bne.n	8003a6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8097 	beq.w	8003bd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aaa:	4b83      	ldr	r3, [pc, #524]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	4b7f      	ldr	r3, [pc, #508]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	4a7e      	ldr	r2, [pc, #504]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ac6:	4b7c      	ldr	r3, [pc, #496]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad6:	4b79      	ldr	r3, [pc, #484]	@ (8003cbc <HAL_RCC_OscConfig+0x4b0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae2:	4b76      	ldr	r3, [pc, #472]	@ (8003cbc <HAL_RCC_OscConfig+0x4b0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a75      	ldr	r2, [pc, #468]	@ (8003cbc <HAL_RCC_OscConfig+0x4b0>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fd fd8b 	bl	8001608 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fd fd87 	bl	8001608 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e118      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b08:	4b6c      	ldr	r3, [pc, #432]	@ (8003cbc <HAL_RCC_OscConfig+0x4b0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x31e>
 8003b1c:	4b66      	ldr	r3, [pc, #408]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b20:	4a65      	ldr	r2, [pc, #404]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b28:	e01c      	b.n	8003b64 <HAL_RCC_OscConfig+0x358>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x340>
 8003b32:	4b61      	ldr	r3, [pc, #388]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4a60      	ldr	r2, [pc, #384]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b38:	f043 0304 	orr.w	r3, r3, #4
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3e:	4b5e      	ldr	r3, [pc, #376]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	4a5d      	ldr	r2, [pc, #372]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4a:	e00b      	b.n	8003b64 <HAL_RCC_OscConfig+0x358>
 8003b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	4a59      	ldr	r2, [pc, #356]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b58:	4b57      	ldr	r3, [pc, #348]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5c:	4a56      	ldr	r2, [pc, #344]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b5e:	f023 0304 	bic.w	r3, r3, #4
 8003b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d015      	beq.n	8003b98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6c:	f7fd fd4c 	bl	8001608 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fd fd48 	bl	8001608 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0d7      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0ee      	beq.n	8003b74 <HAL_RCC_OscConfig+0x368>
 8003b96:	e014      	b.n	8003bc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b98:	f7fd fd36 	bl	8001608 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba0:	f7fd fd32 	bl	8001608 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e0c1      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb6:	4b40      	ldr	r3, [pc, #256]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1ee      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bcc:	4a3a      	ldr	r2, [pc, #232]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80ad 	beq.w	8003d38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bde:	4b36      	ldr	r3, [pc, #216]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d060      	beq.n	8003cac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d145      	bne.n	8003c7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf2:	4b33      	ldr	r3, [pc, #204]	@ (8003cc0 <HAL_RCC_OscConfig+0x4b4>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd fd06 	bl	8001608 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c00:	f7fd fd02 	bl	8001608 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e093      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c12:	4b29      	ldr	r3, [pc, #164]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	019b      	lsls	r3, r3, #6
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	085b      	lsrs	r3, r3, #1
 8003c36:	3b01      	subs	r3, #1
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	071b      	lsls	r3, r3, #28
 8003c4a:	491b      	ldr	r1, [pc, #108]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c50:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <HAL_RCC_OscConfig+0x4b4>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fd fcd7 	bl	8001608 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fd fcd3 	bl	8001608 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e064      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c70:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d0f0      	beq.n	8003c5e <HAL_RCC_OscConfig+0x452>
 8003c7c:	e05c      	b.n	8003d38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b10      	ldr	r3, [pc, #64]	@ (8003cc0 <HAL_RCC_OscConfig+0x4b4>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fd fcc0 	bl	8001608 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8c:	f7fd fcbc 	bl	8001608 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e04d      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9e:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <HAL_RCC_OscConfig+0x4ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0x480>
 8003caa:	e045      	b.n	8003d38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e040      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d44 <HAL_RCC_OscConfig+0x538>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d030      	beq.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d129      	bne.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d122      	bne.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d119      	bne.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d10f      	bne.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d107      	bne.n	8003d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800

08003d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e042      	b.n	8003de0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd fb2c 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	@ 0x24
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fdbd 	bl	800490c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	@ 0x28
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d175      	bne.n	8003ef4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Transmit+0x2c>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e06e      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2221      	movs	r2, #33	@ 0x21
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e26:	f7fd fbef 	bl	8001608 <HAL_GetTick>
 8003e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e40:	d108      	bne.n	8003e54 <HAL_UART_Transmit+0x6c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	e003      	b.n	8003e5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e5c:	e02e      	b.n	8003ebc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2180      	movs	r1, #128	@ 0x80
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fb1f 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e03a      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	3302      	adds	r3, #2
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	e007      	b.n	8003eae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1cb      	bne.n	8003e5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2140      	movs	r1, #64	@ 0x40
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 faeb 	bl	80044ac <UART_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e006      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d112      	bne.n	8003f3e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_UART_Receive_IT+0x26>
 8003f1e:	88fb      	ldrh	r3, [r7, #6]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e00b      	b.n	8003f40 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	461a      	mov	r2, r3
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fb12 	bl	800455e <UART_Start_Receive_IT>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	e000      	b.n	8003f40 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f3e:	2302      	movs	r3, #2
  }
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b0ba      	sub	sp, #232	@ 0xe8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_UART_IRQHandler+0x66>
 8003f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fbf2 	bl	8004790 <UART_Receive_IT>
      return;
 8003fac:	e25b      	b.n	8004466 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 80de 	beq.w	8004174 <HAL_UART_IRQHandler+0x22c>
 8003fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d106      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80d1 	beq.w	8004174 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xae>
 8003fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fee:	f043 0201 	orr.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_UART_IRQHandler+0xd2>
 8004002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004012:	f043 0202 	orr.w	r2, r3, #2
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_UART_IRQHandler+0xf6>
 8004026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	f043 0204 	orr.w	r2, r3, #4
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d011      	beq.n	800406e <HAL_UART_IRQHandler+0x126>
 800404a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d105      	bne.n	8004062 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d005      	beq.n	800406e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004066:	f043 0208 	orr.w	r2, r3, #8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 81f2 	beq.w	800445c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_UART_IRQHandler+0x14e>
 8004084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fb7d 	bl	8004790 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a0:	2b40      	cmp	r3, #64	@ 0x40
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d103      	bne.n	80040c2 <HAL_UART_IRQHandler+0x17a>
 80040ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04f      	beq.n	8004162 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fa85 	bl	80045d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d2:	2b40      	cmp	r3, #64	@ 0x40
 80040d4:	d141      	bne.n	800415a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3314      	adds	r3, #20
 80040dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3314      	adds	r3, #20
 80040fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004102:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004106:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800410e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800411a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1d9      	bne.n	80040d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004126:	2b00      	cmp	r3, #0
 8004128:	d013      	beq.n	8004152 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412e:	4a7e      	ldr	r2, [pc, #504]	@ (8004328 <HAL_UART_IRQHandler+0x3e0>)
 8004130:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd fe03 	bl	8001d42 <HAL_DMA_Abort_IT>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800414c:	4610      	mov	r0, r2
 800414e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	e00e      	b.n	8004170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f994 	bl	8004480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	e00a      	b.n	8004170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f990 	bl	8004480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	e006      	b.n	8004170 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f98c 	bl	8004480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800416e:	e175      	b.n	800445c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	bf00      	nop
    return;
 8004172:	e173      	b.n	800445c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004178:	2b01      	cmp	r3, #1
 800417a:	f040 814f 	bne.w	800441c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8148 	beq.w	800441c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8141 	beq.w	800441c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ba:	2b40      	cmp	r3, #64	@ 0x40
 80041bc:	f040 80b6 	bne.w	800432c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8145 	beq.w	8004460 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041de:	429a      	cmp	r2, r3
 80041e0:	f080 813e 	bcs.w	8004460 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f6:	f000 8088 	beq.w	800430a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004210:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004226:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800422a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004232:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800423e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1d9      	bne.n	80041fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3314      	adds	r3, #20
 800424c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3314      	adds	r3, #20
 8004266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800426a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800426e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004272:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800427c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e1      	bne.n	8004246 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3314      	adds	r3, #20
 8004288:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004298:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3314      	adds	r3, #20
 80042a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e3      	bne.n	8004282 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042da:	f023 0310 	bic.w	r3, r3, #16
 80042de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	330c      	adds	r3, #12
 80042e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80042ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e3      	bne.n	80042c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004304:	4618      	mov	r0, r3
 8004306:	f7fd fcac 	bl	8001c62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004318:	b29b      	uxth	r3, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	b29b      	uxth	r3, r3
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f8b7 	bl	8004494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004326:	e09b      	b.n	8004460 <HAL_UART_IRQHandler+0x518>
 8004328:	08004699 	.word	0x08004699
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004334:	b29b      	uxth	r3, r3
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 808e 	beq.w	8004464 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8089 	beq.w	8004464 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004364:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004368:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004376:	647a      	str	r2, [r7, #68]	@ 0x44
 8004378:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800437c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e3      	bne.n	8004352 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	623b      	str	r3, [r7, #32]
   return(result);
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3314      	adds	r3, #20
 80043aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80043b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e3      	bne.n	800438a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	60fb      	str	r3, [r7, #12]
   return(result);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0310 	bic.w	r3, r3, #16
 80043e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80043f4:	61fa      	str	r2, [r7, #28]
 80043f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	69b9      	ldr	r1, [r7, #24]
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	617b      	str	r3, [r7, #20]
   return(result);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e3      	bne.n	80043d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800440e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004412:	4619      	mov	r1, r3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f83d 	bl	8004494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800441a:	e023      	b.n	8004464 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800441c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004424:	2b00      	cmp	r3, #0
 8004426:	d009      	beq.n	800443c <HAL_UART_IRQHandler+0x4f4>
 8004428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800442c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f943 	bl	80046c0 <UART_Transmit_IT>
    return;
 800443a:	e014      	b.n	8004466 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800443c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00e      	beq.n	8004466 <HAL_UART_IRQHandler+0x51e>
 8004448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800444c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f983 	bl	8004760 <UART_EndTransmit_IT>
    return;
 800445a:	e004      	b.n	8004466 <HAL_UART_IRQHandler+0x51e>
    return;
 800445c:	bf00      	nop
 800445e:	e002      	b.n	8004466 <HAL_UART_IRQHandler+0x51e>
      return;
 8004460:	bf00      	nop
 8004462:	e000      	b.n	8004466 <HAL_UART_IRQHandler+0x51e>
      return;
 8004464:	bf00      	nop
  }
}
 8004466:	37e8      	adds	r7, #232	@ 0xe8
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044bc:	e03b      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044c4:	d037      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fd f89f 	bl	8001608 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	6a3a      	ldr	r2, [r7, #32]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <UART_WaitOnFlagUntilTimeout+0x30>
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e03a      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d023      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b80      	cmp	r3, #128	@ 0x80
 80044f2:	d020      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b40      	cmp	r3, #64	@ 0x40
 80044f8:	d01d      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b08      	cmp	r3, #8
 8004506:	d116      	bne.n	8004536 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f857 	bl	80045d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2208      	movs	r2, #8
 8004528:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e00f      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	429a      	cmp	r2, r3
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	429a      	cmp	r2, r3
 8004552:	d0b4      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	4613      	mov	r3, r2
 800456a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	88fa      	ldrh	r2, [r7, #6]
 8004576:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	88fa      	ldrh	r2, [r7, #6]
 800457c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2222      	movs	r2, #34	@ 0x22
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045a2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0220 	orr.w	r2, r2, #32
 80045c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b095      	sub	sp, #84	@ 0x54
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80045fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e5      	bne.n	80045da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	61fb      	str	r3, [r7, #28]
   return(result);
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800462e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004630:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800463c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e5      	bne.n	800460e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004646:	2b01      	cmp	r3, #1
 8004648:	d119      	bne.n	800467e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	60bb      	str	r3, [r7, #8]
   return(result);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f023 0310 	bic.w	r3, r3, #16
 8004660:	647b      	str	r3, [r7, #68]	@ 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800466a:	61ba      	str	r2, [r7, #24]
 800466c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6979      	ldr	r1, [r7, #20]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	613b      	str	r3, [r7, #16]
   return(result);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e5      	bne.n	800464a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800468c:	bf00      	nop
 800468e:	3754      	adds	r7, #84	@ 0x54
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff fee4 	bl	8004480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b21      	cmp	r3, #33	@ 0x21
 80046d2:	d13e      	bne.n	8004752 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046dc:	d114      	bne.n	8004708 <UART_Transmit_IT+0x48>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d110      	bne.n	8004708 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	1c9a      	adds	r2, r3, #2
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	621a      	str	r2, [r3, #32]
 8004706:	e008      	b.n	800471a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	1c59      	adds	r1, r3, #1
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6211      	str	r1, [r2, #32]
 8004712:	781a      	ldrb	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29b      	uxth	r3, r3
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4619      	mov	r1, r3
 8004728:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800473c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800474c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004752:	2302      	movs	r3, #2
  }
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004776:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff fe73 	bl	800446c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	@ 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b22      	cmp	r3, #34	@ 0x22
 80047a2:	f040 80ae 	bne.w	8004902 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ae:	d117      	bne.n	80047e0 <UART_Receive_IT+0x50>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d113      	bne.n	80047e0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d8:	1c9a      	adds	r2, r3, #2
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80047de:	e026      	b.n	800482e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047f2:	d007      	beq.n	8004804 <UART_Receive_IT+0x74>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <UART_Receive_IT+0x82>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e008      	b.n	8004824 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800481e:	b2da      	uxtb	r2, r3
 8004820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004822:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4619      	mov	r1, r3
 800483c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800483e:	2b00      	cmp	r3, #0
 8004840:	d15d      	bne.n	80048fe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0220 	bic.w	r2, r2, #32
 8004850:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004860:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	2b01      	cmp	r3, #1
 8004886:	d135      	bne.n	80048f4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	613b      	str	r3, [r7, #16]
   return(result);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f023 0310 	bic.w	r3, r3, #16
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	330c      	adds	r3, #12
 80048ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ae:	623a      	str	r2, [r7, #32]
 80048b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	69f9      	ldr	r1, [r7, #28]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e5      	bne.n	800488e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d10a      	bne.n	80048e6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff fdd1 	bl	8004494 <HAL_UARTEx_RxEventCallback>
 80048f2:	e002      	b.n	80048fa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fc fba1 	bl	800103c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e002      	b.n	8004904 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
  }
}
 8004904:	4618      	mov	r0, r3
 8004906:	3730      	adds	r7, #48	@ 0x30
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800490c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004910:	b0c0      	sub	sp, #256	@ 0x100
 8004912:	af00      	add	r7, sp, #0
 8004914:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004928:	68d9      	ldr	r1, [r3, #12]
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	ea40 0301 	orr.w	r3, r0, r1
 8004934:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	431a      	orrs	r2, r3
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	431a      	orrs	r2, r3
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004964:	f021 010c 	bic.w	r1, r1, #12
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004972:	430b      	orrs	r3, r1
 8004974:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004986:	6999      	ldr	r1, [r3, #24]
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	ea40 0301 	orr.w	r3, r0, r1
 8004992:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd8 <UART_SetConfig+0x2cc>)
 800499c:	429a      	cmp	r2, r3
 800499e:	d005      	beq.n	80049ac <UART_SetConfig+0xa0>
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b8d      	ldr	r3, [pc, #564]	@ (8004bdc <UART_SetConfig+0x2d0>)
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d104      	bne.n	80049b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049ac:	f7fe fcea 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 80049b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049b4:	e003      	b.n	80049be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049b6:	f7fe fcd1 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 80049ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049c8:	f040 810c 	bne.w	8004be4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049d0:	2200      	movs	r2, #0
 80049d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049de:	4622      	mov	r2, r4
 80049e0:	462b      	mov	r3, r5
 80049e2:	1891      	adds	r1, r2, r2
 80049e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049e6:	415b      	adcs	r3, r3
 80049e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049ee:	4621      	mov	r1, r4
 80049f0:	eb12 0801 	adds.w	r8, r2, r1
 80049f4:	4629      	mov	r1, r5
 80049f6:	eb43 0901 	adc.w	r9, r3, r1
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a0e:	4690      	mov	r8, r2
 8004a10:	4699      	mov	r9, r3
 8004a12:	4623      	mov	r3, r4
 8004a14:	eb18 0303 	adds.w	r3, r8, r3
 8004a18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	eb49 0303 	adc.w	r3, r9, r3
 8004a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	18db      	adds	r3, r3, r3
 8004a3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a40:	4613      	mov	r3, r2
 8004a42:	eb42 0303 	adc.w	r3, r2, r3
 8004a46:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a50:	f7fb fc46 	bl	80002e0 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4b61      	ldr	r3, [pc, #388]	@ (8004be0 <UART_SetConfig+0x2d4>)
 8004a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	011c      	lsls	r4, r3, #4
 8004a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	1891      	adds	r1, r2, r2
 8004a7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a7c:	415b      	adcs	r3, r3
 8004a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a84:	4641      	mov	r1, r8
 8004a86:	eb12 0a01 	adds.w	sl, r2, r1
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aa4:	4692      	mov	sl, r2
 8004aa6:	469b      	mov	fp, r3
 8004aa8:	4643      	mov	r3, r8
 8004aaa:	eb1a 0303 	adds.w	r3, sl, r3
 8004aae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ac8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	18db      	adds	r3, r3, r3
 8004ad4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	eb42 0303 	adc.w	r3, r2, r3
 8004adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ade:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ae2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ae6:	f7fb fbfb 	bl	80002e0 <__aeabi_uldivmod>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4611      	mov	r1, r2
 8004af0:	4b3b      	ldr	r3, [pc, #236]	@ (8004be0 <UART_SetConfig+0x2d4>)
 8004af2:	fba3 2301 	umull	r2, r3, r3, r1
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2264      	movs	r2, #100	@ 0x64
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	1acb      	subs	r3, r1, r3
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b06:	4b36      	ldr	r3, [pc, #216]	@ (8004be0 <UART_SetConfig+0x2d4>)
 8004b08:	fba3 2302 	umull	r2, r3, r3, r2
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b14:	441c      	add	r4, r3
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b28:	4642      	mov	r2, r8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	1891      	adds	r1, r2, r2
 8004b2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b30:	415b      	adcs	r3, r3
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b38:	4641      	mov	r1, r8
 8004b3a:	1851      	adds	r1, r2, r1
 8004b3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b3e:	4649      	mov	r1, r9
 8004b40:	414b      	adcs	r3, r1
 8004b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b50:	4659      	mov	r1, fp
 8004b52:	00cb      	lsls	r3, r1, #3
 8004b54:	4651      	mov	r1, sl
 8004b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	00ca      	lsls	r2, r1, #3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4619      	mov	r1, r3
 8004b62:	4603      	mov	r3, r0
 8004b64:	4642      	mov	r2, r8
 8004b66:	189b      	adds	r3, r3, r2
 8004b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b6c:	464b      	mov	r3, r9
 8004b6e:	460a      	mov	r2, r1
 8004b70:	eb42 0303 	adc.w	r3, r2, r3
 8004b74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	18db      	adds	r3, r3, r3
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b92:	4613      	mov	r3, r2
 8004b94:	eb42 0303 	adc.w	r3, r2, r3
 8004b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ba2:	f7fb fb9d 	bl	80002e0 <__aeabi_uldivmod>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4b0d      	ldr	r3, [pc, #52]	@ (8004be0 <UART_SetConfig+0x2d4>)
 8004bac:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	2164      	movs	r1, #100	@ 0x64
 8004bb4:	fb01 f303 	mul.w	r3, r1, r3
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	3332      	adds	r3, #50	@ 0x32
 8004bbe:	4a08      	ldr	r2, [pc, #32]	@ (8004be0 <UART_SetConfig+0x2d4>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	f003 0207 	and.w	r2, r3, #7
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4422      	add	r2, r4
 8004bd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bd4:	e106      	b.n	8004de4 <UART_SetConfig+0x4d8>
 8004bd6:	bf00      	nop
 8004bd8:	40011000 	.word	0x40011000
 8004bdc:	40011400 	.word	0x40011400
 8004be0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004bf2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004bf6:	4642      	mov	r2, r8
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	1891      	adds	r1, r2, r2
 8004bfc:	6239      	str	r1, [r7, #32]
 8004bfe:	415b      	adcs	r3, r3
 8004c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c06:	4641      	mov	r1, r8
 8004c08:	1854      	adds	r4, r2, r1
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	eb43 0501 	adc.w	r5, r3, r1
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	00eb      	lsls	r3, r5, #3
 8004c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c1e:	00e2      	lsls	r2, r4, #3
 8004c20:	4614      	mov	r4, r2
 8004c22:	461d      	mov	r5, r3
 8004c24:	4643      	mov	r3, r8
 8004c26:	18e3      	adds	r3, r4, r3
 8004c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	eb45 0303 	adc.w	r3, r5, r3
 8004c32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c52:	4629      	mov	r1, r5
 8004c54:	008b      	lsls	r3, r1, #2
 8004c56:	4621      	mov	r1, r4
 8004c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	008a      	lsls	r2, r1, #2
 8004c60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c64:	f7fb fb3c 	bl	80002e0 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4b60      	ldr	r3, [pc, #384]	@ (8004df0 <UART_SetConfig+0x4e4>)
 8004c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	011c      	lsls	r4, r3, #4
 8004c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c88:	4642      	mov	r2, r8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	1891      	adds	r1, r2, r2
 8004c8e:	61b9      	str	r1, [r7, #24]
 8004c90:	415b      	adcs	r3, r3
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c98:	4641      	mov	r1, r8
 8004c9a:	1851      	adds	r1, r2, r1
 8004c9c:	6139      	str	r1, [r7, #16]
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	414b      	adcs	r3, r1
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb0:	4659      	mov	r1, fp
 8004cb2:	00cb      	lsls	r3, r1, #3
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cba:	4651      	mov	r1, sl
 8004cbc:	00ca      	lsls	r2, r1, #3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ccc:	464b      	mov	r3, r9
 8004cce:	460a      	mov	r2, r1
 8004cd0:	eb42 0303 	adc.w	r3, r2, r3
 8004cd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ce2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	008b      	lsls	r3, r1, #2
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	008a      	lsls	r2, r1, #2
 8004cfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d02:	f7fb faed 	bl	80002e0 <__aeabi_uldivmod>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4b38      	ldr	r3, [pc, #224]	@ (8004df0 <UART_SetConfig+0x4e4>)
 8004d0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	2264      	movs	r2, #100	@ 0x64
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	1acb      	subs	r3, r1, r3
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	3332      	adds	r3, #50	@ 0x32
 8004d20:	4a33      	ldr	r2, [pc, #204]	@ (8004df0 <UART_SetConfig+0x4e4>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d2c:	441c      	add	r4, r3
 8004d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d32:	2200      	movs	r2, #0
 8004d34:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d36:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	415b      	adcs	r3, r3
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	1851      	adds	r1, r2, r1
 8004d50:	6039      	str	r1, [r7, #0]
 8004d52:	4649      	mov	r1, r9
 8004d54:	414b      	adcs	r3, r1
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d64:	4659      	mov	r1, fp
 8004d66:	00cb      	lsls	r3, r1, #3
 8004d68:	4651      	mov	r1, sl
 8004d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6e:	4651      	mov	r1, sl
 8004d70:	00ca      	lsls	r2, r1, #3
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d7e:	464b      	mov	r3, r9
 8004d80:	460a      	mov	r2, r1
 8004d82:	eb42 0303 	adc.w	r3, r2, r3
 8004d86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d92:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004da0:	4649      	mov	r1, r9
 8004da2:	008b      	lsls	r3, r1, #2
 8004da4:	4641      	mov	r1, r8
 8004da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004daa:	4641      	mov	r1, r8
 8004dac:	008a      	lsls	r2, r1, #2
 8004dae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004db2:	f7fb fa95 	bl	80002e0 <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4b0d      	ldr	r3, [pc, #52]	@ (8004df0 <UART_SetConfig+0x4e4>)
 8004dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	2164      	movs	r1, #100	@ 0x64
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	3332      	adds	r3, #50	@ 0x32
 8004dce:	4a08      	ldr	r2, [pc, #32]	@ (8004df0 <UART_SetConfig+0x4e4>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	f003 020f 	and.w	r2, r3, #15
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4422      	add	r2, r4
 8004de2:	609a      	str	r2, [r3, #8]
}
 8004de4:	bf00      	nop
 8004de6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004dea:	46bd      	mov	sp, r7
 8004dec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df0:	51eb851f 	.word	0x51eb851f

08004df4 <atoi>:
 8004df4:	220a      	movs	r2, #10
 8004df6:	2100      	movs	r1, #0
 8004df8:	f000 b87a 	b.w	8004ef0 <strtol>

08004dfc <_strtol_l.constprop.0>:
 8004dfc:	2b24      	cmp	r3, #36	@ 0x24
 8004dfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e02:	4686      	mov	lr, r0
 8004e04:	4690      	mov	r8, r2
 8004e06:	d801      	bhi.n	8004e0c <_strtol_l.constprop.0+0x10>
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d106      	bne.n	8004e1a <_strtol_l.constprop.0+0x1e>
 8004e0c:	f000 fa70 	bl	80052f0 <__errno>
 8004e10:	2316      	movs	r3, #22
 8004e12:	6003      	str	r3, [r0, #0]
 8004e14:	2000      	movs	r0, #0
 8004e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e1a:	4834      	ldr	r0, [pc, #208]	@ (8004eec <_strtol_l.constprop.0+0xf0>)
 8004e1c:	460d      	mov	r5, r1
 8004e1e:	462a      	mov	r2, r5
 8004e20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e24:	5d06      	ldrb	r6, [r0, r4]
 8004e26:	f016 0608 	ands.w	r6, r6, #8
 8004e2a:	d1f8      	bne.n	8004e1e <_strtol_l.constprop.0+0x22>
 8004e2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8004e2e:	d12d      	bne.n	8004e8c <_strtol_l.constprop.0+0x90>
 8004e30:	782c      	ldrb	r4, [r5, #0]
 8004e32:	2601      	movs	r6, #1
 8004e34:	1c95      	adds	r5, r2, #2
 8004e36:	f033 0210 	bics.w	r2, r3, #16
 8004e3a:	d109      	bne.n	8004e50 <_strtol_l.constprop.0+0x54>
 8004e3c:	2c30      	cmp	r4, #48	@ 0x30
 8004e3e:	d12a      	bne.n	8004e96 <_strtol_l.constprop.0+0x9a>
 8004e40:	782a      	ldrb	r2, [r5, #0]
 8004e42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004e46:	2a58      	cmp	r2, #88	@ 0x58
 8004e48:	d125      	bne.n	8004e96 <_strtol_l.constprop.0+0x9a>
 8004e4a:	786c      	ldrb	r4, [r5, #1]
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	3502      	adds	r5, #2
 8004e50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004e54:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8004e58:	2200      	movs	r2, #0
 8004e5a:	fbbc f9f3 	udiv	r9, ip, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	fb03 ca19 	mls	sl, r3, r9, ip
 8004e64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004e68:	2f09      	cmp	r7, #9
 8004e6a:	d81b      	bhi.n	8004ea4 <_strtol_l.constprop.0+0xa8>
 8004e6c:	463c      	mov	r4, r7
 8004e6e:	42a3      	cmp	r3, r4
 8004e70:	dd27      	ble.n	8004ec2 <_strtol_l.constprop.0+0xc6>
 8004e72:	1c57      	adds	r7, r2, #1
 8004e74:	d007      	beq.n	8004e86 <_strtol_l.constprop.0+0x8a>
 8004e76:	4581      	cmp	r9, r0
 8004e78:	d320      	bcc.n	8004ebc <_strtol_l.constprop.0+0xc0>
 8004e7a:	d101      	bne.n	8004e80 <_strtol_l.constprop.0+0x84>
 8004e7c:	45a2      	cmp	sl, r4
 8004e7e:	db1d      	blt.n	8004ebc <_strtol_l.constprop.0+0xc0>
 8004e80:	fb00 4003 	mla	r0, r0, r3, r4
 8004e84:	2201      	movs	r2, #1
 8004e86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e8a:	e7eb      	b.n	8004e64 <_strtol_l.constprop.0+0x68>
 8004e8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8004e8e:	bf04      	itt	eq
 8004e90:	782c      	ldrbeq	r4, [r5, #0]
 8004e92:	1c95      	addeq	r5, r2, #2
 8004e94:	e7cf      	b.n	8004e36 <_strtol_l.constprop.0+0x3a>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1da      	bne.n	8004e50 <_strtol_l.constprop.0+0x54>
 8004e9a:	2c30      	cmp	r4, #48	@ 0x30
 8004e9c:	bf0c      	ite	eq
 8004e9e:	2308      	moveq	r3, #8
 8004ea0:	230a      	movne	r3, #10
 8004ea2:	e7d5      	b.n	8004e50 <_strtol_l.constprop.0+0x54>
 8004ea4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004ea8:	2f19      	cmp	r7, #25
 8004eaa:	d801      	bhi.n	8004eb0 <_strtol_l.constprop.0+0xb4>
 8004eac:	3c37      	subs	r4, #55	@ 0x37
 8004eae:	e7de      	b.n	8004e6e <_strtol_l.constprop.0+0x72>
 8004eb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004eb4:	2f19      	cmp	r7, #25
 8004eb6:	d804      	bhi.n	8004ec2 <_strtol_l.constprop.0+0xc6>
 8004eb8:	3c57      	subs	r4, #87	@ 0x57
 8004eba:	e7d8      	b.n	8004e6e <_strtol_l.constprop.0+0x72>
 8004ebc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ec0:	e7e1      	b.n	8004e86 <_strtol_l.constprop.0+0x8a>
 8004ec2:	1c53      	adds	r3, r2, #1
 8004ec4:	d108      	bne.n	8004ed8 <_strtol_l.constprop.0+0xdc>
 8004ec6:	2322      	movs	r3, #34	@ 0x22
 8004ec8:	f8ce 3000 	str.w	r3, [lr]
 8004ecc:	4660      	mov	r0, ip
 8004ece:	f1b8 0f00 	cmp.w	r8, #0
 8004ed2:	d0a0      	beq.n	8004e16 <_strtol_l.constprop.0+0x1a>
 8004ed4:	1e69      	subs	r1, r5, #1
 8004ed6:	e006      	b.n	8004ee6 <_strtol_l.constprop.0+0xea>
 8004ed8:	b106      	cbz	r6, 8004edc <_strtol_l.constprop.0+0xe0>
 8004eda:	4240      	negs	r0, r0
 8004edc:	f1b8 0f00 	cmp.w	r8, #0
 8004ee0:	d099      	beq.n	8004e16 <_strtol_l.constprop.0+0x1a>
 8004ee2:	2a00      	cmp	r2, #0
 8004ee4:	d1f6      	bne.n	8004ed4 <_strtol_l.constprop.0+0xd8>
 8004ee6:	f8c8 1000 	str.w	r1, [r8]
 8004eea:	e794      	b.n	8004e16 <_strtol_l.constprop.0+0x1a>
 8004eec:	08006445 	.word	0x08006445

08004ef0 <strtol>:
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	460a      	mov	r2, r1
 8004ef4:	4601      	mov	r1, r0
 8004ef6:	4802      	ldr	r0, [pc, #8]	@ (8004f00 <strtol+0x10>)
 8004ef8:	6800      	ldr	r0, [r0, #0]
 8004efa:	f7ff bf7f 	b.w	8004dfc <_strtol_l.constprop.0>
 8004efe:	bf00      	nop
 8004f00:	200000c8 	.word	0x200000c8

08004f04 <std>:
 8004f04:	2300      	movs	r3, #0
 8004f06:	b510      	push	{r4, lr}
 8004f08:	4604      	mov	r4, r0
 8004f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f12:	6083      	str	r3, [r0, #8]
 8004f14:	8181      	strh	r1, [r0, #12]
 8004f16:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f18:	81c2      	strh	r2, [r0, #14]
 8004f1a:	6183      	str	r3, [r0, #24]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	2208      	movs	r2, #8
 8004f20:	305c      	adds	r0, #92	@ 0x5c
 8004f22:	f000 f93a 	bl	800519a <memset>
 8004f26:	4b0d      	ldr	r3, [pc, #52]	@ (8004f5c <std+0x58>)
 8004f28:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f60 <std+0x5c>)
 8004f2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f64 <std+0x60>)
 8004f30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f32:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <std+0x64>)
 8004f34:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <std+0x68>)
 8004f38:	6224      	str	r4, [r4, #32]
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	d006      	beq.n	8004f4c <std+0x48>
 8004f3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f42:	4294      	cmp	r4, r2
 8004f44:	d002      	beq.n	8004f4c <std+0x48>
 8004f46:	33d0      	adds	r3, #208	@ 0xd0
 8004f48:	429c      	cmp	r4, r3
 8004f4a:	d105      	bne.n	8004f58 <std+0x54>
 8004f4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f54:	f000 b9f6 	b.w	8005344 <__retarget_lock_init_recursive>
 8004f58:	bd10      	pop	{r4, pc}
 8004f5a:	bf00      	nop
 8004f5c:	08005115 	.word	0x08005115
 8004f60:	08005137 	.word	0x08005137
 8004f64:	0800516f 	.word	0x0800516f
 8004f68:	08005193 	.word	0x08005193
 8004f6c:	2000032c 	.word	0x2000032c

08004f70 <stdio_exit_handler>:
 8004f70:	4a02      	ldr	r2, [pc, #8]	@ (8004f7c <stdio_exit_handler+0xc>)
 8004f72:	4903      	ldr	r1, [pc, #12]	@ (8004f80 <stdio_exit_handler+0x10>)
 8004f74:	4803      	ldr	r0, [pc, #12]	@ (8004f84 <stdio_exit_handler+0x14>)
 8004f76:	f000 b869 	b.w	800504c <_fwalk_sglue>
 8004f7a:	bf00      	nop
 8004f7c:	200000bc 	.word	0x200000bc
 8004f80:	08005ee1 	.word	0x08005ee1
 8004f84:	200000cc 	.word	0x200000cc

08004f88 <cleanup_stdio>:
 8004f88:	6841      	ldr	r1, [r0, #4]
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fbc <cleanup_stdio+0x34>)
 8004f8c:	4299      	cmp	r1, r3
 8004f8e:	b510      	push	{r4, lr}
 8004f90:	4604      	mov	r4, r0
 8004f92:	d001      	beq.n	8004f98 <cleanup_stdio+0x10>
 8004f94:	f000 ffa4 	bl	8005ee0 <_fflush_r>
 8004f98:	68a1      	ldr	r1, [r4, #8]
 8004f9a:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <cleanup_stdio+0x38>)
 8004f9c:	4299      	cmp	r1, r3
 8004f9e:	d002      	beq.n	8004fa6 <cleanup_stdio+0x1e>
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f000 ff9d 	bl	8005ee0 <_fflush_r>
 8004fa6:	68e1      	ldr	r1, [r4, #12]
 8004fa8:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <cleanup_stdio+0x3c>)
 8004faa:	4299      	cmp	r1, r3
 8004fac:	d004      	beq.n	8004fb8 <cleanup_stdio+0x30>
 8004fae:	4620      	mov	r0, r4
 8004fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fb4:	f000 bf94 	b.w	8005ee0 <_fflush_r>
 8004fb8:	bd10      	pop	{r4, pc}
 8004fba:	bf00      	nop
 8004fbc:	2000032c 	.word	0x2000032c
 8004fc0:	20000394 	.word	0x20000394
 8004fc4:	200003fc 	.word	0x200003fc

08004fc8 <global_stdio_init.part.0>:
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <global_stdio_init.part.0+0x30>)
 8004fcc:	4c0b      	ldr	r4, [pc, #44]	@ (8004ffc <global_stdio_init.part.0+0x34>)
 8004fce:	4a0c      	ldr	r2, [pc, #48]	@ (8005000 <global_stdio_init.part.0+0x38>)
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2104      	movs	r1, #4
 8004fd8:	f7ff ff94 	bl	8004f04 <std>
 8004fdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	2109      	movs	r1, #9
 8004fe4:	f7ff ff8e 	bl	8004f04 <std>
 8004fe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004fec:	2202      	movs	r2, #2
 8004fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ff2:	2112      	movs	r1, #18
 8004ff4:	f7ff bf86 	b.w	8004f04 <std>
 8004ff8:	20000464 	.word	0x20000464
 8004ffc:	2000032c 	.word	0x2000032c
 8005000:	08004f71 	.word	0x08004f71

08005004 <__sfp_lock_acquire>:
 8005004:	4801      	ldr	r0, [pc, #4]	@ (800500c <__sfp_lock_acquire+0x8>)
 8005006:	f000 b99e 	b.w	8005346 <__retarget_lock_acquire_recursive>
 800500a:	bf00      	nop
 800500c:	2000046d 	.word	0x2000046d

08005010 <__sfp_lock_release>:
 8005010:	4801      	ldr	r0, [pc, #4]	@ (8005018 <__sfp_lock_release+0x8>)
 8005012:	f000 b999 	b.w	8005348 <__retarget_lock_release_recursive>
 8005016:	bf00      	nop
 8005018:	2000046d 	.word	0x2000046d

0800501c <__sinit>:
 800501c:	b510      	push	{r4, lr}
 800501e:	4604      	mov	r4, r0
 8005020:	f7ff fff0 	bl	8005004 <__sfp_lock_acquire>
 8005024:	6a23      	ldr	r3, [r4, #32]
 8005026:	b11b      	cbz	r3, 8005030 <__sinit+0x14>
 8005028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800502c:	f7ff bff0 	b.w	8005010 <__sfp_lock_release>
 8005030:	4b04      	ldr	r3, [pc, #16]	@ (8005044 <__sinit+0x28>)
 8005032:	6223      	str	r3, [r4, #32]
 8005034:	4b04      	ldr	r3, [pc, #16]	@ (8005048 <__sinit+0x2c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f5      	bne.n	8005028 <__sinit+0xc>
 800503c:	f7ff ffc4 	bl	8004fc8 <global_stdio_init.part.0>
 8005040:	e7f2      	b.n	8005028 <__sinit+0xc>
 8005042:	bf00      	nop
 8005044:	08004f89 	.word	0x08004f89
 8005048:	20000464 	.word	0x20000464

0800504c <_fwalk_sglue>:
 800504c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005050:	4607      	mov	r7, r0
 8005052:	4688      	mov	r8, r1
 8005054:	4614      	mov	r4, r2
 8005056:	2600      	movs	r6, #0
 8005058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800505c:	f1b9 0901 	subs.w	r9, r9, #1
 8005060:	d505      	bpl.n	800506e <_fwalk_sglue+0x22>
 8005062:	6824      	ldr	r4, [r4, #0]
 8005064:	2c00      	cmp	r4, #0
 8005066:	d1f7      	bne.n	8005058 <_fwalk_sglue+0xc>
 8005068:	4630      	mov	r0, r6
 800506a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800506e:	89ab      	ldrh	r3, [r5, #12]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d907      	bls.n	8005084 <_fwalk_sglue+0x38>
 8005074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005078:	3301      	adds	r3, #1
 800507a:	d003      	beq.n	8005084 <_fwalk_sglue+0x38>
 800507c:	4629      	mov	r1, r5
 800507e:	4638      	mov	r0, r7
 8005080:	47c0      	blx	r8
 8005082:	4306      	orrs	r6, r0
 8005084:	3568      	adds	r5, #104	@ 0x68
 8005086:	e7e9      	b.n	800505c <_fwalk_sglue+0x10>

08005088 <iprintf>:
 8005088:	b40f      	push	{r0, r1, r2, r3}
 800508a:	b507      	push	{r0, r1, r2, lr}
 800508c:	4906      	ldr	r1, [pc, #24]	@ (80050a8 <iprintf+0x20>)
 800508e:	ab04      	add	r3, sp, #16
 8005090:	6808      	ldr	r0, [r1, #0]
 8005092:	f853 2b04 	ldr.w	r2, [r3], #4
 8005096:	6881      	ldr	r1, [r0, #8]
 8005098:	9301      	str	r3, [sp, #4]
 800509a:	f000 fbf7 	bl	800588c <_vfiprintf_r>
 800509e:	b003      	add	sp, #12
 80050a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050a4:	b004      	add	sp, #16
 80050a6:	4770      	bx	lr
 80050a8:	200000c8 	.word	0x200000c8

080050ac <sniprintf>:
 80050ac:	b40c      	push	{r2, r3}
 80050ae:	b530      	push	{r4, r5, lr}
 80050b0:	4b17      	ldr	r3, [pc, #92]	@ (8005110 <sniprintf+0x64>)
 80050b2:	1e0c      	subs	r4, r1, #0
 80050b4:	681d      	ldr	r5, [r3, #0]
 80050b6:	b09d      	sub	sp, #116	@ 0x74
 80050b8:	da08      	bge.n	80050cc <sniprintf+0x20>
 80050ba:	238b      	movs	r3, #139	@ 0x8b
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050c2:	b01d      	add	sp, #116	@ 0x74
 80050c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c8:	b002      	add	sp, #8
 80050ca:	4770      	bx	lr
 80050cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80050d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80050d4:	bf14      	ite	ne
 80050d6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80050da:	4623      	moveq	r3, r4
 80050dc:	9304      	str	r3, [sp, #16]
 80050de:	9307      	str	r3, [sp, #28]
 80050e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80050e4:	9002      	str	r0, [sp, #8]
 80050e6:	9006      	str	r0, [sp, #24]
 80050e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80050ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80050ee:	ab21      	add	r3, sp, #132	@ 0x84
 80050f0:	a902      	add	r1, sp, #8
 80050f2:	4628      	mov	r0, r5
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	f000 faa3 	bl	8005640 <_svfiprintf_r>
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	bfbc      	itt	lt
 80050fe:	238b      	movlt	r3, #139	@ 0x8b
 8005100:	602b      	strlt	r3, [r5, #0]
 8005102:	2c00      	cmp	r4, #0
 8005104:	d0dd      	beq.n	80050c2 <sniprintf+0x16>
 8005106:	9b02      	ldr	r3, [sp, #8]
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	e7d9      	b.n	80050c2 <sniprintf+0x16>
 800510e:	bf00      	nop
 8005110:	200000c8 	.word	0x200000c8

08005114 <__sread>:
 8005114:	b510      	push	{r4, lr}
 8005116:	460c      	mov	r4, r1
 8005118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800511c:	f000 f8c4 	bl	80052a8 <_read_r>
 8005120:	2800      	cmp	r0, #0
 8005122:	bfab      	itete	ge
 8005124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005126:	89a3      	ldrhlt	r3, [r4, #12]
 8005128:	181b      	addge	r3, r3, r0
 800512a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800512e:	bfac      	ite	ge
 8005130:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005132:	81a3      	strhlt	r3, [r4, #12]
 8005134:	bd10      	pop	{r4, pc}

08005136 <__swrite>:
 8005136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800513a:	461f      	mov	r7, r3
 800513c:	898b      	ldrh	r3, [r1, #12]
 800513e:	05db      	lsls	r3, r3, #23
 8005140:	4605      	mov	r5, r0
 8005142:	460c      	mov	r4, r1
 8005144:	4616      	mov	r6, r2
 8005146:	d505      	bpl.n	8005154 <__swrite+0x1e>
 8005148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514c:	2302      	movs	r3, #2
 800514e:	2200      	movs	r2, #0
 8005150:	f000 f898 	bl	8005284 <_lseek_r>
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800515a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800515e:	81a3      	strh	r3, [r4, #12]
 8005160:	4632      	mov	r2, r6
 8005162:	463b      	mov	r3, r7
 8005164:	4628      	mov	r0, r5
 8005166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800516a:	f000 b8af 	b.w	80052cc <_write_r>

0800516e <__sseek>:
 800516e:	b510      	push	{r4, lr}
 8005170:	460c      	mov	r4, r1
 8005172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005176:	f000 f885 	bl	8005284 <_lseek_r>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	bf15      	itete	ne
 8005180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800518a:	81a3      	strheq	r3, [r4, #12]
 800518c:	bf18      	it	ne
 800518e:	81a3      	strhne	r3, [r4, #12]
 8005190:	bd10      	pop	{r4, pc}

08005192 <__sclose>:
 8005192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005196:	f000 b865 	b.w	8005264 <_close_r>

0800519a <memset>:
 800519a:	4402      	add	r2, r0
 800519c:	4603      	mov	r3, r0
 800519e:	4293      	cmp	r3, r2
 80051a0:	d100      	bne.n	80051a4 <memset+0xa>
 80051a2:	4770      	bx	lr
 80051a4:	f803 1b01 	strb.w	r1, [r3], #1
 80051a8:	e7f9      	b.n	800519e <memset+0x4>
	...

080051ac <strtok>:
 80051ac:	4b16      	ldr	r3, [pc, #88]	@ (8005208 <strtok+0x5c>)
 80051ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051b2:	681f      	ldr	r7, [r3, #0]
 80051b4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80051b6:	4605      	mov	r5, r0
 80051b8:	460e      	mov	r6, r1
 80051ba:	b9ec      	cbnz	r4, 80051f8 <strtok+0x4c>
 80051bc:	2050      	movs	r0, #80	@ 0x50
 80051be:	f000 f92d 	bl	800541c <malloc>
 80051c2:	4602      	mov	r2, r0
 80051c4:	6478      	str	r0, [r7, #68]	@ 0x44
 80051c6:	b920      	cbnz	r0, 80051d2 <strtok+0x26>
 80051c8:	4b10      	ldr	r3, [pc, #64]	@ (800520c <strtok+0x60>)
 80051ca:	4811      	ldr	r0, [pc, #68]	@ (8005210 <strtok+0x64>)
 80051cc:	215b      	movs	r1, #91	@ 0x5b
 80051ce:	f000 f8bd 	bl	800534c <__assert_func>
 80051d2:	e9c0 4400 	strd	r4, r4, [r0]
 80051d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80051da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80051de:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80051e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80051e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80051ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80051ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80051f2:	6184      	str	r4, [r0, #24]
 80051f4:	7704      	strb	r4, [r0, #28]
 80051f6:	6244      	str	r4, [r0, #36]	@ 0x24
 80051f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	2301      	movs	r3, #1
 8005200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005204:	f000 b806 	b.w	8005214 <__strtok_r>
 8005208:	200000c8 	.word	0x200000c8
 800520c:	08006545 	.word	0x08006545
 8005210:	0800655c 	.word	0x0800655c

08005214 <__strtok_r>:
 8005214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005216:	4604      	mov	r4, r0
 8005218:	b908      	cbnz	r0, 800521e <__strtok_r+0xa>
 800521a:	6814      	ldr	r4, [r2, #0]
 800521c:	b144      	cbz	r4, 8005230 <__strtok_r+0x1c>
 800521e:	4620      	mov	r0, r4
 8005220:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005224:	460f      	mov	r7, r1
 8005226:	f817 6b01 	ldrb.w	r6, [r7], #1
 800522a:	b91e      	cbnz	r6, 8005234 <__strtok_r+0x20>
 800522c:	b965      	cbnz	r5, 8005248 <__strtok_r+0x34>
 800522e:	6015      	str	r5, [r2, #0]
 8005230:	2000      	movs	r0, #0
 8005232:	e005      	b.n	8005240 <__strtok_r+0x2c>
 8005234:	42b5      	cmp	r5, r6
 8005236:	d1f6      	bne.n	8005226 <__strtok_r+0x12>
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f0      	bne.n	800521e <__strtok_r+0xa>
 800523c:	6014      	str	r4, [r2, #0]
 800523e:	7003      	strb	r3, [r0, #0]
 8005240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005242:	461c      	mov	r4, r3
 8005244:	e00c      	b.n	8005260 <__strtok_r+0x4c>
 8005246:	b915      	cbnz	r5, 800524e <__strtok_r+0x3a>
 8005248:	f814 3b01 	ldrb.w	r3, [r4], #1
 800524c:	460e      	mov	r6, r1
 800524e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005252:	42ab      	cmp	r3, r5
 8005254:	d1f7      	bne.n	8005246 <__strtok_r+0x32>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0f3      	beq.n	8005242 <__strtok_r+0x2e>
 800525a:	2300      	movs	r3, #0
 800525c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005260:	6014      	str	r4, [r2, #0]
 8005262:	e7ed      	b.n	8005240 <__strtok_r+0x2c>

08005264 <_close_r>:
 8005264:	b538      	push	{r3, r4, r5, lr}
 8005266:	4d06      	ldr	r5, [pc, #24]	@ (8005280 <_close_r+0x1c>)
 8005268:	2300      	movs	r3, #0
 800526a:	4604      	mov	r4, r0
 800526c:	4608      	mov	r0, r1
 800526e:	602b      	str	r3, [r5, #0]
 8005270:	f7fb ffdc 	bl	800122c <_close>
 8005274:	1c43      	adds	r3, r0, #1
 8005276:	d102      	bne.n	800527e <_close_r+0x1a>
 8005278:	682b      	ldr	r3, [r5, #0]
 800527a:	b103      	cbz	r3, 800527e <_close_r+0x1a>
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	bd38      	pop	{r3, r4, r5, pc}
 8005280:	20000468 	.word	0x20000468

08005284 <_lseek_r>:
 8005284:	b538      	push	{r3, r4, r5, lr}
 8005286:	4d07      	ldr	r5, [pc, #28]	@ (80052a4 <_lseek_r+0x20>)
 8005288:	4604      	mov	r4, r0
 800528a:	4608      	mov	r0, r1
 800528c:	4611      	mov	r1, r2
 800528e:	2200      	movs	r2, #0
 8005290:	602a      	str	r2, [r5, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	f7fb fff1 	bl	800127a <_lseek>
 8005298:	1c43      	adds	r3, r0, #1
 800529a:	d102      	bne.n	80052a2 <_lseek_r+0x1e>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	b103      	cbz	r3, 80052a2 <_lseek_r+0x1e>
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	20000468 	.word	0x20000468

080052a8 <_read_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d07      	ldr	r5, [pc, #28]	@ (80052c8 <_read_r+0x20>)
 80052ac:	4604      	mov	r4, r0
 80052ae:	4608      	mov	r0, r1
 80052b0:	4611      	mov	r1, r2
 80052b2:	2200      	movs	r2, #0
 80052b4:	602a      	str	r2, [r5, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f7fb ff7f 	bl	80011ba <_read>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_read_r+0x1e>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_read_r+0x1e>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	20000468 	.word	0x20000468

080052cc <_write_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4d07      	ldr	r5, [pc, #28]	@ (80052ec <_write_r+0x20>)
 80052d0:	4604      	mov	r4, r0
 80052d2:	4608      	mov	r0, r1
 80052d4:	4611      	mov	r1, r2
 80052d6:	2200      	movs	r2, #0
 80052d8:	602a      	str	r2, [r5, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	f7fb ff8a 	bl	80011f4 <_write>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_write_r+0x1e>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_write_r+0x1e>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	20000468 	.word	0x20000468

080052f0 <__errno>:
 80052f0:	4b01      	ldr	r3, [pc, #4]	@ (80052f8 <__errno+0x8>)
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	200000c8 	.word	0x200000c8

080052fc <__libc_init_array>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005334 <__libc_init_array+0x38>)
 8005300:	4c0d      	ldr	r4, [pc, #52]	@ (8005338 <__libc_init_array+0x3c>)
 8005302:	1b64      	subs	r4, r4, r5
 8005304:	10a4      	asrs	r4, r4, #2
 8005306:	2600      	movs	r6, #0
 8005308:	42a6      	cmp	r6, r4
 800530a:	d109      	bne.n	8005320 <__libc_init_array+0x24>
 800530c:	4d0b      	ldr	r5, [pc, #44]	@ (800533c <__libc_init_array+0x40>)
 800530e:	4c0c      	ldr	r4, [pc, #48]	@ (8005340 <__libc_init_array+0x44>)
 8005310:	f000 fff2 	bl	80062f8 <_init>
 8005314:	1b64      	subs	r4, r4, r5
 8005316:	10a4      	asrs	r4, r4, #2
 8005318:	2600      	movs	r6, #0
 800531a:	42a6      	cmp	r6, r4
 800531c:	d105      	bne.n	800532a <__libc_init_array+0x2e>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	f855 3b04 	ldr.w	r3, [r5], #4
 8005324:	4798      	blx	r3
 8005326:	3601      	adds	r6, #1
 8005328:	e7ee      	b.n	8005308 <__libc_init_array+0xc>
 800532a:	f855 3b04 	ldr.w	r3, [r5], #4
 800532e:	4798      	blx	r3
 8005330:	3601      	adds	r6, #1
 8005332:	e7f2      	b.n	800531a <__libc_init_array+0x1e>
 8005334:	08006630 	.word	0x08006630
 8005338:	08006630 	.word	0x08006630
 800533c:	08006630 	.word	0x08006630
 8005340:	08006634 	.word	0x08006634

08005344 <__retarget_lock_init_recursive>:
 8005344:	4770      	bx	lr

08005346 <__retarget_lock_acquire_recursive>:
 8005346:	4770      	bx	lr

08005348 <__retarget_lock_release_recursive>:
 8005348:	4770      	bx	lr
	...

0800534c <__assert_func>:
 800534c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800534e:	4614      	mov	r4, r2
 8005350:	461a      	mov	r2, r3
 8005352:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <__assert_func+0x2c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4605      	mov	r5, r0
 8005358:	68d8      	ldr	r0, [r3, #12]
 800535a:	b954      	cbnz	r4, 8005372 <__assert_func+0x26>
 800535c:	4b07      	ldr	r3, [pc, #28]	@ (800537c <__assert_func+0x30>)
 800535e:	461c      	mov	r4, r3
 8005360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005364:	9100      	str	r1, [sp, #0]
 8005366:	462b      	mov	r3, r5
 8005368:	4905      	ldr	r1, [pc, #20]	@ (8005380 <__assert_func+0x34>)
 800536a:	f000 fde1 	bl	8005f30 <fiprintf>
 800536e:	f000 febd 	bl	80060ec <abort>
 8005372:	4b04      	ldr	r3, [pc, #16]	@ (8005384 <__assert_func+0x38>)
 8005374:	e7f4      	b.n	8005360 <__assert_func+0x14>
 8005376:	bf00      	nop
 8005378:	200000c8 	.word	0x200000c8
 800537c:	080065f1 	.word	0x080065f1
 8005380:	080065c3 	.word	0x080065c3
 8005384:	080065b6 	.word	0x080065b6

08005388 <_free_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	4605      	mov	r5, r0
 800538c:	2900      	cmp	r1, #0
 800538e:	d041      	beq.n	8005414 <_free_r+0x8c>
 8005390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005394:	1f0c      	subs	r4, r1, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	bfb8      	it	lt
 800539a:	18e4      	addlt	r4, r4, r3
 800539c:	f000 f8e8 	bl	8005570 <__malloc_lock>
 80053a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005418 <_free_r+0x90>)
 80053a2:	6813      	ldr	r3, [r2, #0]
 80053a4:	b933      	cbnz	r3, 80053b4 <_free_r+0x2c>
 80053a6:	6063      	str	r3, [r4, #4]
 80053a8:	6014      	str	r4, [r2, #0]
 80053aa:	4628      	mov	r0, r5
 80053ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053b0:	f000 b8e4 	b.w	800557c <__malloc_unlock>
 80053b4:	42a3      	cmp	r3, r4
 80053b6:	d908      	bls.n	80053ca <_free_r+0x42>
 80053b8:	6820      	ldr	r0, [r4, #0]
 80053ba:	1821      	adds	r1, r4, r0
 80053bc:	428b      	cmp	r3, r1
 80053be:	bf01      	itttt	eq
 80053c0:	6819      	ldreq	r1, [r3, #0]
 80053c2:	685b      	ldreq	r3, [r3, #4]
 80053c4:	1809      	addeq	r1, r1, r0
 80053c6:	6021      	streq	r1, [r4, #0]
 80053c8:	e7ed      	b.n	80053a6 <_free_r+0x1e>
 80053ca:	461a      	mov	r2, r3
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	b10b      	cbz	r3, 80053d4 <_free_r+0x4c>
 80053d0:	42a3      	cmp	r3, r4
 80053d2:	d9fa      	bls.n	80053ca <_free_r+0x42>
 80053d4:	6811      	ldr	r1, [r2, #0]
 80053d6:	1850      	adds	r0, r2, r1
 80053d8:	42a0      	cmp	r0, r4
 80053da:	d10b      	bne.n	80053f4 <_free_r+0x6c>
 80053dc:	6820      	ldr	r0, [r4, #0]
 80053de:	4401      	add	r1, r0
 80053e0:	1850      	adds	r0, r2, r1
 80053e2:	4283      	cmp	r3, r0
 80053e4:	6011      	str	r1, [r2, #0]
 80053e6:	d1e0      	bne.n	80053aa <_free_r+0x22>
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	6053      	str	r3, [r2, #4]
 80053ee:	4408      	add	r0, r1
 80053f0:	6010      	str	r0, [r2, #0]
 80053f2:	e7da      	b.n	80053aa <_free_r+0x22>
 80053f4:	d902      	bls.n	80053fc <_free_r+0x74>
 80053f6:	230c      	movs	r3, #12
 80053f8:	602b      	str	r3, [r5, #0]
 80053fa:	e7d6      	b.n	80053aa <_free_r+0x22>
 80053fc:	6820      	ldr	r0, [r4, #0]
 80053fe:	1821      	adds	r1, r4, r0
 8005400:	428b      	cmp	r3, r1
 8005402:	bf04      	itt	eq
 8005404:	6819      	ldreq	r1, [r3, #0]
 8005406:	685b      	ldreq	r3, [r3, #4]
 8005408:	6063      	str	r3, [r4, #4]
 800540a:	bf04      	itt	eq
 800540c:	1809      	addeq	r1, r1, r0
 800540e:	6021      	streq	r1, [r4, #0]
 8005410:	6054      	str	r4, [r2, #4]
 8005412:	e7ca      	b.n	80053aa <_free_r+0x22>
 8005414:	bd38      	pop	{r3, r4, r5, pc}
 8005416:	bf00      	nop
 8005418:	20000474 	.word	0x20000474

0800541c <malloc>:
 800541c:	4b02      	ldr	r3, [pc, #8]	@ (8005428 <malloc+0xc>)
 800541e:	4601      	mov	r1, r0
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	f000 b825 	b.w	8005470 <_malloc_r>
 8005426:	bf00      	nop
 8005428:	200000c8 	.word	0x200000c8

0800542c <sbrk_aligned>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	4e0f      	ldr	r6, [pc, #60]	@ (800546c <sbrk_aligned+0x40>)
 8005430:	460c      	mov	r4, r1
 8005432:	6831      	ldr	r1, [r6, #0]
 8005434:	4605      	mov	r5, r0
 8005436:	b911      	cbnz	r1, 800543e <sbrk_aligned+0x12>
 8005438:	f000 fe3a 	bl	80060b0 <_sbrk_r>
 800543c:	6030      	str	r0, [r6, #0]
 800543e:	4621      	mov	r1, r4
 8005440:	4628      	mov	r0, r5
 8005442:	f000 fe35 	bl	80060b0 <_sbrk_r>
 8005446:	1c43      	adds	r3, r0, #1
 8005448:	d103      	bne.n	8005452 <sbrk_aligned+0x26>
 800544a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800544e:	4620      	mov	r0, r4
 8005450:	bd70      	pop	{r4, r5, r6, pc}
 8005452:	1cc4      	adds	r4, r0, #3
 8005454:	f024 0403 	bic.w	r4, r4, #3
 8005458:	42a0      	cmp	r0, r4
 800545a:	d0f8      	beq.n	800544e <sbrk_aligned+0x22>
 800545c:	1a21      	subs	r1, r4, r0
 800545e:	4628      	mov	r0, r5
 8005460:	f000 fe26 	bl	80060b0 <_sbrk_r>
 8005464:	3001      	adds	r0, #1
 8005466:	d1f2      	bne.n	800544e <sbrk_aligned+0x22>
 8005468:	e7ef      	b.n	800544a <sbrk_aligned+0x1e>
 800546a:	bf00      	nop
 800546c:	20000470 	.word	0x20000470

08005470 <_malloc_r>:
 8005470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005474:	1ccd      	adds	r5, r1, #3
 8005476:	f025 0503 	bic.w	r5, r5, #3
 800547a:	3508      	adds	r5, #8
 800547c:	2d0c      	cmp	r5, #12
 800547e:	bf38      	it	cc
 8005480:	250c      	movcc	r5, #12
 8005482:	2d00      	cmp	r5, #0
 8005484:	4606      	mov	r6, r0
 8005486:	db01      	blt.n	800548c <_malloc_r+0x1c>
 8005488:	42a9      	cmp	r1, r5
 800548a:	d904      	bls.n	8005496 <_malloc_r+0x26>
 800548c:	230c      	movs	r3, #12
 800548e:	6033      	str	r3, [r6, #0]
 8005490:	2000      	movs	r0, #0
 8005492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005496:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800556c <_malloc_r+0xfc>
 800549a:	f000 f869 	bl	8005570 <__malloc_lock>
 800549e:	f8d8 3000 	ldr.w	r3, [r8]
 80054a2:	461c      	mov	r4, r3
 80054a4:	bb44      	cbnz	r4, 80054f8 <_malloc_r+0x88>
 80054a6:	4629      	mov	r1, r5
 80054a8:	4630      	mov	r0, r6
 80054aa:	f7ff ffbf 	bl	800542c <sbrk_aligned>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	4604      	mov	r4, r0
 80054b2:	d158      	bne.n	8005566 <_malloc_r+0xf6>
 80054b4:	f8d8 4000 	ldr.w	r4, [r8]
 80054b8:	4627      	mov	r7, r4
 80054ba:	2f00      	cmp	r7, #0
 80054bc:	d143      	bne.n	8005546 <_malloc_r+0xd6>
 80054be:	2c00      	cmp	r4, #0
 80054c0:	d04b      	beq.n	800555a <_malloc_r+0xea>
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	4639      	mov	r1, r7
 80054c6:	4630      	mov	r0, r6
 80054c8:	eb04 0903 	add.w	r9, r4, r3
 80054cc:	f000 fdf0 	bl	80060b0 <_sbrk_r>
 80054d0:	4581      	cmp	r9, r0
 80054d2:	d142      	bne.n	800555a <_malloc_r+0xea>
 80054d4:	6821      	ldr	r1, [r4, #0]
 80054d6:	1a6d      	subs	r5, r5, r1
 80054d8:	4629      	mov	r1, r5
 80054da:	4630      	mov	r0, r6
 80054dc:	f7ff ffa6 	bl	800542c <sbrk_aligned>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d03a      	beq.n	800555a <_malloc_r+0xea>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	442b      	add	r3, r5
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	f8d8 3000 	ldr.w	r3, [r8]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	bb62      	cbnz	r2, 800554c <_malloc_r+0xdc>
 80054f2:	f8c8 7000 	str.w	r7, [r8]
 80054f6:	e00f      	b.n	8005518 <_malloc_r+0xa8>
 80054f8:	6822      	ldr	r2, [r4, #0]
 80054fa:	1b52      	subs	r2, r2, r5
 80054fc:	d420      	bmi.n	8005540 <_malloc_r+0xd0>
 80054fe:	2a0b      	cmp	r2, #11
 8005500:	d917      	bls.n	8005532 <_malloc_r+0xc2>
 8005502:	1961      	adds	r1, r4, r5
 8005504:	42a3      	cmp	r3, r4
 8005506:	6025      	str	r5, [r4, #0]
 8005508:	bf18      	it	ne
 800550a:	6059      	strne	r1, [r3, #4]
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	bf08      	it	eq
 8005510:	f8c8 1000 	streq.w	r1, [r8]
 8005514:	5162      	str	r2, [r4, r5]
 8005516:	604b      	str	r3, [r1, #4]
 8005518:	4630      	mov	r0, r6
 800551a:	f000 f82f 	bl	800557c <__malloc_unlock>
 800551e:	f104 000b 	add.w	r0, r4, #11
 8005522:	1d23      	adds	r3, r4, #4
 8005524:	f020 0007 	bic.w	r0, r0, #7
 8005528:	1ac2      	subs	r2, r0, r3
 800552a:	bf1c      	itt	ne
 800552c:	1a1b      	subne	r3, r3, r0
 800552e:	50a3      	strne	r3, [r4, r2]
 8005530:	e7af      	b.n	8005492 <_malloc_r+0x22>
 8005532:	6862      	ldr	r2, [r4, #4]
 8005534:	42a3      	cmp	r3, r4
 8005536:	bf0c      	ite	eq
 8005538:	f8c8 2000 	streq.w	r2, [r8]
 800553c:	605a      	strne	r2, [r3, #4]
 800553e:	e7eb      	b.n	8005518 <_malloc_r+0xa8>
 8005540:	4623      	mov	r3, r4
 8005542:	6864      	ldr	r4, [r4, #4]
 8005544:	e7ae      	b.n	80054a4 <_malloc_r+0x34>
 8005546:	463c      	mov	r4, r7
 8005548:	687f      	ldr	r7, [r7, #4]
 800554a:	e7b6      	b.n	80054ba <_malloc_r+0x4a>
 800554c:	461a      	mov	r2, r3
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	42a3      	cmp	r3, r4
 8005552:	d1fb      	bne.n	800554c <_malloc_r+0xdc>
 8005554:	2300      	movs	r3, #0
 8005556:	6053      	str	r3, [r2, #4]
 8005558:	e7de      	b.n	8005518 <_malloc_r+0xa8>
 800555a:	230c      	movs	r3, #12
 800555c:	6033      	str	r3, [r6, #0]
 800555e:	4630      	mov	r0, r6
 8005560:	f000 f80c 	bl	800557c <__malloc_unlock>
 8005564:	e794      	b.n	8005490 <_malloc_r+0x20>
 8005566:	6005      	str	r5, [r0, #0]
 8005568:	e7d6      	b.n	8005518 <_malloc_r+0xa8>
 800556a:	bf00      	nop
 800556c:	20000474 	.word	0x20000474

08005570 <__malloc_lock>:
 8005570:	4801      	ldr	r0, [pc, #4]	@ (8005578 <__malloc_lock+0x8>)
 8005572:	f7ff bee8 	b.w	8005346 <__retarget_lock_acquire_recursive>
 8005576:	bf00      	nop
 8005578:	2000046c 	.word	0x2000046c

0800557c <__malloc_unlock>:
 800557c:	4801      	ldr	r0, [pc, #4]	@ (8005584 <__malloc_unlock+0x8>)
 800557e:	f7ff bee3 	b.w	8005348 <__retarget_lock_release_recursive>
 8005582:	bf00      	nop
 8005584:	2000046c 	.word	0x2000046c

08005588 <__ssputs_r>:
 8005588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800558c:	688e      	ldr	r6, [r1, #8]
 800558e:	461f      	mov	r7, r3
 8005590:	42be      	cmp	r6, r7
 8005592:	680b      	ldr	r3, [r1, #0]
 8005594:	4682      	mov	sl, r0
 8005596:	460c      	mov	r4, r1
 8005598:	4690      	mov	r8, r2
 800559a:	d82d      	bhi.n	80055f8 <__ssputs_r+0x70>
 800559c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055a4:	d026      	beq.n	80055f4 <__ssputs_r+0x6c>
 80055a6:	6965      	ldr	r5, [r4, #20]
 80055a8:	6909      	ldr	r1, [r1, #16]
 80055aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055ae:	eba3 0901 	sub.w	r9, r3, r1
 80055b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055b6:	1c7b      	adds	r3, r7, #1
 80055b8:	444b      	add	r3, r9
 80055ba:	106d      	asrs	r5, r5, #1
 80055bc:	429d      	cmp	r5, r3
 80055be:	bf38      	it	cc
 80055c0:	461d      	movcc	r5, r3
 80055c2:	0553      	lsls	r3, r2, #21
 80055c4:	d527      	bpl.n	8005616 <__ssputs_r+0x8e>
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7ff ff52 	bl	8005470 <_malloc_r>
 80055cc:	4606      	mov	r6, r0
 80055ce:	b360      	cbz	r0, 800562a <__ssputs_r+0xa2>
 80055d0:	6921      	ldr	r1, [r4, #16]
 80055d2:	464a      	mov	r2, r9
 80055d4:	f000 fd7c 	bl	80060d0 <memcpy>
 80055d8:	89a3      	ldrh	r3, [r4, #12]
 80055da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80055de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e2:	81a3      	strh	r3, [r4, #12]
 80055e4:	6126      	str	r6, [r4, #16]
 80055e6:	6165      	str	r5, [r4, #20]
 80055e8:	444e      	add	r6, r9
 80055ea:	eba5 0509 	sub.w	r5, r5, r9
 80055ee:	6026      	str	r6, [r4, #0]
 80055f0:	60a5      	str	r5, [r4, #8]
 80055f2:	463e      	mov	r6, r7
 80055f4:	42be      	cmp	r6, r7
 80055f6:	d900      	bls.n	80055fa <__ssputs_r+0x72>
 80055f8:	463e      	mov	r6, r7
 80055fa:	6820      	ldr	r0, [r4, #0]
 80055fc:	4632      	mov	r2, r6
 80055fe:	4641      	mov	r1, r8
 8005600:	f000 fd3c 	bl	800607c <memmove>
 8005604:	68a3      	ldr	r3, [r4, #8]
 8005606:	1b9b      	subs	r3, r3, r6
 8005608:	60a3      	str	r3, [r4, #8]
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	4433      	add	r3, r6
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	2000      	movs	r0, #0
 8005612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005616:	462a      	mov	r2, r5
 8005618:	f000 fd6f 	bl	80060fa <_realloc_r>
 800561c:	4606      	mov	r6, r0
 800561e:	2800      	cmp	r0, #0
 8005620:	d1e0      	bne.n	80055e4 <__ssputs_r+0x5c>
 8005622:	6921      	ldr	r1, [r4, #16]
 8005624:	4650      	mov	r0, sl
 8005626:	f7ff feaf 	bl	8005388 <_free_r>
 800562a:	230c      	movs	r3, #12
 800562c:	f8ca 3000 	str.w	r3, [sl]
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800563c:	e7e9      	b.n	8005612 <__ssputs_r+0x8a>
	...

08005640 <_svfiprintf_r>:
 8005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	4698      	mov	r8, r3
 8005646:	898b      	ldrh	r3, [r1, #12]
 8005648:	061b      	lsls	r3, r3, #24
 800564a:	b09d      	sub	sp, #116	@ 0x74
 800564c:	4607      	mov	r7, r0
 800564e:	460d      	mov	r5, r1
 8005650:	4614      	mov	r4, r2
 8005652:	d510      	bpl.n	8005676 <_svfiprintf_r+0x36>
 8005654:	690b      	ldr	r3, [r1, #16]
 8005656:	b973      	cbnz	r3, 8005676 <_svfiprintf_r+0x36>
 8005658:	2140      	movs	r1, #64	@ 0x40
 800565a:	f7ff ff09 	bl	8005470 <_malloc_r>
 800565e:	6028      	str	r0, [r5, #0]
 8005660:	6128      	str	r0, [r5, #16]
 8005662:	b930      	cbnz	r0, 8005672 <_svfiprintf_r+0x32>
 8005664:	230c      	movs	r3, #12
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800566c:	b01d      	add	sp, #116	@ 0x74
 800566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005672:	2340      	movs	r3, #64	@ 0x40
 8005674:	616b      	str	r3, [r5, #20]
 8005676:	2300      	movs	r3, #0
 8005678:	9309      	str	r3, [sp, #36]	@ 0x24
 800567a:	2320      	movs	r3, #32
 800567c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005680:	f8cd 800c 	str.w	r8, [sp, #12]
 8005684:	2330      	movs	r3, #48	@ 0x30
 8005686:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005824 <_svfiprintf_r+0x1e4>
 800568a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800568e:	f04f 0901 	mov.w	r9, #1
 8005692:	4623      	mov	r3, r4
 8005694:	469a      	mov	sl, r3
 8005696:	f813 2b01 	ldrb.w	r2, [r3], #1
 800569a:	b10a      	cbz	r2, 80056a0 <_svfiprintf_r+0x60>
 800569c:	2a25      	cmp	r2, #37	@ 0x25
 800569e:	d1f9      	bne.n	8005694 <_svfiprintf_r+0x54>
 80056a0:	ebba 0b04 	subs.w	fp, sl, r4
 80056a4:	d00b      	beq.n	80056be <_svfiprintf_r+0x7e>
 80056a6:	465b      	mov	r3, fp
 80056a8:	4622      	mov	r2, r4
 80056aa:	4629      	mov	r1, r5
 80056ac:	4638      	mov	r0, r7
 80056ae:	f7ff ff6b 	bl	8005588 <__ssputs_r>
 80056b2:	3001      	adds	r0, #1
 80056b4:	f000 80a7 	beq.w	8005806 <_svfiprintf_r+0x1c6>
 80056b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056ba:	445a      	add	r2, fp
 80056bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80056be:	f89a 3000 	ldrb.w	r3, [sl]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 809f 	beq.w	8005806 <_svfiprintf_r+0x1c6>
 80056c8:	2300      	movs	r3, #0
 80056ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80056ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056d2:	f10a 0a01 	add.w	sl, sl, #1
 80056d6:	9304      	str	r3, [sp, #16]
 80056d8:	9307      	str	r3, [sp, #28]
 80056da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056de:	931a      	str	r3, [sp, #104]	@ 0x68
 80056e0:	4654      	mov	r4, sl
 80056e2:	2205      	movs	r2, #5
 80056e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e8:	484e      	ldr	r0, [pc, #312]	@ (8005824 <_svfiprintf_r+0x1e4>)
 80056ea:	f7fa fda9 	bl	8000240 <memchr>
 80056ee:	9a04      	ldr	r2, [sp, #16]
 80056f0:	b9d8      	cbnz	r0, 800572a <_svfiprintf_r+0xea>
 80056f2:	06d0      	lsls	r0, r2, #27
 80056f4:	bf44      	itt	mi
 80056f6:	2320      	movmi	r3, #32
 80056f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056fc:	0711      	lsls	r1, r2, #28
 80056fe:	bf44      	itt	mi
 8005700:	232b      	movmi	r3, #43	@ 0x2b
 8005702:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005706:	f89a 3000 	ldrb.w	r3, [sl]
 800570a:	2b2a      	cmp	r3, #42	@ 0x2a
 800570c:	d015      	beq.n	800573a <_svfiprintf_r+0xfa>
 800570e:	9a07      	ldr	r2, [sp, #28]
 8005710:	4654      	mov	r4, sl
 8005712:	2000      	movs	r0, #0
 8005714:	f04f 0c0a 	mov.w	ip, #10
 8005718:	4621      	mov	r1, r4
 800571a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800571e:	3b30      	subs	r3, #48	@ 0x30
 8005720:	2b09      	cmp	r3, #9
 8005722:	d94b      	bls.n	80057bc <_svfiprintf_r+0x17c>
 8005724:	b1b0      	cbz	r0, 8005754 <_svfiprintf_r+0x114>
 8005726:	9207      	str	r2, [sp, #28]
 8005728:	e014      	b.n	8005754 <_svfiprintf_r+0x114>
 800572a:	eba0 0308 	sub.w	r3, r0, r8
 800572e:	fa09 f303 	lsl.w	r3, r9, r3
 8005732:	4313      	orrs	r3, r2
 8005734:	9304      	str	r3, [sp, #16]
 8005736:	46a2      	mov	sl, r4
 8005738:	e7d2      	b.n	80056e0 <_svfiprintf_r+0xa0>
 800573a:	9b03      	ldr	r3, [sp, #12]
 800573c:	1d19      	adds	r1, r3, #4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	9103      	str	r1, [sp, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	bfbb      	ittet	lt
 8005746:	425b      	neglt	r3, r3
 8005748:	f042 0202 	orrlt.w	r2, r2, #2
 800574c:	9307      	strge	r3, [sp, #28]
 800574e:	9307      	strlt	r3, [sp, #28]
 8005750:	bfb8      	it	lt
 8005752:	9204      	strlt	r2, [sp, #16]
 8005754:	7823      	ldrb	r3, [r4, #0]
 8005756:	2b2e      	cmp	r3, #46	@ 0x2e
 8005758:	d10a      	bne.n	8005770 <_svfiprintf_r+0x130>
 800575a:	7863      	ldrb	r3, [r4, #1]
 800575c:	2b2a      	cmp	r3, #42	@ 0x2a
 800575e:	d132      	bne.n	80057c6 <_svfiprintf_r+0x186>
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	1d1a      	adds	r2, r3, #4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	9203      	str	r2, [sp, #12]
 8005768:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800576c:	3402      	adds	r4, #2
 800576e:	9305      	str	r3, [sp, #20]
 8005770:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005834 <_svfiprintf_r+0x1f4>
 8005774:	7821      	ldrb	r1, [r4, #0]
 8005776:	2203      	movs	r2, #3
 8005778:	4650      	mov	r0, sl
 800577a:	f7fa fd61 	bl	8000240 <memchr>
 800577e:	b138      	cbz	r0, 8005790 <_svfiprintf_r+0x150>
 8005780:	9b04      	ldr	r3, [sp, #16]
 8005782:	eba0 000a 	sub.w	r0, r0, sl
 8005786:	2240      	movs	r2, #64	@ 0x40
 8005788:	4082      	lsls	r2, r0
 800578a:	4313      	orrs	r3, r2
 800578c:	3401      	adds	r4, #1
 800578e:	9304      	str	r3, [sp, #16]
 8005790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005794:	4824      	ldr	r0, [pc, #144]	@ (8005828 <_svfiprintf_r+0x1e8>)
 8005796:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800579a:	2206      	movs	r2, #6
 800579c:	f7fa fd50 	bl	8000240 <memchr>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d036      	beq.n	8005812 <_svfiprintf_r+0x1d2>
 80057a4:	4b21      	ldr	r3, [pc, #132]	@ (800582c <_svfiprintf_r+0x1ec>)
 80057a6:	bb1b      	cbnz	r3, 80057f0 <_svfiprintf_r+0x1b0>
 80057a8:	9b03      	ldr	r3, [sp, #12]
 80057aa:	3307      	adds	r3, #7
 80057ac:	f023 0307 	bic.w	r3, r3, #7
 80057b0:	3308      	adds	r3, #8
 80057b2:	9303      	str	r3, [sp, #12]
 80057b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057b6:	4433      	add	r3, r6
 80057b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ba:	e76a      	b.n	8005692 <_svfiprintf_r+0x52>
 80057bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80057c0:	460c      	mov	r4, r1
 80057c2:	2001      	movs	r0, #1
 80057c4:	e7a8      	b.n	8005718 <_svfiprintf_r+0xd8>
 80057c6:	2300      	movs	r3, #0
 80057c8:	3401      	adds	r4, #1
 80057ca:	9305      	str	r3, [sp, #20]
 80057cc:	4619      	mov	r1, r3
 80057ce:	f04f 0c0a 	mov.w	ip, #10
 80057d2:	4620      	mov	r0, r4
 80057d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057d8:	3a30      	subs	r2, #48	@ 0x30
 80057da:	2a09      	cmp	r2, #9
 80057dc:	d903      	bls.n	80057e6 <_svfiprintf_r+0x1a6>
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0c6      	beq.n	8005770 <_svfiprintf_r+0x130>
 80057e2:	9105      	str	r1, [sp, #20]
 80057e4:	e7c4      	b.n	8005770 <_svfiprintf_r+0x130>
 80057e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ea:	4604      	mov	r4, r0
 80057ec:	2301      	movs	r3, #1
 80057ee:	e7f0      	b.n	80057d2 <_svfiprintf_r+0x192>
 80057f0:	ab03      	add	r3, sp, #12
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	462a      	mov	r2, r5
 80057f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005830 <_svfiprintf_r+0x1f0>)
 80057f8:	a904      	add	r1, sp, #16
 80057fa:	4638      	mov	r0, r7
 80057fc:	f3af 8000 	nop.w
 8005800:	1c42      	adds	r2, r0, #1
 8005802:	4606      	mov	r6, r0
 8005804:	d1d6      	bne.n	80057b4 <_svfiprintf_r+0x174>
 8005806:	89ab      	ldrh	r3, [r5, #12]
 8005808:	065b      	lsls	r3, r3, #25
 800580a:	f53f af2d 	bmi.w	8005668 <_svfiprintf_r+0x28>
 800580e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005810:	e72c      	b.n	800566c <_svfiprintf_r+0x2c>
 8005812:	ab03      	add	r3, sp, #12
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	462a      	mov	r2, r5
 8005818:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <_svfiprintf_r+0x1f0>)
 800581a:	a904      	add	r1, sp, #16
 800581c:	4638      	mov	r0, r7
 800581e:	f000 f9bb 	bl	8005b98 <_printf_i>
 8005822:	e7ed      	b.n	8005800 <_svfiprintf_r+0x1c0>
 8005824:	080065f2 	.word	0x080065f2
 8005828:	080065fc 	.word	0x080065fc
 800582c:	00000000 	.word	0x00000000
 8005830:	08005589 	.word	0x08005589
 8005834:	080065f8 	.word	0x080065f8

08005838 <__sfputc_r>:
 8005838:	6893      	ldr	r3, [r2, #8]
 800583a:	3b01      	subs	r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	b410      	push	{r4}
 8005840:	6093      	str	r3, [r2, #8]
 8005842:	da08      	bge.n	8005856 <__sfputc_r+0x1e>
 8005844:	6994      	ldr	r4, [r2, #24]
 8005846:	42a3      	cmp	r3, r4
 8005848:	db01      	blt.n	800584e <__sfputc_r+0x16>
 800584a:	290a      	cmp	r1, #10
 800584c:	d103      	bne.n	8005856 <__sfputc_r+0x1e>
 800584e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005852:	f000 bb7f 	b.w	8005f54 <__swbuf_r>
 8005856:	6813      	ldr	r3, [r2, #0]
 8005858:	1c58      	adds	r0, r3, #1
 800585a:	6010      	str	r0, [r2, #0]
 800585c:	7019      	strb	r1, [r3, #0]
 800585e:	4608      	mov	r0, r1
 8005860:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005864:	4770      	bx	lr

08005866 <__sfputs_r>:
 8005866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005868:	4606      	mov	r6, r0
 800586a:	460f      	mov	r7, r1
 800586c:	4614      	mov	r4, r2
 800586e:	18d5      	adds	r5, r2, r3
 8005870:	42ac      	cmp	r4, r5
 8005872:	d101      	bne.n	8005878 <__sfputs_r+0x12>
 8005874:	2000      	movs	r0, #0
 8005876:	e007      	b.n	8005888 <__sfputs_r+0x22>
 8005878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800587c:	463a      	mov	r2, r7
 800587e:	4630      	mov	r0, r6
 8005880:	f7ff ffda 	bl	8005838 <__sfputc_r>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d1f3      	bne.n	8005870 <__sfputs_r+0xa>
 8005888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800588c <_vfiprintf_r>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	460d      	mov	r5, r1
 8005892:	b09d      	sub	sp, #116	@ 0x74
 8005894:	4614      	mov	r4, r2
 8005896:	4698      	mov	r8, r3
 8005898:	4606      	mov	r6, r0
 800589a:	b118      	cbz	r0, 80058a4 <_vfiprintf_r+0x18>
 800589c:	6a03      	ldr	r3, [r0, #32]
 800589e:	b90b      	cbnz	r3, 80058a4 <_vfiprintf_r+0x18>
 80058a0:	f7ff fbbc 	bl	800501c <__sinit>
 80058a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058a6:	07d9      	lsls	r1, r3, #31
 80058a8:	d405      	bmi.n	80058b6 <_vfiprintf_r+0x2a>
 80058aa:	89ab      	ldrh	r3, [r5, #12]
 80058ac:	059a      	lsls	r2, r3, #22
 80058ae:	d402      	bmi.n	80058b6 <_vfiprintf_r+0x2a>
 80058b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058b2:	f7ff fd48 	bl	8005346 <__retarget_lock_acquire_recursive>
 80058b6:	89ab      	ldrh	r3, [r5, #12]
 80058b8:	071b      	lsls	r3, r3, #28
 80058ba:	d501      	bpl.n	80058c0 <_vfiprintf_r+0x34>
 80058bc:	692b      	ldr	r3, [r5, #16]
 80058be:	b99b      	cbnz	r3, 80058e8 <_vfiprintf_r+0x5c>
 80058c0:	4629      	mov	r1, r5
 80058c2:	4630      	mov	r0, r6
 80058c4:	f000 fb84 	bl	8005fd0 <__swsetup_r>
 80058c8:	b170      	cbz	r0, 80058e8 <_vfiprintf_r+0x5c>
 80058ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058cc:	07dc      	lsls	r4, r3, #31
 80058ce:	d504      	bpl.n	80058da <_vfiprintf_r+0x4e>
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058d4:	b01d      	add	sp, #116	@ 0x74
 80058d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058da:	89ab      	ldrh	r3, [r5, #12]
 80058dc:	0598      	lsls	r0, r3, #22
 80058de:	d4f7      	bmi.n	80058d0 <_vfiprintf_r+0x44>
 80058e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058e2:	f7ff fd31 	bl	8005348 <__retarget_lock_release_recursive>
 80058e6:	e7f3      	b.n	80058d0 <_vfiprintf_r+0x44>
 80058e8:	2300      	movs	r3, #0
 80058ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ec:	2320      	movs	r3, #32
 80058ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80058f6:	2330      	movs	r3, #48	@ 0x30
 80058f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005aa8 <_vfiprintf_r+0x21c>
 80058fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005900:	f04f 0901 	mov.w	r9, #1
 8005904:	4623      	mov	r3, r4
 8005906:	469a      	mov	sl, r3
 8005908:	f813 2b01 	ldrb.w	r2, [r3], #1
 800590c:	b10a      	cbz	r2, 8005912 <_vfiprintf_r+0x86>
 800590e:	2a25      	cmp	r2, #37	@ 0x25
 8005910:	d1f9      	bne.n	8005906 <_vfiprintf_r+0x7a>
 8005912:	ebba 0b04 	subs.w	fp, sl, r4
 8005916:	d00b      	beq.n	8005930 <_vfiprintf_r+0xa4>
 8005918:	465b      	mov	r3, fp
 800591a:	4622      	mov	r2, r4
 800591c:	4629      	mov	r1, r5
 800591e:	4630      	mov	r0, r6
 8005920:	f7ff ffa1 	bl	8005866 <__sfputs_r>
 8005924:	3001      	adds	r0, #1
 8005926:	f000 80a7 	beq.w	8005a78 <_vfiprintf_r+0x1ec>
 800592a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800592c:	445a      	add	r2, fp
 800592e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005930:	f89a 3000 	ldrb.w	r3, [sl]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 809f 	beq.w	8005a78 <_vfiprintf_r+0x1ec>
 800593a:	2300      	movs	r3, #0
 800593c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005944:	f10a 0a01 	add.w	sl, sl, #1
 8005948:	9304      	str	r3, [sp, #16]
 800594a:	9307      	str	r3, [sp, #28]
 800594c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005950:	931a      	str	r3, [sp, #104]	@ 0x68
 8005952:	4654      	mov	r4, sl
 8005954:	2205      	movs	r2, #5
 8005956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800595a:	4853      	ldr	r0, [pc, #332]	@ (8005aa8 <_vfiprintf_r+0x21c>)
 800595c:	f7fa fc70 	bl	8000240 <memchr>
 8005960:	9a04      	ldr	r2, [sp, #16]
 8005962:	b9d8      	cbnz	r0, 800599c <_vfiprintf_r+0x110>
 8005964:	06d1      	lsls	r1, r2, #27
 8005966:	bf44      	itt	mi
 8005968:	2320      	movmi	r3, #32
 800596a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800596e:	0713      	lsls	r3, r2, #28
 8005970:	bf44      	itt	mi
 8005972:	232b      	movmi	r3, #43	@ 0x2b
 8005974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005978:	f89a 3000 	ldrb.w	r3, [sl]
 800597c:	2b2a      	cmp	r3, #42	@ 0x2a
 800597e:	d015      	beq.n	80059ac <_vfiprintf_r+0x120>
 8005980:	9a07      	ldr	r2, [sp, #28]
 8005982:	4654      	mov	r4, sl
 8005984:	2000      	movs	r0, #0
 8005986:	f04f 0c0a 	mov.w	ip, #10
 800598a:	4621      	mov	r1, r4
 800598c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005990:	3b30      	subs	r3, #48	@ 0x30
 8005992:	2b09      	cmp	r3, #9
 8005994:	d94b      	bls.n	8005a2e <_vfiprintf_r+0x1a2>
 8005996:	b1b0      	cbz	r0, 80059c6 <_vfiprintf_r+0x13a>
 8005998:	9207      	str	r2, [sp, #28]
 800599a:	e014      	b.n	80059c6 <_vfiprintf_r+0x13a>
 800599c:	eba0 0308 	sub.w	r3, r0, r8
 80059a0:	fa09 f303 	lsl.w	r3, r9, r3
 80059a4:	4313      	orrs	r3, r2
 80059a6:	9304      	str	r3, [sp, #16]
 80059a8:	46a2      	mov	sl, r4
 80059aa:	e7d2      	b.n	8005952 <_vfiprintf_r+0xc6>
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	1d19      	adds	r1, r3, #4
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	9103      	str	r1, [sp, #12]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bfbb      	ittet	lt
 80059b8:	425b      	neglt	r3, r3
 80059ba:	f042 0202 	orrlt.w	r2, r2, #2
 80059be:	9307      	strge	r3, [sp, #28]
 80059c0:	9307      	strlt	r3, [sp, #28]
 80059c2:	bfb8      	it	lt
 80059c4:	9204      	strlt	r2, [sp, #16]
 80059c6:	7823      	ldrb	r3, [r4, #0]
 80059c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80059ca:	d10a      	bne.n	80059e2 <_vfiprintf_r+0x156>
 80059cc:	7863      	ldrb	r3, [r4, #1]
 80059ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80059d0:	d132      	bne.n	8005a38 <_vfiprintf_r+0x1ac>
 80059d2:	9b03      	ldr	r3, [sp, #12]
 80059d4:	1d1a      	adds	r2, r3, #4
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	9203      	str	r2, [sp, #12]
 80059da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059de:	3402      	adds	r4, #2
 80059e0:	9305      	str	r3, [sp, #20]
 80059e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ab8 <_vfiprintf_r+0x22c>
 80059e6:	7821      	ldrb	r1, [r4, #0]
 80059e8:	2203      	movs	r2, #3
 80059ea:	4650      	mov	r0, sl
 80059ec:	f7fa fc28 	bl	8000240 <memchr>
 80059f0:	b138      	cbz	r0, 8005a02 <_vfiprintf_r+0x176>
 80059f2:	9b04      	ldr	r3, [sp, #16]
 80059f4:	eba0 000a 	sub.w	r0, r0, sl
 80059f8:	2240      	movs	r2, #64	@ 0x40
 80059fa:	4082      	lsls	r2, r0
 80059fc:	4313      	orrs	r3, r2
 80059fe:	3401      	adds	r4, #1
 8005a00:	9304      	str	r3, [sp, #16]
 8005a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a06:	4829      	ldr	r0, [pc, #164]	@ (8005aac <_vfiprintf_r+0x220>)
 8005a08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a0c:	2206      	movs	r2, #6
 8005a0e:	f7fa fc17 	bl	8000240 <memchr>
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d03f      	beq.n	8005a96 <_vfiprintf_r+0x20a>
 8005a16:	4b26      	ldr	r3, [pc, #152]	@ (8005ab0 <_vfiprintf_r+0x224>)
 8005a18:	bb1b      	cbnz	r3, 8005a62 <_vfiprintf_r+0x1d6>
 8005a1a:	9b03      	ldr	r3, [sp, #12]
 8005a1c:	3307      	adds	r3, #7
 8005a1e:	f023 0307 	bic.w	r3, r3, #7
 8005a22:	3308      	adds	r3, #8
 8005a24:	9303      	str	r3, [sp, #12]
 8005a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a28:	443b      	add	r3, r7
 8005a2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a2c:	e76a      	b.n	8005904 <_vfiprintf_r+0x78>
 8005a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a32:	460c      	mov	r4, r1
 8005a34:	2001      	movs	r0, #1
 8005a36:	e7a8      	b.n	800598a <_vfiprintf_r+0xfe>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	3401      	adds	r4, #1
 8005a3c:	9305      	str	r3, [sp, #20]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	f04f 0c0a 	mov.w	ip, #10
 8005a44:	4620      	mov	r0, r4
 8005a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a4a:	3a30      	subs	r2, #48	@ 0x30
 8005a4c:	2a09      	cmp	r2, #9
 8005a4e:	d903      	bls.n	8005a58 <_vfiprintf_r+0x1cc>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0c6      	beq.n	80059e2 <_vfiprintf_r+0x156>
 8005a54:	9105      	str	r1, [sp, #20]
 8005a56:	e7c4      	b.n	80059e2 <_vfiprintf_r+0x156>
 8005a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e7f0      	b.n	8005a44 <_vfiprintf_r+0x1b8>
 8005a62:	ab03      	add	r3, sp, #12
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	462a      	mov	r2, r5
 8005a68:	4b12      	ldr	r3, [pc, #72]	@ (8005ab4 <_vfiprintf_r+0x228>)
 8005a6a:	a904      	add	r1, sp, #16
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	f3af 8000 	nop.w
 8005a72:	4607      	mov	r7, r0
 8005a74:	1c78      	adds	r0, r7, #1
 8005a76:	d1d6      	bne.n	8005a26 <_vfiprintf_r+0x19a>
 8005a78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a7a:	07d9      	lsls	r1, r3, #31
 8005a7c:	d405      	bmi.n	8005a8a <_vfiprintf_r+0x1fe>
 8005a7e:	89ab      	ldrh	r3, [r5, #12]
 8005a80:	059a      	lsls	r2, r3, #22
 8005a82:	d402      	bmi.n	8005a8a <_vfiprintf_r+0x1fe>
 8005a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a86:	f7ff fc5f 	bl	8005348 <__retarget_lock_release_recursive>
 8005a8a:	89ab      	ldrh	r3, [r5, #12]
 8005a8c:	065b      	lsls	r3, r3, #25
 8005a8e:	f53f af1f 	bmi.w	80058d0 <_vfiprintf_r+0x44>
 8005a92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a94:	e71e      	b.n	80058d4 <_vfiprintf_r+0x48>
 8005a96:	ab03      	add	r3, sp, #12
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	462a      	mov	r2, r5
 8005a9c:	4b05      	ldr	r3, [pc, #20]	@ (8005ab4 <_vfiprintf_r+0x228>)
 8005a9e:	a904      	add	r1, sp, #16
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f000 f879 	bl	8005b98 <_printf_i>
 8005aa6:	e7e4      	b.n	8005a72 <_vfiprintf_r+0x1e6>
 8005aa8:	080065f2 	.word	0x080065f2
 8005aac:	080065fc 	.word	0x080065fc
 8005ab0:	00000000 	.word	0x00000000
 8005ab4:	08005867 	.word	0x08005867
 8005ab8:	080065f8 	.word	0x080065f8

08005abc <_printf_common>:
 8005abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	4616      	mov	r6, r2
 8005ac2:	4698      	mov	r8, r3
 8005ac4:	688a      	ldr	r2, [r1, #8]
 8005ac6:	690b      	ldr	r3, [r1, #16]
 8005ac8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005acc:	4293      	cmp	r3, r2
 8005ace:	bfb8      	it	lt
 8005ad0:	4613      	movlt	r3, r2
 8005ad2:	6033      	str	r3, [r6, #0]
 8005ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ad8:	4607      	mov	r7, r0
 8005ada:	460c      	mov	r4, r1
 8005adc:	b10a      	cbz	r2, 8005ae2 <_printf_common+0x26>
 8005ade:	3301      	adds	r3, #1
 8005ae0:	6033      	str	r3, [r6, #0]
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	0699      	lsls	r1, r3, #26
 8005ae6:	bf42      	ittt	mi
 8005ae8:	6833      	ldrmi	r3, [r6, #0]
 8005aea:	3302      	addmi	r3, #2
 8005aec:	6033      	strmi	r3, [r6, #0]
 8005aee:	6825      	ldr	r5, [r4, #0]
 8005af0:	f015 0506 	ands.w	r5, r5, #6
 8005af4:	d106      	bne.n	8005b04 <_printf_common+0x48>
 8005af6:	f104 0a19 	add.w	sl, r4, #25
 8005afa:	68e3      	ldr	r3, [r4, #12]
 8005afc:	6832      	ldr	r2, [r6, #0]
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	42ab      	cmp	r3, r5
 8005b02:	dc26      	bgt.n	8005b52 <_printf_common+0x96>
 8005b04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b08:	6822      	ldr	r2, [r4, #0]
 8005b0a:	3b00      	subs	r3, #0
 8005b0c:	bf18      	it	ne
 8005b0e:	2301      	movne	r3, #1
 8005b10:	0692      	lsls	r2, r2, #26
 8005b12:	d42b      	bmi.n	8005b6c <_printf_common+0xb0>
 8005b14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b18:	4641      	mov	r1, r8
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	47c8      	blx	r9
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d01e      	beq.n	8005b60 <_printf_common+0xa4>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	6922      	ldr	r2, [r4, #16]
 8005b26:	f003 0306 	and.w	r3, r3, #6
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	bf02      	ittt	eq
 8005b2e:	68e5      	ldreq	r5, [r4, #12]
 8005b30:	6833      	ldreq	r3, [r6, #0]
 8005b32:	1aed      	subeq	r5, r5, r3
 8005b34:	68a3      	ldr	r3, [r4, #8]
 8005b36:	bf0c      	ite	eq
 8005b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b3c:	2500      	movne	r5, #0
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	bfc4      	itt	gt
 8005b42:	1a9b      	subgt	r3, r3, r2
 8005b44:	18ed      	addgt	r5, r5, r3
 8005b46:	2600      	movs	r6, #0
 8005b48:	341a      	adds	r4, #26
 8005b4a:	42b5      	cmp	r5, r6
 8005b4c:	d11a      	bne.n	8005b84 <_printf_common+0xc8>
 8005b4e:	2000      	movs	r0, #0
 8005b50:	e008      	b.n	8005b64 <_printf_common+0xa8>
 8005b52:	2301      	movs	r3, #1
 8005b54:	4652      	mov	r2, sl
 8005b56:	4641      	mov	r1, r8
 8005b58:	4638      	mov	r0, r7
 8005b5a:	47c8      	blx	r9
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d103      	bne.n	8005b68 <_printf_common+0xac>
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b68:	3501      	adds	r5, #1
 8005b6a:	e7c6      	b.n	8005afa <_printf_common+0x3e>
 8005b6c:	18e1      	adds	r1, r4, r3
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	2030      	movs	r0, #48	@ 0x30
 8005b72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b76:	4422      	add	r2, r4
 8005b78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b80:	3302      	adds	r3, #2
 8005b82:	e7c7      	b.n	8005b14 <_printf_common+0x58>
 8005b84:	2301      	movs	r3, #1
 8005b86:	4622      	mov	r2, r4
 8005b88:	4641      	mov	r1, r8
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	47c8      	blx	r9
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d0e6      	beq.n	8005b60 <_printf_common+0xa4>
 8005b92:	3601      	adds	r6, #1
 8005b94:	e7d9      	b.n	8005b4a <_printf_common+0x8e>
	...

08005b98 <_printf_i>:
 8005b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b9c:	7e0f      	ldrb	r7, [r1, #24]
 8005b9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ba0:	2f78      	cmp	r7, #120	@ 0x78
 8005ba2:	4691      	mov	r9, r2
 8005ba4:	4680      	mov	r8, r0
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	469a      	mov	sl, r3
 8005baa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bae:	d807      	bhi.n	8005bc0 <_printf_i+0x28>
 8005bb0:	2f62      	cmp	r7, #98	@ 0x62
 8005bb2:	d80a      	bhi.n	8005bca <_printf_i+0x32>
 8005bb4:	2f00      	cmp	r7, #0
 8005bb6:	f000 80d2 	beq.w	8005d5e <_printf_i+0x1c6>
 8005bba:	2f58      	cmp	r7, #88	@ 0x58
 8005bbc:	f000 80b9 	beq.w	8005d32 <_printf_i+0x19a>
 8005bc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005bc8:	e03a      	b.n	8005c40 <_printf_i+0xa8>
 8005bca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bce:	2b15      	cmp	r3, #21
 8005bd0:	d8f6      	bhi.n	8005bc0 <_printf_i+0x28>
 8005bd2:	a101      	add	r1, pc, #4	@ (adr r1, 8005bd8 <_printf_i+0x40>)
 8005bd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bd8:	08005c31 	.word	0x08005c31
 8005bdc:	08005c45 	.word	0x08005c45
 8005be0:	08005bc1 	.word	0x08005bc1
 8005be4:	08005bc1 	.word	0x08005bc1
 8005be8:	08005bc1 	.word	0x08005bc1
 8005bec:	08005bc1 	.word	0x08005bc1
 8005bf0:	08005c45 	.word	0x08005c45
 8005bf4:	08005bc1 	.word	0x08005bc1
 8005bf8:	08005bc1 	.word	0x08005bc1
 8005bfc:	08005bc1 	.word	0x08005bc1
 8005c00:	08005bc1 	.word	0x08005bc1
 8005c04:	08005d45 	.word	0x08005d45
 8005c08:	08005c6f 	.word	0x08005c6f
 8005c0c:	08005cff 	.word	0x08005cff
 8005c10:	08005bc1 	.word	0x08005bc1
 8005c14:	08005bc1 	.word	0x08005bc1
 8005c18:	08005d67 	.word	0x08005d67
 8005c1c:	08005bc1 	.word	0x08005bc1
 8005c20:	08005c6f 	.word	0x08005c6f
 8005c24:	08005bc1 	.word	0x08005bc1
 8005c28:	08005bc1 	.word	0x08005bc1
 8005c2c:	08005d07 	.word	0x08005d07
 8005c30:	6833      	ldr	r3, [r6, #0]
 8005c32:	1d1a      	adds	r2, r3, #4
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6032      	str	r2, [r6, #0]
 8005c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c40:	2301      	movs	r3, #1
 8005c42:	e09d      	b.n	8005d80 <_printf_i+0x1e8>
 8005c44:	6833      	ldr	r3, [r6, #0]
 8005c46:	6820      	ldr	r0, [r4, #0]
 8005c48:	1d19      	adds	r1, r3, #4
 8005c4a:	6031      	str	r1, [r6, #0]
 8005c4c:	0606      	lsls	r6, r0, #24
 8005c4e:	d501      	bpl.n	8005c54 <_printf_i+0xbc>
 8005c50:	681d      	ldr	r5, [r3, #0]
 8005c52:	e003      	b.n	8005c5c <_printf_i+0xc4>
 8005c54:	0645      	lsls	r5, r0, #25
 8005c56:	d5fb      	bpl.n	8005c50 <_printf_i+0xb8>
 8005c58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c5c:	2d00      	cmp	r5, #0
 8005c5e:	da03      	bge.n	8005c68 <_printf_i+0xd0>
 8005c60:	232d      	movs	r3, #45	@ 0x2d
 8005c62:	426d      	negs	r5, r5
 8005c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c68:	4859      	ldr	r0, [pc, #356]	@ (8005dd0 <_printf_i+0x238>)
 8005c6a:	230a      	movs	r3, #10
 8005c6c:	e011      	b.n	8005c92 <_printf_i+0xfa>
 8005c6e:	6821      	ldr	r1, [r4, #0]
 8005c70:	6833      	ldr	r3, [r6, #0]
 8005c72:	0608      	lsls	r0, r1, #24
 8005c74:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c78:	d402      	bmi.n	8005c80 <_printf_i+0xe8>
 8005c7a:	0649      	lsls	r1, r1, #25
 8005c7c:	bf48      	it	mi
 8005c7e:	b2ad      	uxthmi	r5, r5
 8005c80:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c82:	4853      	ldr	r0, [pc, #332]	@ (8005dd0 <_printf_i+0x238>)
 8005c84:	6033      	str	r3, [r6, #0]
 8005c86:	bf14      	ite	ne
 8005c88:	230a      	movne	r3, #10
 8005c8a:	2308      	moveq	r3, #8
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c92:	6866      	ldr	r6, [r4, #4]
 8005c94:	60a6      	str	r6, [r4, #8]
 8005c96:	2e00      	cmp	r6, #0
 8005c98:	bfa2      	ittt	ge
 8005c9a:	6821      	ldrge	r1, [r4, #0]
 8005c9c:	f021 0104 	bicge.w	r1, r1, #4
 8005ca0:	6021      	strge	r1, [r4, #0]
 8005ca2:	b90d      	cbnz	r5, 8005ca8 <_printf_i+0x110>
 8005ca4:	2e00      	cmp	r6, #0
 8005ca6:	d04b      	beq.n	8005d40 <_printf_i+0x1a8>
 8005ca8:	4616      	mov	r6, r2
 8005caa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cae:	fb03 5711 	mls	r7, r3, r1, r5
 8005cb2:	5dc7      	ldrb	r7, [r0, r7]
 8005cb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cb8:	462f      	mov	r7, r5
 8005cba:	42bb      	cmp	r3, r7
 8005cbc:	460d      	mov	r5, r1
 8005cbe:	d9f4      	bls.n	8005caa <_printf_i+0x112>
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d10b      	bne.n	8005cdc <_printf_i+0x144>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	07df      	lsls	r7, r3, #31
 8005cc8:	d508      	bpl.n	8005cdc <_printf_i+0x144>
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	6861      	ldr	r1, [r4, #4]
 8005cce:	4299      	cmp	r1, r3
 8005cd0:	bfde      	ittt	le
 8005cd2:	2330      	movle	r3, #48	@ 0x30
 8005cd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cd8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005cdc:	1b92      	subs	r2, r2, r6
 8005cde:	6122      	str	r2, [r4, #16]
 8005ce0:	f8cd a000 	str.w	sl, [sp]
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	aa03      	add	r2, sp, #12
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4640      	mov	r0, r8
 8005cec:	f7ff fee6 	bl	8005abc <_printf_common>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d14a      	bne.n	8005d8a <_printf_i+0x1f2>
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cf8:	b004      	add	sp, #16
 8005cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	f043 0320 	orr.w	r3, r3, #32
 8005d04:	6023      	str	r3, [r4, #0]
 8005d06:	4833      	ldr	r0, [pc, #204]	@ (8005dd4 <_printf_i+0x23c>)
 8005d08:	2778      	movs	r7, #120	@ 0x78
 8005d0a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	6831      	ldr	r1, [r6, #0]
 8005d12:	061f      	lsls	r7, r3, #24
 8005d14:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d18:	d402      	bmi.n	8005d20 <_printf_i+0x188>
 8005d1a:	065f      	lsls	r7, r3, #25
 8005d1c:	bf48      	it	mi
 8005d1e:	b2ad      	uxthmi	r5, r5
 8005d20:	6031      	str	r1, [r6, #0]
 8005d22:	07d9      	lsls	r1, r3, #31
 8005d24:	bf44      	itt	mi
 8005d26:	f043 0320 	orrmi.w	r3, r3, #32
 8005d2a:	6023      	strmi	r3, [r4, #0]
 8005d2c:	b11d      	cbz	r5, 8005d36 <_printf_i+0x19e>
 8005d2e:	2310      	movs	r3, #16
 8005d30:	e7ac      	b.n	8005c8c <_printf_i+0xf4>
 8005d32:	4827      	ldr	r0, [pc, #156]	@ (8005dd0 <_printf_i+0x238>)
 8005d34:	e7e9      	b.n	8005d0a <_printf_i+0x172>
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	f023 0320 	bic.w	r3, r3, #32
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	e7f6      	b.n	8005d2e <_printf_i+0x196>
 8005d40:	4616      	mov	r6, r2
 8005d42:	e7bd      	b.n	8005cc0 <_printf_i+0x128>
 8005d44:	6833      	ldr	r3, [r6, #0]
 8005d46:	6825      	ldr	r5, [r4, #0]
 8005d48:	6961      	ldr	r1, [r4, #20]
 8005d4a:	1d18      	adds	r0, r3, #4
 8005d4c:	6030      	str	r0, [r6, #0]
 8005d4e:	062e      	lsls	r6, r5, #24
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	d501      	bpl.n	8005d58 <_printf_i+0x1c0>
 8005d54:	6019      	str	r1, [r3, #0]
 8005d56:	e002      	b.n	8005d5e <_printf_i+0x1c6>
 8005d58:	0668      	lsls	r0, r5, #25
 8005d5a:	d5fb      	bpl.n	8005d54 <_printf_i+0x1bc>
 8005d5c:	8019      	strh	r1, [r3, #0]
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6123      	str	r3, [r4, #16]
 8005d62:	4616      	mov	r6, r2
 8005d64:	e7bc      	b.n	8005ce0 <_printf_i+0x148>
 8005d66:	6833      	ldr	r3, [r6, #0]
 8005d68:	1d1a      	adds	r2, r3, #4
 8005d6a:	6032      	str	r2, [r6, #0]
 8005d6c:	681e      	ldr	r6, [r3, #0]
 8005d6e:	6862      	ldr	r2, [r4, #4]
 8005d70:	2100      	movs	r1, #0
 8005d72:	4630      	mov	r0, r6
 8005d74:	f7fa fa64 	bl	8000240 <memchr>
 8005d78:	b108      	cbz	r0, 8005d7e <_printf_i+0x1e6>
 8005d7a:	1b80      	subs	r0, r0, r6
 8005d7c:	6060      	str	r0, [r4, #4]
 8005d7e:	6863      	ldr	r3, [r4, #4]
 8005d80:	6123      	str	r3, [r4, #16]
 8005d82:	2300      	movs	r3, #0
 8005d84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d88:	e7aa      	b.n	8005ce0 <_printf_i+0x148>
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	4649      	mov	r1, r9
 8005d90:	4640      	mov	r0, r8
 8005d92:	47d0      	blx	sl
 8005d94:	3001      	adds	r0, #1
 8005d96:	d0ad      	beq.n	8005cf4 <_printf_i+0x15c>
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	079b      	lsls	r3, r3, #30
 8005d9c:	d413      	bmi.n	8005dc6 <_printf_i+0x22e>
 8005d9e:	68e0      	ldr	r0, [r4, #12]
 8005da0:	9b03      	ldr	r3, [sp, #12]
 8005da2:	4298      	cmp	r0, r3
 8005da4:	bfb8      	it	lt
 8005da6:	4618      	movlt	r0, r3
 8005da8:	e7a6      	b.n	8005cf8 <_printf_i+0x160>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4632      	mov	r2, r6
 8005dae:	4649      	mov	r1, r9
 8005db0:	4640      	mov	r0, r8
 8005db2:	47d0      	blx	sl
 8005db4:	3001      	adds	r0, #1
 8005db6:	d09d      	beq.n	8005cf4 <_printf_i+0x15c>
 8005db8:	3501      	adds	r5, #1
 8005dba:	68e3      	ldr	r3, [r4, #12]
 8005dbc:	9903      	ldr	r1, [sp, #12]
 8005dbe:	1a5b      	subs	r3, r3, r1
 8005dc0:	42ab      	cmp	r3, r5
 8005dc2:	dcf2      	bgt.n	8005daa <_printf_i+0x212>
 8005dc4:	e7eb      	b.n	8005d9e <_printf_i+0x206>
 8005dc6:	2500      	movs	r5, #0
 8005dc8:	f104 0619 	add.w	r6, r4, #25
 8005dcc:	e7f5      	b.n	8005dba <_printf_i+0x222>
 8005dce:	bf00      	nop
 8005dd0:	08006603 	.word	0x08006603
 8005dd4:	08006614 	.word	0x08006614

08005dd8 <__sflush_r>:
 8005dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de0:	0716      	lsls	r6, r2, #28
 8005de2:	4605      	mov	r5, r0
 8005de4:	460c      	mov	r4, r1
 8005de6:	d454      	bmi.n	8005e92 <__sflush_r+0xba>
 8005de8:	684b      	ldr	r3, [r1, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dc02      	bgt.n	8005df4 <__sflush_r+0x1c>
 8005dee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	dd48      	ble.n	8005e86 <__sflush_r+0xae>
 8005df4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005df6:	2e00      	cmp	r6, #0
 8005df8:	d045      	beq.n	8005e86 <__sflush_r+0xae>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e00:	682f      	ldr	r7, [r5, #0]
 8005e02:	6a21      	ldr	r1, [r4, #32]
 8005e04:	602b      	str	r3, [r5, #0]
 8005e06:	d030      	beq.n	8005e6a <__sflush_r+0x92>
 8005e08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e0a:	89a3      	ldrh	r3, [r4, #12]
 8005e0c:	0759      	lsls	r1, r3, #29
 8005e0e:	d505      	bpl.n	8005e1c <__sflush_r+0x44>
 8005e10:	6863      	ldr	r3, [r4, #4]
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e16:	b10b      	cbz	r3, 8005e1c <__sflush_r+0x44>
 8005e18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e1a:	1ad2      	subs	r2, r2, r3
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e20:	6a21      	ldr	r1, [r4, #32]
 8005e22:	4628      	mov	r0, r5
 8005e24:	47b0      	blx	r6
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	d106      	bne.n	8005e3a <__sflush_r+0x62>
 8005e2c:	6829      	ldr	r1, [r5, #0]
 8005e2e:	291d      	cmp	r1, #29
 8005e30:	d82b      	bhi.n	8005e8a <__sflush_r+0xb2>
 8005e32:	4a2a      	ldr	r2, [pc, #168]	@ (8005edc <__sflush_r+0x104>)
 8005e34:	410a      	asrs	r2, r1
 8005e36:	07d6      	lsls	r6, r2, #31
 8005e38:	d427      	bmi.n	8005e8a <__sflush_r+0xb2>
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	6062      	str	r2, [r4, #4]
 8005e3e:	04d9      	lsls	r1, r3, #19
 8005e40:	6922      	ldr	r2, [r4, #16]
 8005e42:	6022      	str	r2, [r4, #0]
 8005e44:	d504      	bpl.n	8005e50 <__sflush_r+0x78>
 8005e46:	1c42      	adds	r2, r0, #1
 8005e48:	d101      	bne.n	8005e4e <__sflush_r+0x76>
 8005e4a:	682b      	ldr	r3, [r5, #0]
 8005e4c:	b903      	cbnz	r3, 8005e50 <__sflush_r+0x78>
 8005e4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e52:	602f      	str	r7, [r5, #0]
 8005e54:	b1b9      	cbz	r1, 8005e86 <__sflush_r+0xae>
 8005e56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	d002      	beq.n	8005e64 <__sflush_r+0x8c>
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f7ff fa92 	bl	8005388 <_free_r>
 8005e64:	2300      	movs	r3, #0
 8005e66:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e68:	e00d      	b.n	8005e86 <__sflush_r+0xae>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b0      	blx	r6
 8005e70:	4602      	mov	r2, r0
 8005e72:	1c50      	adds	r0, r2, #1
 8005e74:	d1c9      	bne.n	8005e0a <__sflush_r+0x32>
 8005e76:	682b      	ldr	r3, [r5, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0c6      	beq.n	8005e0a <__sflush_r+0x32>
 8005e7c:	2b1d      	cmp	r3, #29
 8005e7e:	d001      	beq.n	8005e84 <__sflush_r+0xac>
 8005e80:	2b16      	cmp	r3, #22
 8005e82:	d11e      	bne.n	8005ec2 <__sflush_r+0xea>
 8005e84:	602f      	str	r7, [r5, #0]
 8005e86:	2000      	movs	r0, #0
 8005e88:	e022      	b.n	8005ed0 <__sflush_r+0xf8>
 8005e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e8e:	b21b      	sxth	r3, r3
 8005e90:	e01b      	b.n	8005eca <__sflush_r+0xf2>
 8005e92:	690f      	ldr	r7, [r1, #16]
 8005e94:	2f00      	cmp	r7, #0
 8005e96:	d0f6      	beq.n	8005e86 <__sflush_r+0xae>
 8005e98:	0793      	lsls	r3, r2, #30
 8005e9a:	680e      	ldr	r6, [r1, #0]
 8005e9c:	bf08      	it	eq
 8005e9e:	694b      	ldreq	r3, [r1, #20]
 8005ea0:	600f      	str	r7, [r1, #0]
 8005ea2:	bf18      	it	ne
 8005ea4:	2300      	movne	r3, #0
 8005ea6:	eba6 0807 	sub.w	r8, r6, r7
 8005eaa:	608b      	str	r3, [r1, #8]
 8005eac:	f1b8 0f00 	cmp.w	r8, #0
 8005eb0:	dde9      	ble.n	8005e86 <__sflush_r+0xae>
 8005eb2:	6a21      	ldr	r1, [r4, #32]
 8005eb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005eb6:	4643      	mov	r3, r8
 8005eb8:	463a      	mov	r2, r7
 8005eba:	4628      	mov	r0, r5
 8005ebc:	47b0      	blx	r6
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	dc08      	bgt.n	8005ed4 <__sflush_r+0xfc>
 8005ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eca:	81a3      	strh	r3, [r4, #12]
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed4:	4407      	add	r7, r0
 8005ed6:	eba8 0800 	sub.w	r8, r8, r0
 8005eda:	e7e7      	b.n	8005eac <__sflush_r+0xd4>
 8005edc:	dfbffffe 	.word	0xdfbffffe

08005ee0 <_fflush_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	690b      	ldr	r3, [r1, #16]
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	b913      	cbnz	r3, 8005ef0 <_fflush_r+0x10>
 8005eea:	2500      	movs	r5, #0
 8005eec:	4628      	mov	r0, r5
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	b118      	cbz	r0, 8005efa <_fflush_r+0x1a>
 8005ef2:	6a03      	ldr	r3, [r0, #32]
 8005ef4:	b90b      	cbnz	r3, 8005efa <_fflush_r+0x1a>
 8005ef6:	f7ff f891 	bl	800501c <__sinit>
 8005efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f3      	beq.n	8005eea <_fflush_r+0xa>
 8005f02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f04:	07d0      	lsls	r0, r2, #31
 8005f06:	d404      	bmi.n	8005f12 <_fflush_r+0x32>
 8005f08:	0599      	lsls	r1, r3, #22
 8005f0a:	d402      	bmi.n	8005f12 <_fflush_r+0x32>
 8005f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f0e:	f7ff fa1a 	bl	8005346 <__retarget_lock_acquire_recursive>
 8005f12:	4628      	mov	r0, r5
 8005f14:	4621      	mov	r1, r4
 8005f16:	f7ff ff5f 	bl	8005dd8 <__sflush_r>
 8005f1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f1c:	07da      	lsls	r2, r3, #31
 8005f1e:	4605      	mov	r5, r0
 8005f20:	d4e4      	bmi.n	8005eec <_fflush_r+0xc>
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	059b      	lsls	r3, r3, #22
 8005f26:	d4e1      	bmi.n	8005eec <_fflush_r+0xc>
 8005f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f2a:	f7ff fa0d 	bl	8005348 <__retarget_lock_release_recursive>
 8005f2e:	e7dd      	b.n	8005eec <_fflush_r+0xc>

08005f30 <fiprintf>:
 8005f30:	b40e      	push	{r1, r2, r3}
 8005f32:	b503      	push	{r0, r1, lr}
 8005f34:	4601      	mov	r1, r0
 8005f36:	ab03      	add	r3, sp, #12
 8005f38:	4805      	ldr	r0, [pc, #20]	@ (8005f50 <fiprintf+0x20>)
 8005f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f3e:	6800      	ldr	r0, [r0, #0]
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	f7ff fca3 	bl	800588c <_vfiprintf_r>
 8005f46:	b002      	add	sp, #8
 8005f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f4c:	b003      	add	sp, #12
 8005f4e:	4770      	bx	lr
 8005f50:	200000c8 	.word	0x200000c8

08005f54 <__swbuf_r>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	460e      	mov	r6, r1
 8005f58:	4614      	mov	r4, r2
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	b118      	cbz	r0, 8005f66 <__swbuf_r+0x12>
 8005f5e:	6a03      	ldr	r3, [r0, #32]
 8005f60:	b90b      	cbnz	r3, 8005f66 <__swbuf_r+0x12>
 8005f62:	f7ff f85b 	bl	800501c <__sinit>
 8005f66:	69a3      	ldr	r3, [r4, #24]
 8005f68:	60a3      	str	r3, [r4, #8]
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	071a      	lsls	r2, r3, #28
 8005f6e:	d501      	bpl.n	8005f74 <__swbuf_r+0x20>
 8005f70:	6923      	ldr	r3, [r4, #16]
 8005f72:	b943      	cbnz	r3, 8005f86 <__swbuf_r+0x32>
 8005f74:	4621      	mov	r1, r4
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 f82a 	bl	8005fd0 <__swsetup_r>
 8005f7c:	b118      	cbz	r0, 8005f86 <__swbuf_r+0x32>
 8005f7e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005f82:	4638      	mov	r0, r7
 8005f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f86:	6823      	ldr	r3, [r4, #0]
 8005f88:	6922      	ldr	r2, [r4, #16]
 8005f8a:	1a98      	subs	r0, r3, r2
 8005f8c:	6963      	ldr	r3, [r4, #20]
 8005f8e:	b2f6      	uxtb	r6, r6
 8005f90:	4283      	cmp	r3, r0
 8005f92:	4637      	mov	r7, r6
 8005f94:	dc05      	bgt.n	8005fa2 <__swbuf_r+0x4e>
 8005f96:	4621      	mov	r1, r4
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f7ff ffa1 	bl	8005ee0 <_fflush_r>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d1ed      	bne.n	8005f7e <__swbuf_r+0x2a>
 8005fa2:	68a3      	ldr	r3, [r4, #8]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	60a3      	str	r3, [r4, #8]
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	6022      	str	r2, [r4, #0]
 8005fae:	701e      	strb	r6, [r3, #0]
 8005fb0:	6962      	ldr	r2, [r4, #20]
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d004      	beq.n	8005fc2 <__swbuf_r+0x6e>
 8005fb8:	89a3      	ldrh	r3, [r4, #12]
 8005fba:	07db      	lsls	r3, r3, #31
 8005fbc:	d5e1      	bpl.n	8005f82 <__swbuf_r+0x2e>
 8005fbe:	2e0a      	cmp	r6, #10
 8005fc0:	d1df      	bne.n	8005f82 <__swbuf_r+0x2e>
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f7ff ff8b 	bl	8005ee0 <_fflush_r>
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d0d9      	beq.n	8005f82 <__swbuf_r+0x2e>
 8005fce:	e7d6      	b.n	8005f7e <__swbuf_r+0x2a>

08005fd0 <__swsetup_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4b29      	ldr	r3, [pc, #164]	@ (8006078 <__swsetup_r+0xa8>)
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	460c      	mov	r4, r1
 8005fda:	b118      	cbz	r0, 8005fe4 <__swsetup_r+0x14>
 8005fdc:	6a03      	ldr	r3, [r0, #32]
 8005fde:	b90b      	cbnz	r3, 8005fe4 <__swsetup_r+0x14>
 8005fe0:	f7ff f81c 	bl	800501c <__sinit>
 8005fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fe8:	0719      	lsls	r1, r3, #28
 8005fea:	d422      	bmi.n	8006032 <__swsetup_r+0x62>
 8005fec:	06da      	lsls	r2, r3, #27
 8005fee:	d407      	bmi.n	8006000 <__swsetup_r+0x30>
 8005ff0:	2209      	movs	r2, #9
 8005ff2:	602a      	str	r2, [r5, #0]
 8005ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ff8:	81a3      	strh	r3, [r4, #12]
 8005ffa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ffe:	e033      	b.n	8006068 <__swsetup_r+0x98>
 8006000:	0758      	lsls	r0, r3, #29
 8006002:	d512      	bpl.n	800602a <__swsetup_r+0x5a>
 8006004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006006:	b141      	cbz	r1, 800601a <__swsetup_r+0x4a>
 8006008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800600c:	4299      	cmp	r1, r3
 800600e:	d002      	beq.n	8006016 <__swsetup_r+0x46>
 8006010:	4628      	mov	r0, r5
 8006012:	f7ff f9b9 	bl	8005388 <_free_r>
 8006016:	2300      	movs	r3, #0
 8006018:	6363      	str	r3, [r4, #52]	@ 0x34
 800601a:	89a3      	ldrh	r3, [r4, #12]
 800601c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006020:	81a3      	strh	r3, [r4, #12]
 8006022:	2300      	movs	r3, #0
 8006024:	6063      	str	r3, [r4, #4]
 8006026:	6923      	ldr	r3, [r4, #16]
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	f043 0308 	orr.w	r3, r3, #8
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	b94b      	cbnz	r3, 800604a <__swsetup_r+0x7a>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800603c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006040:	d003      	beq.n	800604a <__swsetup_r+0x7a>
 8006042:	4621      	mov	r1, r4
 8006044:	4628      	mov	r0, r5
 8006046:	f000 f8ac 	bl	80061a2 <__smakebuf_r>
 800604a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800604e:	f013 0201 	ands.w	r2, r3, #1
 8006052:	d00a      	beq.n	800606a <__swsetup_r+0x9a>
 8006054:	2200      	movs	r2, #0
 8006056:	60a2      	str	r2, [r4, #8]
 8006058:	6962      	ldr	r2, [r4, #20]
 800605a:	4252      	negs	r2, r2
 800605c:	61a2      	str	r2, [r4, #24]
 800605e:	6922      	ldr	r2, [r4, #16]
 8006060:	b942      	cbnz	r2, 8006074 <__swsetup_r+0xa4>
 8006062:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006066:	d1c5      	bne.n	8005ff4 <__swsetup_r+0x24>
 8006068:	bd38      	pop	{r3, r4, r5, pc}
 800606a:	0799      	lsls	r1, r3, #30
 800606c:	bf58      	it	pl
 800606e:	6962      	ldrpl	r2, [r4, #20]
 8006070:	60a2      	str	r2, [r4, #8]
 8006072:	e7f4      	b.n	800605e <__swsetup_r+0x8e>
 8006074:	2000      	movs	r0, #0
 8006076:	e7f7      	b.n	8006068 <__swsetup_r+0x98>
 8006078:	200000c8 	.word	0x200000c8

0800607c <memmove>:
 800607c:	4288      	cmp	r0, r1
 800607e:	b510      	push	{r4, lr}
 8006080:	eb01 0402 	add.w	r4, r1, r2
 8006084:	d902      	bls.n	800608c <memmove+0x10>
 8006086:	4284      	cmp	r4, r0
 8006088:	4623      	mov	r3, r4
 800608a:	d807      	bhi.n	800609c <memmove+0x20>
 800608c:	1e43      	subs	r3, r0, #1
 800608e:	42a1      	cmp	r1, r4
 8006090:	d008      	beq.n	80060a4 <memmove+0x28>
 8006092:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800609a:	e7f8      	b.n	800608e <memmove+0x12>
 800609c:	4402      	add	r2, r0
 800609e:	4601      	mov	r1, r0
 80060a0:	428a      	cmp	r2, r1
 80060a2:	d100      	bne.n	80060a6 <memmove+0x2a>
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060ae:	e7f7      	b.n	80060a0 <memmove+0x24>

080060b0 <_sbrk_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d06      	ldr	r5, [pc, #24]	@ (80060cc <_sbrk_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	f7fb f8ea 	bl	8001294 <_sbrk>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_sbrk_r+0x1a>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_sbrk_r+0x1a>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20000468 	.word	0x20000468

080060d0 <memcpy>:
 80060d0:	440a      	add	r2, r1
 80060d2:	4291      	cmp	r1, r2
 80060d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80060d8:	d100      	bne.n	80060dc <memcpy+0xc>
 80060da:	4770      	bx	lr
 80060dc:	b510      	push	{r4, lr}
 80060de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e6:	4291      	cmp	r1, r2
 80060e8:	d1f9      	bne.n	80060de <memcpy+0xe>
 80060ea:	bd10      	pop	{r4, pc}

080060ec <abort>:
 80060ec:	b508      	push	{r3, lr}
 80060ee:	2006      	movs	r0, #6
 80060f0:	f000 f8bc 	bl	800626c <raise>
 80060f4:	2001      	movs	r0, #1
 80060f6:	f7fb f855 	bl	80011a4 <_exit>

080060fa <_realloc_r>:
 80060fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060fe:	4680      	mov	r8, r0
 8006100:	4615      	mov	r5, r2
 8006102:	460c      	mov	r4, r1
 8006104:	b921      	cbnz	r1, 8006110 <_realloc_r+0x16>
 8006106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800610a:	4611      	mov	r1, r2
 800610c:	f7ff b9b0 	b.w	8005470 <_malloc_r>
 8006110:	b92a      	cbnz	r2, 800611e <_realloc_r+0x24>
 8006112:	f7ff f939 	bl	8005388 <_free_r>
 8006116:	2400      	movs	r4, #0
 8006118:	4620      	mov	r0, r4
 800611a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800611e:	f000 f8e3 	bl	80062e8 <_malloc_usable_size_r>
 8006122:	4285      	cmp	r5, r0
 8006124:	4606      	mov	r6, r0
 8006126:	d802      	bhi.n	800612e <_realloc_r+0x34>
 8006128:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800612c:	d8f4      	bhi.n	8006118 <_realloc_r+0x1e>
 800612e:	4629      	mov	r1, r5
 8006130:	4640      	mov	r0, r8
 8006132:	f7ff f99d 	bl	8005470 <_malloc_r>
 8006136:	4607      	mov	r7, r0
 8006138:	2800      	cmp	r0, #0
 800613a:	d0ec      	beq.n	8006116 <_realloc_r+0x1c>
 800613c:	42b5      	cmp	r5, r6
 800613e:	462a      	mov	r2, r5
 8006140:	4621      	mov	r1, r4
 8006142:	bf28      	it	cs
 8006144:	4632      	movcs	r2, r6
 8006146:	f7ff ffc3 	bl	80060d0 <memcpy>
 800614a:	4621      	mov	r1, r4
 800614c:	4640      	mov	r0, r8
 800614e:	f7ff f91b 	bl	8005388 <_free_r>
 8006152:	463c      	mov	r4, r7
 8006154:	e7e0      	b.n	8006118 <_realloc_r+0x1e>

08006156 <__swhatbuf_r>:
 8006156:	b570      	push	{r4, r5, r6, lr}
 8006158:	460c      	mov	r4, r1
 800615a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800615e:	2900      	cmp	r1, #0
 8006160:	b096      	sub	sp, #88	@ 0x58
 8006162:	4615      	mov	r5, r2
 8006164:	461e      	mov	r6, r3
 8006166:	da0d      	bge.n	8006184 <__swhatbuf_r+0x2e>
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800616e:	f04f 0100 	mov.w	r1, #0
 8006172:	bf14      	ite	ne
 8006174:	2340      	movne	r3, #64	@ 0x40
 8006176:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800617a:	2000      	movs	r0, #0
 800617c:	6031      	str	r1, [r6, #0]
 800617e:	602b      	str	r3, [r5, #0]
 8006180:	b016      	add	sp, #88	@ 0x58
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	466a      	mov	r2, sp
 8006186:	f000 f879 	bl	800627c <_fstat_r>
 800618a:	2800      	cmp	r0, #0
 800618c:	dbec      	blt.n	8006168 <__swhatbuf_r+0x12>
 800618e:	9901      	ldr	r1, [sp, #4]
 8006190:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006194:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006198:	4259      	negs	r1, r3
 800619a:	4159      	adcs	r1, r3
 800619c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061a0:	e7eb      	b.n	800617a <__swhatbuf_r+0x24>

080061a2 <__smakebuf_r>:
 80061a2:	898b      	ldrh	r3, [r1, #12]
 80061a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061a6:	079d      	lsls	r5, r3, #30
 80061a8:	4606      	mov	r6, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	d507      	bpl.n	80061be <__smakebuf_r+0x1c>
 80061ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	2301      	movs	r3, #1
 80061b8:	6163      	str	r3, [r4, #20]
 80061ba:	b003      	add	sp, #12
 80061bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061be:	ab01      	add	r3, sp, #4
 80061c0:	466a      	mov	r2, sp
 80061c2:	f7ff ffc8 	bl	8006156 <__swhatbuf_r>
 80061c6:	9f00      	ldr	r7, [sp, #0]
 80061c8:	4605      	mov	r5, r0
 80061ca:	4639      	mov	r1, r7
 80061cc:	4630      	mov	r0, r6
 80061ce:	f7ff f94f 	bl	8005470 <_malloc_r>
 80061d2:	b948      	cbnz	r0, 80061e8 <__smakebuf_r+0x46>
 80061d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061d8:	059a      	lsls	r2, r3, #22
 80061da:	d4ee      	bmi.n	80061ba <__smakebuf_r+0x18>
 80061dc:	f023 0303 	bic.w	r3, r3, #3
 80061e0:	f043 0302 	orr.w	r3, r3, #2
 80061e4:	81a3      	strh	r3, [r4, #12]
 80061e6:	e7e2      	b.n	80061ae <__smakebuf_r+0xc>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	6020      	str	r0, [r4, #0]
 80061ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	9b01      	ldr	r3, [sp, #4]
 80061f4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80061f8:	b15b      	cbz	r3, 8006212 <__smakebuf_r+0x70>
 80061fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061fe:	4630      	mov	r0, r6
 8006200:	f000 f84e 	bl	80062a0 <_isatty_r>
 8006204:	b128      	cbz	r0, 8006212 <__smakebuf_r+0x70>
 8006206:	89a3      	ldrh	r3, [r4, #12]
 8006208:	f023 0303 	bic.w	r3, r3, #3
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	81a3      	strh	r3, [r4, #12]
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	431d      	orrs	r5, r3
 8006216:	81a5      	strh	r5, [r4, #12]
 8006218:	e7cf      	b.n	80061ba <__smakebuf_r+0x18>

0800621a <_raise_r>:
 800621a:	291f      	cmp	r1, #31
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	4605      	mov	r5, r0
 8006220:	460c      	mov	r4, r1
 8006222:	d904      	bls.n	800622e <_raise_r+0x14>
 8006224:	2316      	movs	r3, #22
 8006226:	6003      	str	r3, [r0, #0]
 8006228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800622c:	bd38      	pop	{r3, r4, r5, pc}
 800622e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006230:	b112      	cbz	r2, 8006238 <_raise_r+0x1e>
 8006232:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006236:	b94b      	cbnz	r3, 800624c <_raise_r+0x32>
 8006238:	4628      	mov	r0, r5
 800623a:	f000 f853 	bl	80062e4 <_getpid_r>
 800623e:	4622      	mov	r2, r4
 8006240:	4601      	mov	r1, r0
 8006242:	4628      	mov	r0, r5
 8006244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006248:	f000 b83a 	b.w	80062c0 <_kill_r>
 800624c:	2b01      	cmp	r3, #1
 800624e:	d00a      	beq.n	8006266 <_raise_r+0x4c>
 8006250:	1c59      	adds	r1, r3, #1
 8006252:	d103      	bne.n	800625c <_raise_r+0x42>
 8006254:	2316      	movs	r3, #22
 8006256:	6003      	str	r3, [r0, #0]
 8006258:	2001      	movs	r0, #1
 800625a:	e7e7      	b.n	800622c <_raise_r+0x12>
 800625c:	2100      	movs	r1, #0
 800625e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006262:	4620      	mov	r0, r4
 8006264:	4798      	blx	r3
 8006266:	2000      	movs	r0, #0
 8006268:	e7e0      	b.n	800622c <_raise_r+0x12>
	...

0800626c <raise>:
 800626c:	4b02      	ldr	r3, [pc, #8]	@ (8006278 <raise+0xc>)
 800626e:	4601      	mov	r1, r0
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	f7ff bfd2 	b.w	800621a <_raise_r>
 8006276:	bf00      	nop
 8006278:	200000c8 	.word	0x200000c8

0800627c <_fstat_r>:
 800627c:	b538      	push	{r3, r4, r5, lr}
 800627e:	4d07      	ldr	r5, [pc, #28]	@ (800629c <_fstat_r+0x20>)
 8006280:	2300      	movs	r3, #0
 8006282:	4604      	mov	r4, r0
 8006284:	4608      	mov	r0, r1
 8006286:	4611      	mov	r1, r2
 8006288:	602b      	str	r3, [r5, #0]
 800628a:	f7fa ffdb 	bl	8001244 <_fstat>
 800628e:	1c43      	adds	r3, r0, #1
 8006290:	d102      	bne.n	8006298 <_fstat_r+0x1c>
 8006292:	682b      	ldr	r3, [r5, #0]
 8006294:	b103      	cbz	r3, 8006298 <_fstat_r+0x1c>
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	bd38      	pop	{r3, r4, r5, pc}
 800629a:	bf00      	nop
 800629c:	20000468 	.word	0x20000468

080062a0 <_isatty_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4d06      	ldr	r5, [pc, #24]	@ (80062bc <_isatty_r+0x1c>)
 80062a4:	2300      	movs	r3, #0
 80062a6:	4604      	mov	r4, r0
 80062a8:	4608      	mov	r0, r1
 80062aa:	602b      	str	r3, [r5, #0]
 80062ac:	f7fa ffda 	bl	8001264 <_isatty>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_isatty_r+0x1a>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_isatty_r+0x1a>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20000468 	.word	0x20000468

080062c0 <_kill_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4d07      	ldr	r5, [pc, #28]	@ (80062e0 <_kill_r+0x20>)
 80062c4:	2300      	movs	r3, #0
 80062c6:	4604      	mov	r4, r0
 80062c8:	4608      	mov	r0, r1
 80062ca:	4611      	mov	r1, r2
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	f7fa ff59 	bl	8001184 <_kill>
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	d102      	bne.n	80062dc <_kill_r+0x1c>
 80062d6:	682b      	ldr	r3, [r5, #0]
 80062d8:	b103      	cbz	r3, 80062dc <_kill_r+0x1c>
 80062da:	6023      	str	r3, [r4, #0]
 80062dc:	bd38      	pop	{r3, r4, r5, pc}
 80062de:	bf00      	nop
 80062e0:	20000468 	.word	0x20000468

080062e4 <_getpid_r>:
 80062e4:	f7fa bf46 	b.w	8001174 <_getpid>

080062e8 <_malloc_usable_size_r>:
 80062e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ec:	1f18      	subs	r0, r3, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bfbc      	itt	lt
 80062f2:	580b      	ldrlt	r3, [r1, r0]
 80062f4:	18c0      	addlt	r0, r0, r3
 80062f6:	4770      	bx	lr

080062f8 <_init>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	bf00      	nop
 80062fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fe:	bc08      	pop	{r3}
 8006300:	469e      	mov	lr, r3
 8006302:	4770      	bx	lr

08006304 <_fini>:
 8006304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006306:	bf00      	nop
 8006308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800630a:	bc08      	pop	{r3}
 800630c:	469e      	mov	lr, r3
 800630e:	4770      	bx	lr
