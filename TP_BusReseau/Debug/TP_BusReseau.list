
TP_BusReseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000730c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080074dc  080074dc  000084dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800778c  0800778c  00009078  2**0
                  CONTENTS
  4 .ARM          00000008  0800778c  0800778c  0000878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007794  08007794  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007794  08007794  00008794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007798  08007798  00008798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800779c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046a4  20000078  08007814  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000471c  08007814  0000971c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019dbd  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe9  00000000  00000000  00022e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  00026e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011bd  00000000  00000000  00028528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002662b  00000000  00000000  000296e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd89  00000000  00000000  0004fd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0b5a  00000000  00000000  0006ba99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c5f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b54  00000000  00000000  0014c638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0015318c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080074c4 	.word	0x080074c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080074c4 	.word	0x080074c4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005d4:	4b16      	ldr	r3, [pc, #88]	@ (8000630 <MX_CAN1_Init+0x60>)
 80005d6:	4a17      	ldr	r2, [pc, #92]	@ (8000634 <MX_CAN1_Init+0x64>)
 80005d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80005da:	4b15      	ldr	r3, [pc, #84]	@ (8000630 <MX_CAN1_Init+0x60>)
 80005dc:	2210      	movs	r2, #16
 80005de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005e0:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <MX_CAN1_Init+0x60>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005e6:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <MX_CAN1_Init+0x60>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005ec:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <MX_CAN1_Init+0x60>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_CAN1_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <MX_CAN1_Init+0x60>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MX_CAN1_Init+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000604:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <MX_CAN1_Init+0x60>)
 8000606:	2200      	movs	r2, #0
 8000608:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800060a:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_CAN1_Init+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000610:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <MX_CAN1_Init+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000616:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_CAN1_Init+0x60>)
 8000618:	2200      	movs	r2, #0
 800061a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	@ (8000630 <MX_CAN1_Init+0x60>)
 800061e:	f000 fdd7 	bl	80011d0 <HAL_CAN_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000628:	f000 fad6 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000094 	.word	0x20000094
 8000634:	40006400 	.word	0x40006400

08000638 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a19      	ldr	r2, [pc, #100]	@ (80006bc <HAL_CAN_MspInit+0x84>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d12c      	bne.n	80006b4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <HAL_CAN_MspInit+0x88>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000662:	4a17      	ldr	r2, [pc, #92]	@ (80006c0 <HAL_CAN_MspInit+0x88>)
 8000664:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000668:	6413      	str	r3, [r2, #64]	@ 0x40
 800066a:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <HAL_CAN_MspInit+0x88>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <HAL_CAN_MspInit+0x88>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a10      	ldr	r2, [pc, #64]	@ (80006c0 <HAL_CAN_MspInit+0x88>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <HAL_CAN_MspInit+0x88>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000692:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006a4:	2309      	movs	r3, #9
 80006a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <HAL_CAN_MspInit+0x8c>)
 80006b0:	f000 ff6c 	bl	800158c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	@ 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40006400 	.word	0x40006400
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020000 	.word	0x40020000

080006c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4a07      	ldr	r2, [pc, #28]	@ (80006f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80006d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	4a06      	ldr	r2, [pc, #24]	@ (80006f8 <vApplicationGetIdleTaskMemory+0x30>)
 80006de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2280      	movs	r2, #128	@ 0x80
 80006e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	200000c0 	.word	0x200000c0
 80006f8:	20000160 	.word	0x20000160

080006fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_FREERTOS_Init+0x30>)
 8000704:	1d3c      	adds	r4, r7, #4
 8000706:	461d      	mov	r5, r3
 8000708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fe5a 	bl	80043d2 <osThreadCreate>
 800071e:	4603      	mov	r3, r0
 8000720:	4a03      	ldr	r2, [pc, #12]	@ (8000730 <MX_FREERTOS_Init+0x34>)
 8000722:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bdb0      	pop	{r4, r5, r7, pc}
 800072c:	080074e8 	.word	0x080074e8
 8000730:	200000bc 	.word	0x200000bc

08000734 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800073c:	2001      	movs	r0, #1
 800073e:	f003 fe94 	bl	800446a <osDelay>
 8000742:	e7fb      	b.n	800073c <StartDefaultTask+0x8>

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	@ 0x28
 8000748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b2d      	ldr	r3, [pc, #180]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a2c      	ldr	r2, [pc, #176]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b2a      	ldr	r3, [pc, #168]	@ (8000814 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a25      	ldr	r2, [pc, #148]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a1e      	ldr	r2, [pc, #120]	@ (8000814 <MX_GPIO_Init+0xd0>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a17      	ldr	r2, [pc, #92]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_GPIO_Init+0xd0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2120      	movs	r1, #32
 80007ce:	4812      	ldr	r0, [pc, #72]	@ (8000818 <MX_GPIO_Init+0xd4>)
 80007d0:	f001 f870 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480c      	ldr	r0, [pc, #48]	@ (800081c <MX_GPIO_Init+0xd8>)
 80007ec:	f000 fece 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f0:	2320      	movs	r3, #32
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_GPIO_Init+0xd4>)
 8000808:	f000 fec0 	bl	800158c <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000
 800081c:	40020800 	.word	0x40020800

08000820 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000826:	4a13      	ldr	r2, [pc, #76]	@ (8000874 <MX_I2C1_Init+0x54>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_I2C1_Init+0x50>)
 800082c:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <MX_I2C1_Init+0x58>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_I2C1_Init+0x50>)
 800083e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000842:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_I2C1_Init+0x50>)
 800085e:	f001 f843 	bl	80018e8 <HAL_I2C_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000868:	f000 f9b6 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000360 	.word	0x20000360
 8000874:	40005400 	.word	0x40005400
 8000878:	000186a0 	.word	0x000186a0

0800087c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a19      	ldr	r2, [pc, #100]	@ (8000900 <HAL_I2C_MspInit+0x84>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d12c      	bne.n	80008f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <HAL_I2C_MspInit+0x88>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a17      	ldr	r2, [pc, #92]	@ (8000904 <HAL_I2C_MspInit+0x88>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <HAL_I2C_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c0:	2312      	movs	r3, #18
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008cc:	2304      	movs	r3, #4
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	480c      	ldr	r0, [pc, #48]	@ (8000908 <HAL_I2C_MspInit+0x8c>)
 80008d8:	f000 fe58 	bl	800158c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <HAL_I2C_MspInit+0x88>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e4:	4a07      	ldr	r2, [pc, #28]	@ (8000904 <HAL_I2C_MspInit+0x88>)
 80008e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_I2C_MspInit+0x88>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	@ 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40005400 	.word	0x40005400
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400

0800090c <convertBufferToUint32>:
	HAL_UART_Transmit(&huart3, (uint8_t*) &chr, 1, HAL_MAX_DELAY);

	return chr;
}

uint32_t convertBufferToUint32(uint8_t buffer[3]) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
    return (uint32_t)buffer[0] << 16 | (uint32_t)buffer[1] << 8 | (uint32_t)buffer[2];
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	041a      	lsls	r2, r3, #16
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3301      	adds	r3, #1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	021b      	lsls	r3, r3, #8
 8000922:	4313      	orrs	r3, r2
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	3202      	adds	r2, #2
 8000928:	7812      	ldrb	r2, [r2, #0]
 800092a:	4313      	orrs	r3, r2
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <GET_T>:

int GET_T(h_shell_t * h_shell,int argc, char ** argv)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	@ 0x30
 800093c:	af02      	add	r7, sp, #8
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	//récupération de la température
	uint8_t temp_start_addr = 0xFA; // l'adresse de départ du registre température
 8000944:	23fa      	movs	r3, #250	@ 0xfa
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t temp_value_buffer[3]; //chaque adresse sera stocké dans un byte puis on combinera les bytes
	uint8_t current_temp_addr = temp_start_addr;
 800094a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800094e:	75fb      	strb	r3, [r7, #23]
	uint8_t temp_value; //chaque adresse sera stocké dans un byte puis on combinera les bytes

	for(int i = 0; i <3;i++)
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	@ 0x24
 8000954:	e023      	b.n	800099e <GET_T+0x66>
	{

		HAL_I2C_Master_Transmit(&hi2c1, bmp280_addr_shifted, &current_temp_addr, 1, 1000); // on demande à récup valeur de l'adresse courante
 8000956:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <GET_T+0x8c>)
 8000958:	8819      	ldrh	r1, [r3, #0]
 800095a:	f107 0217 	add.w	r2, r7, #23
 800095e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	4818      	ldr	r0, [pc, #96]	@ (80009c8 <GET_T+0x90>)
 8000968:	f001 f902 	bl	8001b70 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, bmp280_addr_shifted, &temp_value, 1, 1000); // on récupère la valeur de calibration de l'adresse courante
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <GET_T+0x8c>)
 800096e:	8819      	ldrh	r1, [r3, #0]
 8000970:	f107 0216 	add.w	r2, r7, #22
 8000974:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2301      	movs	r3, #1
 800097c:	4812      	ldr	r0, [pc, #72]	@ (80009c8 <GET_T+0x90>)
 800097e:	f001 f9f5 	bl	8001d6c <HAL_I2C_Master_Receive>
		temp_value_buffer[i] = temp_value; // on la range dans le buffer
 8000982:	7db9      	ldrb	r1, [r7, #22]
 8000984:	f107 0218 	add.w	r2, r7, #24
 8000988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800098a:	4413      	add	r3, r2
 800098c:	460a      	mov	r2, r1
 800098e:	701a      	strb	r2, [r3, #0]
		current_temp_addr++; // on incrémente l'adresse
 8000990:	7dfb      	ldrb	r3, [r7, #23]
 8000992:	3301      	adds	r3, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i <3;i++)
 8000998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099a:	3301      	adds	r3, #1
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
 800099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	ddd8      	ble.n	8000956 <GET_T+0x1e>
	}
	uint32_t temp_value_32  =	convertBufferToUint32(temp_value_buffer);
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ffaf 	bl	800090c <convertBufferToUint32>
 80009ae:	61f8      	str	r0, [r7, #28]


	printf("température non compensée %lu \r\n",temp_value_32);
 80009b0:	69f9      	ldr	r1, [r7, #28]
 80009b2:	4806      	ldr	r0, [pc, #24]	@ (80009cc <GET_T+0x94>)
 80009b4:	f005 fc80 	bl	80062b8 <iprintf>
	return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3728      	adds	r7, #40	@ 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000000 	.word	0x20000000
 80009c8:	20000360 	.word	0x20000360
 80009cc:	08007504 	.word	0x08007504

080009d0 <GET_P>:

int GET_P(h_shell_t * h_shell,int argc, char ** argv)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	@ 0x30
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	//récupération de la pression
	uint8_t pressure_start_addr = 0xF7; // l'adresse de départ du registre pression
 80009dc:	23f7      	movs	r3, #247	@ 0xf7
 80009de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t pressure_value_buffer[3]; //chaque adresse sera stocké dans un byte puis on combinera les bytes
	uint8_t current_pressure_addr = pressure_start_addr;
 80009e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80009e6:	75fb      	strb	r3, [r7, #23]
	uint8_t pressure_value; //chaque adresse sera stocké dans un byte puis on combinera les bytes

	for(int i = 0; i <3;i++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ec:	e023      	b.n	8000a36 <GET_P+0x66>
	{

		HAL_I2C_Master_Transmit(&hi2c1, bmp280_addr_shifted, &current_pressure_addr, 1, 1000); // on demande à récup valeur de l'adresse courante
 80009ee:	4b1b      	ldr	r3, [pc, #108]	@ (8000a5c <GET_P+0x8c>)
 80009f0:	8819      	ldrh	r1, [r3, #0]
 80009f2:	f107 0217 	add.w	r2, r7, #23
 80009f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	4818      	ldr	r0, [pc, #96]	@ (8000a60 <GET_P+0x90>)
 8000a00:	f001 f8b6 	bl	8001b70 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, bmp280_addr_shifted, &pressure_value, 1, 1000); // on récupère la valeur de calibration de l'adresse courante
 8000a04:	4b15      	ldr	r3, [pc, #84]	@ (8000a5c <GET_P+0x8c>)
 8000a06:	8819      	ldrh	r1, [r3, #0]
 8000a08:	f107 0216 	add.w	r2, r7, #22
 8000a0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2301      	movs	r3, #1
 8000a14:	4812      	ldr	r0, [pc, #72]	@ (8000a60 <GET_P+0x90>)
 8000a16:	f001 f9a9 	bl	8001d6c <HAL_I2C_Master_Receive>
		pressure_value_buffer[i] = pressure_value; // on la range dans le buffer
 8000a1a:	7db9      	ldrb	r1, [r7, #22]
 8000a1c:	f107 0218 	add.w	r2, r7, #24
 8000a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a22:	4413      	add	r3, r2
 8000a24:	460a      	mov	r2, r1
 8000a26:	701a      	strb	r2, [r3, #0]
		current_pressure_addr++; // on incrémente l'adresse
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i <3;i++)
 8000a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a32:	3301      	adds	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	ddd8      	ble.n	80009ee <GET_P+0x1e>
	}
	//HAL_I2C_Mem_Read(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
	uint32_t pressure_value_32 = convertBufferToUint32(pressure_value_buffer);
 8000a3c:	f107 0318 	add.w	r3, r7, #24
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff63 	bl	800090c <convertBufferToUint32>
 8000a46:	61f8      	str	r0, [r7, #28]


	printf("pression non compensée %lu \r\n",pressure_value_32);
 8000a48:	69f9      	ldr	r1, [r7, #28]
 8000a4a:	4806      	ldr	r0, [pc, #24]	@ (8000a64 <GET_P+0x94>)
 8000a4c:	f005 fc34 	bl	80062b8 <iprintf>
	return 0;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000000 	.word	0x20000000
 8000a60:	20000360 	.word	0x20000360
 8000a64:	08007528 	.word	0x08007528

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6e:	f000 fb6d 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a72:	f000 f831 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a76:	f7ff fe65 	bl	8000744 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a7a:	f000 fa6b 	bl	8000f54 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000a7e:	f7ff fda7 	bl	80005d0 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000a82:	f7ff fecd 	bl	8000820 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000a86:	f000 fa8f 	bl	8000fa8 <MX_USART3_UART_Init>
		current_temp_addr++; // on incrémente l'adresse
	}
	uint32_t temp_value_32  =	convertBufferToUint32(temp_value_buffer);
#endif

	shell_init(&h_shell);
 8000a8a:	480c      	ldr	r0, [pc, #48]	@ (8000abc <main+0x54>)
 8000a8c:	f005 f82c 	bl	8005ae8 <shell_init>
	shell_add(&h_shell,"GET_T",GET_T,"get temperature from the bmp280 sensor");
 8000a90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <main+0x58>)
 8000a92:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac4 <main+0x5c>)
 8000a94:	490c      	ldr	r1, [pc, #48]	@ (8000ac8 <main+0x60>)
 8000a96:	4809      	ldr	r0, [pc, #36]	@ (8000abc <main+0x54>)
 8000a98:	f005 f860 	bl	8005b5c <shell_add>
	shell_add(&h_shell,"GET_P",GET_P,"get pressure from the bmp280 sensor");
 8000a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <main+0x64>)
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad0 <main+0x68>)
 8000aa0:	490c      	ldr	r1, [pc, #48]	@ (8000ad4 <main+0x6c>)
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <main+0x54>)
 8000aa4:	f005 f85a 	bl	8005b5c <shell_add>

	BaseType_t ret;
	ret = shell_createShellTask();
 8000aa8:	f004 ffbe 	bl	8005a28 <shell_createShellTask>
 8000aac:	6078      	str	r0, [r7, #4]
	//--------------------------------------------------------------------------------------
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000aae:	f7ff fe25 	bl	80006fc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ab2:	f003 fc87 	bl	80043c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000ab6:	bf00      	nop
 8000ab8:	e7fd      	b.n	8000ab6 <main+0x4e>
 8000aba:	bf00      	nop
 8000abc:	200041f0 	.word	0x200041f0
 8000ac0:	08007548 	.word	0x08007548
 8000ac4:	08000939 	.word	0x08000939
 8000ac8:	08007570 	.word	0x08007570
 8000acc:	08007578 	.word	0x08007578
 8000ad0:	080009d1 	.word	0x080009d1
 8000ad4:	0800759c 	.word	0x0800759c

08000ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b094      	sub	sp, #80	@ 0x50
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	2234      	movs	r2, #52	@ 0x34
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f005 fc6f 	bl	80063ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <SystemClock_Config+0xd4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	4a29      	ldr	r2, [pc, #164]	@ (8000bac <SystemClock_Config+0xd4>)
 8000b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0c:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <SystemClock_Config+0xd4>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b18:	2300      	movs	r3, #0
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4b24      	ldr	r3, [pc, #144]	@ (8000bb0 <SystemClock_Config+0xd8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b24:	4a22      	ldr	r2, [pc, #136]	@ (8000bb0 <SystemClock_Config+0xd8>)
 8000b26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <SystemClock_Config+0xd8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b40:	2310      	movs	r3, #16
 8000b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b44:	2302      	movs	r3, #2
 8000b46:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b50:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b54:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b56:	2304      	movs	r3, #4
 8000b58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 fa34 	bl	8002fd4 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b72:	f000 f831 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	2102      	movs	r1, #2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fea2 	bl	80028dc <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b9e:	f000 f81b 	bl	8000bd8 <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3750      	adds	r7, #80	@ 0x50
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40007000 	.word	0x40007000

08000bb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bc6:	f000 fae3 	bl	8001190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40001000 	.word	0x40001000

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <Error_Handler+0x8>

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_MspInit+0x54>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf2:	4a11      	ldr	r2, [pc, #68]	@ (8000c38 <HAL_MspInit+0x54>)
 8000bf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_MspInit+0x54>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <HAL_MspInit+0x54>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <HAL_MspInit+0x54>)
 8000c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c16:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <HAL_MspInit+0x54>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	210f      	movs	r1, #15
 8000c26:	f06f 0001 	mvn.w	r0, #1
 8000c2a:	f000 fc85 	bl	8001538 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000c44:	1d39      	adds	r1, r7, #4
 8000c46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4803      	ldr	r0, [pc, #12]	@ (8000c5c <__io_putchar+0x20>)
 8000c4e:	f002 ff51 	bl	8003af4 <HAL_UART_Transmit>

  return ch;
 8000c52:	687b      	ldr	r3, [r7, #4]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000400 	.word	0x20000400

08000c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	@ 0x38
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	4b33      	ldr	r3, [pc, #204]	@ (8000d44 <HAL_InitTick+0xe4>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c78:	4a32      	ldr	r2, [pc, #200]	@ (8000d44 <HAL_InitTick+0xe4>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c80:	4b30      	ldr	r3, [pc, #192]	@ (8000d44 <HAL_InitTick+0xe4>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c84:	f003 0310 	and.w	r3, r3, #16
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c8c:	f107 0210 	add.w	r2, r7, #16
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 ff3a 	bl	8002b10 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d103      	bne.n	8000cae <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ca6:	f001 ff0b 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8000caa:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cac:	e004      	b.n	8000cb8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cae:	f001 ff07 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cba:	4a23      	ldr	r2, [pc, #140]	@ (8000d48 <HAL_InitTick+0xe8>)
 8000cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc0:	0c9b      	lsrs	r3, r3, #18
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <HAL_InitTick+0xec>)
 8000cc8:	4a21      	ldr	r2, [pc, #132]	@ (8000d50 <HAL_InitTick+0xf0>)
 8000cca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <HAL_InitTick+0xec>)
 8000cce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d4c <HAL_InitTick+0xec>)
 8000cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <HAL_InitTick+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <HAL_InitTick+0xec>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <HAL_InitTick+0xec>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cec:	4817      	ldr	r0, [pc, #92]	@ (8000d4c <HAL_InitTick+0xec>)
 8000cee:	f002 fc0f 	bl	8003510 <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d11b      	bne.n	8000d38 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d00:	4812      	ldr	r0, [pc, #72]	@ (8000d4c <HAL_InitTick+0xec>)
 8000d02:	f002 fc5f 	bl	80035c4 <HAL_TIM_Base_Start_IT>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d111      	bne.n	8000d38 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d14:	2036      	movs	r0, #54	@ 0x36
 8000d16:	f000 fc2b 	bl	8001570 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d808      	bhi.n	8000d32 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	2036      	movs	r0, #54	@ 0x36
 8000d26:	f000 fc07 	bl	8001538 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_InitTick+0xf4>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	e002      	b.n	8000d38 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3738      	adds	r7, #56	@ 0x38
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	431bde83 	.word	0x431bde83
 8000d4c:	200003b4 	.word	0x200003b4
 8000d50:	40001000 	.word	0x40001000
 8000d54:	20000008 	.word	0x20000008

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <NMI_Handler+0x4>

08000d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <MemManage_Handler+0x4>

08000d70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d94:	4802      	ldr	r0, [pc, #8]	@ (8000da0 <TIM6_DAC_IRQHandler+0x10>)
 8000d96:	f002 fc85 	bl	80036a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200003b4 	.word	0x200003b4

08000da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return 1;
 8000da8:	2301      	movs	r3, #1
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_kill>:

int _kill(int pid, int sig)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dbe:	f005 fc43 	bl	8006648 <__errno>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2216      	movs	r2, #22
 8000dc6:	601a      	str	r2, [r3, #0]
  return -1;
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_exit>:

void _exit (int status)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ffe7 	bl	8000db4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000de6:	bf00      	nop
 8000de8:	e7fd      	b.n	8000de6 <_exit+0x12>

08000dea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e00a      	b.n	8000e12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dfc:	f3af 8000 	nop.w
 8000e00:	4601      	mov	r1, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	60ba      	str	r2, [r7, #8]
 8000e08:	b2ca      	uxtb	r2, r1
 8000e0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	dbf0      	blt.n	8000dfc <_read+0x12>
  }

  return len;
 8000e1a:	687b      	ldr	r3, [r7, #4]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e009      	b.n	8000e4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	60ba      	str	r2, [r7, #8]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fefc 	bl	8000c3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	dbf1      	blt.n	8000e36 <_write+0x12>
  }
  return len;
 8000e52:	687b      	ldr	r3, [r7, #4]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_close>:

int _close(int file)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e84:	605a      	str	r2, [r3, #4]
  return 0;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_isatty>:

int _isatty(int file)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e9c:	2301      	movs	r3, #1
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b085      	sub	sp, #20
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f005 fba8 	bl	8006648 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20020000 	.word	0x20020000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	200003fc 	.word	0x200003fc
 8000f2c:	20004720 	.word	0x20004720

08000f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <SystemInit+0x20>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f3a:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <SystemInit+0x20>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <MX_USART2_UART_Init+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f8c:	f002 fd62 	bl	8003a54 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f96:	f7ff fe1f 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000400 	.word	0x20000400
 8000fa4:	40004400 	.word	0x40004400

08000fa8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <MX_USART3_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	f002 fd38 	bl	8003a54 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fea:	f7ff fdf5 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000448 	.word	0x20000448
 8000ff8:	40004800 	.word	0x40004800

08000ffc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	@ 0x30
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a32      	ldr	r2, [pc, #200]	@ (80010e4 <HAL_UART_MspInit+0xe8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d12c      	bne.n	8001078 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	4b31      	ldr	r3, [pc, #196]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a30      	ldr	r2, [pc, #192]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 8001028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b2e      	ldr	r3, [pc, #184]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001036:	61bb      	str	r3, [r7, #24]
 8001038:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	4b2a      	ldr	r3, [pc, #168]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a29      	ldr	r2, [pc, #164]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b27      	ldr	r3, [pc, #156]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001056:	230c      	movs	r3, #12
 8001058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001066:	2307      	movs	r3, #7
 8001068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	481e      	ldr	r0, [pc, #120]	@ (80010ec <HAL_UART_MspInit+0xf0>)
 8001072:	f000 fa8b 	bl	800158c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001076:	e031      	b.n	80010dc <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1c      	ldr	r2, [pc, #112]	@ (80010f0 <HAL_UART_MspInit+0xf4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d12c      	bne.n	80010dc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001090:	6413      	str	r3, [r2, #64]	@ 0x40
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a10      	ldr	r2, [pc, #64]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <HAL_UART_MspInit+0xec>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010cc:	2307      	movs	r3, #7
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	4807      	ldr	r0, [pc, #28]	@ (80010f4 <HAL_UART_MspInit+0xf8>)
 80010d8:	f000 fa58 	bl	800158c <HAL_GPIO_Init>
}
 80010dc:	bf00      	nop
 80010de:	3730      	adds	r7, #48	@ 0x30
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40004400 	.word	0x40004400
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40004800 	.word	0x40004800
 80010f4:	40020800 	.word	0x40020800

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001130 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010fc:	f7ff ff18 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001102:	490d      	ldr	r1, [pc, #52]	@ (8001138 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001108:	e002      	b.n	8001110 <LoopCopyDataInit>

0800110a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800110c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110e:	3304      	adds	r3, #4

08001110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001114:	d3f9      	bcc.n	800110a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001118:	4c0a      	ldr	r4, [pc, #40]	@ (8001144 <LoopFillZerobss+0x22>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800111c:	e001      	b.n	8001122 <LoopFillZerobss>

0800111e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001120:	3204      	adds	r2, #4

08001122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001124:	d3fb      	bcc.n	800111e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001126:	f005 fa95 	bl	8006654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fc9d 	bl	8000a68 <main>
  bx  lr    
 800112e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800113c:	0800779c 	.word	0x0800779c
  ldr r2, =_sbss
 8001140:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001144:	2000471c 	.word	0x2000471c

08001148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <HAL_Init+0x40>)
 8001156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800115a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <HAL_Init+0x40>)
 8001162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a07      	ldr	r2, [pc, #28]	@ (800118c <HAL_Init+0x40>)
 800116e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 f9d4 	bl	8001522 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117a:	200f      	movs	r0, #15
 800117c:	f7ff fd70 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001180:	f7ff fd30 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023c00 	.word	0x40023c00

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000000c 	.word	0x2000000c
 80011b4:	20000490 	.word	0x20000490

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000490 	.word	0x20000490

080011d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e0ed      	b.n	80013be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fa22 	bl	8000638 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0201 	orr.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001204:	f7ff ffd8 	bl	80011b8 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800120a:	e012      	b.n	8001232 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800120c:	f7ff ffd4 	bl	80011b8 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b0a      	cmp	r3, #10
 8001218:	d90b      	bls.n	8001232 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2205      	movs	r2, #5
 800122a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0c5      	b.n	80013be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0e5      	beq.n	800120c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0202 	bic.w	r2, r2, #2
 800124e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001250:	f7ff ffb2 	bl	80011b8 <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001256:	e012      	b.n	800127e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001258:	f7ff ffae 	bl	80011b8 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b0a      	cmp	r3, #10
 8001264:	d90b      	bls.n	800127e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800126a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2205      	movs	r2, #5
 8001276:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e09f      	b.n	80013be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e5      	bne.n	8001258 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e1b      	ldrb	r3, [r3, #24]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e007      	b.n	80012b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7e5b      	ldrb	r3, [r3, #25]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d108      	bne.n	80012d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7e9b      	ldrb	r3, [r3, #26]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0220 	orr.w	r2, r2, #32
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e007      	b.n	800130a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0220 	bic.w	r2, r2, #32
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7edb      	ldrb	r3, [r3, #27]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0210 	bic.w	r2, r2, #16
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e007      	b.n	8001334 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0210 	orr.w	r2, r2, #16
 8001332:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7f1b      	ldrb	r3, [r3, #28]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d108      	bne.n	800134e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0208 	orr.w	r2, r2, #8
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e007      	b.n	800135e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0208 	bic.w	r2, r2, #8
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7f5b      	ldrb	r3, [r3, #29]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d108      	bne.n	8001378 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0204 	orr.w	r2, r2, #4
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e007      	b.n	8001388 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0204 	bic.w	r2, r2, #4
 8001386:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	ea42 0103 	orr.w	r1, r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	@ (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	@ (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	@ (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	@ (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	@ 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	@ 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff4c 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154a:	f7ff ff61 	bl	8001410 <__NVIC_GetPriorityGrouping>
 800154e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	6978      	ldr	r0, [r7, #20]
 8001556:	f7ff ffb1 	bl	80014bc <NVIC_EncodePriority>
 800155a:	4602      	mov	r2, r0
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff ff80 	bl	8001468 <__NVIC_SetPriority>
}
 8001568:	bf00      	nop
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ff54 	bl	800142c <__NVIC_EnableIRQ>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	@ 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	e165      	b.n	8001874 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8154 	bne.w	800186e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d005      	beq.n	80015de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b03      	cmp	r3, #3
 800164a:	d017      	beq.n	800167c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	69b9      	ldr	r1, [r7, #24]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80ae 	beq.w	800186e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b5d      	ldr	r3, [pc, #372]	@ (800188c <HAL_GPIO_Init+0x300>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171a:	4a5c      	ldr	r2, [pc, #368]	@ (800188c <HAL_GPIO_Init+0x300>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001720:	6453      	str	r3, [r2, #68]	@ 0x44
 8001722:	4b5a      	ldr	r3, [pc, #360]	@ (800188c <HAL_GPIO_Init+0x300>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172e:	4a58      	ldr	r2, [pc, #352]	@ (8001890 <HAL_GPIO_Init+0x304>)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4f      	ldr	r2, [pc, #316]	@ (8001894 <HAL_GPIO_Init+0x308>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d025      	beq.n	80017a6 <HAL_GPIO_Init+0x21a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4e      	ldr	r2, [pc, #312]	@ (8001898 <HAL_GPIO_Init+0x30c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d01f      	beq.n	80017a2 <HAL_GPIO_Init+0x216>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4d      	ldr	r2, [pc, #308]	@ (800189c <HAL_GPIO_Init+0x310>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d019      	beq.n	800179e <HAL_GPIO_Init+0x212>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4c      	ldr	r2, [pc, #304]	@ (80018a0 <HAL_GPIO_Init+0x314>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0x20e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4b      	ldr	r2, [pc, #300]	@ (80018a4 <HAL_GPIO_Init+0x318>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00d      	beq.n	8001796 <HAL_GPIO_Init+0x20a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4a      	ldr	r2, [pc, #296]	@ (80018a8 <HAL_GPIO_Init+0x31c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d007      	beq.n	8001792 <HAL_GPIO_Init+0x206>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a49      	ldr	r2, [pc, #292]	@ (80018ac <HAL_GPIO_Init+0x320>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_GPIO_Init+0x202>
 800178a:	2306      	movs	r3, #6
 800178c:	e00c      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 800178e:	2307      	movs	r3, #7
 8001790:	e00a      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 8001792:	2305      	movs	r3, #5
 8001794:	e008      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 8001796:	2304      	movs	r3, #4
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 800179a:	2303      	movs	r3, #3
 800179c:	e004      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 800179e:	2302      	movs	r3, #2
 80017a0:	e002      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x21c>
 80017a6:	2300      	movs	r3, #0
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	f002 0203 	and.w	r2, r2, #3
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4093      	lsls	r3, r2
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b8:	4935      	ldr	r1, [pc, #212]	@ (8001890 <HAL_GPIO_Init+0x304>)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c6:	4b3a      	ldr	r3, [pc, #232]	@ (80018b0 <HAL_GPIO_Init+0x324>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ea:	4a31      	ldr	r2, [pc, #196]	@ (80018b0 <HAL_GPIO_Init+0x324>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f0:	4b2f      	ldr	r3, [pc, #188]	@ (80018b0 <HAL_GPIO_Init+0x324>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001814:	4a26      	ldr	r2, [pc, #152]	@ (80018b0 <HAL_GPIO_Init+0x324>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800181a:	4b25      	ldr	r3, [pc, #148]	@ (80018b0 <HAL_GPIO_Init+0x324>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800183e:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <HAL_GPIO_Init+0x324>)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001844:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <HAL_GPIO_Init+0x324>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001868:	4a11      	ldr	r2, [pc, #68]	@ (80018b0 <HAL_GPIO_Init+0x324>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3301      	adds	r3, #1
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	2b0f      	cmp	r3, #15
 8001878:	f67f ae96 	bls.w	80015a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3724      	adds	r7, #36	@ 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40013800 	.word	0x40013800
 8001894:	40020000 	.word	0x40020000
 8001898:	40020400 	.word	0x40020400
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020c00 	.word	0x40020c00
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40021400 	.word	0x40021400
 80018ac:	40021800 	.word	0x40021800
 80018b0:	40013c00 	.word	0x40013c00

080018b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
 80018c0:	4613      	mov	r3, r2
 80018c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d0:	e003      	b.n	80018da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	041a      	lsls	r2, r3, #16
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	619a      	str	r2, [r3, #24]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e12b      	b.n	8001b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7fe ffb4 	bl	800087c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2224      	movs	r2, #36	@ 0x24
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0201 	bic.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800193a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800194a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800194c:	f001 f8b8 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8001950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4a81      	ldr	r2, [pc, #516]	@ (8001b5c <HAL_I2C_Init+0x274>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d807      	bhi.n	800196c <HAL_I2C_Init+0x84>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4a80      	ldr	r2, [pc, #512]	@ (8001b60 <HAL_I2C_Init+0x278>)
 8001960:	4293      	cmp	r3, r2
 8001962:	bf94      	ite	ls
 8001964:	2301      	movls	r3, #1
 8001966:	2300      	movhi	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	e006      	b.n	800197a <HAL_I2C_Init+0x92>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4a7d      	ldr	r2, [pc, #500]	@ (8001b64 <HAL_I2C_Init+0x27c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	bf94      	ite	ls
 8001974:	2301      	movls	r3, #1
 8001976:	2300      	movhi	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0e7      	b.n	8001b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a78      	ldr	r2, [pc, #480]	@ (8001b68 <HAL_I2C_Init+0x280>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	0c9b      	lsrs	r3, r3, #18
 800198c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	430a      	orrs	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4a6a      	ldr	r2, [pc, #424]	@ (8001b5c <HAL_I2C_Init+0x274>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d802      	bhi.n	80019bc <HAL_I2C_Init+0xd4>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3301      	adds	r3, #1
 80019ba:	e009      	b.n	80019d0 <HAL_I2C_Init+0xe8>
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	4a69      	ldr	r2, [pc, #420]	@ (8001b6c <HAL_I2C_Init+0x284>)
 80019c8:	fba2 2303 	umull	r2, r3, r2, r3
 80019cc:	099b      	lsrs	r3, r3, #6
 80019ce:	3301      	adds	r3, #1
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80019e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	495c      	ldr	r1, [pc, #368]	@ (8001b5c <HAL_I2C_Init+0x274>)
 80019ec:	428b      	cmp	r3, r1
 80019ee:	d819      	bhi.n	8001a24 <HAL_I2C_Init+0x13c>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1e59      	subs	r1, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80019fe:	1c59      	adds	r1, r3, #1
 8001a00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a04:	400b      	ands	r3, r1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00a      	beq.n	8001a20 <HAL_I2C_Init+0x138>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1e59      	subs	r1, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1e:	e051      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001a20:	2304      	movs	r3, #4
 8001a22:	e04f      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d111      	bne.n	8001a50 <HAL_I2C_Init+0x168>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1e58      	subs	r0, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	440b      	add	r3, r1
 8001a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf0c      	ite	eq
 8001a48:	2301      	moveq	r3, #1
 8001a4a:	2300      	movne	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	e012      	b.n	8001a76 <HAL_I2C_Init+0x18e>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1e58      	subs	r0, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	0099      	lsls	r1, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_Init+0x196>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e022      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10e      	bne.n	8001aa4 <HAL_I2C_Init+0x1bc>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1e58      	subs	r0, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6859      	ldr	r1, [r3, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	440b      	add	r3, r1
 8001a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aa2:	e00f      	b.n	8001ac4 <HAL_I2C_Init+0x1dc>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1e58      	subs	r0, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	0099      	lsls	r1, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	6809      	ldr	r1, [r1, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69da      	ldr	r2, [r3, #28]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001af2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6911      	ldr	r1, [r2, #16]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68d2      	ldr	r2, [r2, #12]
 8001afe:	4311      	orrs	r1, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	000186a0 	.word	0x000186a0
 8001b60:	001e847f 	.word	0x001e847f
 8001b64:	003d08ff 	.word	0x003d08ff
 8001b68:	431bde83 	.word	0x431bde83
 8001b6c:	10624dd3 	.word	0x10624dd3

08001b70 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	817b      	strh	r3, [r7, #10]
 8001b80:	4613      	mov	r3, r2
 8001b82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff fb18 	bl	80011b8 <HAL_GetTick>
 8001b88:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	f040 80e0 	bne.w	8001d58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2319      	movs	r3, #25
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4970      	ldr	r1, [pc, #448]	@ (8001d64 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fc64 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0d3      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d101      	bne.n	8001bc0 <HAL_I2C_Master_Transmit+0x50>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e0cc      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d007      	beq.n	8001be6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bf4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2221      	movs	r2, #33	@ 0x21
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2210      	movs	r2, #16
 8001c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	893a      	ldrh	r2, [r7, #8]
 8001c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4a50      	ldr	r2, [pc, #320]	@ (8001d68 <HAL_I2C_Master_Transmit+0x1f8>)
 8001c26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c28:	8979      	ldrh	r1, [r7, #10]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 face 	bl	80021d0 <I2C_MasterRequestWrite>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e08d      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c54:	e066      	b.n	8001d24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	6a39      	ldr	r1, [r7, #32]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fd22 	bl	80026a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00d      	beq.n	8001c82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d107      	bne.n	8001c7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e06b      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	781a      	ldrb	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d11b      	bne.n	8001cf8 <HAL_I2C_Master_Transmit+0x188>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d017      	beq.n	8001cf8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ccc:	781a      	ldrb	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	6a39      	ldr	r1, [r7, #32]
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f000 fd19 	bl	8002734 <I2C_WaitOnBTFFlagUntilTimeout>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00d      	beq.n	8001d24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d107      	bne.n	8001d20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e01a      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d194      	bne.n	8001c56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2220      	movs	r2, #32
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e000      	b.n	8001d5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d58:	2302      	movs	r3, #2
  }
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	00100002 	.word	0x00100002
 8001d68:	ffff0000 	.word	0xffff0000

08001d6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	@ 0x30
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	461a      	mov	r2, r3
 8001d78:	460b      	mov	r3, r1
 8001d7a:	817b      	strh	r3, [r7, #10]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fa1a 	bl	80011b8 <HAL_GetTick>
 8001d84:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b20      	cmp	r3, #32
 8001d90:	f040 8217 	bne.w	80021c2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2319      	movs	r3, #25
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	497c      	ldr	r1, [pc, #496]	@ (8001f90 <HAL_I2C_Master_Receive+0x224>)
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 fb66 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
 8001dac:	e20a      	b.n	80021c4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_I2C_Master_Receive+0x50>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e203      	b.n	80021c4 <HAL_I2C_Master_Receive+0x458>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d007      	beq.n	8001de2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001df0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2222      	movs	r2, #34	@ 0x22
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	893a      	ldrh	r2, [r7, #8]
 8001e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4a5c      	ldr	r2, [pc, #368]	@ (8001f94 <HAL_I2C_Master_Receive+0x228>)
 8001e22:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e24:	8979      	ldrh	r1, [r7, #10]
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 fa52 	bl	80022d4 <I2C_MasterRequestRead>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e1c4      	b.n	80021c4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d113      	bne.n	8001e6a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	623b      	str	r3, [r7, #32]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	623b      	str	r3, [r7, #32]
 8001e56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	e198      	b.n	800219c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d11b      	bne.n	8001eaa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e178      	b.n	800219c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d11b      	bne.n	8001eea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ec0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ed0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	e158      	b.n	800219c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ef8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001f10:	e144      	b.n	800219c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	f200 80f1 	bhi.w	80020fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d123      	bne.n	8001f6c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f26:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 fc4b 	bl	80027c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e145      	b.n	80021c4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691a      	ldr	r2, [r3, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f54:	3b01      	subs	r3, #1
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f6a:	e117      	b.n	800219c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d14e      	bne.n	8002012 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	4906      	ldr	r1, [pc, #24]	@ (8001f98 <HAL_I2C_Master_Receive+0x22c>)
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fa76 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e11a      	b.n	80021c4 <HAL_I2C_Master_Receive+0x458>
 8001f8e:	bf00      	nop
 8001f90:	00100002 	.word	0x00100002
 8001f94:	ffff0000 	.word	0xffff0000
 8001f98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002010:	e0c4      	b.n	800219c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002018:	2200      	movs	r2, #0
 800201a:	496c      	ldr	r1, [pc, #432]	@ (80021cc <HAL_I2C_Master_Receive+0x460>)
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 fa27 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0cb      	b.n	80021c4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800203a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002074:	2200      	movs	r2, #0
 8002076:	4955      	ldr	r1, [pc, #340]	@ (80021cc <HAL_I2C_Master_Receive+0x460>)
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f9f9 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e09d      	b.n	80021c4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002096:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020fc:	e04e      	b.n	800219c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002100:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fb5e 	bl	80027c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e058      	b.n	80021c4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b04      	cmp	r3, #4
 8002150:	d124      	bne.n	800219c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002156:	2b03      	cmp	r3, #3
 8002158:	d107      	bne.n	800216a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002168:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f47f aeb6 	bne.w	8001f12 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2220      	movs	r2, #32
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
  }
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3728      	adds	r7, #40	@ 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	00010004 	.word	0x00010004

080021d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	460b      	mov	r3, r1
 80021de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d006      	beq.n	80021fa <I2C_MasterRequestWrite+0x2a>
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d003      	beq.n	80021fa <I2C_MasterRequestWrite+0x2a>
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80021f8:	d108      	bne.n	800220c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e00b      	b.n	8002224 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	2b12      	cmp	r3, #18
 8002212:	d107      	bne.n	8002224 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002222:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f91d 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00d      	beq.n	8002258 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800224a:	d103      	bne.n	8002254 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e035      	b.n	80022c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002260:	d108      	bne.n	8002274 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002262:	897b      	ldrh	r3, [r7, #10]
 8002264:	b2db      	uxtb	r3, r3
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002270:	611a      	str	r2, [r3, #16]
 8002272:	e01b      	b.n	80022ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002274:	897b      	ldrh	r3, [r7, #10]
 8002276:	11db      	asrs	r3, r3, #7
 8002278:	b2db      	uxtb	r3, r3
 800227a:	f003 0306 	and.w	r3, r3, #6
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f063 030f 	orn	r3, r3, #15
 8002284:	b2da      	uxtb	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	490e      	ldr	r1, [pc, #56]	@ (80022cc <I2C_MasterRequestWrite+0xfc>)
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f966 	bl	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e010      	b.n	80022c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022a2:	897b      	ldrh	r3, [r7, #10]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4907      	ldr	r1, [pc, #28]	@ (80022d0 <I2C_MasterRequestWrite+0x100>)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f956 	bl	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	00010008 	.word	0x00010008
 80022d0:	00010002 	.word	0x00010002

080022d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	460b      	mov	r3, r1
 80022e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d006      	beq.n	800230e <I2C_MasterRequestRead+0x3a>
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d003      	beq.n	800230e <I2C_MasterRequestRead+0x3a>
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800230c:	d108      	bne.n	8002320 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e00b      	b.n	8002338 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002324:	2b11      	cmp	r3, #17
 8002326:	d107      	bne.n	8002338 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002336:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f893 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00d      	beq.n	800236c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800235e:	d103      	bne.n	8002368 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002366:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e079      	b.n	8002460 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002374:	d108      	bne.n	8002388 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002376:	897b      	ldrh	r3, [r7, #10]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	b2da      	uxtb	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	e05f      	b.n	8002448 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002388:	897b      	ldrh	r3, [r7, #10]
 800238a:	11db      	asrs	r3, r3, #7
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f003 0306 	and.w	r3, r3, #6
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f063 030f 	orn	r3, r3, #15
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4930      	ldr	r1, [pc, #192]	@ (8002468 <I2C_MasterRequestRead+0x194>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f8dc 	bl	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e054      	b.n	8002460 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023b6:	897b      	ldrh	r3, [r7, #10]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4929      	ldr	r1, [pc, #164]	@ (800246c <I2C_MasterRequestRead+0x198>)
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f8cc 	bl	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e044      	b.n	8002460 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f831 	bl	8002470 <I2C_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00d      	beq.n	8002430 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002422:	d103      	bne.n	800242c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800242a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e017      	b.n	8002460 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002430:	897b      	ldrh	r3, [r7, #10]
 8002432:	11db      	asrs	r3, r3, #7
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f003 0306 	and.w	r3, r3, #6
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f063 030e 	orn	r3, r3, #14
 8002440:	b2da      	uxtb	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4907      	ldr	r1, [pc, #28]	@ (800246c <I2C_MasterRequestRead+0x198>)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f888 	bl	8002564 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	00010008 	.word	0x00010008
 800246c:	00010002 	.word	0x00010002

08002470 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002480:	e048      	b.n	8002514 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002488:	d044      	beq.n	8002514 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248a:	f7fe fe95 	bl	80011b8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d139      	bne.n	8002514 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	0c1b      	lsrs	r3, r3, #16
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d10d      	bne.n	80024c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	43da      	mvns	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4013      	ands	r3, r2
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	e00c      	b.n	80024e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	43da      	mvns	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4013      	ands	r3, r2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bf0c      	ite	eq
 80024d8:	2301      	moveq	r3, #1
 80024da:	2300      	movne	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d116      	bne.n	8002514 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	f043 0220 	orr.w	r2, r3, #32
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e023      	b.n	800255c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	0c1b      	lsrs	r3, r3, #16
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10d      	bne.n	800253a <I2C_WaitOnFlagUntilTimeout+0xca>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	43da      	mvns	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4013      	ands	r3, r2
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf0c      	ite	eq
 8002530:	2301      	moveq	r3, #1
 8002532:	2300      	movne	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	e00c      	b.n	8002554 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	43da      	mvns	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	429a      	cmp	r2, r3
 8002558:	d093      	beq.n	8002482 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002572:	e071      	b.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002582:	d123      	bne.n	80025cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002592:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800259c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e067      	b.n	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80025d2:	d041      	beq.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d4:	f7fe fdf0 	bl	80011b8 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d302      	bcc.n	80025ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d136      	bne.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10c      	bne.n	800260e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4013      	ands	r3, r2
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf14      	ite	ne
 8002606:	2301      	movne	r3, #1
 8002608:	2300      	moveq	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	e00b      	b.n	8002626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	43da      	mvns	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4013      	ands	r3, r2
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf14      	ite	ne
 8002620:	2301      	movne	r3, #1
 8002622:	2300      	moveq	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2220      	movs	r2, #32
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e021      	b.n	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	0c1b      	lsrs	r3, r3, #16
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d10c      	bne.n	800267c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	43da      	mvns	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4013      	ands	r3, r2
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf14      	ite	ne
 8002674:	2301      	movne	r3, #1
 8002676:	2300      	moveq	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e00b      	b.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4013      	ands	r3, r2
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f47f af6d 	bne.w	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b0:	e034      	b.n	800271c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f8e3 	bl	800287e <I2C_IsAcknowledgeFailed>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e034      	b.n	800272c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026c8:	d028      	beq.n	800271c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ca:	f7fe fd75 	bl	80011b8 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d302      	bcc.n	80026e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11d      	bne.n	800271c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ea:	2b80      	cmp	r3, #128	@ 0x80
 80026ec:	d016      	beq.n	800271c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	f043 0220 	orr.w	r2, r3, #32
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e007      	b.n	800272c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002726:	2b80      	cmp	r3, #128	@ 0x80
 8002728:	d1c3      	bne.n	80026b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002740:	e034      	b.n	80027ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f89b 	bl	800287e <I2C_IsAcknowledgeFailed>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e034      	b.n	80027bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002758:	d028      	beq.n	80027ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275a:	f7fe fd2d 	bl	80011b8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	429a      	cmp	r2, r3
 8002768:	d302      	bcc.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d11d      	bne.n	80027ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d016      	beq.n	80027ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002798:	f043 0220 	orr.w	r2, r3, #32
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e007      	b.n	80027bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d1c3      	bne.n	8002742 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027d0:	e049      	b.n	8002866 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b10      	cmp	r3, #16
 80027de:	d119      	bne.n	8002814 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0210 	mvn.w	r2, #16
 80027e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e030      	b.n	8002876 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002814:	f7fe fcd0 	bl	80011b8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	429a      	cmp	r2, r3
 8002822:	d302      	bcc.n	800282a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d11d      	bne.n	8002866 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002834:	2b40      	cmp	r3, #64	@ 0x40
 8002836:	d016      	beq.n	8002866 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e007      	b.n	8002876 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002870:	2b40      	cmp	r3, #64	@ 0x40
 8002872:	d1ae      	bne.n	80027d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002894:	d11b      	bne.n	80028ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800289e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f043 0204 	orr.w	r2, r3, #4
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0cc      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b68      	ldr	r3, [pc, #416]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d90c      	bls.n	8002918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b65      	ldr	r3, [pc, #404]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a58      	ldr	r2, [pc, #352]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800293a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a52      	ldr	r2, [pc, #328]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d044      	beq.n	80029fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d119      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d003      	beq.n	800299a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	2b03      	cmp	r3, #3
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e06f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e067      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4934      	ldr	r1, [pc, #208]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe fbf4 	bl	80011b8 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe fbf0 	bl	80011b8 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e04f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b25      	ldr	r3, [pc, #148]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d20c      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b22      	ldr	r3, [pc, #136]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f887 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	490a      	ldr	r1, [pc, #40]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	5ccb      	ldrb	r3, [r1, r3]
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe f8ec 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	08007694 	.word	0x08007694
 8002aa0:	20000004 	.word	0x20000004
 8002aa4:	20000008 	.word	0x20000008

08002aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aac:	4b03      	ldr	r3, [pc, #12]	@ (8002abc <HAL_RCC_GetHCLKFreq+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000004 	.word	0x20000004

08002ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ac4:	f7ff fff0 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0a9b      	lsrs	r3, r3, #10
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	@ (8002ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	080076a4 	.word	0x080076a4

08002ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aec:	f7ff ffdc 	bl	8002aa8 <HAL_RCC_GetHCLKFreq>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	0b5b      	lsrs	r3, r3, #13
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	4903      	ldr	r1, [pc, #12]	@ (8002b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afe:	5ccb      	ldrb	r3, [r1, r3]
 8002b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	080076a4 	.word	0x080076a4

08002b10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b20:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <HAL_RCC_GetClockConfig+0x5c>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0203 	and.w	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <HAL_RCC_GetClockConfig+0x5c>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b38:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <HAL_RCC_GetClockConfig+0x5c>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b44:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <HAL_RCC_GetClockConfig+0x5c>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	08db      	lsrs	r3, r3, #3
 8002b4a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b52:	4b07      	ldr	r3, [pc, #28]	@ (8002b70 <HAL_RCC_GetClockConfig+0x60>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 020f 	and.w	r2, r3, #15
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	601a      	str	r2, [r3, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40023c00 	.word	0x40023c00

08002b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b78:	b0ae      	sub	sp, #184	@ 0xb8
 8002b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9a:	4bcb      	ldr	r3, [pc, #812]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
 8002ba2:	2b0c      	cmp	r3, #12
 8002ba4:	f200 8206 	bhi.w	8002fb4 <HAL_RCC_GetSysClockFreq+0x440>
 8002ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002be5 	.word	0x08002be5
 8002bb4:	08002fb5 	.word	0x08002fb5
 8002bb8:	08002fb5 	.word	0x08002fb5
 8002bbc:	08002fb5 	.word	0x08002fb5
 8002bc0:	08002bed 	.word	0x08002bed
 8002bc4:	08002fb5 	.word	0x08002fb5
 8002bc8:	08002fb5 	.word	0x08002fb5
 8002bcc:	08002fb5 	.word	0x08002fb5
 8002bd0:	08002bf5 	.word	0x08002bf5
 8002bd4:	08002fb5 	.word	0x08002fb5
 8002bd8:	08002fb5 	.word	0x08002fb5
 8002bdc:	08002fb5 	.word	0x08002fb5
 8002be0:	08002de5 	.word	0x08002de5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4bb9      	ldr	r3, [pc, #740]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x358>)
 8002be6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bea:	e1e7      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bec:	4bb8      	ldr	r3, [pc, #736]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bf2:	e1e3      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf4:	4bb4      	ldr	r3, [pc, #720]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c00:	4bb1      	ldr	r3, [pc, #708]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d071      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0c:	4bae      	ldr	r3, [pc, #696]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c18:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c32:	4622      	mov	r2, r4
 8002c34:	462b      	mov	r3, r5
 8002c36:	f04f 0000 	mov.w	r0, #0
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	0159      	lsls	r1, r3, #5
 8002c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c44:	0150      	lsls	r0, r2, #5
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	1a51      	subs	r1, r2, r1
 8002c4e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002c50:	4629      	mov	r1, r5
 8002c52:	eb63 0301 	sbc.w	r3, r3, r1
 8002c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002c64:	4649      	mov	r1, r9
 8002c66:	018b      	lsls	r3, r1, #6
 8002c68:	4641      	mov	r1, r8
 8002c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c6e:	4641      	mov	r1, r8
 8002c70:	018a      	lsls	r2, r1, #6
 8002c72:	4641      	mov	r1, r8
 8002c74:	1a51      	subs	r1, r2, r1
 8002c76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c78:	4649      	mov	r1, r9
 8002c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002c8c:	4649      	mov	r1, r9
 8002c8e:	00cb      	lsls	r3, r1, #3
 8002c90:	4641      	mov	r1, r8
 8002c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c96:	4641      	mov	r1, r8
 8002c98:	00ca      	lsls	r2, r1, #3
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4622      	mov	r2, r4
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ca6:	462b      	mov	r3, r5
 8002ca8:	460a      	mov	r2, r1
 8002caa:	eb42 0303 	adc.w	r3, r2, r3
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	024b      	lsls	r3, r1, #9
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	024a      	lsls	r2, r1, #9
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cdc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002ce0:	f7fd fafe 	bl	80002e0 <__aeabi_uldivmod>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cee:	e067      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf0:	4b75      	ldr	r3, [pc, #468]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cfc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002d00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002d0e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002d12:	4622      	mov	r2, r4
 8002d14:	462b      	mov	r3, r5
 8002d16:	f04f 0000 	mov.w	r0, #0
 8002d1a:	f04f 0100 	mov.w	r1, #0
 8002d1e:	0159      	lsls	r1, r3, #5
 8002d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d24:	0150      	lsls	r0, r2, #5
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	1a51      	subs	r1, r2, r1
 8002d2e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002d30:	4629      	mov	r1, r5
 8002d32:	eb63 0301 	sbc.w	r3, r3, r1
 8002d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002d44:	4649      	mov	r1, r9
 8002d46:	018b      	lsls	r3, r1, #6
 8002d48:	4641      	mov	r1, r8
 8002d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d4e:	4641      	mov	r1, r8
 8002d50:	018a      	lsls	r2, r1, #6
 8002d52:	4641      	mov	r1, r8
 8002d54:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d58:	4649      	mov	r1, r9
 8002d5a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d72:	4692      	mov	sl, r2
 8002d74:	469b      	mov	fp, r3
 8002d76:	4623      	mov	r3, r4
 8002d78:	eb1a 0303 	adds.w	r3, sl, r3
 8002d7c:	623b      	str	r3, [r7, #32]
 8002d7e:	462b      	mov	r3, r5
 8002d80:	eb4b 0303 	adc.w	r3, fp, r3
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d92:	4629      	mov	r1, r5
 8002d94:	028b      	lsls	r3, r1, #10
 8002d96:	4621      	mov	r1, r4
 8002d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	028a      	lsls	r2, r1, #10
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002da8:	2200      	movs	r2, #0
 8002daa:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dac:	677a      	str	r2, [r7, #116]	@ 0x74
 8002dae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002db2:	f7fd fa95 	bl	80002e0 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4613      	mov	r3, r2
 8002dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dc0:	4b41      	ldr	r3, [pc, #260]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	3301      	adds	r3, #1
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002dd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002de2:	e0eb      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de4:	4b38      	ldr	r3, [pc, #224]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002df0:	4b35      	ldr	r3, [pc, #212]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d06b      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfc:	4b32      	ldr	r3, [pc, #200]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	099b      	lsrs	r3, r3, #6
 8002e02:	2200      	movs	r2, #0
 8002e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e10:	2300      	movs	r3, #0
 8002e12:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002e18:	4622      	mov	r2, r4
 8002e1a:	462b      	mov	r3, r5
 8002e1c:	f04f 0000 	mov.w	r0, #0
 8002e20:	f04f 0100 	mov.w	r1, #0
 8002e24:	0159      	lsls	r1, r3, #5
 8002e26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e2a:	0150      	lsls	r0, r2, #5
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4621      	mov	r1, r4
 8002e32:	1a51      	subs	r1, r2, r1
 8002e34:	61b9      	str	r1, [r7, #24]
 8002e36:	4629      	mov	r1, r5
 8002e38:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e4a:	4659      	mov	r1, fp
 8002e4c:	018b      	lsls	r3, r1, #6
 8002e4e:	4651      	mov	r1, sl
 8002e50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e54:	4651      	mov	r1, sl
 8002e56:	018a      	lsls	r2, r1, #6
 8002e58:	4651      	mov	r1, sl
 8002e5a:	ebb2 0801 	subs.w	r8, r2, r1
 8002e5e:	4659      	mov	r1, fp
 8002e60:	eb63 0901 	sbc.w	r9, r3, r1
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e78:	4690      	mov	r8, r2
 8002e7a:	4699      	mov	r9, r3
 8002e7c:	4623      	mov	r3, r4
 8002e7e:	eb18 0303 	adds.w	r3, r8, r3
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	462b      	mov	r3, r5
 8002e86:	eb49 0303 	adc.w	r3, r9, r3
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e98:	4629      	mov	r1, r5
 8002e9a:	024b      	lsls	r3, r1, #9
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	024a      	lsls	r2, r1, #9
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002eae:	2200      	movs	r2, #0
 8002eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002eb2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002eb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002eb8:	f7fd fa12 	bl	80002e0 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ec6:	e065      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x420>
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed4:	4b3d      	ldr	r3, [pc, #244]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x458>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	2200      	movs	r2, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	4611      	mov	r1, r2
 8002ee0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ee4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002eea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002eee:	4642      	mov	r2, r8
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	f04f 0000 	mov.w	r0, #0
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	0159      	lsls	r1, r3, #5
 8002efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f00:	0150      	lsls	r0, r2, #5
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4641      	mov	r1, r8
 8002f08:	1a51      	subs	r1, r2, r1
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	4649      	mov	r1, r9
 8002f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f20:	4659      	mov	r1, fp
 8002f22:	018b      	lsls	r3, r1, #6
 8002f24:	4651      	mov	r1, sl
 8002f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f2a:	4651      	mov	r1, sl
 8002f2c:	018a      	lsls	r2, r1, #6
 8002f2e:	4651      	mov	r1, sl
 8002f30:	1a54      	subs	r4, r2, r1
 8002f32:	4659      	mov	r1, fp
 8002f34:	eb63 0501 	sbc.w	r5, r3, r1
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	00eb      	lsls	r3, r5, #3
 8002f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f46:	00e2      	lsls	r2, r4, #3
 8002f48:	4614      	mov	r4, r2
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	4643      	mov	r3, r8
 8002f4e:	18e3      	adds	r3, r4, r3
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	464b      	mov	r3, r9
 8002f54:	eb45 0303 	adc.w	r3, r5, r3
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f66:	4629      	mov	r1, r5
 8002f68:	028b      	lsls	r3, r1, #10
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f70:	4621      	mov	r1, r4
 8002f72:	028a      	lsls	r2, r1, #10
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f80:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f86:	f7fd f9ab 	bl	80002e0 <__aeabi_uldivmod>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4613      	mov	r3, r2
 8002f90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f94:	4b0d      	ldr	r3, [pc, #52]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x458>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	0f1b      	lsrs	r3, r3, #28
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002fa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fb2:	e003      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002fba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	37b8      	adds	r7, #184	@ 0xb8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	00f42400 	.word	0x00f42400

08002fd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e28d      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8083 	beq.w	80030fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ff4:	4b94      	ldr	r3, [pc, #592]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 030c 	and.w	r3, r3, #12
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d019      	beq.n	8003034 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003000:	4b91      	ldr	r3, [pc, #580]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 030c 	and.w	r3, r3, #12
        || \
 8003008:	2b08      	cmp	r3, #8
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800300c:	4b8e      	ldr	r3, [pc, #568]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003018:	d00c      	beq.n	8003034 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301a:	4b8b      	ldr	r3, [pc, #556]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d112      	bne.n	800304c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003026:	4b88      	ldr	r3, [pc, #544]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	4b84      	ldr	r3, [pc, #528]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05b      	beq.n	80030f8 <HAL_RCC_OscConfig+0x124>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d157      	bne.n	80030f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e25a      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x90>
 8003056:	4b7c      	ldr	r3, [pc, #496]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7b      	ldr	r2, [pc, #492]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e01d      	b.n	80030a0 <HAL_RCC_OscConfig+0xcc>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0xb4>
 800306e:	4b76      	ldr	r3, [pc, #472]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b73      	ldr	r3, [pc, #460]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a72      	ldr	r2, [pc, #456]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0xcc>
 8003088:	4b6f      	ldr	r3, [pc, #444]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a6e      	ldr	r2, [pc, #440]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b6c      	ldr	r3, [pc, #432]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a6b      	ldr	r2, [pc, #428]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800309e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe f886 	bl	80011b8 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fe f882 	bl	80011b8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	@ 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e21f      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b61      	ldr	r3, [pc, #388]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0xdc>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe f872 	bl	80011b8 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fe f86e 	bl	80011b8 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e20b      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	4b57      	ldr	r3, [pc, #348]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x104>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d06f      	beq.n	80031e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003106:	4b50      	ldr	r3, [pc, #320]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b00      	cmp	r3, #0
 8003110:	d017      	beq.n	8003142 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003112:	4b4d      	ldr	r3, [pc, #308]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
        || \
 800311a:	2b08      	cmp	r3, #8
 800311c:	d105      	bne.n	800312a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800311e:	4b4a      	ldr	r3, [pc, #296]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312a:	4b47      	ldr	r3, [pc, #284]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d11c      	bne.n	8003170 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003136:	4b44      	ldr	r3, [pc, #272]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	4b41      	ldr	r3, [pc, #260]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x186>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e1d3      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4937      	ldr	r1, [pc, #220]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	e03a      	b.n	80031e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003178:	4b34      	ldr	r3, [pc, #208]	@ (800324c <HAL_RCC_OscConfig+0x278>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fe f81b 	bl	80011b8 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003186:	f7fe f817 	bl	80011b8 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1b4      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b28      	ldr	r3, [pc, #160]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4925      	ldr	r1, [pc, #148]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
 80031b8:	e015      	b.n	80031e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ba:	4b24      	ldr	r3, [pc, #144]	@ (800324c <HAL_RCC_OscConfig+0x278>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fd fffa 	bl	80011b8 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fd fff6 	bl	80011b8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e193      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d036      	beq.n	8003260 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d016      	beq.n	8003228 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fa:	4b15      	ldr	r3, [pc, #84]	@ (8003250 <HAL_RCC_OscConfig+0x27c>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fd ffda 	bl	80011b8 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003208:	f7fd ffd6 	bl	80011b8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e173      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	4b0b      	ldr	r3, [pc, #44]	@ (8003248 <HAL_RCC_OscConfig+0x274>)
 800321c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x234>
 8003226:	e01b      	b.n	8003260 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003228:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_RCC_OscConfig+0x27c>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7fd ffc3 	bl	80011b8 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	e00e      	b.n	8003254 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003236:	f7fd ffbf 	bl	80011b8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d907      	bls.n	8003254 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e15c      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
 8003248:	40023800 	.word	0x40023800
 800324c:	42470000 	.word	0x42470000
 8003250:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b8a      	ldr	r3, [pc, #552]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ea      	bne.n	8003236 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8097 	beq.w	800339c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b83      	ldr	r3, [pc, #524]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	4b7f      	ldr	r3, [pc, #508]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	4a7e      	ldr	r2, [pc, #504]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	@ 0x40
 800328e:	4b7c      	ldr	r3, [pc, #496]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b79      	ldr	r3, [pc, #484]	@ (8003484 <HAL_RCC_OscConfig+0x4b0>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d118      	bne.n	80032dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032aa:	4b76      	ldr	r3, [pc, #472]	@ (8003484 <HAL_RCC_OscConfig+0x4b0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a75      	ldr	r2, [pc, #468]	@ (8003484 <HAL_RCC_OscConfig+0x4b0>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7fd ff7f 	bl	80011b8 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032be:	f7fd ff7b 	bl	80011b8 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e118      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003484 <HAL_RCC_OscConfig+0x4b0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x31e>
 80032e4:	4b66      	ldr	r3, [pc, #408]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e8:	4a65      	ldr	r2, [pc, #404]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f0:	e01c      	b.n	800332c <HAL_RCC_OscConfig+0x358>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x340>
 80032fa:	4b61      	ldr	r3, [pc, #388]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fe:	4a60      	ldr	r2, [pc, #384]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	@ 0x70
 8003306:	4b5e      	ldr	r3, [pc, #376]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330a:	4a5d      	ldr	r2, [pc, #372]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	@ 0x70
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0x358>
 8003314:	4b5a      	ldr	r3, [pc, #360]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003318:	4a59      	ldr	r2, [pc, #356]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003320:	4b57      	ldr	r3, [pc, #348]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003324:	4a56      	ldr	r2, [pc, #344]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d015      	beq.n	8003360 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fd ff40 	bl	80011b8 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fd ff3c 	bl	80011b8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0d7      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	4b4b      	ldr	r3, [pc, #300]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ee      	beq.n	800333c <HAL_RCC_OscConfig+0x368>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fd ff2a 	bl	80011b8 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fd ff26 	bl	80011b8 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0c1      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	4b40      	ldr	r3, [pc, #256]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ee      	bne.n	8003368 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b3b      	ldr	r3, [pc, #236]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	4a3a      	ldr	r2, [pc, #232]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800339a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80ad 	beq.w	8003500 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a6:	4b36      	ldr	r3, [pc, #216]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d060      	beq.n	8003474 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d145      	bne.n	8003446 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b33      	ldr	r3, [pc, #204]	@ (8003488 <HAL_RCC_OscConfig+0x4b4>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fd fefa 	bl	80011b8 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fd fef6 	bl	80011b8 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e093      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	4b29      	ldr	r3, [pc, #164]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	019b      	lsls	r3, r3, #6
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	3b01      	subs	r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003410:	071b      	lsls	r3, r3, #28
 8003412:	491b      	ldr	r1, [pc, #108]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003414:	4313      	orrs	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003418:	4b1b      	ldr	r3, [pc, #108]	@ (8003488 <HAL_RCC_OscConfig+0x4b4>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fd fecb 	bl	80011b8 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003426:	f7fd fec7 	bl	80011b8 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e064      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003438:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x452>
 8003444:	e05c      	b.n	8003500 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003446:	4b10      	ldr	r3, [pc, #64]	@ (8003488 <HAL_RCC_OscConfig+0x4b4>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fd feb4 	bl	80011b8 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003454:	f7fd feb0 	bl	80011b8 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e04d      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x480>
 8003472:	e045      	b.n	8003500 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d107      	bne.n	800348c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e040      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
 8003480:	40023800 	.word	0x40023800
 8003484:	40007000 	.word	0x40007000
 8003488:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800348c:	4b1f      	ldr	r3, [pc, #124]	@ (800350c <HAL_RCC_OscConfig+0x538>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d030      	beq.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d129      	bne.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d122      	bne.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034bc:	4013      	ands	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d119      	bne.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	3b01      	subs	r3, #1
 80034d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d10f      	bne.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e041      	b.n	80035a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d106      	bne.n	800353c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f839 	bl	80035ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f000 f9c0 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d001      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e04e      	b.n	800367a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a23      	ldr	r2, [pc, #140]	@ (8003688 <HAL_TIM_Base_Start_IT+0xc4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d022      	beq.n	8003644 <HAL_TIM_Base_Start_IT+0x80>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003606:	d01d      	beq.n	8003644 <HAL_TIM_Base_Start_IT+0x80>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1f      	ldr	r2, [pc, #124]	@ (800368c <HAL_TIM_Base_Start_IT+0xc8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d018      	beq.n	8003644 <HAL_TIM_Base_Start_IT+0x80>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1e      	ldr	r2, [pc, #120]	@ (8003690 <HAL_TIM_Base_Start_IT+0xcc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d013      	beq.n	8003644 <HAL_TIM_Base_Start_IT+0x80>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a1c      	ldr	r2, [pc, #112]	@ (8003694 <HAL_TIM_Base_Start_IT+0xd0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00e      	beq.n	8003644 <HAL_TIM_Base_Start_IT+0x80>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1b      	ldr	r2, [pc, #108]	@ (8003698 <HAL_TIM_Base_Start_IT+0xd4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_TIM_Base_Start_IT+0x80>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a19      	ldr	r2, [pc, #100]	@ (800369c <HAL_TIM_Base_Start_IT+0xd8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d004      	beq.n	8003644 <HAL_TIM_Base_Start_IT+0x80>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a18      	ldr	r2, [pc, #96]	@ (80036a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d111      	bne.n	8003668 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b06      	cmp	r3, #6
 8003654:	d010      	beq.n	8003678 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003666:	e007      	b.n	8003678 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40010000 	.word	0x40010000
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40000c00 	.word	0x40000c00
 8003698:	40010400 	.word	0x40010400
 800369c:	40014000 	.word	0x40014000
 80036a0:	40001800 	.word	0x40001800

080036a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d020      	beq.n	8003708 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01b      	beq.n	8003708 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0202 	mvn.w	r2, #2
 80036d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8d2 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f8c4 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f8d5 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d020      	beq.n	8003754 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d01b      	beq.n	8003754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0204 	mvn.w	r2, #4
 8003724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f8ac 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 8003740:	e005      	b.n	800374e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f89e 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f8af 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d020      	beq.n	80037a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01b      	beq.n	80037a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0208 	mvn.w	r2, #8
 8003770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2204      	movs	r2, #4
 8003776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f886 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 800378c:	e005      	b.n	800379a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f878 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f889 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d020      	beq.n	80037ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01b      	beq.n	80037ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0210 	mvn.w	r2, #16
 80037bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2208      	movs	r2, #8
 80037c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f860 	bl	8003898 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f852 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f863 	bl	80038ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00c      	beq.n	8003810 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0201 	mvn.w	r2, #1
 8003808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd f9d2 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00c      	beq.n	8003834 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f906 	bl	8003a40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00c      	beq.n	8003858 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f834 	bl	80038c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0220 	mvn.w	r2, #32
 8003874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8d8 	bl	8003a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a46      	ldr	r2, [pc, #280]	@ (8003a00 <TIM_Base_SetConfig+0x12c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d013      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f2:	d00f      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a43      	ldr	r2, [pc, #268]	@ (8003a04 <TIM_Base_SetConfig+0x130>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00b      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a42      	ldr	r2, [pc, #264]	@ (8003a08 <TIM_Base_SetConfig+0x134>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a41      	ldr	r2, [pc, #260]	@ (8003a0c <TIM_Base_SetConfig+0x138>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a40      	ldr	r2, [pc, #256]	@ (8003a10 <TIM_Base_SetConfig+0x13c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d108      	bne.n	8003926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a35      	ldr	r2, [pc, #212]	@ (8003a00 <TIM_Base_SetConfig+0x12c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d02b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003934:	d027      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a32      	ldr	r2, [pc, #200]	@ (8003a04 <TIM_Base_SetConfig+0x130>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d023      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a31      	ldr	r2, [pc, #196]	@ (8003a08 <TIM_Base_SetConfig+0x134>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01f      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a30      	ldr	r2, [pc, #192]	@ (8003a0c <TIM_Base_SetConfig+0x138>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2f      	ldr	r2, [pc, #188]	@ (8003a10 <TIM_Base_SetConfig+0x13c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d017      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2e      	ldr	r2, [pc, #184]	@ (8003a14 <TIM_Base_SetConfig+0x140>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2d      	ldr	r2, [pc, #180]	@ (8003a18 <TIM_Base_SetConfig+0x144>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00f      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2c      	ldr	r2, [pc, #176]	@ (8003a1c <TIM_Base_SetConfig+0x148>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a2b      	ldr	r2, [pc, #172]	@ (8003a20 <TIM_Base_SetConfig+0x14c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a2a      	ldr	r2, [pc, #168]	@ (8003a24 <TIM_Base_SetConfig+0x150>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a29      	ldr	r2, [pc, #164]	@ (8003a28 <TIM_Base_SetConfig+0x154>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d108      	bne.n	8003998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800398c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a10      	ldr	r2, [pc, #64]	@ (8003a00 <TIM_Base_SetConfig+0x12c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0xf8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a12      	ldr	r2, [pc, #72]	@ (8003a10 <TIM_Base_SetConfig+0x13c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d103      	bne.n	80039d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d105      	bne.n	80039f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f023 0201 	bic.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	611a      	str	r2, [r3, #16]
  }
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40010000 	.word	0x40010000
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800
 8003a0c:	40000c00 	.word	0x40000c00
 8003a10:	40010400 	.word	0x40010400
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40014400 	.word	0x40014400
 8003a1c:	40014800 	.word	0x40014800
 8003a20:	40001800 	.word	0x40001800
 8003a24:	40001c00 	.word	0x40001c00
 8003a28:	40002000 	.word	0x40002000

08003a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e042      	b.n	8003aec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fabe 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	@ 0x24
 8003a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fa07 	bl	8003eac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08a      	sub	sp, #40	@ 0x28
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	4613      	mov	r3, r2
 8003b02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d175      	bne.n	8003c00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_UART_Transmit+0x2c>
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e06e      	b.n	8003c02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2221      	movs	r2, #33	@ 0x21
 8003b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b32:	f7fd fb41 	bl	80011b8 <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4c:	d108      	bne.n	8003b60 <HAL_UART_Transmit+0x6c>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	61bb      	str	r3, [r7, #24]
 8003b5e:	e003      	b.n	8003b68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b68:	e02e      	b.n	8003bc8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2200      	movs	r2, #0
 8003b72:	2180      	movs	r1, #128	@ 0x80
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f8a3 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e03a      	b.n	8003c02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	e007      	b.n	8003bba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1cb      	bne.n	8003b6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2140      	movs	r1, #64	@ 0x40
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f86f 	bl	8003cc0 <UART_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e006      	b.n	8003c02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3720      	adds	r7, #32
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b085      	sub	sp, #20
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	4613      	mov	r3, r2
 8003c16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d121      	bne.n	8003c68 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_UART_Transmit_IT+0x26>
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e01a      	b.n	8003c6a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	88fa      	ldrh	r2, [r7, #6]
 8003c3e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2221      	movs	r2, #33	@ 0x21
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c62:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	4613      	mov	r3, r2
 8003c82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d112      	bne.n	8003cb6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_UART_Receive_IT+0x26>
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e00b      	b.n	8003cb8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f860 	bl	8003d72 <UART_Start_Receive_IT>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	e000      	b.n	8003cb8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003cb6:	2302      	movs	r3, #2
  }
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd0:	e03b      	b.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cd8:	d037      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cda:	f7fd fa6d 	bl	80011b8 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d302      	bcc.n	8003cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e03a      	b.n	8003d6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d023      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b80      	cmp	r3, #128	@ 0x80
 8003d06:	d020      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b40      	cmp	r3, #64	@ 0x40
 8003d0c:	d01d      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d116      	bne.n	8003d4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f857 	bl	8003de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e00f      	b.n	8003d6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	bf0c      	ite	eq
 8003d5a:	2301      	moveq	r3, #1
 8003d5c:	2300      	movne	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d0b4      	beq.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	88fa      	ldrh	r2, [r7, #6]
 8003d8a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2222      	movs	r2, #34	@ 0x22
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0220 	orr.w	r2, r2, #32
 8003dd6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b095      	sub	sp, #84	@ 0x54
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e5      	bne.n	8003dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e5      	bne.n	8003e22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d119      	bne.n	8003e92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f023 0310 	bic.w	r3, r3, #16
 8003e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e7e:	61ba      	str	r2, [r7, #24]
 8003e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6979      	ldr	r1, [r7, #20]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e5      	bne.n	8003e5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ea0:	bf00      	nop
 8003ea2:	3754      	adds	r7, #84	@ 0x54
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb0:	b0c0      	sub	sp, #256	@ 0x100
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec8:	68d9      	ldr	r1, [r3, #12]
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	ea40 0301 	orr.w	r3, r0, r1
 8003ed4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f04:	f021 010c 	bic.w	r1, r1, #12
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f12:	430b      	orrs	r3, r1
 8003f14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f26:	6999      	ldr	r1, [r3, #24]
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	ea40 0301 	orr.w	r3, r0, r1
 8003f32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b8f      	ldr	r3, [pc, #572]	@ (8004178 <UART_SetConfig+0x2cc>)
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d005      	beq.n	8003f4c <UART_SetConfig+0xa0>
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b8d      	ldr	r3, [pc, #564]	@ (800417c <UART_SetConfig+0x2d0>)
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d104      	bne.n	8003f56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f4c:	f7fe fdcc 	bl	8002ae8 <HAL_RCC_GetPCLK2Freq>
 8003f50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f54:	e003      	b.n	8003f5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f56:	f7fe fdb3 	bl	8002ac0 <HAL_RCC_GetPCLK1Freq>
 8003f5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f68:	f040 810c 	bne.w	8004184 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f70:	2200      	movs	r2, #0
 8003f72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f7e:	4622      	mov	r2, r4
 8003f80:	462b      	mov	r3, r5
 8003f82:	1891      	adds	r1, r2, r2
 8003f84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f86:	415b      	adcs	r3, r3
 8003f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f8e:	4621      	mov	r1, r4
 8003f90:	eb12 0801 	adds.w	r8, r2, r1
 8003f94:	4629      	mov	r1, r5
 8003f96:	eb43 0901 	adc.w	r9, r3, r1
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fae:	4690      	mov	r8, r2
 8003fb0:	4699      	mov	r9, r3
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	eb18 0303 	adds.w	r3, r8, r3
 8003fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003fbc:	462b      	mov	r3, r5
 8003fbe:	eb49 0303 	adc.w	r3, r9, r3
 8003fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003fd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003fd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003fda:	460b      	mov	r3, r1
 8003fdc:	18db      	adds	r3, r3, r3
 8003fde:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	eb42 0303 	adc.w	r3, r2, r3
 8003fe6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fe8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003fec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ff0:	f7fc f976 	bl	80002e0 <__aeabi_uldivmod>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4b61      	ldr	r3, [pc, #388]	@ (8004180 <UART_SetConfig+0x2d4>)
 8003ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	011c      	lsls	r4, r3, #4
 8004002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004006:	2200      	movs	r2, #0
 8004008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800400c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004010:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004014:	4642      	mov	r2, r8
 8004016:	464b      	mov	r3, r9
 8004018:	1891      	adds	r1, r2, r2
 800401a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800401c:	415b      	adcs	r3, r3
 800401e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004020:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004024:	4641      	mov	r1, r8
 8004026:	eb12 0a01 	adds.w	sl, r2, r1
 800402a:	4649      	mov	r1, r9
 800402c:	eb43 0b01 	adc.w	fp, r3, r1
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800403c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004044:	4692      	mov	sl, r2
 8004046:	469b      	mov	fp, r3
 8004048:	4643      	mov	r3, r8
 800404a:	eb1a 0303 	adds.w	r3, sl, r3
 800404e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004052:	464b      	mov	r3, r9
 8004054:	eb4b 0303 	adc.w	r3, fp, r3
 8004058:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004068:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800406c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004070:	460b      	mov	r3, r1
 8004072:	18db      	adds	r3, r3, r3
 8004074:	643b      	str	r3, [r7, #64]	@ 0x40
 8004076:	4613      	mov	r3, r2
 8004078:	eb42 0303 	adc.w	r3, r2, r3
 800407c:	647b      	str	r3, [r7, #68]	@ 0x44
 800407e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004082:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004086:	f7fc f92b 	bl	80002e0 <__aeabi_uldivmod>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4611      	mov	r1, r2
 8004090:	4b3b      	ldr	r3, [pc, #236]	@ (8004180 <UART_SetConfig+0x2d4>)
 8004092:	fba3 2301 	umull	r2, r3, r3, r1
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	2264      	movs	r2, #100	@ 0x64
 800409a:	fb02 f303 	mul.w	r3, r2, r3
 800409e:	1acb      	subs	r3, r1, r3
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040a6:	4b36      	ldr	r3, [pc, #216]	@ (8004180 <UART_SetConfig+0x2d4>)
 80040a8:	fba3 2302 	umull	r2, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040b4:	441c      	add	r4, r3
 80040b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80040c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80040c8:	4642      	mov	r2, r8
 80040ca:	464b      	mov	r3, r9
 80040cc:	1891      	adds	r1, r2, r2
 80040ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80040d0:	415b      	adcs	r3, r3
 80040d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80040d8:	4641      	mov	r1, r8
 80040da:	1851      	adds	r1, r2, r1
 80040dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80040de:	4649      	mov	r1, r9
 80040e0:	414b      	adcs	r3, r1
 80040e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80040f0:	4659      	mov	r1, fp
 80040f2:	00cb      	lsls	r3, r1, #3
 80040f4:	4651      	mov	r1, sl
 80040f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040fa:	4651      	mov	r1, sl
 80040fc:	00ca      	lsls	r2, r1, #3
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	4603      	mov	r3, r0
 8004104:	4642      	mov	r2, r8
 8004106:	189b      	adds	r3, r3, r2
 8004108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800410c:	464b      	mov	r3, r9
 800410e:	460a      	mov	r2, r1
 8004110:	eb42 0303 	adc.w	r3, r2, r3
 8004114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004124:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004128:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800412c:	460b      	mov	r3, r1
 800412e:	18db      	adds	r3, r3, r3
 8004130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004132:	4613      	mov	r3, r2
 8004134:	eb42 0303 	adc.w	r3, r2, r3
 8004138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800413a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800413e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004142:	f7fc f8cd 	bl	80002e0 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <UART_SetConfig+0x2d4>)
 800414c:	fba3 1302 	umull	r1, r3, r3, r2
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	2164      	movs	r1, #100	@ 0x64
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	3332      	adds	r3, #50	@ 0x32
 800415e:	4a08      	ldr	r2, [pc, #32]	@ (8004180 <UART_SetConfig+0x2d4>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	f003 0207 	and.w	r2, r3, #7
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4422      	add	r2, r4
 8004172:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004174:	e106      	b.n	8004384 <UART_SetConfig+0x4d8>
 8004176:	bf00      	nop
 8004178:	40011000 	.word	0x40011000
 800417c:	40011400 	.word	0x40011400
 8004180:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004188:	2200      	movs	r2, #0
 800418a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800418e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004192:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004196:	4642      	mov	r2, r8
 8004198:	464b      	mov	r3, r9
 800419a:	1891      	adds	r1, r2, r2
 800419c:	6239      	str	r1, [r7, #32]
 800419e:	415b      	adcs	r3, r3
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041a6:	4641      	mov	r1, r8
 80041a8:	1854      	adds	r4, r2, r1
 80041aa:	4649      	mov	r1, r9
 80041ac:	eb43 0501 	adc.w	r5, r3, r1
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	00eb      	lsls	r3, r5, #3
 80041ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041be:	00e2      	lsls	r2, r4, #3
 80041c0:	4614      	mov	r4, r2
 80041c2:	461d      	mov	r5, r3
 80041c4:	4643      	mov	r3, r8
 80041c6:	18e3      	adds	r3, r4, r3
 80041c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041cc:	464b      	mov	r3, r9
 80041ce:	eb45 0303 	adc.w	r3, r5, r3
 80041d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80041f2:	4629      	mov	r1, r5
 80041f4:	008b      	lsls	r3, r1, #2
 80041f6:	4621      	mov	r1, r4
 80041f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041fc:	4621      	mov	r1, r4
 80041fe:	008a      	lsls	r2, r1, #2
 8004200:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004204:	f7fc f86c 	bl	80002e0 <__aeabi_uldivmod>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4b60      	ldr	r3, [pc, #384]	@ (8004390 <UART_SetConfig+0x4e4>)
 800420e:	fba3 2302 	umull	r2, r3, r3, r2
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	011c      	lsls	r4, r3, #4
 8004216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800421a:	2200      	movs	r2, #0
 800421c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004220:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004224:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004228:	4642      	mov	r2, r8
 800422a:	464b      	mov	r3, r9
 800422c:	1891      	adds	r1, r2, r2
 800422e:	61b9      	str	r1, [r7, #24]
 8004230:	415b      	adcs	r3, r3
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004238:	4641      	mov	r1, r8
 800423a:	1851      	adds	r1, r2, r1
 800423c:	6139      	str	r1, [r7, #16]
 800423e:	4649      	mov	r1, r9
 8004240:	414b      	adcs	r3, r1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004250:	4659      	mov	r1, fp
 8004252:	00cb      	lsls	r3, r1, #3
 8004254:	4651      	mov	r1, sl
 8004256:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800425a:	4651      	mov	r1, sl
 800425c:	00ca      	lsls	r2, r1, #3
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	4603      	mov	r3, r0
 8004264:	4642      	mov	r2, r8
 8004266:	189b      	adds	r3, r3, r2
 8004268:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800426c:	464b      	mov	r3, r9
 800426e:	460a      	mov	r2, r1
 8004270:	eb42 0303 	adc.w	r3, r2, r3
 8004274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004282:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004290:	4649      	mov	r1, r9
 8004292:	008b      	lsls	r3, r1, #2
 8004294:	4641      	mov	r1, r8
 8004296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429a:	4641      	mov	r1, r8
 800429c:	008a      	lsls	r2, r1, #2
 800429e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042a2:	f7fc f81d 	bl	80002e0 <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	4b38      	ldr	r3, [pc, #224]	@ (8004390 <UART_SetConfig+0x4e4>)
 80042ae:	fba3 2301 	umull	r2, r3, r3, r1
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2264      	movs	r2, #100	@ 0x64
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	1acb      	subs	r3, r1, r3
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	3332      	adds	r3, #50	@ 0x32
 80042c0:	4a33      	ldr	r2, [pc, #204]	@ (8004390 <UART_SetConfig+0x4e4>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042cc:	441c      	add	r4, r3
 80042ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042d2:	2200      	movs	r2, #0
 80042d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80042d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80042d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80042dc:	4642      	mov	r2, r8
 80042de:	464b      	mov	r3, r9
 80042e0:	1891      	adds	r1, r2, r2
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	415b      	adcs	r3, r3
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042ec:	4641      	mov	r1, r8
 80042ee:	1851      	adds	r1, r2, r1
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	4649      	mov	r1, r9
 80042f4:	414b      	adcs	r3, r1
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004304:	4659      	mov	r1, fp
 8004306:	00cb      	lsls	r3, r1, #3
 8004308:	4651      	mov	r1, sl
 800430a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800430e:	4651      	mov	r1, sl
 8004310:	00ca      	lsls	r2, r1, #3
 8004312:	4610      	mov	r0, r2
 8004314:	4619      	mov	r1, r3
 8004316:	4603      	mov	r3, r0
 8004318:	4642      	mov	r2, r8
 800431a:	189b      	adds	r3, r3, r2
 800431c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800431e:	464b      	mov	r3, r9
 8004320:	460a      	mov	r2, r1
 8004322:	eb42 0303 	adc.w	r3, r2, r3
 8004326:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	663b      	str	r3, [r7, #96]	@ 0x60
 8004332:	667a      	str	r2, [r7, #100]	@ 0x64
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004340:	4649      	mov	r1, r9
 8004342:	008b      	lsls	r3, r1, #2
 8004344:	4641      	mov	r1, r8
 8004346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800434a:	4641      	mov	r1, r8
 800434c:	008a      	lsls	r2, r1, #2
 800434e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004352:	f7fb ffc5 	bl	80002e0 <__aeabi_uldivmod>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <UART_SetConfig+0x4e4>)
 800435c:	fba3 1302 	umull	r1, r3, r3, r2
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	2164      	movs	r1, #100	@ 0x64
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	3332      	adds	r3, #50	@ 0x32
 800436e:	4a08      	ldr	r2, [pc, #32]	@ (8004390 <UART_SetConfig+0x4e4>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	f003 020f 	and.w	r2, r3, #15
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4422      	add	r2, r4
 8004382:	609a      	str	r2, [r3, #8]
}
 8004384:	bf00      	nop
 8004386:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800438a:	46bd      	mov	sp, r7
 800438c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004390:	51eb851f 	.word	0x51eb851f

08004394 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80043a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043a6:	2b84      	cmp	r3, #132	@ 0x84
 80043a8:	d005      	beq.n	80043b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80043aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	3303      	adds	r3, #3
 80043b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80043b6:	68fb      	ldr	r3, [r7, #12]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80043c8:	f000 fafc 	bl	80049c4 <vTaskStartScheduler>
  
  return osOK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80043d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d4:	b089      	sub	sp, #36	@ 0x24
 80043d6:	af04      	add	r7, sp, #16
 80043d8:	6078      	str	r0, [r7, #4]
 80043da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d020      	beq.n	8004426 <osThreadCreate+0x54>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01c      	beq.n	8004426 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685c      	ldr	r4, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691e      	ldr	r6, [r3, #16]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff ffc8 	bl	8004394 <makeFreeRtosPriority>
 8004404:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800440e:	9202      	str	r2, [sp, #8]
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	9100      	str	r1, [sp, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	4632      	mov	r2, r6
 8004418:	4629      	mov	r1, r5
 800441a:	4620      	mov	r0, r4
 800441c:	f000 f8ed 	bl	80045fa <xTaskCreateStatic>
 8004420:	4603      	mov	r3, r0
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e01c      	b.n	8004460 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685c      	ldr	r4, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004432:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff ffaa 	bl	8004394 <makeFreeRtosPriority>
 8004440:	4602      	mov	r2, r0
 8004442:	f107 030c 	add.w	r3, r7, #12
 8004446:	9301      	str	r3, [sp, #4]
 8004448:	9200      	str	r2, [sp, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	4632      	mov	r2, r6
 800444e:	4629      	mov	r1, r5
 8004450:	4620      	mov	r0, r4
 8004452:	f000 f932 	bl	80046ba <xTaskCreate>
 8004456:	4603      	mov	r3, r0
 8004458:	2b01      	cmp	r3, #1
 800445a:	d001      	beq.n	8004460 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800445c:	2300      	movs	r3, #0
 800445e:	e000      	b.n	8004462 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004460:	68fb      	ldr	r3, [r7, #12]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800446a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <osDelay+0x16>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	e000      	b.n	8004482 <osDelay+0x18>
 8004480:	2301      	movs	r3, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fa68 	bl	8004958 <vTaskDelay>
  
  return osOK;
 8004488:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f103 0208 	add.w	r2, r3, #8
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f103 0208 	add.w	r2, r3, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f103 0208 	add.w	r2, r3, #8
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	1c5a      	adds	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	601a      	str	r2, [r3, #0]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800454a:	d103      	bne.n	8004554 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	e00c      	b.n	800456e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3308      	adds	r3, #8
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e002      	b.n	8004562 <vListInsert+0x2e>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	429a      	cmp	r2, r3
 800456c:	d2f6      	bcs.n	800455c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	601a      	str	r2, [r3, #0]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045a6:	b480      	push	{r7}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6892      	ldr	r2, [r2, #8]
 80045bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6852      	ldr	r2, [r2, #4]
 80045c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d103      	bne.n	80045da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	1e5a      	subs	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b08e      	sub	sp, #56	@ 0x38
 80045fe:	af04      	add	r7, sp, #16
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	e7fd      	b.n	8004622 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <xTaskCreateStatic+0x4a>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	61fb      	str	r3, [r7, #28]
}
 800463e:	bf00      	nop
 8004640:	bf00      	nop
 8004642:	e7fd      	b.n	8004640 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004644:	23a0      	movs	r3, #160	@ 0xa0
 8004646:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2ba0      	cmp	r3, #160	@ 0xa0
 800464c:	d00b      	beq.n	8004666 <xTaskCreateStatic+0x6c>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	61bb      	str	r3, [r7, #24]
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	e7fd      	b.n	8004662 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004666:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01e      	beq.n	80046ac <xTaskCreateStatic+0xb2>
 800466e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01b      	beq.n	80046ac <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004676:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800467c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	2202      	movs	r2, #2
 8004682:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004686:	2300      	movs	r3, #0
 8004688:	9303      	str	r3, [sp, #12]
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	9302      	str	r3, [sp, #8]
 800468e:	f107 0314 	add.w	r3, r7, #20
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f850 	bl	8004744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046a6:	f000 f8ed 	bl	8004884 <prvAddNewTaskToReadyList>
 80046aa:	e001      	b.n	80046b0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046b0:	697b      	ldr	r3, [r7, #20]
	}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3728      	adds	r7, #40	@ 0x28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b08c      	sub	sp, #48	@ 0x30
 80046be:	af04      	add	r7, sp, #16
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	603b      	str	r3, [r7, #0]
 80046c6:	4613      	mov	r3, r2
 80046c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 ff5a 	bl	8005588 <pvPortMalloc>
 80046d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00e      	beq.n	80046fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046dc:	20a0      	movs	r0, #160	@ 0xa0
 80046de:	f000 ff53 	bl	8005588 <pvPortMalloc>
 80046e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80046f0:	e005      	b.n	80046fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f001 f816 	bl	8005724 <vPortFree>
 80046f8:	e001      	b.n	80046fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d017      	beq.n	8004734 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800470c:	88fa      	ldrh	r2, [r7, #6]
 800470e:	2300      	movs	r3, #0
 8004710:	9303      	str	r3, [sp, #12]
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	9302      	str	r3, [sp, #8]
 8004716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 f80e 	bl	8004744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004728:	69f8      	ldr	r0, [r7, #28]
 800472a:	f000 f8ab 	bl	8004884 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800472e:	2301      	movs	r3, #1
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	e002      	b.n	800473a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004734:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004738:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800473a:	69bb      	ldr	r3, [r7, #24]
	}
 800473c:	4618      	mov	r0, r3
 800473e:	3720      	adds	r7, #32
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
 8004750:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800475c:	3b01      	subs	r3, #1
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f023 0307 	bic.w	r3, r3, #7
 800476a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00b      	beq.n	800478e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	617b      	str	r3, [r7, #20]
}
 8004788:	bf00      	nop
 800478a:	bf00      	nop
 800478c:	e7fd      	b.n	800478a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01f      	beq.n	80047d4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004794:	2300      	movs	r3, #0
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	e012      	b.n	80047c0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4413      	add	r3, r2
 80047a0:	7819      	ldrb	r1, [r3, #0]
 80047a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	3334      	adds	r3, #52	@ 0x34
 80047aa:	460a      	mov	r2, r1
 80047ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	4413      	add	r3, r2
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	3301      	adds	r3, #1
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b0f      	cmp	r3, #15
 80047c4:	d9e9      	bls.n	800479a <prvInitialiseNewTask+0x56>
 80047c6:	e000      	b.n	80047ca <prvInitialiseNewTask+0x86>
			{
				break;
 80047c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047d2:	e003      	b.n	80047dc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	2b06      	cmp	r3, #6
 80047e0:	d901      	bls.n	80047e6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047e2:	2306      	movs	r3, #6
 80047e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047f0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	2200      	movs	r2, #0
 80047f6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	3304      	adds	r3, #4
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fe68 	bl	80044d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004804:	3318      	adds	r3, #24
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fe63 	bl	80044d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800480c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004810:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004814:	f1c3 0207 	rsb	r2, r3, #7
 8004818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800481c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004820:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	2200      	movs	r2, #0
 8004826:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	2200      	movs	r2, #0
 800482e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	334c      	adds	r3, #76	@ 0x4c
 8004836:	224c      	movs	r2, #76	@ 0x4c
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f001 fdc5 	bl	80063ca <memset>
 8004840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004842:	4a0d      	ldr	r2, [pc, #52]	@ (8004878 <prvInitialiseNewTask+0x134>)
 8004844:	651a      	str	r2, [r3, #80]	@ 0x50
 8004846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004848:	4a0c      	ldr	r2, [pc, #48]	@ (800487c <prvInitialiseNewTask+0x138>)
 800484a:	655a      	str	r2, [r3, #84]	@ 0x54
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	4a0c      	ldr	r2, [pc, #48]	@ (8004880 <prvInitialiseNewTask+0x13c>)
 8004850:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	68f9      	ldr	r1, [r7, #12]
 8004856:	69b8      	ldr	r0, [r7, #24]
 8004858:	f000 fc86 	bl	8005168 <pxPortInitialiseStack>
 800485c:	4602      	mov	r2, r0
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800486c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800486e:	bf00      	nop
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200045d8 	.word	0x200045d8
 800487c:	20004640 	.word	0x20004640
 8004880:	200046a8 	.word	0x200046a8

08004884 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800488c:	f000 fd9c 	bl	80053c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004890:	4b2a      	ldr	r3, [pc, #168]	@ (800493c <prvAddNewTaskToReadyList+0xb8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	4a29      	ldr	r2, [pc, #164]	@ (800493c <prvAddNewTaskToReadyList+0xb8>)
 8004898:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800489a:	4b29      	ldr	r3, [pc, #164]	@ (8004940 <prvAddNewTaskToReadyList+0xbc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d109      	bne.n	80048b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048a2:	4a27      	ldr	r2, [pc, #156]	@ (8004940 <prvAddNewTaskToReadyList+0xbc>)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048a8:	4b24      	ldr	r3, [pc, #144]	@ (800493c <prvAddNewTaskToReadyList+0xb8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d110      	bne.n	80048d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048b0:	f000 fad4 	bl	8004e5c <prvInitialiseTaskLists>
 80048b4:	e00d      	b.n	80048d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048b6:	4b23      	ldr	r3, [pc, #140]	@ (8004944 <prvAddNewTaskToReadyList+0xc0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048be:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <prvAddNewTaskToReadyList+0xbc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d802      	bhi.n	80048d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004940 <prvAddNewTaskToReadyList+0xbc>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <prvAddNewTaskToReadyList+0xc4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3301      	adds	r3, #1
 80048d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004948 <prvAddNewTaskToReadyList+0xc4>)
 80048da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	2201      	movs	r2, #1
 80048e2:	409a      	lsls	r2, r3
 80048e4:	4b19      	ldr	r3, [pc, #100]	@ (800494c <prvAddNewTaskToReadyList+0xc8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	4a18      	ldr	r2, [pc, #96]	@ (800494c <prvAddNewTaskToReadyList+0xc8>)
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4a15      	ldr	r2, [pc, #84]	@ (8004950 <prvAddNewTaskToReadyList+0xcc>)
 80048fc:	441a      	add	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3304      	adds	r3, #4
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f7ff fdf1 	bl	80044ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800490a:	f000 fd8f 	bl	800542c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800490e:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <prvAddNewTaskToReadyList+0xc0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00e      	beq.n	8004934 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004916:	4b0a      	ldr	r3, [pc, #40]	@ (8004940 <prvAddNewTaskToReadyList+0xbc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004920:	429a      	cmp	r2, r3
 8004922:	d207      	bcs.n	8004934 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <prvAddNewTaskToReadyList+0xd0>)
 8004926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20000594 	.word	0x20000594
 8004940:	20000494 	.word	0x20000494
 8004944:	200005a0 	.word	0x200005a0
 8004948:	200005b0 	.word	0x200005b0
 800494c:	2000059c 	.word	0x2000059c
 8004950:	20000498 	.word	0x20000498
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d018      	beq.n	800499c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800496a:	4b14      	ldr	r3, [pc, #80]	@ (80049bc <vTaskDelay+0x64>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <vTaskDelay+0x32>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	60bb      	str	r3, [r7, #8]
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	e7fd      	b.n	8004986 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800498a:	f000 f885 	bl	8004a98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800498e:	2100      	movs	r1, #0
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 fb83 	bl	800509c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004996:	f000 f88d 	bl	8004ab4 <xTaskResumeAll>
 800499a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80049a2:	4b07      	ldr	r3, [pc, #28]	@ (80049c0 <vTaskDelay+0x68>)
 80049a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	200005bc 	.word	0x200005bc
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08a      	sub	sp, #40	@ 0x28
 80049c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049d2:	463a      	mov	r2, r7
 80049d4:	1d39      	adds	r1, r7, #4
 80049d6:	f107 0308 	add.w	r3, r7, #8
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fb fe74 	bl	80006c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	9202      	str	r2, [sp, #8]
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	2300      	movs	r3, #0
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	2300      	movs	r3, #0
 80049f0:	460a      	mov	r2, r1
 80049f2:	4921      	ldr	r1, [pc, #132]	@ (8004a78 <vTaskStartScheduler+0xb4>)
 80049f4:	4821      	ldr	r0, [pc, #132]	@ (8004a7c <vTaskStartScheduler+0xb8>)
 80049f6:	f7ff fe00 	bl	80045fa <xTaskCreateStatic>
 80049fa:	4603      	mov	r3, r0
 80049fc:	4a20      	ldr	r2, [pc, #128]	@ (8004a80 <vTaskStartScheduler+0xbc>)
 80049fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a00:	4b1f      	ldr	r3, [pc, #124]	@ (8004a80 <vTaskStartScheduler+0xbc>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	e001      	b.n	8004a12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d11b      	bne.n	8004a50 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	613b      	str	r3, [r7, #16]
}
 8004a2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a2c:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <vTaskStartScheduler+0xc0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	334c      	adds	r3, #76	@ 0x4c
 8004a32:	4a15      	ldr	r2, [pc, #84]	@ (8004a88 <vTaskStartScheduler+0xc4>)
 8004a34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a36:	4b15      	ldr	r3, [pc, #84]	@ (8004a8c <vTaskStartScheduler+0xc8>)
 8004a38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a3e:	4b14      	ldr	r3, [pc, #80]	@ (8004a90 <vTaskStartScheduler+0xcc>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a44:	4b13      	ldr	r3, [pc, #76]	@ (8004a94 <vTaskStartScheduler+0xd0>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a4a:	f000 fc19 	bl	8005280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a4e:	e00f      	b.n	8004a70 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a56:	d10b      	bne.n	8004a70 <vTaskStartScheduler+0xac>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	60fb      	str	r3, [r7, #12]
}
 8004a6a:	bf00      	nop
 8004a6c:	bf00      	nop
 8004a6e:	e7fd      	b.n	8004a6c <vTaskStartScheduler+0xa8>
}
 8004a70:	bf00      	nop
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	080075a4 	.word	0x080075a4
 8004a7c:	08004e2d 	.word	0x08004e2d
 8004a80:	200005b8 	.word	0x200005b8
 8004a84:	20000494 	.word	0x20000494
 8004a88:	20000028 	.word	0x20000028
 8004a8c:	200005b4 	.word	0x200005b4
 8004a90:	200005a0 	.word	0x200005a0
 8004a94:	20000598 	.word	0x20000598

08004a98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a9c:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <vTaskSuspendAll+0x18>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	4a03      	ldr	r2, [pc, #12]	@ (8004ab0 <vTaskSuspendAll+0x18>)
 8004aa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004aa6:	bf00      	nop
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	200005bc 	.word	0x200005bc

08004ab4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ac2:	4b42      	ldr	r3, [pc, #264]	@ (8004bcc <xTaskResumeAll+0x118>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <xTaskResumeAll+0x2e>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	603b      	str	r3, [r7, #0]
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	e7fd      	b.n	8004ade <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ae2:	f000 fc71 	bl	80053c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ae6:	4b39      	ldr	r3, [pc, #228]	@ (8004bcc <xTaskResumeAll+0x118>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	4a37      	ldr	r2, [pc, #220]	@ (8004bcc <xTaskResumeAll+0x118>)
 8004aee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af0:	4b36      	ldr	r3, [pc, #216]	@ (8004bcc <xTaskResumeAll+0x118>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d161      	bne.n	8004bbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004af8:	4b35      	ldr	r3, [pc, #212]	@ (8004bd0 <xTaskResumeAll+0x11c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d05d      	beq.n	8004bbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b00:	e02e      	b.n	8004b60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b02:	4b34      	ldr	r3, [pc, #208]	@ (8004bd4 <xTaskResumeAll+0x120>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3318      	adds	r3, #24
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fd49 	bl	80045a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fd44 	bl	80045a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b22:	2201      	movs	r2, #1
 8004b24:	409a      	lsls	r2, r3
 8004b26:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd8 <xTaskResumeAll+0x124>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd8 <xTaskResumeAll+0x124>)
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4a27      	ldr	r2, [pc, #156]	@ (8004bdc <xTaskResumeAll+0x128>)
 8004b3e:	441a      	add	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f7ff fcd0 	bl	80044ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b50:	4b23      	ldr	r3, [pc, #140]	@ (8004be0 <xTaskResumeAll+0x12c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b5a:	4b22      	ldr	r3, [pc, #136]	@ (8004be4 <xTaskResumeAll+0x130>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b60:	4b1c      	ldr	r3, [pc, #112]	@ (8004bd4 <xTaskResumeAll+0x120>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1cc      	bne.n	8004b02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b6e:	f000 fa19 	bl	8004fa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b72:	4b1d      	ldr	r3, [pc, #116]	@ (8004be8 <xTaskResumeAll+0x134>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d010      	beq.n	8004ba0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b7e:	f000 f837 	bl	8004bf0 <xTaskIncrementTick>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b88:	4b16      	ldr	r3, [pc, #88]	@ (8004be4 <xTaskResumeAll+0x130>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f1      	bne.n	8004b7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004b9a:	4b13      	ldr	r3, [pc, #76]	@ (8004be8 <xTaskResumeAll+0x134>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ba0:	4b10      	ldr	r3, [pc, #64]	@ (8004be4 <xTaskResumeAll+0x130>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d009      	beq.n	8004bbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bac:	4b0f      	ldr	r3, [pc, #60]	@ (8004bec <xTaskResumeAll+0x138>)
 8004bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bbc:	f000 fc36 	bl	800542c <vPortExitCritical>

	return xAlreadyYielded;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	200005bc 	.word	0x200005bc
 8004bd0:	20000594 	.word	0x20000594
 8004bd4:	20000554 	.word	0x20000554
 8004bd8:	2000059c 	.word	0x2000059c
 8004bdc:	20000498 	.word	0x20000498
 8004be0:	20000494 	.word	0x20000494
 8004be4:	200005a8 	.word	0x200005a8
 8004be8:	200005a4 	.word	0x200005a4
 8004bec:	e000ed04 	.word	0xe000ed04

08004bf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004d38 <xTaskIncrementTick+0x148>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f040 808f 	bne.w	8004d22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c04:	4b4d      	ldr	r3, [pc, #308]	@ (8004d3c <xTaskIncrementTick+0x14c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c0c:	4a4b      	ldr	r2, [pc, #300]	@ (8004d3c <xTaskIncrementTick+0x14c>)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d121      	bne.n	8004c5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c18:	4b49      	ldr	r3, [pc, #292]	@ (8004d40 <xTaskIncrementTick+0x150>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	603b      	str	r3, [r7, #0]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <xTaskIncrementTick+0x46>
 8004c3a:	4b41      	ldr	r3, [pc, #260]	@ (8004d40 <xTaskIncrementTick+0x150>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	4b40      	ldr	r3, [pc, #256]	@ (8004d44 <xTaskIncrementTick+0x154>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a3e      	ldr	r2, [pc, #248]	@ (8004d40 <xTaskIncrementTick+0x150>)
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	4a3e      	ldr	r2, [pc, #248]	@ (8004d44 <xTaskIncrementTick+0x154>)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d48 <xTaskIncrementTick+0x158>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3301      	adds	r3, #1
 8004c54:	4a3c      	ldr	r2, [pc, #240]	@ (8004d48 <xTaskIncrementTick+0x158>)
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	f000 f9a4 	bl	8004fa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d4c <xTaskIncrementTick+0x15c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d348      	bcc.n	8004cf8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c66:	4b36      	ldr	r3, [pc, #216]	@ (8004d40 <xTaskIncrementTick+0x150>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c70:	4b36      	ldr	r3, [pc, #216]	@ (8004d4c <xTaskIncrementTick+0x15c>)
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c76:	601a      	str	r2, [r3, #0]
					break;
 8004c78:	e03e      	b.n	8004cf8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c7a:	4b31      	ldr	r3, [pc, #196]	@ (8004d40 <xTaskIncrementTick+0x150>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d203      	bcs.n	8004c9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c92:	4a2e      	ldr	r2, [pc, #184]	@ (8004d4c <xTaskIncrementTick+0x15c>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c98:	e02e      	b.n	8004cf8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fc81 	bl	80045a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	3318      	adds	r3, #24
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff fc78 	bl	80045a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	2201      	movs	r2, #1
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <xTaskIncrementTick+0x160>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	4a22      	ldr	r2, [pc, #136]	@ (8004d50 <xTaskIncrementTick+0x160>)
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d54 <xTaskIncrementTick+0x164>)
 8004cd6:	441a      	add	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4610      	mov	r0, r2
 8004ce0:	f7ff fc04 	bl	80044ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d58 <xTaskIncrementTick+0x168>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d3b9      	bcc.n	8004c66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cf6:	e7b6      	b.n	8004c66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cf8:	4b17      	ldr	r3, [pc, #92]	@ (8004d58 <xTaskIncrementTick+0x168>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfe:	4915      	ldr	r1, [pc, #84]	@ (8004d54 <xTaskIncrementTick+0x164>)
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d901      	bls.n	8004d14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d14:	4b11      	ldr	r3, [pc, #68]	@ (8004d5c <xTaskIncrementTick+0x16c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e004      	b.n	8004d2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d22:	4b0f      	ldr	r3, [pc, #60]	@ (8004d60 <xTaskIncrementTick+0x170>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3301      	adds	r3, #1
 8004d28:	4a0d      	ldr	r2, [pc, #52]	@ (8004d60 <xTaskIncrementTick+0x170>)
 8004d2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d2c:	697b      	ldr	r3, [r7, #20]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	200005bc 	.word	0x200005bc
 8004d3c:	20000598 	.word	0x20000598
 8004d40:	2000054c 	.word	0x2000054c
 8004d44:	20000550 	.word	0x20000550
 8004d48:	200005ac 	.word	0x200005ac
 8004d4c:	200005b4 	.word	0x200005b4
 8004d50:	2000059c 	.word	0x2000059c
 8004d54:	20000498 	.word	0x20000498
 8004d58:	20000494 	.word	0x20000494
 8004d5c:	200005a8 	.word	0x200005a8
 8004d60:	200005a4 	.word	0x200005a4

08004d64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e14 <vTaskSwitchContext+0xb0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d72:	4b29      	ldr	r3, [pc, #164]	@ (8004e18 <vTaskSwitchContext+0xb4>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d78:	e045      	b.n	8004e06 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004d7a:	4b27      	ldr	r3, [pc, #156]	@ (8004e18 <vTaskSwitchContext+0xb4>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d80:	4b26      	ldr	r3, [pc, #152]	@ (8004e1c <vTaskSwitchContext+0xb8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	fab3 f383 	clz	r3, r3
 8004d8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d8e:	7afb      	ldrb	r3, [r7, #11]
 8004d90:	f1c3 031f 	rsb	r3, r3, #31
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	4922      	ldr	r1, [pc, #136]	@ (8004e20 <vTaskSwitchContext+0xbc>)
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10b      	bne.n	8004dc2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	607b      	str	r3, [r7, #4]
}
 8004dbc:	bf00      	nop
 8004dbe:	bf00      	nop
 8004dc0:	e7fd      	b.n	8004dbe <vTaskSwitchContext+0x5a>
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4a14      	ldr	r2, [pc, #80]	@ (8004e20 <vTaskSwitchContext+0xbc>)
 8004dce:	4413      	add	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	605a      	str	r2, [r3, #4]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	3308      	adds	r3, #8
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d104      	bne.n	8004df2 <vTaskSwitchContext+0x8e>
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	605a      	str	r2, [r3, #4]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4a0a      	ldr	r2, [pc, #40]	@ (8004e24 <vTaskSwitchContext+0xc0>)
 8004dfa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dfc:	4b09      	ldr	r3, [pc, #36]	@ (8004e24 <vTaskSwitchContext+0xc0>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	334c      	adds	r3, #76	@ 0x4c
 8004e02:	4a09      	ldr	r2, [pc, #36]	@ (8004e28 <vTaskSwitchContext+0xc4>)
 8004e04:	6013      	str	r3, [r2, #0]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	200005bc 	.word	0x200005bc
 8004e18:	200005a8 	.word	0x200005a8
 8004e1c:	2000059c 	.word	0x2000059c
 8004e20:	20000498 	.word	0x20000498
 8004e24:	20000494 	.word	0x20000494
 8004e28:	20000028 	.word	0x20000028

08004e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e34:	f000 f852 	bl	8004edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e38:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <prvIdleTask+0x28>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d9f9      	bls.n	8004e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e40:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <prvIdleTask+0x2c>)
 8004e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e50:	e7f0      	b.n	8004e34 <prvIdleTask+0x8>
 8004e52:	bf00      	nop
 8004e54:	20000498 	.word	0x20000498
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e62:	2300      	movs	r3, #0
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	e00c      	b.n	8004e82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4a12      	ldr	r2, [pc, #72]	@ (8004ebc <prvInitialiseTaskLists+0x60>)
 8004e74:	4413      	add	r3, r2
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fb0b 	bl	8004492 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	607b      	str	r3, [r7, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b06      	cmp	r3, #6
 8004e86:	d9ef      	bls.n	8004e68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e88:	480d      	ldr	r0, [pc, #52]	@ (8004ec0 <prvInitialiseTaskLists+0x64>)
 8004e8a:	f7ff fb02 	bl	8004492 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e8e:	480d      	ldr	r0, [pc, #52]	@ (8004ec4 <prvInitialiseTaskLists+0x68>)
 8004e90:	f7ff faff 	bl	8004492 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e94:	480c      	ldr	r0, [pc, #48]	@ (8004ec8 <prvInitialiseTaskLists+0x6c>)
 8004e96:	f7ff fafc 	bl	8004492 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e9a:	480c      	ldr	r0, [pc, #48]	@ (8004ecc <prvInitialiseTaskLists+0x70>)
 8004e9c:	f7ff faf9 	bl	8004492 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ea0:	480b      	ldr	r0, [pc, #44]	@ (8004ed0 <prvInitialiseTaskLists+0x74>)
 8004ea2:	f7ff faf6 	bl	8004492 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <prvInitialiseTaskLists+0x78>)
 8004ea8:	4a05      	ldr	r2, [pc, #20]	@ (8004ec0 <prvInitialiseTaskLists+0x64>)
 8004eaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004eac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed8 <prvInitialiseTaskLists+0x7c>)
 8004eae:	4a05      	ldr	r2, [pc, #20]	@ (8004ec4 <prvInitialiseTaskLists+0x68>)
 8004eb0:	601a      	str	r2, [r3, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000498 	.word	0x20000498
 8004ec0:	20000524 	.word	0x20000524
 8004ec4:	20000538 	.word	0x20000538
 8004ec8:	20000554 	.word	0x20000554
 8004ecc:	20000568 	.word	0x20000568
 8004ed0:	20000580 	.word	0x20000580
 8004ed4:	2000054c 	.word	0x2000054c
 8004ed8:	20000550 	.word	0x20000550

08004edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ee2:	e019      	b.n	8004f18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ee4:	f000 fa70 	bl	80053c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee8:	4b10      	ldr	r3, [pc, #64]	@ (8004f2c <prvCheckTasksWaitingTermination+0x50>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7ff fb56 	bl	80045a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004efa:	4b0d      	ldr	r3, [pc, #52]	@ (8004f30 <prvCheckTasksWaitingTermination+0x54>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	4a0b      	ldr	r2, [pc, #44]	@ (8004f30 <prvCheckTasksWaitingTermination+0x54>)
 8004f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f04:	4b0b      	ldr	r3, [pc, #44]	@ (8004f34 <prvCheckTasksWaitingTermination+0x58>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f34 <prvCheckTasksWaitingTermination+0x58>)
 8004f0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f0e:	f000 fa8d 	bl	800542c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f810 	bl	8004f38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f18:	4b06      	ldr	r3, [pc, #24]	@ (8004f34 <prvCheckTasksWaitingTermination+0x58>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e1      	bne.n	8004ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000568 	.word	0x20000568
 8004f30:	20000594 	.word	0x20000594
 8004f34:	2000057c 	.word	0x2000057c

08004f38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	334c      	adds	r3, #76	@ 0x4c
 8004f44:	4618      	mov	r0, r3
 8004f46:	f001 fae3 	bl	8006510 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d108      	bne.n	8004f66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fbe3 	bl	8005724 <vPortFree>
				vPortFree( pxTCB );
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fbe0 	bl	8005724 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f64:	e019      	b.n	8004f9a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d103      	bne.n	8004f78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fbd7 	bl	8005724 <vPortFree>
	}
 8004f76:	e010      	b.n	8004f9a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d00b      	beq.n	8004f9a <prvDeleteTCB+0x62>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	60fb      	str	r3, [r7, #12]
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	e7fd      	b.n	8004f96 <prvDeleteTCB+0x5e>
	}
 8004f9a:	bf00      	nop
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004faa:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <prvResetNextTaskUnblockTime+0x38>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d104      	bne.n	8004fbe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe0 <prvResetNextTaskUnblockTime+0x3c>)
 8004fb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fbc:	e008      	b.n	8004fd0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fbe:	4b07      	ldr	r3, [pc, #28]	@ (8004fdc <prvResetNextTaskUnblockTime+0x38>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4a04      	ldr	r2, [pc, #16]	@ (8004fe0 <prvResetNextTaskUnblockTime+0x3c>)
 8004fce:	6013      	str	r3, [r2, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	2000054c 	.word	0x2000054c
 8004fe0:	200005b4 	.word	0x200005b4

08004fe4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004fea:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <xTaskGetCurrentTaskHandle+0x1c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004ff0:	687b      	ldr	r3, [r7, #4]
	}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000494 	.word	0x20000494

08005004 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800500e:	f000 f9db 	bl	80053c8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005012:	4b20      	ldr	r3, [pc, #128]	@ (8005094 <ulTaskNotifyTake+0x90>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800501a:	2b00      	cmp	r3, #0
 800501c:	d113      	bne.n	8005046 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800501e:	4b1d      	ldr	r3, [pc, #116]	@ (8005094 <ulTaskNotifyTake+0x90>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00b      	beq.n	8005046 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800502e:	2101      	movs	r1, #1
 8005030:	6838      	ldr	r0, [r7, #0]
 8005032:	f000 f833 	bl	800509c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005036:	4b18      	ldr	r3, [pc, #96]	@ (8005098 <ulTaskNotifyTake+0x94>)
 8005038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005046:	f000 f9f1 	bl	800542c <vPortExitCritical>

		taskENTER_CRITICAL();
 800504a:	f000 f9bd 	bl	80053c8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800504e:	4b11      	ldr	r3, [pc, #68]	@ (8005094 <ulTaskNotifyTake+0x90>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005056:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00e      	beq.n	800507c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005064:	4b0b      	ldr	r3, [pc, #44]	@ (8005094 <ulTaskNotifyTake+0x90>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2200      	movs	r2, #0
 800506a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800506e:	e005      	b.n	800507c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005070:	4b08      	ldr	r3, [pc, #32]	@ (8005094 <ulTaskNotifyTake+0x90>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	3a01      	subs	r2, #1
 8005078:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800507c:	4b05      	ldr	r3, [pc, #20]	@ (8005094 <ulTaskNotifyTake+0x90>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8005086:	f000 f9d1 	bl	800542c <vPortExitCritical>

		return ulReturn;
 800508a:	68fb      	ldr	r3, [r7, #12]
	}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20000494 	.word	0x20000494
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050a6:	4b29      	ldr	r3, [pc, #164]	@ (800514c <prvAddCurrentTaskToDelayedList+0xb0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050ac:	4b28      	ldr	r3, [pc, #160]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff fa77 	bl	80045a6 <uxListRemove>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10b      	bne.n	80050d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050be:	4b24      	ldr	r3, [pc, #144]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	2201      	movs	r2, #1
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	43da      	mvns	r2, r3
 80050cc:	4b21      	ldr	r3, [pc, #132]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4013      	ands	r3, r2
 80050d2:	4a20      	ldr	r2, [pc, #128]	@ (8005154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80050d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050dc:	d10a      	bne.n	80050f4 <prvAddCurrentTaskToDelayedList+0x58>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3304      	adds	r3, #4
 80050ea:	4619      	mov	r1, r3
 80050ec:	481a      	ldr	r0, [pc, #104]	@ (8005158 <prvAddCurrentTaskToDelayedList+0xbc>)
 80050ee:	f7ff f9fd 	bl	80044ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050f2:	e026      	b.n	8005142 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050fc:	4b14      	ldr	r3, [pc, #80]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	429a      	cmp	r2, r3
 800510a:	d209      	bcs.n	8005120 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800510c:	4b13      	ldr	r3, [pc, #76]	@ (800515c <prvAddCurrentTaskToDelayedList+0xc0>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b0f      	ldr	r3, [pc, #60]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3304      	adds	r3, #4
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f7ff fa0b 	bl	8004534 <vListInsert>
}
 800511e:	e010      	b.n	8005142 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005120:	4b0f      	ldr	r3, [pc, #60]	@ (8005160 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3304      	adds	r3, #4
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f7ff fa01 	bl	8004534 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005132:	4b0c      	ldr	r3, [pc, #48]	@ (8005164 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	429a      	cmp	r2, r3
 800513a:	d202      	bcs.n	8005142 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800513c:	4a09      	ldr	r2, [pc, #36]	@ (8005164 <prvAddCurrentTaskToDelayedList+0xc8>)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	6013      	str	r3, [r2, #0]
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	20000598 	.word	0x20000598
 8005150:	20000494 	.word	0x20000494
 8005154:	2000059c 	.word	0x2000059c
 8005158:	20000580 	.word	0x20000580
 800515c:	20000550 	.word	0x20000550
 8005160:	2000054c 	.word	0x2000054c
 8005164:	200005b4 	.word	0x200005b4

08005168 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3b04      	subs	r3, #4
 8005178:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3b04      	subs	r3, #4
 8005186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f023 0201 	bic.w	r2, r3, #1
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3b04      	subs	r3, #4
 8005196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005198:	4a0c      	ldr	r2, [pc, #48]	@ (80051cc <pxPortInitialiseStack+0x64>)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3b14      	subs	r3, #20
 80051a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3b04      	subs	r3, #4
 80051ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f06f 0202 	mvn.w	r2, #2
 80051b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3b20      	subs	r3, #32
 80051bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051be:	68fb      	ldr	r3, [r7, #12]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	080051d1 	.word	0x080051d1

080051d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051da:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <prvTaskExitError+0x58>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051e2:	d00b      	beq.n	80051fc <prvTaskExitError+0x2c>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	60fb      	str	r3, [r7, #12]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <prvTaskExitError+0x28>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	60bb      	str	r3, [r7, #8]
}
 800520e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005210:	bf00      	nop
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0fc      	beq.n	8005212 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	20000010 	.word	0x20000010
 800522c:	00000000 	.word	0x00000000

08005230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005230:	4b07      	ldr	r3, [pc, #28]	@ (8005250 <pxCurrentTCBConst2>)
 8005232:	6819      	ldr	r1, [r3, #0]
 8005234:	6808      	ldr	r0, [r1, #0]
 8005236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523a:	f380 8809 	msr	PSP, r0
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f04f 0000 	mov.w	r0, #0
 8005246:	f380 8811 	msr	BASEPRI, r0
 800524a:	4770      	bx	lr
 800524c:	f3af 8000 	nop.w

08005250 <pxCurrentTCBConst2>:
 8005250:	20000494 	.word	0x20000494
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop

08005258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005258:	4808      	ldr	r0, [pc, #32]	@ (800527c <prvPortStartFirstTask+0x24>)
 800525a:	6800      	ldr	r0, [r0, #0]
 800525c:	6800      	ldr	r0, [r0, #0]
 800525e:	f380 8808 	msr	MSP, r0
 8005262:	f04f 0000 	mov.w	r0, #0
 8005266:	f380 8814 	msr	CONTROL, r0
 800526a:	b662      	cpsie	i
 800526c:	b661      	cpsie	f
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	df00      	svc	0
 8005278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800527a:	bf00      	nop
 800527c:	e000ed08 	.word	0xe000ed08

08005280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005286:	4b47      	ldr	r3, [pc, #284]	@ (80053a4 <xPortStartScheduler+0x124>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a47      	ldr	r2, [pc, #284]	@ (80053a8 <xPortStartScheduler+0x128>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d10b      	bne.n	80052a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	613b      	str	r3, [r7, #16]
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052a8:	4b3e      	ldr	r3, [pc, #248]	@ (80053a4 <xPortStartScheduler+0x124>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3f      	ldr	r2, [pc, #252]	@ (80053ac <xPortStartScheduler+0x12c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10b      	bne.n	80052ca <xPortStartScheduler+0x4a>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	60fb      	str	r3, [r7, #12]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052ca:	4b39      	ldr	r3, [pc, #228]	@ (80053b0 <xPortStartScheduler+0x130>)
 80052cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	22ff      	movs	r2, #255	@ 0xff
 80052da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	4b31      	ldr	r3, [pc, #196]	@ (80053b4 <xPortStartScheduler+0x134>)
 80052f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052f2:	4b31      	ldr	r3, [pc, #196]	@ (80053b8 <xPortStartScheduler+0x138>)
 80052f4:	2207      	movs	r2, #7
 80052f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052f8:	e009      	b.n	800530e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80052fa:	4b2f      	ldr	r3, [pc, #188]	@ (80053b8 <xPortStartScheduler+0x138>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3b01      	subs	r3, #1
 8005300:	4a2d      	ldr	r2, [pc, #180]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	b2db      	uxtb	r3, r3
 800530c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800530e:	78fb      	ldrb	r3, [r7, #3]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005316:	2b80      	cmp	r3, #128	@ 0x80
 8005318:	d0ef      	beq.n	80052fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800531a:	4b27      	ldr	r3, [pc, #156]	@ (80053b8 <xPortStartScheduler+0x138>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f1c3 0307 	rsb	r3, r3, #7
 8005322:	2b04      	cmp	r3, #4
 8005324:	d00b      	beq.n	800533e <xPortStartScheduler+0xbe>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60bb      	str	r3, [r7, #8]
}
 8005338:	bf00      	nop
 800533a:	bf00      	nop
 800533c:	e7fd      	b.n	800533a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800533e:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	4a1c      	ldr	r2, [pc, #112]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005348:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <xPortStartScheduler+0x138>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005350:	4a19      	ldr	r2, [pc, #100]	@ (80053b8 <xPortStartScheduler+0x138>)
 8005352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800535c:	4b17      	ldr	r3, [pc, #92]	@ (80053bc <xPortStartScheduler+0x13c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a16      	ldr	r2, [pc, #88]	@ (80053bc <xPortStartScheduler+0x13c>)
 8005362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005368:	4b14      	ldr	r3, [pc, #80]	@ (80053bc <xPortStartScheduler+0x13c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a13      	ldr	r2, [pc, #76]	@ (80053bc <xPortStartScheduler+0x13c>)
 800536e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005374:	f000 f8da 	bl	800552c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005378:	4b11      	ldr	r3, [pc, #68]	@ (80053c0 <xPortStartScheduler+0x140>)
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800537e:	f000 f8f9 	bl	8005574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005382:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <xPortStartScheduler+0x144>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a0f      	ldr	r2, [pc, #60]	@ (80053c4 <xPortStartScheduler+0x144>)
 8005388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800538c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800538e:	f7ff ff63 	bl	8005258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005392:	f7ff fce7 	bl	8004d64 <vTaskSwitchContext>
	prvTaskExitError();
 8005396:	f7ff ff1b 	bl	80051d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	e000ed00 	.word	0xe000ed00
 80053a8:	410fc271 	.word	0x410fc271
 80053ac:	410fc270 	.word	0x410fc270
 80053b0:	e000e400 	.word	0xe000e400
 80053b4:	200005c0 	.word	0x200005c0
 80053b8:	200005c4 	.word	0x200005c4
 80053bc:	e000ed20 	.word	0xe000ed20
 80053c0:	20000010 	.word	0x20000010
 80053c4:	e000ef34 	.word	0xe000ef34

080053c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
}
 80053e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053e2:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <vPortEnterCritical+0x5c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3301      	adds	r3, #1
 80053e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005424 <vPortEnterCritical+0x5c>)
 80053ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005424 <vPortEnterCritical+0x5c>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d110      	bne.n	8005416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <vPortEnterCritical+0x60>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <vPortEnterCritical+0x4e>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	603b      	str	r3, [r7, #0]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <vPortEnterCritical+0x4a>
	}
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000010 	.word	0x20000010
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005432:	4b12      	ldr	r3, [pc, #72]	@ (800547c <vPortExitCritical+0x50>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10b      	bne.n	8005452 <vPortExitCritical+0x26>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	607b      	str	r3, [r7, #4]
}
 800544c:	bf00      	nop
 800544e:	bf00      	nop
 8005450:	e7fd      	b.n	800544e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005452:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <vPortExitCritical+0x50>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3b01      	subs	r3, #1
 8005458:	4a08      	ldr	r2, [pc, #32]	@ (800547c <vPortExitCritical+0x50>)
 800545a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800545c:	4b07      	ldr	r3, [pc, #28]	@ (800547c <vPortExitCritical+0x50>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d105      	bne.n	8005470 <vPortExitCritical+0x44>
 8005464:	2300      	movs	r3, #0
 8005466:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800546e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr
 800547c:	20000010 	.word	0x20000010

08005480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005480:	f3ef 8009 	mrs	r0, PSP
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	4b15      	ldr	r3, [pc, #84]	@ (80054e0 <pxCurrentTCBConst>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	f01e 0f10 	tst.w	lr, #16
 8005490:	bf08      	it	eq
 8005492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	6010      	str	r0, [r2, #0]
 800549c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80054a4:	f380 8811 	msr	BASEPRI, r0
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f7ff fc58 	bl	8004d64 <vTaskSwitchContext>
 80054b4:	f04f 0000 	mov.w	r0, #0
 80054b8:	f380 8811 	msr	BASEPRI, r0
 80054bc:	bc09      	pop	{r0, r3}
 80054be:	6819      	ldr	r1, [r3, #0]
 80054c0:	6808      	ldr	r0, [r1, #0]
 80054c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c6:	f01e 0f10 	tst.w	lr, #16
 80054ca:	bf08      	it	eq
 80054cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054d0:	f380 8809 	msr	PSP, r0
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	f3af 8000 	nop.w

080054e0 <pxCurrentTCBConst>:
 80054e0:	20000494 	.word	0x20000494
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop

080054e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	607b      	str	r3, [r7, #4]
}
 8005500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005502:	f7ff fb75 	bl	8004bf0 <xTaskIncrementTick>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800550c:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <SysTick_Handler+0x40>)
 800550e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	2300      	movs	r3, #0
 8005516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f383 8811 	msr	BASEPRI, r3
}
 800551e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005530:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <vPortSetupTimerInterrupt+0x34>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005536:	4b0b      	ldr	r3, [pc, #44]	@ (8005564 <vPortSetupTimerInterrupt+0x38>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800553c:	4b0a      	ldr	r3, [pc, #40]	@ (8005568 <vPortSetupTimerInterrupt+0x3c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a0a      	ldr	r2, [pc, #40]	@ (800556c <vPortSetupTimerInterrupt+0x40>)
 8005542:	fba2 2303 	umull	r2, r3, r2, r3
 8005546:	099b      	lsrs	r3, r3, #6
 8005548:	4a09      	ldr	r2, [pc, #36]	@ (8005570 <vPortSetupTimerInterrupt+0x44>)
 800554a:	3b01      	subs	r3, #1
 800554c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800554e:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <vPortSetupTimerInterrupt+0x34>)
 8005550:	2207      	movs	r2, #7
 8005552:	601a      	str	r2, [r3, #0]
}
 8005554:	bf00      	nop
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	e000e010 	.word	0xe000e010
 8005564:	e000e018 	.word	0xe000e018
 8005568:	20000004 	.word	0x20000004
 800556c:	10624dd3 	.word	0x10624dd3
 8005570:	e000e014 	.word	0xe000e014

08005574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005584 <vPortEnableVFP+0x10>
 8005578:	6801      	ldr	r1, [r0, #0]
 800557a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800557e:	6001      	str	r1, [r0, #0]
 8005580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005582:	bf00      	nop
 8005584:	e000ed88 	.word	0xe000ed88

08005588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b08a      	sub	sp, #40	@ 0x28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005594:	f7ff fa80 	bl	8004a98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005598:	4b5c      	ldr	r3, [pc, #368]	@ (800570c <pvPortMalloc+0x184>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055a0:	f000 f924 	bl	80057ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005710 <pvPortMalloc+0x188>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f040 8095 	bne.w	80056dc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01e      	beq.n	80055f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055b8:	2208      	movs	r2, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4413      	add	r3, r2
 80055be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d015      	beq.n	80055f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f023 0307 	bic.w	r3, r3, #7
 80055d0:	3308      	adds	r3, #8
 80055d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <pvPortMalloc+0x6e>
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	617b      	str	r3, [r7, #20]
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	e7fd      	b.n	80055f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d06f      	beq.n	80056dc <pvPortMalloc+0x154>
 80055fc:	4b45      	ldr	r3, [pc, #276]	@ (8005714 <pvPortMalloc+0x18c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	429a      	cmp	r2, r3
 8005604:	d86a      	bhi.n	80056dc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005606:	4b44      	ldr	r3, [pc, #272]	@ (8005718 <pvPortMalloc+0x190>)
 8005608:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800560a:	4b43      	ldr	r3, [pc, #268]	@ (8005718 <pvPortMalloc+0x190>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005610:	e004      	b.n	800561c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	429a      	cmp	r2, r3
 8005624:	d903      	bls.n	800562e <pvPortMalloc+0xa6>
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1f1      	bne.n	8005612 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800562e:	4b37      	ldr	r3, [pc, #220]	@ (800570c <pvPortMalloc+0x184>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005634:	429a      	cmp	r2, r3
 8005636:	d051      	beq.n	80056dc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2208      	movs	r2, #8
 800563e:	4413      	add	r3, r2
 8005640:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	1ad2      	subs	r2, r2, r3
 8005652:	2308      	movs	r3, #8
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	429a      	cmp	r2, r3
 8005658:	d920      	bls.n	800569c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800565a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4413      	add	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00b      	beq.n	8005684 <pvPortMalloc+0xfc>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	613b      	str	r3, [r7, #16]
}
 800567e:	bf00      	nop
 8005680:	bf00      	nop
 8005682:	e7fd      	b.n	8005680 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005696:	69b8      	ldr	r0, [r7, #24]
 8005698:	f000 f90a 	bl	80058b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800569c:	4b1d      	ldr	r3, [pc, #116]	@ (8005714 <pvPortMalloc+0x18c>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005714 <pvPortMalloc+0x18c>)
 80056a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005714 <pvPortMalloc+0x18c>)
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b1b      	ldr	r3, [pc, #108]	@ (800571c <pvPortMalloc+0x194>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d203      	bcs.n	80056be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056b6:	4b17      	ldr	r3, [pc, #92]	@ (8005714 <pvPortMalloc+0x18c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a18      	ldr	r2, [pc, #96]	@ (800571c <pvPortMalloc+0x194>)
 80056bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	4b13      	ldr	r3, [pc, #76]	@ (8005710 <pvPortMalloc+0x188>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <pvPortMalloc+0x198>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3301      	adds	r3, #1
 80056d8:	4a11      	ldr	r2, [pc, #68]	@ (8005720 <pvPortMalloc+0x198>)
 80056da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056dc:	f7ff f9ea 	bl	8004ab4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <pvPortMalloc+0x17a>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	60fb      	str	r3, [r7, #12]
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <pvPortMalloc+0x176>
	return pvReturn;
 8005702:	69fb      	ldr	r3, [r7, #28]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3728      	adds	r7, #40	@ 0x28
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	200041d0 	.word	0x200041d0
 8005710:	200041e4 	.word	0x200041e4
 8005714:	200041d4 	.word	0x200041d4
 8005718:	200041c8 	.word	0x200041c8
 800571c:	200041d8 	.word	0x200041d8
 8005720:	200041dc 	.word	0x200041dc

08005724 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b086      	sub	sp, #24
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d04f      	beq.n	80057d6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005736:	2308      	movs	r3, #8
 8005738:	425b      	negs	r3, r3
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4413      	add	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	4b25      	ldr	r3, [pc, #148]	@ (80057e0 <vPortFree+0xbc>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4013      	ands	r3, r2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <vPortFree+0x46>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60fb      	str	r3, [r7, #12]
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	e7fd      	b.n	8005766 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <vPortFree+0x66>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60bb      	str	r3, [r7, #8]
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop
 8005788:	e7fd      	b.n	8005786 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	4b14      	ldr	r3, [pc, #80]	@ (80057e0 <vPortFree+0xbc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4013      	ands	r3, r2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01e      	beq.n	80057d6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d11a      	bne.n	80057d6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	4b0e      	ldr	r3, [pc, #56]	@ (80057e0 <vPortFree+0xbc>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	43db      	mvns	r3, r3
 80057aa:	401a      	ands	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057b0:	f7ff f972 	bl	8004a98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	4b0a      	ldr	r3, [pc, #40]	@ (80057e4 <vPortFree+0xc0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4413      	add	r3, r2
 80057be:	4a09      	ldr	r2, [pc, #36]	@ (80057e4 <vPortFree+0xc0>)
 80057c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057c2:	6938      	ldr	r0, [r7, #16]
 80057c4:	f000 f874 	bl	80058b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057c8:	4b07      	ldr	r3, [pc, #28]	@ (80057e8 <vPortFree+0xc4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	4a06      	ldr	r2, [pc, #24]	@ (80057e8 <vPortFree+0xc4>)
 80057d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057d2:	f7ff f96f 	bl	8004ab4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057d6:	bf00      	nop
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	200041e4 	.word	0x200041e4
 80057e4:	200041d4 	.word	0x200041d4
 80057e8:	200041e0 	.word	0x200041e0

080057ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057f2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80057f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057f8:	4b27      	ldr	r3, [pc, #156]	@ (8005898 <prvHeapInit+0xac>)
 80057fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00c      	beq.n	8005820 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3307      	adds	r3, #7
 800580a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0307 	bic.w	r3, r3, #7
 8005812:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	4a1f      	ldr	r2, [pc, #124]	@ (8005898 <prvHeapInit+0xac>)
 800581c:	4413      	add	r3, r2
 800581e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005824:	4a1d      	ldr	r2, [pc, #116]	@ (800589c <prvHeapInit+0xb0>)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800582a:	4b1c      	ldr	r3, [pc, #112]	@ (800589c <prvHeapInit+0xb0>)
 800582c:	2200      	movs	r2, #0
 800582e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4413      	add	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005838:	2208      	movs	r2, #8
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0307 	bic.w	r3, r3, #7
 8005846:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4a15      	ldr	r2, [pc, #84]	@ (80058a0 <prvHeapInit+0xb4>)
 800584c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800584e:	4b14      	ldr	r3, [pc, #80]	@ (80058a0 <prvHeapInit+0xb4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2200      	movs	r2, #0
 8005854:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005856:	4b12      	ldr	r3, [pc, #72]	@ (80058a0 <prvHeapInit+0xb4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	1ad2      	subs	r2, r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800586c:	4b0c      	ldr	r3, [pc, #48]	@ (80058a0 <prvHeapInit+0xb4>)
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4a0a      	ldr	r2, [pc, #40]	@ (80058a4 <prvHeapInit+0xb8>)
 800587a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4a09      	ldr	r2, [pc, #36]	@ (80058a8 <prvHeapInit+0xbc>)
 8005882:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005884:	4b09      	ldr	r3, [pc, #36]	@ (80058ac <prvHeapInit+0xc0>)
 8005886:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800588a:	601a      	str	r2, [r3, #0]
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	200005c8 	.word	0x200005c8
 800589c:	200041c8 	.word	0x200041c8
 80058a0:	200041d0 	.word	0x200041d0
 80058a4:	200041d8 	.word	0x200041d8
 80058a8:	200041d4 	.word	0x200041d4
 80058ac:	200041e4 	.word	0x200041e4

080058b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058b8:	4b28      	ldr	r3, [pc, #160]	@ (800595c <prvInsertBlockIntoFreeList+0xac>)
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e002      	b.n	80058c4 <prvInsertBlockIntoFreeList+0x14>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d8f7      	bhi.n	80058be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	4413      	add	r3, r2
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d108      	bne.n	80058f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	441a      	add	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	441a      	add	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d118      	bne.n	8005938 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	4b15      	ldr	r3, [pc, #84]	@ (8005960 <prvInsertBlockIntoFreeList+0xb0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d00d      	beq.n	800592e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	441a      	add	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	e008      	b.n	8005940 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800592e:	4b0c      	ldr	r3, [pc, #48]	@ (8005960 <prvInsertBlockIntoFreeList+0xb0>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e003      	b.n	8005940 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	429a      	cmp	r2, r3
 8005946:	d002      	beq.n	800594e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	200041c8 	.word	0x200041c8
 8005960:	200041d0 	.word	0x200041d0

08005964 <drv_uart_receive>:
static volatile uint8_t uartRxComplete = 0;   // Flag for RX completion
static volatile uint8_t uartTxComplete = 0;   // Flag for TX completion

// Non-blocking UART Receive function
uint8_t drv_uart_receive(char *pData, uint16_t size)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	807b      	strh	r3, [r7, #2]
    // Register the current task as the one to notify when RX is complete
    uartRxTaskHandle = xTaskGetCurrentTaskHandle();
 8005970:	f7ff fb38 	bl	8004fe4 <xTaskGetCurrentTaskHandle>
 8005974:	4603      	mov	r3, r0
 8005976:	4a07      	ldr	r2, [pc, #28]	@ (8005994 <drv_uart_receive+0x30>)
 8005978:	6013      	str	r3, [r2, #0]

    // Start UART reception in interrupt mode (non-blocking)
    HAL_UART_Receive_IT(&UART_DEVICE_RPI, (uint8_t*)pData, size);
 800597a:	887b      	ldrh	r3, [r7, #2]
 800597c:	461a      	mov	r2, r3
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	4805      	ldr	r0, [pc, #20]	@ (8005998 <drv_uart_receive+0x34>)
 8005982:	f7fe f978 	bl	8003c76 <HAL_UART_Receive_IT>

    // Task will check completion via notification, so return immediately
    return size;
 8005986:	887b      	ldrh	r3, [r7, #2]
 8005988:	b2db      	uxtb	r3, r3
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200041e8 	.word	0x200041e8
 8005998:	20000448 	.word	0x20000448

0800599c <drv_uart_transmit>:

// Non-blocking UART Transmit function
uint8_t drv_uart_transmit(char *pData, uint16_t size)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	807b      	strh	r3, [r7, #2]
    // Register the current task as the one to notify when TX is complete
    uartTxTaskHandle = xTaskGetCurrentTaskHandle();
 80059a8:	f7ff fb1c 	bl	8004fe4 <xTaskGetCurrentTaskHandle>
 80059ac:	4603      	mov	r3, r0
 80059ae:	4a0a      	ldr	r2, [pc, #40]	@ (80059d8 <drv_uart_transmit+0x3c>)
 80059b0:	6013      	str	r3, [r2, #0]

    // Start UART transmission in interrupt mode (non-blocking)
    HAL_UART_Transmit_IT(&UART_DEVICE_PC, (uint8_t*)pData, size);
 80059b2:	887b      	ldrh	r3, [r7, #2]
 80059b4:	461a      	mov	r2, r3
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4808      	ldr	r0, [pc, #32]	@ (80059dc <drv_uart_transmit+0x40>)
 80059ba:	f7fe f926 	bl	8003c0a <HAL_UART_Transmit_IT>
    HAL_UART_Transmit_IT(&UART_DEVICE_RPI, (uint8_t*)pData, size);
 80059be:	887b      	ldrh	r3, [r7, #2]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4806      	ldr	r0, [pc, #24]	@ (80059e0 <drv_uart_transmit+0x44>)
 80059c6:	f7fe f920 	bl	8003c0a <HAL_UART_Transmit_IT>

    // Task will check completion via notification, so return immediately
    return size;
 80059ca:	887b      	ldrh	r3, [r7, #2]
 80059cc:	b2db      	uxtb	r3, r3
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	200041ec 	.word	0x200041ec
 80059dc:	20000400 	.word	0x20000400
 80059e0:	20000448 	.word	0x20000448

080059e4 <drv_uart_waitReceiveComplete>:
    }
}

// Function to check if UART receive is complete (blocking until notification received)
uint8_t drv_uart_waitReceiveComplete(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
    // Wait for RX task notification (blocking if necessary)
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80059e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80059ec:	2001      	movs	r0, #1
 80059ee:	f7ff fb09 	bl	8005004 <ulTaskNotifyTake>
    return 1;
 80059f2:	2301      	movs	r3, #1
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <drv_uart_waitTransmitComplete>:

// Function to check if UART transmit is complete (blocking until notification received)
uint8_t drv_uart_waitTransmitComplete(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
    // Wait for TX task notification (blocking if necessary)
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80059fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005a00:	2001      	movs	r0, #1
 8005a02:	f7ff faff 	bl	8005004 <ulTaskNotifyTake>
    return 1;
 8005a06:	2301      	movs	r3, #1
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <task_shell>:
#include <string.h>

h_shell_t h_shell;

void task_shell(void * unused)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	while(1)
	{
		shell_run(&h_shell); //infinie donc la task ne se finie jamais
 8005a14:	4803      	ldr	r0, [pc, #12]	@ (8005a24 <task_shell+0x18>)
 8005a16:	f000 fa0d 	bl	8005e34 <shell_run>
		// Delay or yield to allow other tasks to run
		vTaskDelay(pdMS_TO_TICKS(10));  // 10 ms delay for yielding
 8005a1a:	200a      	movs	r0, #10
 8005a1c:	f7fe ff9c 	bl	8004958 <vTaskDelay>
		shell_run(&h_shell); //infinie donc la task ne se finie jamais
 8005a20:	bf00      	nop
 8005a22:	e7f7      	b.n	8005a14 <task_shell+0x8>
 8005a24:	200041f0 	.word	0x200041f0

08005a28 <shell_createShellTask>:
	// If the task ends, delete it
	vTaskDelete(0);
}

BaseType_t shell_createShellTask(h_shell_t * h_shell)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	6078      	str	r0, [r7, #4]
	return xTaskCreate(task_shell, "task_shell", TASK_SHELL_STACK_DEPTH, NULL, TASK_SHELL_PRIORITY, &h_shell->h_shell_handle);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f503 7375 	add.w	r3, r3, #980	@ 0x3d4
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	2301      	movs	r3, #1
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a42:	4904      	ldr	r1, [pc, #16]	@ (8005a54 <shell_createShellTask+0x2c>)
 8005a44:	4804      	ldr	r0, [pc, #16]	@ (8005a58 <shell_createShellTask+0x30>)
 8005a46:	f7fe fe38 	bl	80046ba <xTaskCreate>
 8005a4a:	4603      	mov	r3, r0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	080075ac 	.word	0x080075ac
 8005a58:	08005a0d 	.word	0x08005a0d

08005a5c <sh_help>:

static int sh_help(h_shell_t * h_shell,int argc, char ** argv) {
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b089      	sub	sp, #36	@ 0x24
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < h_shell->shell_func_list_size ; i++) {
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	e02f      	b.n	8005ace <sh_help+0x72>
		int size;
		memset(h_shell->print_buffer, 0, BUFFER_SIZE);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3304      	adds	r3, #4
 8005a72:	2264      	movs	r2, #100	@ 0x64
 8005a74:	2100      	movs	r1, #0
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fca7 	bl	80063ca <memset>
		size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "%s: %s\r\n", h_shell->shell_func_list[i].name, h_shell->shell_func_list[i].description);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	1d18      	adds	r0, r3, #4
 8005a80:	68f9      	ldr	r1, [r7, #12]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4613      	mov	r3, r2
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4413      	add	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	3368      	adds	r3, #104	@ 0x68
 8005a90:	681c      	ldr	r4, [r3, #0]
 8005a92:	68f9      	ldr	r1, [r7, #12]
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4613      	mov	r3, r2
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	3370      	adds	r3, #112	@ 0x70
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8005ae4 <sh_help+0x88>)
 8005aaa:	2164      	movs	r1, #100	@ 0x64
 8005aac:	f000 fc16 	bl	80062dc <sniprintf>
 8005ab0:	6138      	str	r0, [r7, #16]
		h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, size);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	3204      	adds	r2, #4
 8005abc:	6939      	ldr	r1, [r7, #16]
 8005abe:	b289      	uxth	r1, r1
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4798      	blx	r3
        drv_uart_waitTransmitComplete();  // Wait for prompt transmission to complete
 8005ac4:	f7ff ff98 	bl	80059f8 <drv_uart_waitTransmitComplete>
	for(i = 0 ; i < h_shell->shell_func_list_size ; i++) {
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	3301      	adds	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	dbca      	blt.n	8005a6e <sh_help+0x12>

	}

	return 0;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	371c      	adds	r7, #28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd90      	pop	{r4, r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	080075b8 	.word	0x080075b8

08005ae8 <shell_init>:

void shell_init(h_shell_t * h_shell)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	int size = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]
	h_shell->shell_func_list_size = 0;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
	h_shell->drv_shell.drv_shell_receive = drv_uart_receive ;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a11      	ldr	r2, [pc, #68]	@ (8005b44 <shell_init+0x5c>)
 8005afe:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0
	h_shell->drv_shell.drv_shell_transmit = drv_uart_transmit ;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a10      	ldr	r2, [pc, #64]	@ (8005b48 <shell_init+0x60>)
 8005b06:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc

	size = snprintf (h_shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== 🐢 Wise Tortoise Shell v0.2 🐢 ===== \r\n");
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8005b4c <shell_init+0x64>)
 8005b10:	2164      	movs	r1, #100	@ 0x64
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fbe2 	bl	80062dc <sniprintf>
 8005b18:	60f8      	str	r0, [r7, #12]
	h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, size);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	3204      	adds	r2, #4
 8005b24:	68f9      	ldr	r1, [r7, #12]
 8005b26:	b289      	uxth	r1, r1
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4798      	blx	r3
    drv_uart_waitTransmitComplete();  // Wait for prompt transmission to complete
 8005b2c:	f7ff ff64 	bl	80059f8 <drv_uart_waitTransmitComplete>


	shell_add(h_shell,"help", sh_help, "Help");
 8005b30:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <shell_init+0x68>)
 8005b32:	4a08      	ldr	r2, [pc, #32]	@ (8005b54 <shell_init+0x6c>)
 8005b34:	4908      	ldr	r1, [pc, #32]	@ (8005b58 <shell_init+0x70>)
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f810 	bl	8005b5c <shell_add>
}
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	08005965 	.word	0x08005965
 8005b48:	0800599d 	.word	0x0800599d
 8005b4c:	080075c4 	.word	0x080075c4
 8005b50:	080075fc 	.word	0x080075fc
 8005b54:	08005a5d 	.word	0x08005a5d
 8005b58:	08007604 	.word	0x08007604

08005b5c <shell_add>:

int shell_add(h_shell_t * h_shell,char * name, shell_func_pointer_t pfunc, char * description) {
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
	if (h_shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005b70:	dc27      	bgt.n	8005bc2 <shell_add+0x66>
		h_shell->shell_func_list[h_shell->shell_func_list_size].name = name;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	3368      	adds	r3, #104	@ 0x68
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].func = pfunc;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68f9      	ldr	r1, [r7, #12]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	336c      	adds	r3, #108	@ 0x6c
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list[h_shell->shell_func_list_size].description = description;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	3370      	adds	r3, #112	@ 0x70
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	601a      	str	r2, [r3, #0]
		h_shell->shell_func_list_size++;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	601a      	str	r2, [r3, #0]
		return 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e001      	b.n	8005bc6 <shell_add+0x6a>
	}

	return -1;
 8005bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <shell_exec>:

static int shell_exec(h_shell_t *h_shell) {
 8005bd4:	b5b0      	push	{r4, r5, r7, lr}
 8005bd6:	b0ac      	sub	sp, #176	@ 0xb0
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
	if (h_shell == NULL )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <shell_exec+0x14>
	{
		return -1; // Invalid parameters
 8005be2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005be6:	e119      	b.n	8005e1c <shell_exec+0x248>
	}

	char buf[BUFFER_SIZE];
	char *token;
	char *argv[ARGC_MAX];
	int argc = 0;
 8005be8:	2300      	movs	r3, #0
 8005bea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	// Ensure cmd_buffer is copied safely
	strncpy(buf, h_shell->cmd_buffer, BUFFER_SIZE - 1);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f503 715a 	add.w	r1, r3, #872	@ 0x368
 8005bf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005bf8:	2263      	movs	r2, #99	@ 0x63
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fc09 	bl	8006412 <strncpy>
	buf[BUFFER_SIZE - 1] = '\0'; // null-terminate to avoid overflow
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

	// Get the first token separated by space
	token = strtok(buf, " ");
 8005c06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005c0a:	4986      	ldr	r1, [pc, #536]	@ (8005e24 <shell_exec+0x250>)
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fc13 	bl	8006438 <strtok>
 8005c12:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	while (token != NULL && argc < ARGC_MAX) {
 8005c16:	e054      	b.n	8005cc2 <shell_exec+0xee>
		argv[argc] = strdup(token); // allocate memory for each token
 8005c18:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8005c1c:	f000 fbde 	bl	80063dc <strdup>
 8005c20:	4603      	mov	r3, r0
 8005c22:	461a      	mov	r2, r3
 8005c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	33b0      	adds	r3, #176	@ 0xb0
 8005c2c:	443b      	add	r3, r7
 8005c2e:	f843 2ca4 	str.w	r2, [r3, #-164]
		if (argv[argc] == NULL) {
 8005c32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	33b0      	adds	r3, #176	@ 0xb0
 8005c3a:	443b      	add	r3, r7
 8005c3c:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d133      	bne.n	8005cac <shell_exec+0xd8>
			// Memory allocation failed, clean up and return
			for (int j = 0; j < argc; j++) {
 8005c44:	2300      	movs	r3, #0
 8005c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c4a:	e00e      	b.n	8005c6a <shell_exec+0x96>
				free(argv[j]);
 8005c4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	33b0      	adds	r3, #176	@ 0xb0
 8005c54:	443b      	add	r3, r7
 8005c56:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f9b4 	bl	8005fc8 <free>
			for (int j = 0; j < argc; j++) {
 8005c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c64:	3301      	adds	r3, #1
 8005c66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c6a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005c6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c72:	429a      	cmp	r2, r3
 8005c74:	dbea      	blt.n	8005c4c <shell_exec+0x78>
			}
			snprintf(h_shell->print_buffer, BUFFER_SIZE, "Error: Memory allocation failed\r\n");
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4a6b      	ldr	r2, [pc, #428]	@ (8005e28 <shell_exec+0x254>)
 8005c7c:	2164      	movs	r1, #100	@ 0x64
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fb2c 	bl	80062dc <sniprintf>
			h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, strlen(h_shell->print_buffer));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 43cc 	ldr.w	r4, [r3, #972]	@ 0x3cc
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	1d1d      	adds	r5, r3, #4
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fa fac6 	bl	8000224 <strlen>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	47a0      	blx	r4
	        drv_uart_waitTransmitComplete();  // Wait for prompt transmission to complete
 8005ca2:	f7ff fea9 	bl	80059f8 <drv_uart_waitTransmitComplete>

			return -1;
 8005ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005caa:	e0b7      	b.n	8005e1c <shell_exec+0x248>
		}
		argc++; // increment argument count
 8005cac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		token = strtok(NULL, " "); // get next token
 8005cb6:	495b      	ldr	r1, [pc, #364]	@ (8005e24 <shell_exec+0x250>)
 8005cb8:	2000      	movs	r0, #0
 8005cba:	f000 fbbd 	bl	8006438 <strtok>
 8005cbe:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	while (token != NULL && argc < ARGC_MAX) {
 8005cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <shell_exec+0xfe>
 8005cca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cce:	2b07      	cmp	r3, #7
 8005cd0:	dda2      	ble.n	8005c18 <shell_exec+0x44>
	}

	if (argc == 0) {
 8005cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d11a      	bne.n	8005d10 <shell_exec+0x13c>
		snprintf(h_shell->print_buffer, BUFFER_SIZE, "Error: No command entered\r\n");
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4a53      	ldr	r2, [pc, #332]	@ (8005e2c <shell_exec+0x258>)
 8005ce0:	2164      	movs	r1, #100	@ 0x64
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fafa 	bl	80062dc <sniprintf>
		h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, strlen(h_shell->print_buffer));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 43cc 	ldr.w	r4, [r3, #972]	@ 0x3cc
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	1d1d      	adds	r5, r3, #4
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fa fa94 	bl	8000224 <strlen>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	4619      	mov	r1, r3
 8005d02:	4628      	mov	r0, r5
 8005d04:	47a0      	blx	r4
        drv_uart_waitTransmitComplete();  // Wait for prompt transmission to complete
 8005d06:	f7ff fe77 	bl	80059f8 <drv_uart_waitTransmitComplete>

		return -1;
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d0e:	e085      	b.n	8005e1c <shell_exec+0x248>
	}

	// Check if user_func is valid and perform command lookup
	char *user_func = argv[0]; // first token is the command
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	for (int i = 0; i < h_shell->shell_func_list_size; i++) {
 8005d16:	2300      	movs	r3, #0
 8005d18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d1c:	e044      	b.n	8005da8 <shell_exec+0x1d4>
		if (strcmp(h_shell->shell_func_list[i].name, user_func) == 0) {
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8005d24:	4613      	mov	r3, r2
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	3368      	adds	r3, #104	@ 0x68
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fa fa6a 	bl	8000210 <strcmp>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d12d      	bne.n	8005d9e <shell_exec+0x1ca>
			// Execute the command
			int result = h_shell->shell_func_list[i].func(h_shell, argc, argv);
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8005d48:	4613      	mov	r3, r2
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	336c      	adds	r3, #108	@ 0x6c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f107 020c 	add.w	r2, r7, #12
 8005d5a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
 8005d62:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

			// Clean up dynamically allocated memory before returning
			for (int j = 0; j < argc; j++) {
 8005d66:	2300      	movs	r3, #0
 8005d68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d6c:	e00e      	b.n	8005d8c <shell_exec+0x1b8>
				free(argv[j]);
 8005d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	33b0      	adds	r3, #176	@ 0xb0
 8005d76:	443b      	add	r3, r7
 8005d78:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 f923 	bl	8005fc8 <free>
			for (int j = 0; j < argc; j++) {
 8005d82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d86:	3301      	adds	r3, #1
 8005d88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d8c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8005d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d94:	429a      	cmp	r2, r3
 8005d96:	dbea      	blt.n	8005d6e <shell_exec+0x19a>
			}
			return result;
 8005d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d9c:	e03e      	b.n	8005e1c <shell_exec+0x248>
	for (int i = 0; i < h_shell->shell_func_list_size; i++) {
 8005d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005da2:	3301      	adds	r3, #1
 8005da4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8005db0:	429a      	cmp	r2, r3
 8005db2:	dbb4      	blt.n	8005d1e <shell_exec+0x14a>
		}
	}

	// If no matching function is found
	snprintf(h_shell->print_buffer, BUFFER_SIZE, "%s: no such command\r\n", user_func);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	1d18      	adds	r0, r3, #4
 8005db8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e30 <shell_exec+0x25c>)
 8005dbe:	2164      	movs	r1, #100	@ 0x64
 8005dc0:	f000 fa8c 	bl	80062dc <sniprintf>
	h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, strlen(h_shell->print_buffer));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 43cc 	ldr.w	r4, [r3, #972]	@ 0x3cc
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	1d1d      	adds	r5, r3, #4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3304      	adds	r3, #4
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fa fa26 	bl	8000224 <strlen>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4628      	mov	r0, r5
 8005de0:	47a0      	blx	r4
    drv_uart_waitTransmitComplete();  // Wait for prompt transmission to complete
 8005de2:	f7ff fe09 	bl	80059f8 <drv_uart_waitTransmitComplete>

	// Clean up allocated memory before returning
	for (int j = 0; j < argc; j++) {
 8005de6:	2300      	movs	r3, #0
 8005de8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005dec:	e00e      	b.n	8005e0c <shell_exec+0x238>
		free(argv[j]);
 8005dee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	33b0      	adds	r3, #176	@ 0xb0
 8005df6:	443b      	add	r3, r7
 8005df8:	f853 3ca4 	ldr.w	r3, [r3, #-164]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 f8e3 	bl	8005fc8 <free>
	for (int j = 0; j < argc; j++) {
 8005e02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e06:	3301      	adds	r3, #1
 8005e08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e0c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005e10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e14:	429a      	cmp	r2, r3
 8005e16:	dbea      	blt.n	8005dee <shell_exec+0x21a>
	}
	return -1;
 8005e18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	37b0      	adds	r7, #176	@ 0xb0
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bdb0      	pop	{r4, r5, r7, pc}
 8005e24:	0800760c 	.word	0x0800760c
 8005e28:	08007610 	.word	0x08007610
 8005e2c:	08007634 	.word	0x08007634
 8005e30:	08007650 	.word	0x08007650

08005e34 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

//non-blocking shell run
int shell_run(h_shell_t *h_shell) {
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
    static int reading = 0;          // Reading state
    char c;
    int size;

    // State 1: Show prompt if not already reading input
    if (!reading)
 8005e3c:	4b57      	ldr	r3, [pc, #348]	@ (8005f9c <shell_run+0x168>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <shell_run+0x26>
    {
        h_shell->drv_shell.drv_shell_transmit(prompt, 2); // Send the prompt
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005e4a:	2102      	movs	r1, #2
 8005e4c:	4854      	ldr	r0, [pc, #336]	@ (8005fa0 <shell_run+0x16c>)
 8005e4e:	4798      	blx	r3
        drv_uart_waitTransmitComplete();  // Wait for prompt transmission to complete
 8005e50:	f7ff fdd2 	bl	80059f8 <drv_uart_waitTransmitComplete>
        reading = 1;  // Switch to reading mode
 8005e54:	4b51      	ldr	r3, [pc, #324]	@ (8005f9c <shell_run+0x168>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
    }

    // State 2: Check for received character (non-blocking)
    if (drv_uart_receive(&c, 1)) {
 8005e5a:	f107 030b 	add.w	r3, r7, #11
 8005e5e:	2101      	movs	r1, #1
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff fd7f 	bl	8005964 <drv_uart_receive>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8091 	beq.w	8005f90 <shell_run+0x15c>
        drv_uart_waitReceiveComplete();  // Wait for character reception
 8005e6e:	f7ff fdb9 	bl	80059e4 <drv_uart_waitReceiveComplete>

        // Process the received character
        switch (c) {
 8005e72:	7afb      	ldrb	r3, [r7, #11]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d055      	beq.n	8005f24 <shell_run+0xf0>
 8005e78:	2b0d      	cmp	r3, #13
 8005e7a:	d16c      	bne.n	8005f56 <shell_run+0x122>
            case '\r':  // Process RETURN key
                if (pos > 0)// Only process if there's something in the buffer
 8005e7c:	4b49      	ldr	r3, [pc, #292]	@ (8005fa4 <shell_run+0x170>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	dd35      	ble.n	8005ef0 <shell_run+0xbc>
                {
                    size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "\r\n");
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4a47      	ldr	r2, [pc, #284]	@ (8005fa8 <shell_run+0x174>)
 8005e8a:	2164      	movs	r1, #100	@ 0x64
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 fa25 	bl	80062dc <sniprintf>
 8005e92:	60f8      	str	r0, [r7, #12]
                    h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, size);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	3204      	adds	r2, #4
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	b289      	uxth	r1, r1
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4798      	blx	r3
                    drv_uart_waitTransmitComplete();  // Wait for transmission to complete
 8005ea6:	f7ff fda7 	bl	80059f8 <drv_uart_waitTransmitComplete>

                    h_shell->cmd_buffer[pos++] = 0;  // Add NULL terminator to the command buffer
 8005eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8005fa4 <shell_run+0x170>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	493c      	ldr	r1, [pc, #240]	@ (8005fa4 <shell_run+0x170>)
 8005eb2:	600a      	str	r2, [r1, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
                    size = snprintf(h_shell->print_buffer, BUFFER_SIZE, ":%s\r\n", h_shell->cmd_buffer);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	1d18      	adds	r0, r3, #4
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8005ec8:	4a38      	ldr	r2, [pc, #224]	@ (8005fac <shell_run+0x178>)
 8005eca:	2164      	movs	r1, #100	@ 0x64
 8005ecc:	f000 fa06 	bl	80062dc <sniprintf>
 8005ed0:	60f8      	str	r0, [r7, #12]
                    h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, size);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	3204      	adds	r2, #4
 8005edc:	68f9      	ldr	r1, [r7, #12]
 8005ede:	b289      	uxth	r1, r1
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	4798      	blx	r3
                    drv_uart_waitTransmitComplete();  // Wait for transmission to complete
 8005ee4:	f7ff fd88 	bl	80059f8 <drv_uart_waitTransmitComplete>

                    shell_exec(h_shell);  // Execute the command after input is complete
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff fe73 	bl	8005bd4 <shell_exec>
 8005eee:	e012      	b.n	8005f16 <shell_run+0xe2>
                }
                else                     // If buffer is empty, print an error or ignore

                {
                    size = snprintf(h_shell->print_buffer, BUFFER_SIZE, "\r\nError: No command entered\r\n");
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8005fb0 <shell_run+0x17c>)
 8005ef6:	2164      	movs	r1, #100	@ 0x64
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 f9ef 	bl	80062dc <sniprintf>
 8005efe:	60f8      	str	r0, [r7, #12]
                    h_shell->drv_shell.drv_shell_transmit(h_shell->print_buffer, size);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	3204      	adds	r2, #4
 8005f0a:	68f9      	ldr	r1, [r7, #12]
 8005f0c:	b289      	uxth	r1, r1
 8005f0e:	4610      	mov	r0, r2
 8005f10:	4798      	blx	r3
                    drv_uart_waitTransmitComplete();  // Wait for transmission to complete
 8005f12:	f7ff fd71 	bl	80059f8 <drv_uart_waitTransmitComplete>
                }

                // Reset reading state and buffer
                reading = 0;  // Exit reading state
 8005f16:	4b21      	ldr	r3, [pc, #132]	@ (8005f9c <shell_run+0x168>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
                pos = 0;      // Reset buffer
 8005f1c:	4b21      	ldr	r3, [pc, #132]	@ (8005fa4 <shell_run+0x170>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
                break;
 8005f22:	e035      	b.n	8005f90 <shell_run+0x15c>

            case '\b':  // Process BACKSPACE key
                if (pos > 0) {
 8005f24:	4b1f      	ldr	r3, [pc, #124]	@ (8005fa4 <shell_run+0x170>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dd2e      	ble.n	8005f8a <shell_run+0x156>
                    pos--;  // Remove last character from buffer
 8005f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa4 <shell_run+0x170>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa4 <shell_run+0x170>)
 8005f34:	6013      	str	r3, [r2, #0]
                    // Send backspace and space to the terminal to visually erase the character
                    h_shell->drv_shell.drv_shell_transmit(backspace, sizeof(backspace) - 1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005f3c:	2103      	movs	r1, #3
 8005f3e:	481d      	ldr	r0, [pc, #116]	@ (8005fb4 <shell_run+0x180>)
 8005f40:	4798      	blx	r3
                    drv_uart_waitTransmitComplete();  // Wait for transmission to complete
 8005f42:	f7ff fd59 	bl	80059f8 <drv_uart_waitTransmitComplete>
                    h_shell->cmd_buffer[pos] = 0;  // Null terminate the command buffer after removing char
 8005f46:	4b17      	ldr	r3, [pc, #92]	@ (8005fa4 <shell_run+0x170>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368

                }
                break;
 8005f54:	e019      	b.n	8005f8a <shell_run+0x156>

            default:  // Handle other characters
                if (pos < BUFFER_SIZE) {
 8005f56:	4b13      	ldr	r3, [pc, #76]	@ (8005fa4 <shell_run+0x170>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b63      	cmp	r3, #99	@ 0x63
 8005f5c:	dc17      	bgt.n	8005f8e <shell_run+0x15a>
                    h_shell->drv_shell.drv_shell_transmit(&c, 1);  // Echo the character back to terminal
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8005f64:	f107 020b 	add.w	r2, r7, #11
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	4798      	blx	r3
                    drv_uart_waitTransmitComplete();  // Wait for transmission to complete
 8005f6e:	f7ff fd43 	bl	80059f8 <drv_uart_waitTransmitComplete>
                    h_shell->cmd_buffer[pos++] = c;  // Store the character in buffer
 8005f72:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <shell_run+0x170>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	490a      	ldr	r1, [pc, #40]	@ (8005fa4 <shell_run+0x170>)
 8005f7a:	600a      	str	r2, [r1, #0]
 8005f7c:	7af9      	ldrb	r1, [r7, #11]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4413      	add	r3, r2
 8005f82:	460a      	mov	r2, r1
 8005f84:	f883 2368 	strb.w	r2, [r3, #872]	@ 0x368
                }
                break;
 8005f88:	e001      	b.n	8005f8e <shell_run+0x15a>
                break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <shell_run+0x15c>
                break;
 8005f8e:	bf00      	nop
        }
    }

    return 0;  // Function returns immediately without blocking
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200045c8 	.word	0x200045c8
 8005fa0:	20000018 	.word	0x20000018
 8005fa4:	200045cc 	.word	0x200045cc
 8005fa8:	08007668 	.word	0x08007668
 8005fac:	0800766c 	.word	0x0800766c
 8005fb0:	08007674 	.word	0x08007674
 8005fb4:	20000014 	.word	0x20000014

08005fb8 <malloc>:
 8005fb8:	4b02      	ldr	r3, [pc, #8]	@ (8005fc4 <malloc+0xc>)
 8005fba:	4601      	mov	r1, r0
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	f000 b82d 	b.w	800601c <_malloc_r>
 8005fc2:	bf00      	nop
 8005fc4:	20000028 	.word	0x20000028

08005fc8 <free>:
 8005fc8:	4b02      	ldr	r3, [pc, #8]	@ (8005fd4 <free+0xc>)
 8005fca:	4601      	mov	r1, r0
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	f000 bb95 	b.w	80066fc <_free_r>
 8005fd2:	bf00      	nop
 8005fd4:	20000028 	.word	0x20000028

08005fd8 <sbrk_aligned>:
 8005fd8:	b570      	push	{r4, r5, r6, lr}
 8005fda:	4e0f      	ldr	r6, [pc, #60]	@ (8006018 <sbrk_aligned+0x40>)
 8005fdc:	460c      	mov	r4, r1
 8005fde:	6831      	ldr	r1, [r6, #0]
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	b911      	cbnz	r1, 8005fea <sbrk_aligned+0x12>
 8005fe4:	f000 fb0e 	bl	8006604 <_sbrk_r>
 8005fe8:	6030      	str	r0, [r6, #0]
 8005fea:	4621      	mov	r1, r4
 8005fec:	4628      	mov	r0, r5
 8005fee:	f000 fb09 	bl	8006604 <_sbrk_r>
 8005ff2:	1c43      	adds	r3, r0, #1
 8005ff4:	d103      	bne.n	8005ffe <sbrk_aligned+0x26>
 8005ff6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
 8005ffe:	1cc4      	adds	r4, r0, #3
 8006000:	f024 0403 	bic.w	r4, r4, #3
 8006004:	42a0      	cmp	r0, r4
 8006006:	d0f8      	beq.n	8005ffa <sbrk_aligned+0x22>
 8006008:	1a21      	subs	r1, r4, r0
 800600a:	4628      	mov	r0, r5
 800600c:	f000 fafa 	bl	8006604 <_sbrk_r>
 8006010:	3001      	adds	r0, #1
 8006012:	d1f2      	bne.n	8005ffa <sbrk_aligned+0x22>
 8006014:	e7ef      	b.n	8005ff6 <sbrk_aligned+0x1e>
 8006016:	bf00      	nop
 8006018:	200045d0 	.word	0x200045d0

0800601c <_malloc_r>:
 800601c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006020:	1ccd      	adds	r5, r1, #3
 8006022:	f025 0503 	bic.w	r5, r5, #3
 8006026:	3508      	adds	r5, #8
 8006028:	2d0c      	cmp	r5, #12
 800602a:	bf38      	it	cc
 800602c:	250c      	movcc	r5, #12
 800602e:	2d00      	cmp	r5, #0
 8006030:	4606      	mov	r6, r0
 8006032:	db01      	blt.n	8006038 <_malloc_r+0x1c>
 8006034:	42a9      	cmp	r1, r5
 8006036:	d904      	bls.n	8006042 <_malloc_r+0x26>
 8006038:	230c      	movs	r3, #12
 800603a:	6033      	str	r3, [r6, #0]
 800603c:	2000      	movs	r0, #0
 800603e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006042:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006118 <_malloc_r+0xfc>
 8006046:	f000 f869 	bl	800611c <__malloc_lock>
 800604a:	f8d8 3000 	ldr.w	r3, [r8]
 800604e:	461c      	mov	r4, r3
 8006050:	bb44      	cbnz	r4, 80060a4 <_malloc_r+0x88>
 8006052:	4629      	mov	r1, r5
 8006054:	4630      	mov	r0, r6
 8006056:	f7ff ffbf 	bl	8005fd8 <sbrk_aligned>
 800605a:	1c43      	adds	r3, r0, #1
 800605c:	4604      	mov	r4, r0
 800605e:	d158      	bne.n	8006112 <_malloc_r+0xf6>
 8006060:	f8d8 4000 	ldr.w	r4, [r8]
 8006064:	4627      	mov	r7, r4
 8006066:	2f00      	cmp	r7, #0
 8006068:	d143      	bne.n	80060f2 <_malloc_r+0xd6>
 800606a:	2c00      	cmp	r4, #0
 800606c:	d04b      	beq.n	8006106 <_malloc_r+0xea>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	4639      	mov	r1, r7
 8006072:	4630      	mov	r0, r6
 8006074:	eb04 0903 	add.w	r9, r4, r3
 8006078:	f000 fac4 	bl	8006604 <_sbrk_r>
 800607c:	4581      	cmp	r9, r0
 800607e:	d142      	bne.n	8006106 <_malloc_r+0xea>
 8006080:	6821      	ldr	r1, [r4, #0]
 8006082:	1a6d      	subs	r5, r5, r1
 8006084:	4629      	mov	r1, r5
 8006086:	4630      	mov	r0, r6
 8006088:	f7ff ffa6 	bl	8005fd8 <sbrk_aligned>
 800608c:	3001      	adds	r0, #1
 800608e:	d03a      	beq.n	8006106 <_malloc_r+0xea>
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	442b      	add	r3, r5
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	f8d8 3000 	ldr.w	r3, [r8]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	bb62      	cbnz	r2, 80060f8 <_malloc_r+0xdc>
 800609e:	f8c8 7000 	str.w	r7, [r8]
 80060a2:	e00f      	b.n	80060c4 <_malloc_r+0xa8>
 80060a4:	6822      	ldr	r2, [r4, #0]
 80060a6:	1b52      	subs	r2, r2, r5
 80060a8:	d420      	bmi.n	80060ec <_malloc_r+0xd0>
 80060aa:	2a0b      	cmp	r2, #11
 80060ac:	d917      	bls.n	80060de <_malloc_r+0xc2>
 80060ae:	1961      	adds	r1, r4, r5
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	6025      	str	r5, [r4, #0]
 80060b4:	bf18      	it	ne
 80060b6:	6059      	strne	r1, [r3, #4]
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	bf08      	it	eq
 80060bc:	f8c8 1000 	streq.w	r1, [r8]
 80060c0:	5162      	str	r2, [r4, r5]
 80060c2:	604b      	str	r3, [r1, #4]
 80060c4:	4630      	mov	r0, r6
 80060c6:	f000 f82f 	bl	8006128 <__malloc_unlock>
 80060ca:	f104 000b 	add.w	r0, r4, #11
 80060ce:	1d23      	adds	r3, r4, #4
 80060d0:	f020 0007 	bic.w	r0, r0, #7
 80060d4:	1ac2      	subs	r2, r0, r3
 80060d6:	bf1c      	itt	ne
 80060d8:	1a1b      	subne	r3, r3, r0
 80060da:	50a3      	strne	r3, [r4, r2]
 80060dc:	e7af      	b.n	800603e <_malloc_r+0x22>
 80060de:	6862      	ldr	r2, [r4, #4]
 80060e0:	42a3      	cmp	r3, r4
 80060e2:	bf0c      	ite	eq
 80060e4:	f8c8 2000 	streq.w	r2, [r8]
 80060e8:	605a      	strne	r2, [r3, #4]
 80060ea:	e7eb      	b.n	80060c4 <_malloc_r+0xa8>
 80060ec:	4623      	mov	r3, r4
 80060ee:	6864      	ldr	r4, [r4, #4]
 80060f0:	e7ae      	b.n	8006050 <_malloc_r+0x34>
 80060f2:	463c      	mov	r4, r7
 80060f4:	687f      	ldr	r7, [r7, #4]
 80060f6:	e7b6      	b.n	8006066 <_malloc_r+0x4a>
 80060f8:	461a      	mov	r2, r3
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	42a3      	cmp	r3, r4
 80060fe:	d1fb      	bne.n	80060f8 <_malloc_r+0xdc>
 8006100:	2300      	movs	r3, #0
 8006102:	6053      	str	r3, [r2, #4]
 8006104:	e7de      	b.n	80060c4 <_malloc_r+0xa8>
 8006106:	230c      	movs	r3, #12
 8006108:	6033      	str	r3, [r6, #0]
 800610a:	4630      	mov	r0, r6
 800610c:	f000 f80c 	bl	8006128 <__malloc_unlock>
 8006110:	e794      	b.n	800603c <_malloc_r+0x20>
 8006112:	6005      	str	r5, [r0, #0]
 8006114:	e7d6      	b.n	80060c4 <_malloc_r+0xa8>
 8006116:	bf00      	nop
 8006118:	200045d4 	.word	0x200045d4

0800611c <__malloc_lock>:
 800611c:	4801      	ldr	r0, [pc, #4]	@ (8006124 <__malloc_lock+0x8>)
 800611e:	f000 babe 	b.w	800669e <__retarget_lock_acquire_recursive>
 8006122:	bf00      	nop
 8006124:	20004718 	.word	0x20004718

08006128 <__malloc_unlock>:
 8006128:	4801      	ldr	r0, [pc, #4]	@ (8006130 <__malloc_unlock+0x8>)
 800612a:	f000 bab9 	b.w	80066a0 <__retarget_lock_release_recursive>
 800612e:	bf00      	nop
 8006130:	20004718 	.word	0x20004718

08006134 <std>:
 8006134:	2300      	movs	r3, #0
 8006136:	b510      	push	{r4, lr}
 8006138:	4604      	mov	r4, r0
 800613a:	e9c0 3300 	strd	r3, r3, [r0]
 800613e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006142:	6083      	str	r3, [r0, #8]
 8006144:	8181      	strh	r1, [r0, #12]
 8006146:	6643      	str	r3, [r0, #100]	@ 0x64
 8006148:	81c2      	strh	r2, [r0, #14]
 800614a:	6183      	str	r3, [r0, #24]
 800614c:	4619      	mov	r1, r3
 800614e:	2208      	movs	r2, #8
 8006150:	305c      	adds	r0, #92	@ 0x5c
 8006152:	f000 f93a 	bl	80063ca <memset>
 8006156:	4b0d      	ldr	r3, [pc, #52]	@ (800618c <std+0x58>)
 8006158:	6263      	str	r3, [r4, #36]	@ 0x24
 800615a:	4b0d      	ldr	r3, [pc, #52]	@ (8006190 <std+0x5c>)
 800615c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800615e:	4b0d      	ldr	r3, [pc, #52]	@ (8006194 <std+0x60>)
 8006160:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006162:	4b0d      	ldr	r3, [pc, #52]	@ (8006198 <std+0x64>)
 8006164:	6323      	str	r3, [r4, #48]	@ 0x30
 8006166:	4b0d      	ldr	r3, [pc, #52]	@ (800619c <std+0x68>)
 8006168:	6224      	str	r4, [r4, #32]
 800616a:	429c      	cmp	r4, r3
 800616c:	d006      	beq.n	800617c <std+0x48>
 800616e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006172:	4294      	cmp	r4, r2
 8006174:	d002      	beq.n	800617c <std+0x48>
 8006176:	33d0      	adds	r3, #208	@ 0xd0
 8006178:	429c      	cmp	r4, r3
 800617a:	d105      	bne.n	8006188 <std+0x54>
 800617c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006184:	f000 ba8a 	b.w	800669c <__retarget_lock_init_recursive>
 8006188:	bd10      	pop	{r4, pc}
 800618a:	bf00      	nop
 800618c:	08006345 	.word	0x08006345
 8006190:	08006367 	.word	0x08006367
 8006194:	0800639f 	.word	0x0800639f
 8006198:	080063c3 	.word	0x080063c3
 800619c:	200045d8 	.word	0x200045d8

080061a0 <stdio_exit_handler>:
 80061a0:	4a02      	ldr	r2, [pc, #8]	@ (80061ac <stdio_exit_handler+0xc>)
 80061a2:	4903      	ldr	r1, [pc, #12]	@ (80061b0 <stdio_exit_handler+0x10>)
 80061a4:	4803      	ldr	r0, [pc, #12]	@ (80061b4 <stdio_exit_handler+0x14>)
 80061a6:	f000 b869 	b.w	800627c <_fwalk_sglue>
 80061aa:	bf00      	nop
 80061ac:	2000001c 	.word	0x2000001c
 80061b0:	080070e9 	.word	0x080070e9
 80061b4:	2000002c 	.word	0x2000002c

080061b8 <cleanup_stdio>:
 80061b8:	6841      	ldr	r1, [r0, #4]
 80061ba:	4b0c      	ldr	r3, [pc, #48]	@ (80061ec <cleanup_stdio+0x34>)
 80061bc:	4299      	cmp	r1, r3
 80061be:	b510      	push	{r4, lr}
 80061c0:	4604      	mov	r4, r0
 80061c2:	d001      	beq.n	80061c8 <cleanup_stdio+0x10>
 80061c4:	f000 ff90 	bl	80070e8 <_fflush_r>
 80061c8:	68a1      	ldr	r1, [r4, #8]
 80061ca:	4b09      	ldr	r3, [pc, #36]	@ (80061f0 <cleanup_stdio+0x38>)
 80061cc:	4299      	cmp	r1, r3
 80061ce:	d002      	beq.n	80061d6 <cleanup_stdio+0x1e>
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 ff89 	bl	80070e8 <_fflush_r>
 80061d6:	68e1      	ldr	r1, [r4, #12]
 80061d8:	4b06      	ldr	r3, [pc, #24]	@ (80061f4 <cleanup_stdio+0x3c>)
 80061da:	4299      	cmp	r1, r3
 80061dc:	d004      	beq.n	80061e8 <cleanup_stdio+0x30>
 80061de:	4620      	mov	r0, r4
 80061e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061e4:	f000 bf80 	b.w	80070e8 <_fflush_r>
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	bf00      	nop
 80061ec:	200045d8 	.word	0x200045d8
 80061f0:	20004640 	.word	0x20004640
 80061f4:	200046a8 	.word	0x200046a8

080061f8 <global_stdio_init.part.0>:
 80061f8:	b510      	push	{r4, lr}
 80061fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006228 <global_stdio_init.part.0+0x30>)
 80061fc:	4c0b      	ldr	r4, [pc, #44]	@ (800622c <global_stdio_init.part.0+0x34>)
 80061fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006230 <global_stdio_init.part.0+0x38>)
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	4620      	mov	r0, r4
 8006204:	2200      	movs	r2, #0
 8006206:	2104      	movs	r1, #4
 8006208:	f7ff ff94 	bl	8006134 <std>
 800620c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006210:	2201      	movs	r2, #1
 8006212:	2109      	movs	r1, #9
 8006214:	f7ff ff8e 	bl	8006134 <std>
 8006218:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800621c:	2202      	movs	r2, #2
 800621e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006222:	2112      	movs	r1, #18
 8006224:	f7ff bf86 	b.w	8006134 <std>
 8006228:	20004710 	.word	0x20004710
 800622c:	200045d8 	.word	0x200045d8
 8006230:	080061a1 	.word	0x080061a1

08006234 <__sfp_lock_acquire>:
 8006234:	4801      	ldr	r0, [pc, #4]	@ (800623c <__sfp_lock_acquire+0x8>)
 8006236:	f000 ba32 	b.w	800669e <__retarget_lock_acquire_recursive>
 800623a:	bf00      	nop
 800623c:	20004719 	.word	0x20004719

08006240 <__sfp_lock_release>:
 8006240:	4801      	ldr	r0, [pc, #4]	@ (8006248 <__sfp_lock_release+0x8>)
 8006242:	f000 ba2d 	b.w	80066a0 <__retarget_lock_release_recursive>
 8006246:	bf00      	nop
 8006248:	20004719 	.word	0x20004719

0800624c <__sinit>:
 800624c:	b510      	push	{r4, lr}
 800624e:	4604      	mov	r4, r0
 8006250:	f7ff fff0 	bl	8006234 <__sfp_lock_acquire>
 8006254:	6a23      	ldr	r3, [r4, #32]
 8006256:	b11b      	cbz	r3, 8006260 <__sinit+0x14>
 8006258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800625c:	f7ff bff0 	b.w	8006240 <__sfp_lock_release>
 8006260:	4b04      	ldr	r3, [pc, #16]	@ (8006274 <__sinit+0x28>)
 8006262:	6223      	str	r3, [r4, #32]
 8006264:	4b04      	ldr	r3, [pc, #16]	@ (8006278 <__sinit+0x2c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1f5      	bne.n	8006258 <__sinit+0xc>
 800626c:	f7ff ffc4 	bl	80061f8 <global_stdio_init.part.0>
 8006270:	e7f2      	b.n	8006258 <__sinit+0xc>
 8006272:	bf00      	nop
 8006274:	080061b9 	.word	0x080061b9
 8006278:	20004710 	.word	0x20004710

0800627c <_fwalk_sglue>:
 800627c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006280:	4607      	mov	r7, r0
 8006282:	4688      	mov	r8, r1
 8006284:	4614      	mov	r4, r2
 8006286:	2600      	movs	r6, #0
 8006288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800628c:	f1b9 0901 	subs.w	r9, r9, #1
 8006290:	d505      	bpl.n	800629e <_fwalk_sglue+0x22>
 8006292:	6824      	ldr	r4, [r4, #0]
 8006294:	2c00      	cmp	r4, #0
 8006296:	d1f7      	bne.n	8006288 <_fwalk_sglue+0xc>
 8006298:	4630      	mov	r0, r6
 800629a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800629e:	89ab      	ldrh	r3, [r5, #12]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d907      	bls.n	80062b4 <_fwalk_sglue+0x38>
 80062a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062a8:	3301      	adds	r3, #1
 80062aa:	d003      	beq.n	80062b4 <_fwalk_sglue+0x38>
 80062ac:	4629      	mov	r1, r5
 80062ae:	4638      	mov	r0, r7
 80062b0:	47c0      	blx	r8
 80062b2:	4306      	orrs	r6, r0
 80062b4:	3568      	adds	r5, #104	@ 0x68
 80062b6:	e7e9      	b.n	800628c <_fwalk_sglue+0x10>

080062b8 <iprintf>:
 80062b8:	b40f      	push	{r0, r1, r2, r3}
 80062ba:	b507      	push	{r0, r1, r2, lr}
 80062bc:	4906      	ldr	r1, [pc, #24]	@ (80062d8 <iprintf+0x20>)
 80062be:	ab04      	add	r3, sp, #16
 80062c0:	6808      	ldr	r0, [r1, #0]
 80062c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80062c6:	6881      	ldr	r1, [r0, #8]
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	f000 fbe3 	bl	8006a94 <_vfiprintf_r>
 80062ce:	b003      	add	sp, #12
 80062d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80062d4:	b004      	add	sp, #16
 80062d6:	4770      	bx	lr
 80062d8:	20000028 	.word	0x20000028

080062dc <sniprintf>:
 80062dc:	b40c      	push	{r2, r3}
 80062de:	b530      	push	{r4, r5, lr}
 80062e0:	4b17      	ldr	r3, [pc, #92]	@ (8006340 <sniprintf+0x64>)
 80062e2:	1e0c      	subs	r4, r1, #0
 80062e4:	681d      	ldr	r5, [r3, #0]
 80062e6:	b09d      	sub	sp, #116	@ 0x74
 80062e8:	da08      	bge.n	80062fc <sniprintf+0x20>
 80062ea:	238b      	movs	r3, #139	@ 0x8b
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062f2:	b01d      	add	sp, #116	@ 0x74
 80062f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062f8:	b002      	add	sp, #8
 80062fa:	4770      	bx	lr
 80062fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006300:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006304:	bf14      	ite	ne
 8006306:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800630a:	4623      	moveq	r3, r4
 800630c:	9304      	str	r3, [sp, #16]
 800630e:	9307      	str	r3, [sp, #28]
 8006310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006314:	9002      	str	r0, [sp, #8]
 8006316:	9006      	str	r0, [sp, #24]
 8006318:	f8ad 3016 	strh.w	r3, [sp, #22]
 800631c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800631e:	ab21      	add	r3, sp, #132	@ 0x84
 8006320:	a902      	add	r1, sp, #8
 8006322:	4628      	mov	r0, r5
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	f000 fa8f 	bl	8006848 <_svfiprintf_r>
 800632a:	1c43      	adds	r3, r0, #1
 800632c:	bfbc      	itt	lt
 800632e:	238b      	movlt	r3, #139	@ 0x8b
 8006330:	602b      	strlt	r3, [r5, #0]
 8006332:	2c00      	cmp	r4, #0
 8006334:	d0dd      	beq.n	80062f2 <sniprintf+0x16>
 8006336:	9b02      	ldr	r3, [sp, #8]
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	e7d9      	b.n	80062f2 <sniprintf+0x16>
 800633e:	bf00      	nop
 8006340:	20000028 	.word	0x20000028

08006344 <__sread>:
 8006344:	b510      	push	{r4, lr}
 8006346:	460c      	mov	r4, r1
 8006348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800634c:	f000 f948 	bl	80065e0 <_read_r>
 8006350:	2800      	cmp	r0, #0
 8006352:	bfab      	itete	ge
 8006354:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006356:	89a3      	ldrhlt	r3, [r4, #12]
 8006358:	181b      	addge	r3, r3, r0
 800635a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800635e:	bfac      	ite	ge
 8006360:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006362:	81a3      	strhlt	r3, [r4, #12]
 8006364:	bd10      	pop	{r4, pc}

08006366 <__swrite>:
 8006366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800636a:	461f      	mov	r7, r3
 800636c:	898b      	ldrh	r3, [r1, #12]
 800636e:	05db      	lsls	r3, r3, #23
 8006370:	4605      	mov	r5, r0
 8006372:	460c      	mov	r4, r1
 8006374:	4616      	mov	r6, r2
 8006376:	d505      	bpl.n	8006384 <__swrite+0x1e>
 8006378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800637c:	2302      	movs	r3, #2
 800637e:	2200      	movs	r2, #0
 8006380:	f000 f91c 	bl	80065bc <_lseek_r>
 8006384:	89a3      	ldrh	r3, [r4, #12]
 8006386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800638a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800638e:	81a3      	strh	r3, [r4, #12]
 8006390:	4632      	mov	r2, r6
 8006392:	463b      	mov	r3, r7
 8006394:	4628      	mov	r0, r5
 8006396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800639a:	f000 b943 	b.w	8006624 <_write_r>

0800639e <__sseek>:
 800639e:	b510      	push	{r4, lr}
 80063a0:	460c      	mov	r4, r1
 80063a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063a6:	f000 f909 	bl	80065bc <_lseek_r>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	bf15      	itete	ne
 80063b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80063b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80063b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80063ba:	81a3      	strheq	r3, [r4, #12]
 80063bc:	bf18      	it	ne
 80063be:	81a3      	strhne	r3, [r4, #12]
 80063c0:	bd10      	pop	{r4, pc}

080063c2 <__sclose>:
 80063c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c6:	f000 b893 	b.w	80064f0 <_close_r>

080063ca <memset>:
 80063ca:	4402      	add	r2, r0
 80063cc:	4603      	mov	r3, r0
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d100      	bne.n	80063d4 <memset+0xa>
 80063d2:	4770      	bx	lr
 80063d4:	f803 1b01 	strb.w	r1, [r3], #1
 80063d8:	e7f9      	b.n	80063ce <memset+0x4>
	...

080063dc <strdup>:
 80063dc:	4b02      	ldr	r3, [pc, #8]	@ (80063e8 <strdup+0xc>)
 80063de:	4601      	mov	r1, r0
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	f000 b803 	b.w	80063ec <_strdup_r>
 80063e6:	bf00      	nop
 80063e8:	20000028 	.word	0x20000028

080063ec <_strdup_r>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	460d      	mov	r5, r1
 80063f4:	f7f9 ff16 	bl	8000224 <strlen>
 80063f8:	1c46      	adds	r6, r0, #1
 80063fa:	4631      	mov	r1, r6
 80063fc:	4620      	mov	r0, r4
 80063fe:	f7ff fe0d 	bl	800601c <_malloc_r>
 8006402:	4604      	mov	r4, r0
 8006404:	b118      	cbz	r0, 800640e <_strdup_r+0x22>
 8006406:	4632      	mov	r2, r6
 8006408:	4629      	mov	r1, r5
 800640a:	f000 f94a 	bl	80066a2 <memcpy>
 800640e:	4620      	mov	r0, r4
 8006410:	bd70      	pop	{r4, r5, r6, pc}

08006412 <strncpy>:
 8006412:	b510      	push	{r4, lr}
 8006414:	3901      	subs	r1, #1
 8006416:	4603      	mov	r3, r0
 8006418:	b132      	cbz	r2, 8006428 <strncpy+0x16>
 800641a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800641e:	f803 4b01 	strb.w	r4, [r3], #1
 8006422:	3a01      	subs	r2, #1
 8006424:	2c00      	cmp	r4, #0
 8006426:	d1f7      	bne.n	8006418 <strncpy+0x6>
 8006428:	441a      	add	r2, r3
 800642a:	2100      	movs	r1, #0
 800642c:	4293      	cmp	r3, r2
 800642e:	d100      	bne.n	8006432 <strncpy+0x20>
 8006430:	bd10      	pop	{r4, pc}
 8006432:	f803 1b01 	strb.w	r1, [r3], #1
 8006436:	e7f9      	b.n	800642c <strncpy+0x1a>

08006438 <strtok>:
 8006438:	4b16      	ldr	r3, [pc, #88]	@ (8006494 <strtok+0x5c>)
 800643a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643e:	681f      	ldr	r7, [r3, #0]
 8006440:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006442:	4605      	mov	r5, r0
 8006444:	460e      	mov	r6, r1
 8006446:	b9ec      	cbnz	r4, 8006484 <strtok+0x4c>
 8006448:	2050      	movs	r0, #80	@ 0x50
 800644a:	f7ff fdb5 	bl	8005fb8 <malloc>
 800644e:	4602      	mov	r2, r0
 8006450:	6478      	str	r0, [r7, #68]	@ 0x44
 8006452:	b920      	cbnz	r0, 800645e <strtok+0x26>
 8006454:	4b10      	ldr	r3, [pc, #64]	@ (8006498 <strtok+0x60>)
 8006456:	4811      	ldr	r0, [pc, #68]	@ (800649c <strtok+0x64>)
 8006458:	215b      	movs	r1, #91	@ 0x5b
 800645a:	f000 f931 	bl	80066c0 <__assert_func>
 800645e:	e9c0 4400 	strd	r4, r4, [r0]
 8006462:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006466:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800646a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800646e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006472:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006476:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800647a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800647e:	6184      	str	r4, [r0, #24]
 8006480:	7704      	strb	r4, [r0, #28]
 8006482:	6244      	str	r4, [r0, #36]	@ 0x24
 8006484:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	2301      	movs	r3, #1
 800648c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006490:	f000 b806 	b.w	80064a0 <__strtok_r>
 8006494:	20000028 	.word	0x20000028
 8006498:	080076ac 	.word	0x080076ac
 800649c:	080076c3 	.word	0x080076c3

080064a0 <__strtok_r>:
 80064a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064a2:	4604      	mov	r4, r0
 80064a4:	b908      	cbnz	r0, 80064aa <__strtok_r+0xa>
 80064a6:	6814      	ldr	r4, [r2, #0]
 80064a8:	b144      	cbz	r4, 80064bc <__strtok_r+0x1c>
 80064aa:	4620      	mov	r0, r4
 80064ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80064b0:	460f      	mov	r7, r1
 80064b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80064b6:	b91e      	cbnz	r6, 80064c0 <__strtok_r+0x20>
 80064b8:	b965      	cbnz	r5, 80064d4 <__strtok_r+0x34>
 80064ba:	6015      	str	r5, [r2, #0]
 80064bc:	2000      	movs	r0, #0
 80064be:	e005      	b.n	80064cc <__strtok_r+0x2c>
 80064c0:	42b5      	cmp	r5, r6
 80064c2:	d1f6      	bne.n	80064b2 <__strtok_r+0x12>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1f0      	bne.n	80064aa <__strtok_r+0xa>
 80064c8:	6014      	str	r4, [r2, #0]
 80064ca:	7003      	strb	r3, [r0, #0]
 80064cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ce:	461c      	mov	r4, r3
 80064d0:	e00c      	b.n	80064ec <__strtok_r+0x4c>
 80064d2:	b915      	cbnz	r5, 80064da <__strtok_r+0x3a>
 80064d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064d8:	460e      	mov	r6, r1
 80064da:	f816 5b01 	ldrb.w	r5, [r6], #1
 80064de:	42ab      	cmp	r3, r5
 80064e0:	d1f7      	bne.n	80064d2 <__strtok_r+0x32>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f3      	beq.n	80064ce <__strtok_r+0x2e>
 80064e6:	2300      	movs	r3, #0
 80064e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80064ec:	6014      	str	r4, [r2, #0]
 80064ee:	e7ed      	b.n	80064cc <__strtok_r+0x2c>

080064f0 <_close_r>:
 80064f0:	b538      	push	{r3, r4, r5, lr}
 80064f2:	4d06      	ldr	r5, [pc, #24]	@ (800650c <_close_r+0x1c>)
 80064f4:	2300      	movs	r3, #0
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	602b      	str	r3, [r5, #0]
 80064fc:	f7fa fcae 	bl	8000e5c <_close>
 8006500:	1c43      	adds	r3, r0, #1
 8006502:	d102      	bne.n	800650a <_close_r+0x1a>
 8006504:	682b      	ldr	r3, [r5, #0]
 8006506:	b103      	cbz	r3, 800650a <_close_r+0x1a>
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	20004714 	.word	0x20004714

08006510 <_reclaim_reent>:
 8006510:	4b29      	ldr	r3, [pc, #164]	@ (80065b8 <_reclaim_reent+0xa8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4283      	cmp	r3, r0
 8006516:	b570      	push	{r4, r5, r6, lr}
 8006518:	4604      	mov	r4, r0
 800651a:	d04b      	beq.n	80065b4 <_reclaim_reent+0xa4>
 800651c:	69c3      	ldr	r3, [r0, #28]
 800651e:	b1ab      	cbz	r3, 800654c <_reclaim_reent+0x3c>
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	b16b      	cbz	r3, 8006540 <_reclaim_reent+0x30>
 8006524:	2500      	movs	r5, #0
 8006526:	69e3      	ldr	r3, [r4, #28]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	5959      	ldr	r1, [r3, r5]
 800652c:	2900      	cmp	r1, #0
 800652e:	d13b      	bne.n	80065a8 <_reclaim_reent+0x98>
 8006530:	3504      	adds	r5, #4
 8006532:	2d80      	cmp	r5, #128	@ 0x80
 8006534:	d1f7      	bne.n	8006526 <_reclaim_reent+0x16>
 8006536:	69e3      	ldr	r3, [r4, #28]
 8006538:	4620      	mov	r0, r4
 800653a:	68d9      	ldr	r1, [r3, #12]
 800653c:	f000 f8de 	bl	80066fc <_free_r>
 8006540:	69e3      	ldr	r3, [r4, #28]
 8006542:	6819      	ldr	r1, [r3, #0]
 8006544:	b111      	cbz	r1, 800654c <_reclaim_reent+0x3c>
 8006546:	4620      	mov	r0, r4
 8006548:	f000 f8d8 	bl	80066fc <_free_r>
 800654c:	6961      	ldr	r1, [r4, #20]
 800654e:	b111      	cbz	r1, 8006556 <_reclaim_reent+0x46>
 8006550:	4620      	mov	r0, r4
 8006552:	f000 f8d3 	bl	80066fc <_free_r>
 8006556:	69e1      	ldr	r1, [r4, #28]
 8006558:	b111      	cbz	r1, 8006560 <_reclaim_reent+0x50>
 800655a:	4620      	mov	r0, r4
 800655c:	f000 f8ce 	bl	80066fc <_free_r>
 8006560:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006562:	b111      	cbz	r1, 800656a <_reclaim_reent+0x5a>
 8006564:	4620      	mov	r0, r4
 8006566:	f000 f8c9 	bl	80066fc <_free_r>
 800656a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800656c:	b111      	cbz	r1, 8006574 <_reclaim_reent+0x64>
 800656e:	4620      	mov	r0, r4
 8006570:	f000 f8c4 	bl	80066fc <_free_r>
 8006574:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006576:	b111      	cbz	r1, 800657e <_reclaim_reent+0x6e>
 8006578:	4620      	mov	r0, r4
 800657a:	f000 f8bf 	bl	80066fc <_free_r>
 800657e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006580:	b111      	cbz	r1, 8006588 <_reclaim_reent+0x78>
 8006582:	4620      	mov	r0, r4
 8006584:	f000 f8ba 	bl	80066fc <_free_r>
 8006588:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800658a:	b111      	cbz	r1, 8006592 <_reclaim_reent+0x82>
 800658c:	4620      	mov	r0, r4
 800658e:	f000 f8b5 	bl	80066fc <_free_r>
 8006592:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006594:	b111      	cbz	r1, 800659c <_reclaim_reent+0x8c>
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f8b0 	bl	80066fc <_free_r>
 800659c:	6a23      	ldr	r3, [r4, #32]
 800659e:	b14b      	cbz	r3, 80065b4 <_reclaim_reent+0xa4>
 80065a0:	4620      	mov	r0, r4
 80065a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065a6:	4718      	bx	r3
 80065a8:	680e      	ldr	r6, [r1, #0]
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 f8a6 	bl	80066fc <_free_r>
 80065b0:	4631      	mov	r1, r6
 80065b2:	e7bb      	b.n	800652c <_reclaim_reent+0x1c>
 80065b4:	bd70      	pop	{r4, r5, r6, pc}
 80065b6:	bf00      	nop
 80065b8:	20000028 	.word	0x20000028

080065bc <_lseek_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4d07      	ldr	r5, [pc, #28]	@ (80065dc <_lseek_r+0x20>)
 80065c0:	4604      	mov	r4, r0
 80065c2:	4608      	mov	r0, r1
 80065c4:	4611      	mov	r1, r2
 80065c6:	2200      	movs	r2, #0
 80065c8:	602a      	str	r2, [r5, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	f7fa fc6d 	bl	8000eaa <_lseek>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d102      	bne.n	80065da <_lseek_r+0x1e>
 80065d4:	682b      	ldr	r3, [r5, #0]
 80065d6:	b103      	cbz	r3, 80065da <_lseek_r+0x1e>
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	bd38      	pop	{r3, r4, r5, pc}
 80065dc:	20004714 	.word	0x20004714

080065e0 <_read_r>:
 80065e0:	b538      	push	{r3, r4, r5, lr}
 80065e2:	4d07      	ldr	r5, [pc, #28]	@ (8006600 <_read_r+0x20>)
 80065e4:	4604      	mov	r4, r0
 80065e6:	4608      	mov	r0, r1
 80065e8:	4611      	mov	r1, r2
 80065ea:	2200      	movs	r2, #0
 80065ec:	602a      	str	r2, [r5, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f7fa fbfb 	bl	8000dea <_read>
 80065f4:	1c43      	adds	r3, r0, #1
 80065f6:	d102      	bne.n	80065fe <_read_r+0x1e>
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	b103      	cbz	r3, 80065fe <_read_r+0x1e>
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	bd38      	pop	{r3, r4, r5, pc}
 8006600:	20004714 	.word	0x20004714

08006604 <_sbrk_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4d06      	ldr	r5, [pc, #24]	@ (8006620 <_sbrk_r+0x1c>)
 8006608:	2300      	movs	r3, #0
 800660a:	4604      	mov	r4, r0
 800660c:	4608      	mov	r0, r1
 800660e:	602b      	str	r3, [r5, #0]
 8006610:	f7fa fc58 	bl	8000ec4 <_sbrk>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d102      	bne.n	800661e <_sbrk_r+0x1a>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	b103      	cbz	r3, 800661e <_sbrk_r+0x1a>
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	20004714 	.word	0x20004714

08006624 <_write_r>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	4d07      	ldr	r5, [pc, #28]	@ (8006644 <_write_r+0x20>)
 8006628:	4604      	mov	r4, r0
 800662a:	4608      	mov	r0, r1
 800662c:	4611      	mov	r1, r2
 800662e:	2200      	movs	r2, #0
 8006630:	602a      	str	r2, [r5, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	f7fa fbf6 	bl	8000e24 <_write>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d102      	bne.n	8006642 <_write_r+0x1e>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b103      	cbz	r3, 8006642 <_write_r+0x1e>
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	20004714 	.word	0x20004714

08006648 <__errno>:
 8006648:	4b01      	ldr	r3, [pc, #4]	@ (8006650 <__errno+0x8>)
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000028 	.word	0x20000028

08006654 <__libc_init_array>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	4d0d      	ldr	r5, [pc, #52]	@ (800668c <__libc_init_array+0x38>)
 8006658:	4c0d      	ldr	r4, [pc, #52]	@ (8006690 <__libc_init_array+0x3c>)
 800665a:	1b64      	subs	r4, r4, r5
 800665c:	10a4      	asrs	r4, r4, #2
 800665e:	2600      	movs	r6, #0
 8006660:	42a6      	cmp	r6, r4
 8006662:	d109      	bne.n	8006678 <__libc_init_array+0x24>
 8006664:	4d0b      	ldr	r5, [pc, #44]	@ (8006694 <__libc_init_array+0x40>)
 8006666:	4c0c      	ldr	r4, [pc, #48]	@ (8006698 <__libc_init_array+0x44>)
 8006668:	f000 ff2c 	bl	80074c4 <_init>
 800666c:	1b64      	subs	r4, r4, r5
 800666e:	10a4      	asrs	r4, r4, #2
 8006670:	2600      	movs	r6, #0
 8006672:	42a6      	cmp	r6, r4
 8006674:	d105      	bne.n	8006682 <__libc_init_array+0x2e>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	f855 3b04 	ldr.w	r3, [r5], #4
 800667c:	4798      	blx	r3
 800667e:	3601      	adds	r6, #1
 8006680:	e7ee      	b.n	8006660 <__libc_init_array+0xc>
 8006682:	f855 3b04 	ldr.w	r3, [r5], #4
 8006686:	4798      	blx	r3
 8006688:	3601      	adds	r6, #1
 800668a:	e7f2      	b.n	8006672 <__libc_init_array+0x1e>
 800668c:	08007794 	.word	0x08007794
 8006690:	08007794 	.word	0x08007794
 8006694:	08007794 	.word	0x08007794
 8006698:	08007798 	.word	0x08007798

0800669c <__retarget_lock_init_recursive>:
 800669c:	4770      	bx	lr

0800669e <__retarget_lock_acquire_recursive>:
 800669e:	4770      	bx	lr

080066a0 <__retarget_lock_release_recursive>:
 80066a0:	4770      	bx	lr

080066a2 <memcpy>:
 80066a2:	440a      	add	r2, r1
 80066a4:	4291      	cmp	r1, r2
 80066a6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80066aa:	d100      	bne.n	80066ae <memcpy+0xc>
 80066ac:	4770      	bx	lr
 80066ae:	b510      	push	{r4, lr}
 80066b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066b8:	4291      	cmp	r1, r2
 80066ba:	d1f9      	bne.n	80066b0 <memcpy+0xe>
 80066bc:	bd10      	pop	{r4, pc}
	...

080066c0 <__assert_func>:
 80066c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066c2:	4614      	mov	r4, r2
 80066c4:	461a      	mov	r2, r3
 80066c6:	4b09      	ldr	r3, [pc, #36]	@ (80066ec <__assert_func+0x2c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4605      	mov	r5, r0
 80066cc:	68d8      	ldr	r0, [r3, #12]
 80066ce:	b954      	cbnz	r4, 80066e6 <__assert_func+0x26>
 80066d0:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <__assert_func+0x30>)
 80066d2:	461c      	mov	r4, r3
 80066d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066d8:	9100      	str	r1, [sp, #0]
 80066da:	462b      	mov	r3, r5
 80066dc:	4905      	ldr	r1, [pc, #20]	@ (80066f4 <__assert_func+0x34>)
 80066de:	f000 fd2b 	bl	8007138 <fiprintf>
 80066e2:	f000 fde9 	bl	80072b8 <abort>
 80066e6:	4b04      	ldr	r3, [pc, #16]	@ (80066f8 <__assert_func+0x38>)
 80066e8:	e7f4      	b.n	80066d4 <__assert_func+0x14>
 80066ea:	bf00      	nop
 80066ec:	20000028 	.word	0x20000028
 80066f0:	08007758 	.word	0x08007758
 80066f4:	0800772a 	.word	0x0800772a
 80066f8:	0800771d 	.word	0x0800771d

080066fc <_free_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4605      	mov	r5, r0
 8006700:	2900      	cmp	r1, #0
 8006702:	d041      	beq.n	8006788 <_free_r+0x8c>
 8006704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006708:	1f0c      	subs	r4, r1, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfb8      	it	lt
 800670e:	18e4      	addlt	r4, r4, r3
 8006710:	f7ff fd04 	bl	800611c <__malloc_lock>
 8006714:	4a1d      	ldr	r2, [pc, #116]	@ (800678c <_free_r+0x90>)
 8006716:	6813      	ldr	r3, [r2, #0]
 8006718:	b933      	cbnz	r3, 8006728 <_free_r+0x2c>
 800671a:	6063      	str	r3, [r4, #4]
 800671c:	6014      	str	r4, [r2, #0]
 800671e:	4628      	mov	r0, r5
 8006720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006724:	f7ff bd00 	b.w	8006128 <__malloc_unlock>
 8006728:	42a3      	cmp	r3, r4
 800672a:	d908      	bls.n	800673e <_free_r+0x42>
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	1821      	adds	r1, r4, r0
 8006730:	428b      	cmp	r3, r1
 8006732:	bf01      	itttt	eq
 8006734:	6819      	ldreq	r1, [r3, #0]
 8006736:	685b      	ldreq	r3, [r3, #4]
 8006738:	1809      	addeq	r1, r1, r0
 800673a:	6021      	streq	r1, [r4, #0]
 800673c:	e7ed      	b.n	800671a <_free_r+0x1e>
 800673e:	461a      	mov	r2, r3
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	b10b      	cbz	r3, 8006748 <_free_r+0x4c>
 8006744:	42a3      	cmp	r3, r4
 8006746:	d9fa      	bls.n	800673e <_free_r+0x42>
 8006748:	6811      	ldr	r1, [r2, #0]
 800674a:	1850      	adds	r0, r2, r1
 800674c:	42a0      	cmp	r0, r4
 800674e:	d10b      	bne.n	8006768 <_free_r+0x6c>
 8006750:	6820      	ldr	r0, [r4, #0]
 8006752:	4401      	add	r1, r0
 8006754:	1850      	adds	r0, r2, r1
 8006756:	4283      	cmp	r3, r0
 8006758:	6011      	str	r1, [r2, #0]
 800675a:	d1e0      	bne.n	800671e <_free_r+0x22>
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	6053      	str	r3, [r2, #4]
 8006762:	4408      	add	r0, r1
 8006764:	6010      	str	r0, [r2, #0]
 8006766:	e7da      	b.n	800671e <_free_r+0x22>
 8006768:	d902      	bls.n	8006770 <_free_r+0x74>
 800676a:	230c      	movs	r3, #12
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	e7d6      	b.n	800671e <_free_r+0x22>
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	1821      	adds	r1, r4, r0
 8006774:	428b      	cmp	r3, r1
 8006776:	bf04      	itt	eq
 8006778:	6819      	ldreq	r1, [r3, #0]
 800677a:	685b      	ldreq	r3, [r3, #4]
 800677c:	6063      	str	r3, [r4, #4]
 800677e:	bf04      	itt	eq
 8006780:	1809      	addeq	r1, r1, r0
 8006782:	6021      	streq	r1, [r4, #0]
 8006784:	6054      	str	r4, [r2, #4]
 8006786:	e7ca      	b.n	800671e <_free_r+0x22>
 8006788:	bd38      	pop	{r3, r4, r5, pc}
 800678a:	bf00      	nop
 800678c:	200045d4 	.word	0x200045d4

08006790 <__ssputs_r>:
 8006790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006794:	688e      	ldr	r6, [r1, #8]
 8006796:	461f      	mov	r7, r3
 8006798:	42be      	cmp	r6, r7
 800679a:	680b      	ldr	r3, [r1, #0]
 800679c:	4682      	mov	sl, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	4690      	mov	r8, r2
 80067a2:	d82d      	bhi.n	8006800 <__ssputs_r+0x70>
 80067a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80067ac:	d026      	beq.n	80067fc <__ssputs_r+0x6c>
 80067ae:	6965      	ldr	r5, [r4, #20]
 80067b0:	6909      	ldr	r1, [r1, #16]
 80067b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067b6:	eba3 0901 	sub.w	r9, r3, r1
 80067ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067be:	1c7b      	adds	r3, r7, #1
 80067c0:	444b      	add	r3, r9
 80067c2:	106d      	asrs	r5, r5, #1
 80067c4:	429d      	cmp	r5, r3
 80067c6:	bf38      	it	cc
 80067c8:	461d      	movcc	r5, r3
 80067ca:	0553      	lsls	r3, r2, #21
 80067cc:	d527      	bpl.n	800681e <__ssputs_r+0x8e>
 80067ce:	4629      	mov	r1, r5
 80067d0:	f7ff fc24 	bl	800601c <_malloc_r>
 80067d4:	4606      	mov	r6, r0
 80067d6:	b360      	cbz	r0, 8006832 <__ssputs_r+0xa2>
 80067d8:	6921      	ldr	r1, [r4, #16]
 80067da:	464a      	mov	r2, r9
 80067dc:	f7ff ff61 	bl	80066a2 <memcpy>
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80067e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ea:	81a3      	strh	r3, [r4, #12]
 80067ec:	6126      	str	r6, [r4, #16]
 80067ee:	6165      	str	r5, [r4, #20]
 80067f0:	444e      	add	r6, r9
 80067f2:	eba5 0509 	sub.w	r5, r5, r9
 80067f6:	6026      	str	r6, [r4, #0]
 80067f8:	60a5      	str	r5, [r4, #8]
 80067fa:	463e      	mov	r6, r7
 80067fc:	42be      	cmp	r6, r7
 80067fe:	d900      	bls.n	8006802 <__ssputs_r+0x72>
 8006800:	463e      	mov	r6, r7
 8006802:	6820      	ldr	r0, [r4, #0]
 8006804:	4632      	mov	r2, r6
 8006806:	4641      	mov	r1, r8
 8006808:	f000 fd3c 	bl	8007284 <memmove>
 800680c:	68a3      	ldr	r3, [r4, #8]
 800680e:	1b9b      	subs	r3, r3, r6
 8006810:	60a3      	str	r3, [r4, #8]
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	4433      	add	r3, r6
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	2000      	movs	r0, #0
 800681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681e:	462a      	mov	r2, r5
 8006820:	f000 fd51 	bl	80072c6 <_realloc_r>
 8006824:	4606      	mov	r6, r0
 8006826:	2800      	cmp	r0, #0
 8006828:	d1e0      	bne.n	80067ec <__ssputs_r+0x5c>
 800682a:	6921      	ldr	r1, [r4, #16]
 800682c:	4650      	mov	r0, sl
 800682e:	f7ff ff65 	bl	80066fc <_free_r>
 8006832:	230c      	movs	r3, #12
 8006834:	f8ca 3000 	str.w	r3, [sl]
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006844:	e7e9      	b.n	800681a <__ssputs_r+0x8a>
	...

08006848 <_svfiprintf_r>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	4698      	mov	r8, r3
 800684e:	898b      	ldrh	r3, [r1, #12]
 8006850:	061b      	lsls	r3, r3, #24
 8006852:	b09d      	sub	sp, #116	@ 0x74
 8006854:	4607      	mov	r7, r0
 8006856:	460d      	mov	r5, r1
 8006858:	4614      	mov	r4, r2
 800685a:	d510      	bpl.n	800687e <_svfiprintf_r+0x36>
 800685c:	690b      	ldr	r3, [r1, #16]
 800685e:	b973      	cbnz	r3, 800687e <_svfiprintf_r+0x36>
 8006860:	2140      	movs	r1, #64	@ 0x40
 8006862:	f7ff fbdb 	bl	800601c <_malloc_r>
 8006866:	6028      	str	r0, [r5, #0]
 8006868:	6128      	str	r0, [r5, #16]
 800686a:	b930      	cbnz	r0, 800687a <_svfiprintf_r+0x32>
 800686c:	230c      	movs	r3, #12
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006874:	b01d      	add	sp, #116	@ 0x74
 8006876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687a:	2340      	movs	r3, #64	@ 0x40
 800687c:	616b      	str	r3, [r5, #20]
 800687e:	2300      	movs	r3, #0
 8006880:	9309      	str	r3, [sp, #36]	@ 0x24
 8006882:	2320      	movs	r3, #32
 8006884:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006888:	f8cd 800c 	str.w	r8, [sp, #12]
 800688c:	2330      	movs	r3, #48	@ 0x30
 800688e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006a2c <_svfiprintf_r+0x1e4>
 8006892:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006896:	f04f 0901 	mov.w	r9, #1
 800689a:	4623      	mov	r3, r4
 800689c:	469a      	mov	sl, r3
 800689e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068a2:	b10a      	cbz	r2, 80068a8 <_svfiprintf_r+0x60>
 80068a4:	2a25      	cmp	r2, #37	@ 0x25
 80068a6:	d1f9      	bne.n	800689c <_svfiprintf_r+0x54>
 80068a8:	ebba 0b04 	subs.w	fp, sl, r4
 80068ac:	d00b      	beq.n	80068c6 <_svfiprintf_r+0x7e>
 80068ae:	465b      	mov	r3, fp
 80068b0:	4622      	mov	r2, r4
 80068b2:	4629      	mov	r1, r5
 80068b4:	4638      	mov	r0, r7
 80068b6:	f7ff ff6b 	bl	8006790 <__ssputs_r>
 80068ba:	3001      	adds	r0, #1
 80068bc:	f000 80a7 	beq.w	8006a0e <_svfiprintf_r+0x1c6>
 80068c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068c2:	445a      	add	r2, fp
 80068c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80068c6:	f89a 3000 	ldrb.w	r3, [sl]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 809f 	beq.w	8006a0e <_svfiprintf_r+0x1c6>
 80068d0:	2300      	movs	r3, #0
 80068d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068da:	f10a 0a01 	add.w	sl, sl, #1
 80068de:	9304      	str	r3, [sp, #16]
 80068e0:	9307      	str	r3, [sp, #28]
 80068e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80068e8:	4654      	mov	r4, sl
 80068ea:	2205      	movs	r2, #5
 80068ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f0:	484e      	ldr	r0, [pc, #312]	@ (8006a2c <_svfiprintf_r+0x1e4>)
 80068f2:	f7f9 fca5 	bl	8000240 <memchr>
 80068f6:	9a04      	ldr	r2, [sp, #16]
 80068f8:	b9d8      	cbnz	r0, 8006932 <_svfiprintf_r+0xea>
 80068fa:	06d0      	lsls	r0, r2, #27
 80068fc:	bf44      	itt	mi
 80068fe:	2320      	movmi	r3, #32
 8006900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006904:	0711      	lsls	r1, r2, #28
 8006906:	bf44      	itt	mi
 8006908:	232b      	movmi	r3, #43	@ 0x2b
 800690a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800690e:	f89a 3000 	ldrb.w	r3, [sl]
 8006912:	2b2a      	cmp	r3, #42	@ 0x2a
 8006914:	d015      	beq.n	8006942 <_svfiprintf_r+0xfa>
 8006916:	9a07      	ldr	r2, [sp, #28]
 8006918:	4654      	mov	r4, sl
 800691a:	2000      	movs	r0, #0
 800691c:	f04f 0c0a 	mov.w	ip, #10
 8006920:	4621      	mov	r1, r4
 8006922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006926:	3b30      	subs	r3, #48	@ 0x30
 8006928:	2b09      	cmp	r3, #9
 800692a:	d94b      	bls.n	80069c4 <_svfiprintf_r+0x17c>
 800692c:	b1b0      	cbz	r0, 800695c <_svfiprintf_r+0x114>
 800692e:	9207      	str	r2, [sp, #28]
 8006930:	e014      	b.n	800695c <_svfiprintf_r+0x114>
 8006932:	eba0 0308 	sub.w	r3, r0, r8
 8006936:	fa09 f303 	lsl.w	r3, r9, r3
 800693a:	4313      	orrs	r3, r2
 800693c:	9304      	str	r3, [sp, #16]
 800693e:	46a2      	mov	sl, r4
 8006940:	e7d2      	b.n	80068e8 <_svfiprintf_r+0xa0>
 8006942:	9b03      	ldr	r3, [sp, #12]
 8006944:	1d19      	adds	r1, r3, #4
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	9103      	str	r1, [sp, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	bfbb      	ittet	lt
 800694e:	425b      	neglt	r3, r3
 8006950:	f042 0202 	orrlt.w	r2, r2, #2
 8006954:	9307      	strge	r3, [sp, #28]
 8006956:	9307      	strlt	r3, [sp, #28]
 8006958:	bfb8      	it	lt
 800695a:	9204      	strlt	r2, [sp, #16]
 800695c:	7823      	ldrb	r3, [r4, #0]
 800695e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006960:	d10a      	bne.n	8006978 <_svfiprintf_r+0x130>
 8006962:	7863      	ldrb	r3, [r4, #1]
 8006964:	2b2a      	cmp	r3, #42	@ 0x2a
 8006966:	d132      	bne.n	80069ce <_svfiprintf_r+0x186>
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	1d1a      	adds	r2, r3, #4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	9203      	str	r2, [sp, #12]
 8006970:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006974:	3402      	adds	r4, #2
 8006976:	9305      	str	r3, [sp, #20]
 8006978:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006a3c <_svfiprintf_r+0x1f4>
 800697c:	7821      	ldrb	r1, [r4, #0]
 800697e:	2203      	movs	r2, #3
 8006980:	4650      	mov	r0, sl
 8006982:	f7f9 fc5d 	bl	8000240 <memchr>
 8006986:	b138      	cbz	r0, 8006998 <_svfiprintf_r+0x150>
 8006988:	9b04      	ldr	r3, [sp, #16]
 800698a:	eba0 000a 	sub.w	r0, r0, sl
 800698e:	2240      	movs	r2, #64	@ 0x40
 8006990:	4082      	lsls	r2, r0
 8006992:	4313      	orrs	r3, r2
 8006994:	3401      	adds	r4, #1
 8006996:	9304      	str	r3, [sp, #16]
 8006998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800699c:	4824      	ldr	r0, [pc, #144]	@ (8006a30 <_svfiprintf_r+0x1e8>)
 800699e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069a2:	2206      	movs	r2, #6
 80069a4:	f7f9 fc4c 	bl	8000240 <memchr>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d036      	beq.n	8006a1a <_svfiprintf_r+0x1d2>
 80069ac:	4b21      	ldr	r3, [pc, #132]	@ (8006a34 <_svfiprintf_r+0x1ec>)
 80069ae:	bb1b      	cbnz	r3, 80069f8 <_svfiprintf_r+0x1b0>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	3307      	adds	r3, #7
 80069b4:	f023 0307 	bic.w	r3, r3, #7
 80069b8:	3308      	adds	r3, #8
 80069ba:	9303      	str	r3, [sp, #12]
 80069bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069be:	4433      	add	r3, r6
 80069c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c2:	e76a      	b.n	800689a <_svfiprintf_r+0x52>
 80069c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80069c8:	460c      	mov	r4, r1
 80069ca:	2001      	movs	r0, #1
 80069cc:	e7a8      	b.n	8006920 <_svfiprintf_r+0xd8>
 80069ce:	2300      	movs	r3, #0
 80069d0:	3401      	adds	r4, #1
 80069d2:	9305      	str	r3, [sp, #20]
 80069d4:	4619      	mov	r1, r3
 80069d6:	f04f 0c0a 	mov.w	ip, #10
 80069da:	4620      	mov	r0, r4
 80069dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069e0:	3a30      	subs	r2, #48	@ 0x30
 80069e2:	2a09      	cmp	r2, #9
 80069e4:	d903      	bls.n	80069ee <_svfiprintf_r+0x1a6>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0c6      	beq.n	8006978 <_svfiprintf_r+0x130>
 80069ea:	9105      	str	r1, [sp, #20]
 80069ec:	e7c4      	b.n	8006978 <_svfiprintf_r+0x130>
 80069ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80069f2:	4604      	mov	r4, r0
 80069f4:	2301      	movs	r3, #1
 80069f6:	e7f0      	b.n	80069da <_svfiprintf_r+0x192>
 80069f8:	ab03      	add	r3, sp, #12
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	462a      	mov	r2, r5
 80069fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006a38 <_svfiprintf_r+0x1f0>)
 8006a00:	a904      	add	r1, sp, #16
 8006a02:	4638      	mov	r0, r7
 8006a04:	f3af 8000 	nop.w
 8006a08:	1c42      	adds	r2, r0, #1
 8006a0a:	4606      	mov	r6, r0
 8006a0c:	d1d6      	bne.n	80069bc <_svfiprintf_r+0x174>
 8006a0e:	89ab      	ldrh	r3, [r5, #12]
 8006a10:	065b      	lsls	r3, r3, #25
 8006a12:	f53f af2d 	bmi.w	8006870 <_svfiprintf_r+0x28>
 8006a16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a18:	e72c      	b.n	8006874 <_svfiprintf_r+0x2c>
 8006a1a:	ab03      	add	r3, sp, #12
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	462a      	mov	r2, r5
 8006a20:	4b05      	ldr	r3, [pc, #20]	@ (8006a38 <_svfiprintf_r+0x1f0>)
 8006a22:	a904      	add	r1, sp, #16
 8006a24:	4638      	mov	r0, r7
 8006a26:	f000 f9bb 	bl	8006da0 <_printf_i>
 8006a2a:	e7ed      	b.n	8006a08 <_svfiprintf_r+0x1c0>
 8006a2c:	08007759 	.word	0x08007759
 8006a30:	08007763 	.word	0x08007763
 8006a34:	00000000 	.word	0x00000000
 8006a38:	08006791 	.word	0x08006791
 8006a3c:	0800775f 	.word	0x0800775f

08006a40 <__sfputc_r>:
 8006a40:	6893      	ldr	r3, [r2, #8]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	b410      	push	{r4}
 8006a48:	6093      	str	r3, [r2, #8]
 8006a4a:	da08      	bge.n	8006a5e <__sfputc_r+0x1e>
 8006a4c:	6994      	ldr	r4, [r2, #24]
 8006a4e:	42a3      	cmp	r3, r4
 8006a50:	db01      	blt.n	8006a56 <__sfputc_r+0x16>
 8006a52:	290a      	cmp	r1, #10
 8006a54:	d103      	bne.n	8006a5e <__sfputc_r+0x1e>
 8006a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a5a:	f000 bb7f 	b.w	800715c <__swbuf_r>
 8006a5e:	6813      	ldr	r3, [r2, #0]
 8006a60:	1c58      	adds	r0, r3, #1
 8006a62:	6010      	str	r0, [r2, #0]
 8006a64:	7019      	strb	r1, [r3, #0]
 8006a66:	4608      	mov	r0, r1
 8006a68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <__sfputs_r>:
 8006a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a70:	4606      	mov	r6, r0
 8006a72:	460f      	mov	r7, r1
 8006a74:	4614      	mov	r4, r2
 8006a76:	18d5      	adds	r5, r2, r3
 8006a78:	42ac      	cmp	r4, r5
 8006a7a:	d101      	bne.n	8006a80 <__sfputs_r+0x12>
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	e007      	b.n	8006a90 <__sfputs_r+0x22>
 8006a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a84:	463a      	mov	r2, r7
 8006a86:	4630      	mov	r0, r6
 8006a88:	f7ff ffda 	bl	8006a40 <__sfputc_r>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d1f3      	bne.n	8006a78 <__sfputs_r+0xa>
 8006a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a94 <_vfiprintf_r>:
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	460d      	mov	r5, r1
 8006a9a:	b09d      	sub	sp, #116	@ 0x74
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	4698      	mov	r8, r3
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	b118      	cbz	r0, 8006aac <_vfiprintf_r+0x18>
 8006aa4:	6a03      	ldr	r3, [r0, #32]
 8006aa6:	b90b      	cbnz	r3, 8006aac <_vfiprintf_r+0x18>
 8006aa8:	f7ff fbd0 	bl	800624c <__sinit>
 8006aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aae:	07d9      	lsls	r1, r3, #31
 8006ab0:	d405      	bmi.n	8006abe <_vfiprintf_r+0x2a>
 8006ab2:	89ab      	ldrh	r3, [r5, #12]
 8006ab4:	059a      	lsls	r2, r3, #22
 8006ab6:	d402      	bmi.n	8006abe <_vfiprintf_r+0x2a>
 8006ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aba:	f7ff fdf0 	bl	800669e <__retarget_lock_acquire_recursive>
 8006abe:	89ab      	ldrh	r3, [r5, #12]
 8006ac0:	071b      	lsls	r3, r3, #28
 8006ac2:	d501      	bpl.n	8006ac8 <_vfiprintf_r+0x34>
 8006ac4:	692b      	ldr	r3, [r5, #16]
 8006ac6:	b99b      	cbnz	r3, 8006af0 <_vfiprintf_r+0x5c>
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4630      	mov	r0, r6
 8006acc:	f000 fb84 	bl	80071d8 <__swsetup_r>
 8006ad0:	b170      	cbz	r0, 8006af0 <_vfiprintf_r+0x5c>
 8006ad2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ad4:	07dc      	lsls	r4, r3, #31
 8006ad6:	d504      	bpl.n	8006ae2 <_vfiprintf_r+0x4e>
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006adc:	b01d      	add	sp, #116	@ 0x74
 8006ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae2:	89ab      	ldrh	r3, [r5, #12]
 8006ae4:	0598      	lsls	r0, r3, #22
 8006ae6:	d4f7      	bmi.n	8006ad8 <_vfiprintf_r+0x44>
 8006ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aea:	f7ff fdd9 	bl	80066a0 <__retarget_lock_release_recursive>
 8006aee:	e7f3      	b.n	8006ad8 <_vfiprintf_r+0x44>
 8006af0:	2300      	movs	r3, #0
 8006af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006af4:	2320      	movs	r3, #32
 8006af6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006afe:	2330      	movs	r3, #48	@ 0x30
 8006b00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006cb0 <_vfiprintf_r+0x21c>
 8006b04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b08:	f04f 0901 	mov.w	r9, #1
 8006b0c:	4623      	mov	r3, r4
 8006b0e:	469a      	mov	sl, r3
 8006b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b14:	b10a      	cbz	r2, 8006b1a <_vfiprintf_r+0x86>
 8006b16:	2a25      	cmp	r2, #37	@ 0x25
 8006b18:	d1f9      	bne.n	8006b0e <_vfiprintf_r+0x7a>
 8006b1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b1e:	d00b      	beq.n	8006b38 <_vfiprintf_r+0xa4>
 8006b20:	465b      	mov	r3, fp
 8006b22:	4622      	mov	r2, r4
 8006b24:	4629      	mov	r1, r5
 8006b26:	4630      	mov	r0, r6
 8006b28:	f7ff ffa1 	bl	8006a6e <__sfputs_r>
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	f000 80a7 	beq.w	8006c80 <_vfiprintf_r+0x1ec>
 8006b32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b34:	445a      	add	r2, fp
 8006b36:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b38:	f89a 3000 	ldrb.w	r3, [sl]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 809f 	beq.w	8006c80 <_vfiprintf_r+0x1ec>
 8006b42:	2300      	movs	r3, #0
 8006b44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b4c:	f10a 0a01 	add.w	sl, sl, #1
 8006b50:	9304      	str	r3, [sp, #16]
 8006b52:	9307      	str	r3, [sp, #28]
 8006b54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b58:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b5a:	4654      	mov	r4, sl
 8006b5c:	2205      	movs	r2, #5
 8006b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b62:	4853      	ldr	r0, [pc, #332]	@ (8006cb0 <_vfiprintf_r+0x21c>)
 8006b64:	f7f9 fb6c 	bl	8000240 <memchr>
 8006b68:	9a04      	ldr	r2, [sp, #16]
 8006b6a:	b9d8      	cbnz	r0, 8006ba4 <_vfiprintf_r+0x110>
 8006b6c:	06d1      	lsls	r1, r2, #27
 8006b6e:	bf44      	itt	mi
 8006b70:	2320      	movmi	r3, #32
 8006b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b76:	0713      	lsls	r3, r2, #28
 8006b78:	bf44      	itt	mi
 8006b7a:	232b      	movmi	r3, #43	@ 0x2b
 8006b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b80:	f89a 3000 	ldrb.w	r3, [sl]
 8006b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b86:	d015      	beq.n	8006bb4 <_vfiprintf_r+0x120>
 8006b88:	9a07      	ldr	r2, [sp, #28]
 8006b8a:	4654      	mov	r4, sl
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	f04f 0c0a 	mov.w	ip, #10
 8006b92:	4621      	mov	r1, r4
 8006b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b98:	3b30      	subs	r3, #48	@ 0x30
 8006b9a:	2b09      	cmp	r3, #9
 8006b9c:	d94b      	bls.n	8006c36 <_vfiprintf_r+0x1a2>
 8006b9e:	b1b0      	cbz	r0, 8006bce <_vfiprintf_r+0x13a>
 8006ba0:	9207      	str	r2, [sp, #28]
 8006ba2:	e014      	b.n	8006bce <_vfiprintf_r+0x13a>
 8006ba4:	eba0 0308 	sub.w	r3, r0, r8
 8006ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8006bac:	4313      	orrs	r3, r2
 8006bae:	9304      	str	r3, [sp, #16]
 8006bb0:	46a2      	mov	sl, r4
 8006bb2:	e7d2      	b.n	8006b5a <_vfiprintf_r+0xc6>
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	1d19      	adds	r1, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	9103      	str	r1, [sp, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	bfbb      	ittet	lt
 8006bc0:	425b      	neglt	r3, r3
 8006bc2:	f042 0202 	orrlt.w	r2, r2, #2
 8006bc6:	9307      	strge	r3, [sp, #28]
 8006bc8:	9307      	strlt	r3, [sp, #28]
 8006bca:	bfb8      	it	lt
 8006bcc:	9204      	strlt	r2, [sp, #16]
 8006bce:	7823      	ldrb	r3, [r4, #0]
 8006bd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bd2:	d10a      	bne.n	8006bea <_vfiprintf_r+0x156>
 8006bd4:	7863      	ldrb	r3, [r4, #1]
 8006bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bd8:	d132      	bne.n	8006c40 <_vfiprintf_r+0x1ac>
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	1d1a      	adds	r2, r3, #4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	9203      	str	r2, [sp, #12]
 8006be2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006be6:	3402      	adds	r4, #2
 8006be8:	9305      	str	r3, [sp, #20]
 8006bea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006cc0 <_vfiprintf_r+0x22c>
 8006bee:	7821      	ldrb	r1, [r4, #0]
 8006bf0:	2203      	movs	r2, #3
 8006bf2:	4650      	mov	r0, sl
 8006bf4:	f7f9 fb24 	bl	8000240 <memchr>
 8006bf8:	b138      	cbz	r0, 8006c0a <_vfiprintf_r+0x176>
 8006bfa:	9b04      	ldr	r3, [sp, #16]
 8006bfc:	eba0 000a 	sub.w	r0, r0, sl
 8006c00:	2240      	movs	r2, #64	@ 0x40
 8006c02:	4082      	lsls	r2, r0
 8006c04:	4313      	orrs	r3, r2
 8006c06:	3401      	adds	r4, #1
 8006c08:	9304      	str	r3, [sp, #16]
 8006c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c0e:	4829      	ldr	r0, [pc, #164]	@ (8006cb4 <_vfiprintf_r+0x220>)
 8006c10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c14:	2206      	movs	r2, #6
 8006c16:	f7f9 fb13 	bl	8000240 <memchr>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d03f      	beq.n	8006c9e <_vfiprintf_r+0x20a>
 8006c1e:	4b26      	ldr	r3, [pc, #152]	@ (8006cb8 <_vfiprintf_r+0x224>)
 8006c20:	bb1b      	cbnz	r3, 8006c6a <_vfiprintf_r+0x1d6>
 8006c22:	9b03      	ldr	r3, [sp, #12]
 8006c24:	3307      	adds	r3, #7
 8006c26:	f023 0307 	bic.w	r3, r3, #7
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	9303      	str	r3, [sp, #12]
 8006c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c30:	443b      	add	r3, r7
 8006c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c34:	e76a      	b.n	8006b0c <_vfiprintf_r+0x78>
 8006c36:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	e7a8      	b.n	8006b92 <_vfiprintf_r+0xfe>
 8006c40:	2300      	movs	r3, #0
 8006c42:	3401      	adds	r4, #1
 8006c44:	9305      	str	r3, [sp, #20]
 8006c46:	4619      	mov	r1, r3
 8006c48:	f04f 0c0a 	mov.w	ip, #10
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c52:	3a30      	subs	r2, #48	@ 0x30
 8006c54:	2a09      	cmp	r2, #9
 8006c56:	d903      	bls.n	8006c60 <_vfiprintf_r+0x1cc>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0c6      	beq.n	8006bea <_vfiprintf_r+0x156>
 8006c5c:	9105      	str	r1, [sp, #20]
 8006c5e:	e7c4      	b.n	8006bea <_vfiprintf_r+0x156>
 8006c60:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c64:	4604      	mov	r4, r0
 8006c66:	2301      	movs	r3, #1
 8006c68:	e7f0      	b.n	8006c4c <_vfiprintf_r+0x1b8>
 8006c6a:	ab03      	add	r3, sp, #12
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	462a      	mov	r2, r5
 8006c70:	4b12      	ldr	r3, [pc, #72]	@ (8006cbc <_vfiprintf_r+0x228>)
 8006c72:	a904      	add	r1, sp, #16
 8006c74:	4630      	mov	r0, r6
 8006c76:	f3af 8000 	nop.w
 8006c7a:	4607      	mov	r7, r0
 8006c7c:	1c78      	adds	r0, r7, #1
 8006c7e:	d1d6      	bne.n	8006c2e <_vfiprintf_r+0x19a>
 8006c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c82:	07d9      	lsls	r1, r3, #31
 8006c84:	d405      	bmi.n	8006c92 <_vfiprintf_r+0x1fe>
 8006c86:	89ab      	ldrh	r3, [r5, #12]
 8006c88:	059a      	lsls	r2, r3, #22
 8006c8a:	d402      	bmi.n	8006c92 <_vfiprintf_r+0x1fe>
 8006c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c8e:	f7ff fd07 	bl	80066a0 <__retarget_lock_release_recursive>
 8006c92:	89ab      	ldrh	r3, [r5, #12]
 8006c94:	065b      	lsls	r3, r3, #25
 8006c96:	f53f af1f 	bmi.w	8006ad8 <_vfiprintf_r+0x44>
 8006c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c9c:	e71e      	b.n	8006adc <_vfiprintf_r+0x48>
 8006c9e:	ab03      	add	r3, sp, #12
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	462a      	mov	r2, r5
 8006ca4:	4b05      	ldr	r3, [pc, #20]	@ (8006cbc <_vfiprintf_r+0x228>)
 8006ca6:	a904      	add	r1, sp, #16
 8006ca8:	4630      	mov	r0, r6
 8006caa:	f000 f879 	bl	8006da0 <_printf_i>
 8006cae:	e7e4      	b.n	8006c7a <_vfiprintf_r+0x1e6>
 8006cb0:	08007759 	.word	0x08007759
 8006cb4:	08007763 	.word	0x08007763
 8006cb8:	00000000 	.word	0x00000000
 8006cbc:	08006a6f 	.word	0x08006a6f
 8006cc0:	0800775f 	.word	0x0800775f

08006cc4 <_printf_common>:
 8006cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	4616      	mov	r6, r2
 8006cca:	4698      	mov	r8, r3
 8006ccc:	688a      	ldr	r2, [r1, #8]
 8006cce:	690b      	ldr	r3, [r1, #16]
 8006cd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	bfb8      	it	lt
 8006cd8:	4613      	movlt	r3, r2
 8006cda:	6033      	str	r3, [r6, #0]
 8006cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	b10a      	cbz	r2, 8006cea <_printf_common+0x26>
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	6033      	str	r3, [r6, #0]
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	0699      	lsls	r1, r3, #26
 8006cee:	bf42      	ittt	mi
 8006cf0:	6833      	ldrmi	r3, [r6, #0]
 8006cf2:	3302      	addmi	r3, #2
 8006cf4:	6033      	strmi	r3, [r6, #0]
 8006cf6:	6825      	ldr	r5, [r4, #0]
 8006cf8:	f015 0506 	ands.w	r5, r5, #6
 8006cfc:	d106      	bne.n	8006d0c <_printf_common+0x48>
 8006cfe:	f104 0a19 	add.w	sl, r4, #25
 8006d02:	68e3      	ldr	r3, [r4, #12]
 8006d04:	6832      	ldr	r2, [r6, #0]
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	dc26      	bgt.n	8006d5a <_printf_common+0x96>
 8006d0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d10:	6822      	ldr	r2, [r4, #0]
 8006d12:	3b00      	subs	r3, #0
 8006d14:	bf18      	it	ne
 8006d16:	2301      	movne	r3, #1
 8006d18:	0692      	lsls	r2, r2, #26
 8006d1a:	d42b      	bmi.n	8006d74 <_printf_common+0xb0>
 8006d1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d20:	4641      	mov	r1, r8
 8006d22:	4638      	mov	r0, r7
 8006d24:	47c8      	blx	r9
 8006d26:	3001      	adds	r0, #1
 8006d28:	d01e      	beq.n	8006d68 <_printf_common+0xa4>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	6922      	ldr	r2, [r4, #16]
 8006d2e:	f003 0306 	and.w	r3, r3, #6
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	bf02      	ittt	eq
 8006d36:	68e5      	ldreq	r5, [r4, #12]
 8006d38:	6833      	ldreq	r3, [r6, #0]
 8006d3a:	1aed      	subeq	r5, r5, r3
 8006d3c:	68a3      	ldr	r3, [r4, #8]
 8006d3e:	bf0c      	ite	eq
 8006d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d44:	2500      	movne	r5, #0
 8006d46:	4293      	cmp	r3, r2
 8006d48:	bfc4      	itt	gt
 8006d4a:	1a9b      	subgt	r3, r3, r2
 8006d4c:	18ed      	addgt	r5, r5, r3
 8006d4e:	2600      	movs	r6, #0
 8006d50:	341a      	adds	r4, #26
 8006d52:	42b5      	cmp	r5, r6
 8006d54:	d11a      	bne.n	8006d8c <_printf_common+0xc8>
 8006d56:	2000      	movs	r0, #0
 8006d58:	e008      	b.n	8006d6c <_printf_common+0xa8>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	4641      	mov	r1, r8
 8006d60:	4638      	mov	r0, r7
 8006d62:	47c8      	blx	r9
 8006d64:	3001      	adds	r0, #1
 8006d66:	d103      	bne.n	8006d70 <_printf_common+0xac>
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d70:	3501      	adds	r5, #1
 8006d72:	e7c6      	b.n	8006d02 <_printf_common+0x3e>
 8006d74:	18e1      	adds	r1, r4, r3
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	2030      	movs	r0, #48	@ 0x30
 8006d7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d7e:	4422      	add	r2, r4
 8006d80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d88:	3302      	adds	r3, #2
 8006d8a:	e7c7      	b.n	8006d1c <_printf_common+0x58>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4622      	mov	r2, r4
 8006d90:	4641      	mov	r1, r8
 8006d92:	4638      	mov	r0, r7
 8006d94:	47c8      	blx	r9
 8006d96:	3001      	adds	r0, #1
 8006d98:	d0e6      	beq.n	8006d68 <_printf_common+0xa4>
 8006d9a:	3601      	adds	r6, #1
 8006d9c:	e7d9      	b.n	8006d52 <_printf_common+0x8e>
	...

08006da0 <_printf_i>:
 8006da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	7e0f      	ldrb	r7, [r1, #24]
 8006da6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006da8:	2f78      	cmp	r7, #120	@ 0x78
 8006daa:	4691      	mov	r9, r2
 8006dac:	4680      	mov	r8, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	469a      	mov	sl, r3
 8006db2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006db6:	d807      	bhi.n	8006dc8 <_printf_i+0x28>
 8006db8:	2f62      	cmp	r7, #98	@ 0x62
 8006dba:	d80a      	bhi.n	8006dd2 <_printf_i+0x32>
 8006dbc:	2f00      	cmp	r7, #0
 8006dbe:	f000 80d2 	beq.w	8006f66 <_printf_i+0x1c6>
 8006dc2:	2f58      	cmp	r7, #88	@ 0x58
 8006dc4:	f000 80b9 	beq.w	8006f3a <_printf_i+0x19a>
 8006dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006dd0:	e03a      	b.n	8006e48 <_printf_i+0xa8>
 8006dd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dd6:	2b15      	cmp	r3, #21
 8006dd8:	d8f6      	bhi.n	8006dc8 <_printf_i+0x28>
 8006dda:	a101      	add	r1, pc, #4	@ (adr r1, 8006de0 <_printf_i+0x40>)
 8006ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006de0:	08006e39 	.word	0x08006e39
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006dc9 	.word	0x08006dc9
 8006dec:	08006dc9 	.word	0x08006dc9
 8006df0:	08006dc9 	.word	0x08006dc9
 8006df4:	08006dc9 	.word	0x08006dc9
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006dc9 	.word	0x08006dc9
 8006e00:	08006dc9 	.word	0x08006dc9
 8006e04:	08006dc9 	.word	0x08006dc9
 8006e08:	08006dc9 	.word	0x08006dc9
 8006e0c:	08006f4d 	.word	0x08006f4d
 8006e10:	08006e77 	.word	0x08006e77
 8006e14:	08006f07 	.word	0x08006f07
 8006e18:	08006dc9 	.word	0x08006dc9
 8006e1c:	08006dc9 	.word	0x08006dc9
 8006e20:	08006f6f 	.word	0x08006f6f
 8006e24:	08006dc9 	.word	0x08006dc9
 8006e28:	08006e77 	.word	0x08006e77
 8006e2c:	08006dc9 	.word	0x08006dc9
 8006e30:	08006dc9 	.word	0x08006dc9
 8006e34:	08006f0f 	.word	0x08006f0f
 8006e38:	6833      	ldr	r3, [r6, #0]
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6032      	str	r2, [r6, #0]
 8006e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e09d      	b.n	8006f88 <_printf_i+0x1e8>
 8006e4c:	6833      	ldr	r3, [r6, #0]
 8006e4e:	6820      	ldr	r0, [r4, #0]
 8006e50:	1d19      	adds	r1, r3, #4
 8006e52:	6031      	str	r1, [r6, #0]
 8006e54:	0606      	lsls	r6, r0, #24
 8006e56:	d501      	bpl.n	8006e5c <_printf_i+0xbc>
 8006e58:	681d      	ldr	r5, [r3, #0]
 8006e5a:	e003      	b.n	8006e64 <_printf_i+0xc4>
 8006e5c:	0645      	lsls	r5, r0, #25
 8006e5e:	d5fb      	bpl.n	8006e58 <_printf_i+0xb8>
 8006e60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	da03      	bge.n	8006e70 <_printf_i+0xd0>
 8006e68:	232d      	movs	r3, #45	@ 0x2d
 8006e6a:	426d      	negs	r5, r5
 8006e6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e70:	4859      	ldr	r0, [pc, #356]	@ (8006fd8 <_printf_i+0x238>)
 8006e72:	230a      	movs	r3, #10
 8006e74:	e011      	b.n	8006e9a <_printf_i+0xfa>
 8006e76:	6821      	ldr	r1, [r4, #0]
 8006e78:	6833      	ldr	r3, [r6, #0]
 8006e7a:	0608      	lsls	r0, r1, #24
 8006e7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e80:	d402      	bmi.n	8006e88 <_printf_i+0xe8>
 8006e82:	0649      	lsls	r1, r1, #25
 8006e84:	bf48      	it	mi
 8006e86:	b2ad      	uxthmi	r5, r5
 8006e88:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e8a:	4853      	ldr	r0, [pc, #332]	@ (8006fd8 <_printf_i+0x238>)
 8006e8c:	6033      	str	r3, [r6, #0]
 8006e8e:	bf14      	ite	ne
 8006e90:	230a      	movne	r3, #10
 8006e92:	2308      	moveq	r3, #8
 8006e94:	2100      	movs	r1, #0
 8006e96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e9a:	6866      	ldr	r6, [r4, #4]
 8006e9c:	60a6      	str	r6, [r4, #8]
 8006e9e:	2e00      	cmp	r6, #0
 8006ea0:	bfa2      	ittt	ge
 8006ea2:	6821      	ldrge	r1, [r4, #0]
 8006ea4:	f021 0104 	bicge.w	r1, r1, #4
 8006ea8:	6021      	strge	r1, [r4, #0]
 8006eaa:	b90d      	cbnz	r5, 8006eb0 <_printf_i+0x110>
 8006eac:	2e00      	cmp	r6, #0
 8006eae:	d04b      	beq.n	8006f48 <_printf_i+0x1a8>
 8006eb0:	4616      	mov	r6, r2
 8006eb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eb6:	fb03 5711 	mls	r7, r3, r1, r5
 8006eba:	5dc7      	ldrb	r7, [r0, r7]
 8006ebc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ec0:	462f      	mov	r7, r5
 8006ec2:	42bb      	cmp	r3, r7
 8006ec4:	460d      	mov	r5, r1
 8006ec6:	d9f4      	bls.n	8006eb2 <_printf_i+0x112>
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d10b      	bne.n	8006ee4 <_printf_i+0x144>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	07df      	lsls	r7, r3, #31
 8006ed0:	d508      	bpl.n	8006ee4 <_printf_i+0x144>
 8006ed2:	6923      	ldr	r3, [r4, #16]
 8006ed4:	6861      	ldr	r1, [r4, #4]
 8006ed6:	4299      	cmp	r1, r3
 8006ed8:	bfde      	ittt	le
 8006eda:	2330      	movle	r3, #48	@ 0x30
 8006edc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ee0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006ee4:	1b92      	subs	r2, r2, r6
 8006ee6:	6122      	str	r2, [r4, #16]
 8006ee8:	f8cd a000 	str.w	sl, [sp]
 8006eec:	464b      	mov	r3, r9
 8006eee:	aa03      	add	r2, sp, #12
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	f7ff fee6 	bl	8006cc4 <_printf_common>
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d14a      	bne.n	8006f92 <_printf_i+0x1f2>
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f00:	b004      	add	sp, #16
 8006f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	f043 0320 	orr.w	r3, r3, #32
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	4833      	ldr	r0, [pc, #204]	@ (8006fdc <_printf_i+0x23c>)
 8006f10:	2778      	movs	r7, #120	@ 0x78
 8006f12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	6831      	ldr	r1, [r6, #0]
 8006f1a:	061f      	lsls	r7, r3, #24
 8006f1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f20:	d402      	bmi.n	8006f28 <_printf_i+0x188>
 8006f22:	065f      	lsls	r7, r3, #25
 8006f24:	bf48      	it	mi
 8006f26:	b2ad      	uxthmi	r5, r5
 8006f28:	6031      	str	r1, [r6, #0]
 8006f2a:	07d9      	lsls	r1, r3, #31
 8006f2c:	bf44      	itt	mi
 8006f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006f32:	6023      	strmi	r3, [r4, #0]
 8006f34:	b11d      	cbz	r5, 8006f3e <_printf_i+0x19e>
 8006f36:	2310      	movs	r3, #16
 8006f38:	e7ac      	b.n	8006e94 <_printf_i+0xf4>
 8006f3a:	4827      	ldr	r0, [pc, #156]	@ (8006fd8 <_printf_i+0x238>)
 8006f3c:	e7e9      	b.n	8006f12 <_printf_i+0x172>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	f023 0320 	bic.w	r3, r3, #32
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	e7f6      	b.n	8006f36 <_printf_i+0x196>
 8006f48:	4616      	mov	r6, r2
 8006f4a:	e7bd      	b.n	8006ec8 <_printf_i+0x128>
 8006f4c:	6833      	ldr	r3, [r6, #0]
 8006f4e:	6825      	ldr	r5, [r4, #0]
 8006f50:	6961      	ldr	r1, [r4, #20]
 8006f52:	1d18      	adds	r0, r3, #4
 8006f54:	6030      	str	r0, [r6, #0]
 8006f56:	062e      	lsls	r6, r5, #24
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	d501      	bpl.n	8006f60 <_printf_i+0x1c0>
 8006f5c:	6019      	str	r1, [r3, #0]
 8006f5e:	e002      	b.n	8006f66 <_printf_i+0x1c6>
 8006f60:	0668      	lsls	r0, r5, #25
 8006f62:	d5fb      	bpl.n	8006f5c <_printf_i+0x1bc>
 8006f64:	8019      	strh	r1, [r3, #0]
 8006f66:	2300      	movs	r3, #0
 8006f68:	6123      	str	r3, [r4, #16]
 8006f6a:	4616      	mov	r6, r2
 8006f6c:	e7bc      	b.n	8006ee8 <_printf_i+0x148>
 8006f6e:	6833      	ldr	r3, [r6, #0]
 8006f70:	1d1a      	adds	r2, r3, #4
 8006f72:	6032      	str	r2, [r6, #0]
 8006f74:	681e      	ldr	r6, [r3, #0]
 8006f76:	6862      	ldr	r2, [r4, #4]
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f7f9 f960 	bl	8000240 <memchr>
 8006f80:	b108      	cbz	r0, 8006f86 <_printf_i+0x1e6>
 8006f82:	1b80      	subs	r0, r0, r6
 8006f84:	6060      	str	r0, [r4, #4]
 8006f86:	6863      	ldr	r3, [r4, #4]
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f90:	e7aa      	b.n	8006ee8 <_printf_i+0x148>
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	4632      	mov	r2, r6
 8006f96:	4649      	mov	r1, r9
 8006f98:	4640      	mov	r0, r8
 8006f9a:	47d0      	blx	sl
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d0ad      	beq.n	8006efc <_printf_i+0x15c>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	079b      	lsls	r3, r3, #30
 8006fa4:	d413      	bmi.n	8006fce <_printf_i+0x22e>
 8006fa6:	68e0      	ldr	r0, [r4, #12]
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	4298      	cmp	r0, r3
 8006fac:	bfb8      	it	lt
 8006fae:	4618      	movlt	r0, r3
 8006fb0:	e7a6      	b.n	8006f00 <_printf_i+0x160>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	4649      	mov	r1, r9
 8006fb8:	4640      	mov	r0, r8
 8006fba:	47d0      	blx	sl
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d09d      	beq.n	8006efc <_printf_i+0x15c>
 8006fc0:	3501      	adds	r5, #1
 8006fc2:	68e3      	ldr	r3, [r4, #12]
 8006fc4:	9903      	ldr	r1, [sp, #12]
 8006fc6:	1a5b      	subs	r3, r3, r1
 8006fc8:	42ab      	cmp	r3, r5
 8006fca:	dcf2      	bgt.n	8006fb2 <_printf_i+0x212>
 8006fcc:	e7eb      	b.n	8006fa6 <_printf_i+0x206>
 8006fce:	2500      	movs	r5, #0
 8006fd0:	f104 0619 	add.w	r6, r4, #25
 8006fd4:	e7f5      	b.n	8006fc2 <_printf_i+0x222>
 8006fd6:	bf00      	nop
 8006fd8:	0800776a 	.word	0x0800776a
 8006fdc:	0800777b 	.word	0x0800777b

08006fe0 <__sflush_r>:
 8006fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe8:	0716      	lsls	r6, r2, #28
 8006fea:	4605      	mov	r5, r0
 8006fec:	460c      	mov	r4, r1
 8006fee:	d454      	bmi.n	800709a <__sflush_r+0xba>
 8006ff0:	684b      	ldr	r3, [r1, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dc02      	bgt.n	8006ffc <__sflush_r+0x1c>
 8006ff6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	dd48      	ble.n	800708e <__sflush_r+0xae>
 8006ffc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ffe:	2e00      	cmp	r6, #0
 8007000:	d045      	beq.n	800708e <__sflush_r+0xae>
 8007002:	2300      	movs	r3, #0
 8007004:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007008:	682f      	ldr	r7, [r5, #0]
 800700a:	6a21      	ldr	r1, [r4, #32]
 800700c:	602b      	str	r3, [r5, #0]
 800700e:	d030      	beq.n	8007072 <__sflush_r+0x92>
 8007010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	0759      	lsls	r1, r3, #29
 8007016:	d505      	bpl.n	8007024 <__sflush_r+0x44>
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	1ad2      	subs	r2, r2, r3
 800701c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800701e:	b10b      	cbz	r3, 8007024 <__sflush_r+0x44>
 8007020:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007022:	1ad2      	subs	r2, r2, r3
 8007024:	2300      	movs	r3, #0
 8007026:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007028:	6a21      	ldr	r1, [r4, #32]
 800702a:	4628      	mov	r0, r5
 800702c:	47b0      	blx	r6
 800702e:	1c43      	adds	r3, r0, #1
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	d106      	bne.n	8007042 <__sflush_r+0x62>
 8007034:	6829      	ldr	r1, [r5, #0]
 8007036:	291d      	cmp	r1, #29
 8007038:	d82b      	bhi.n	8007092 <__sflush_r+0xb2>
 800703a:	4a2a      	ldr	r2, [pc, #168]	@ (80070e4 <__sflush_r+0x104>)
 800703c:	410a      	asrs	r2, r1
 800703e:	07d6      	lsls	r6, r2, #31
 8007040:	d427      	bmi.n	8007092 <__sflush_r+0xb2>
 8007042:	2200      	movs	r2, #0
 8007044:	6062      	str	r2, [r4, #4]
 8007046:	04d9      	lsls	r1, r3, #19
 8007048:	6922      	ldr	r2, [r4, #16]
 800704a:	6022      	str	r2, [r4, #0]
 800704c:	d504      	bpl.n	8007058 <__sflush_r+0x78>
 800704e:	1c42      	adds	r2, r0, #1
 8007050:	d101      	bne.n	8007056 <__sflush_r+0x76>
 8007052:	682b      	ldr	r3, [r5, #0]
 8007054:	b903      	cbnz	r3, 8007058 <__sflush_r+0x78>
 8007056:	6560      	str	r0, [r4, #84]	@ 0x54
 8007058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800705a:	602f      	str	r7, [r5, #0]
 800705c:	b1b9      	cbz	r1, 800708e <__sflush_r+0xae>
 800705e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007062:	4299      	cmp	r1, r3
 8007064:	d002      	beq.n	800706c <__sflush_r+0x8c>
 8007066:	4628      	mov	r0, r5
 8007068:	f7ff fb48 	bl	80066fc <_free_r>
 800706c:	2300      	movs	r3, #0
 800706e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007070:	e00d      	b.n	800708e <__sflush_r+0xae>
 8007072:	2301      	movs	r3, #1
 8007074:	4628      	mov	r0, r5
 8007076:	47b0      	blx	r6
 8007078:	4602      	mov	r2, r0
 800707a:	1c50      	adds	r0, r2, #1
 800707c:	d1c9      	bne.n	8007012 <__sflush_r+0x32>
 800707e:	682b      	ldr	r3, [r5, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d0c6      	beq.n	8007012 <__sflush_r+0x32>
 8007084:	2b1d      	cmp	r3, #29
 8007086:	d001      	beq.n	800708c <__sflush_r+0xac>
 8007088:	2b16      	cmp	r3, #22
 800708a:	d11e      	bne.n	80070ca <__sflush_r+0xea>
 800708c:	602f      	str	r7, [r5, #0]
 800708e:	2000      	movs	r0, #0
 8007090:	e022      	b.n	80070d8 <__sflush_r+0xf8>
 8007092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007096:	b21b      	sxth	r3, r3
 8007098:	e01b      	b.n	80070d2 <__sflush_r+0xf2>
 800709a:	690f      	ldr	r7, [r1, #16]
 800709c:	2f00      	cmp	r7, #0
 800709e:	d0f6      	beq.n	800708e <__sflush_r+0xae>
 80070a0:	0793      	lsls	r3, r2, #30
 80070a2:	680e      	ldr	r6, [r1, #0]
 80070a4:	bf08      	it	eq
 80070a6:	694b      	ldreq	r3, [r1, #20]
 80070a8:	600f      	str	r7, [r1, #0]
 80070aa:	bf18      	it	ne
 80070ac:	2300      	movne	r3, #0
 80070ae:	eba6 0807 	sub.w	r8, r6, r7
 80070b2:	608b      	str	r3, [r1, #8]
 80070b4:	f1b8 0f00 	cmp.w	r8, #0
 80070b8:	dde9      	ble.n	800708e <__sflush_r+0xae>
 80070ba:	6a21      	ldr	r1, [r4, #32]
 80070bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070be:	4643      	mov	r3, r8
 80070c0:	463a      	mov	r2, r7
 80070c2:	4628      	mov	r0, r5
 80070c4:	47b0      	blx	r6
 80070c6:	2800      	cmp	r0, #0
 80070c8:	dc08      	bgt.n	80070dc <__sflush_r+0xfc>
 80070ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070dc:	4407      	add	r7, r0
 80070de:	eba8 0800 	sub.w	r8, r8, r0
 80070e2:	e7e7      	b.n	80070b4 <__sflush_r+0xd4>
 80070e4:	dfbffffe 	.word	0xdfbffffe

080070e8 <_fflush_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	690b      	ldr	r3, [r1, #16]
 80070ec:	4605      	mov	r5, r0
 80070ee:	460c      	mov	r4, r1
 80070f0:	b913      	cbnz	r3, 80070f8 <_fflush_r+0x10>
 80070f2:	2500      	movs	r5, #0
 80070f4:	4628      	mov	r0, r5
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	b118      	cbz	r0, 8007102 <_fflush_r+0x1a>
 80070fa:	6a03      	ldr	r3, [r0, #32]
 80070fc:	b90b      	cbnz	r3, 8007102 <_fflush_r+0x1a>
 80070fe:	f7ff f8a5 	bl	800624c <__sinit>
 8007102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f3      	beq.n	80070f2 <_fflush_r+0xa>
 800710a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800710c:	07d0      	lsls	r0, r2, #31
 800710e:	d404      	bmi.n	800711a <_fflush_r+0x32>
 8007110:	0599      	lsls	r1, r3, #22
 8007112:	d402      	bmi.n	800711a <_fflush_r+0x32>
 8007114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007116:	f7ff fac2 	bl	800669e <__retarget_lock_acquire_recursive>
 800711a:	4628      	mov	r0, r5
 800711c:	4621      	mov	r1, r4
 800711e:	f7ff ff5f 	bl	8006fe0 <__sflush_r>
 8007122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007124:	07da      	lsls	r2, r3, #31
 8007126:	4605      	mov	r5, r0
 8007128:	d4e4      	bmi.n	80070f4 <_fflush_r+0xc>
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	059b      	lsls	r3, r3, #22
 800712e:	d4e1      	bmi.n	80070f4 <_fflush_r+0xc>
 8007130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007132:	f7ff fab5 	bl	80066a0 <__retarget_lock_release_recursive>
 8007136:	e7dd      	b.n	80070f4 <_fflush_r+0xc>

08007138 <fiprintf>:
 8007138:	b40e      	push	{r1, r2, r3}
 800713a:	b503      	push	{r0, r1, lr}
 800713c:	4601      	mov	r1, r0
 800713e:	ab03      	add	r3, sp, #12
 8007140:	4805      	ldr	r0, [pc, #20]	@ (8007158 <fiprintf+0x20>)
 8007142:	f853 2b04 	ldr.w	r2, [r3], #4
 8007146:	6800      	ldr	r0, [r0, #0]
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	f7ff fca3 	bl	8006a94 <_vfiprintf_r>
 800714e:	b002      	add	sp, #8
 8007150:	f85d eb04 	ldr.w	lr, [sp], #4
 8007154:	b003      	add	sp, #12
 8007156:	4770      	bx	lr
 8007158:	20000028 	.word	0x20000028

0800715c <__swbuf_r>:
 800715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715e:	460e      	mov	r6, r1
 8007160:	4614      	mov	r4, r2
 8007162:	4605      	mov	r5, r0
 8007164:	b118      	cbz	r0, 800716e <__swbuf_r+0x12>
 8007166:	6a03      	ldr	r3, [r0, #32]
 8007168:	b90b      	cbnz	r3, 800716e <__swbuf_r+0x12>
 800716a:	f7ff f86f 	bl	800624c <__sinit>
 800716e:	69a3      	ldr	r3, [r4, #24]
 8007170:	60a3      	str	r3, [r4, #8]
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	071a      	lsls	r2, r3, #28
 8007176:	d501      	bpl.n	800717c <__swbuf_r+0x20>
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	b943      	cbnz	r3, 800718e <__swbuf_r+0x32>
 800717c:	4621      	mov	r1, r4
 800717e:	4628      	mov	r0, r5
 8007180:	f000 f82a 	bl	80071d8 <__swsetup_r>
 8007184:	b118      	cbz	r0, 800718e <__swbuf_r+0x32>
 8007186:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800718a:	4638      	mov	r0, r7
 800718c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	6922      	ldr	r2, [r4, #16]
 8007192:	1a98      	subs	r0, r3, r2
 8007194:	6963      	ldr	r3, [r4, #20]
 8007196:	b2f6      	uxtb	r6, r6
 8007198:	4283      	cmp	r3, r0
 800719a:	4637      	mov	r7, r6
 800719c:	dc05      	bgt.n	80071aa <__swbuf_r+0x4e>
 800719e:	4621      	mov	r1, r4
 80071a0:	4628      	mov	r0, r5
 80071a2:	f7ff ffa1 	bl	80070e8 <_fflush_r>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d1ed      	bne.n	8007186 <__swbuf_r+0x2a>
 80071aa:	68a3      	ldr	r3, [r4, #8]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	60a3      	str	r3, [r4, #8]
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	6022      	str	r2, [r4, #0]
 80071b6:	701e      	strb	r6, [r3, #0]
 80071b8:	6962      	ldr	r2, [r4, #20]
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	429a      	cmp	r2, r3
 80071be:	d004      	beq.n	80071ca <__swbuf_r+0x6e>
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	07db      	lsls	r3, r3, #31
 80071c4:	d5e1      	bpl.n	800718a <__swbuf_r+0x2e>
 80071c6:	2e0a      	cmp	r6, #10
 80071c8:	d1df      	bne.n	800718a <__swbuf_r+0x2e>
 80071ca:	4621      	mov	r1, r4
 80071cc:	4628      	mov	r0, r5
 80071ce:	f7ff ff8b 	bl	80070e8 <_fflush_r>
 80071d2:	2800      	cmp	r0, #0
 80071d4:	d0d9      	beq.n	800718a <__swbuf_r+0x2e>
 80071d6:	e7d6      	b.n	8007186 <__swbuf_r+0x2a>

080071d8 <__swsetup_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4b29      	ldr	r3, [pc, #164]	@ (8007280 <__swsetup_r+0xa8>)
 80071dc:	4605      	mov	r5, r0
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	460c      	mov	r4, r1
 80071e2:	b118      	cbz	r0, 80071ec <__swsetup_r+0x14>
 80071e4:	6a03      	ldr	r3, [r0, #32]
 80071e6:	b90b      	cbnz	r3, 80071ec <__swsetup_r+0x14>
 80071e8:	f7ff f830 	bl	800624c <__sinit>
 80071ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f0:	0719      	lsls	r1, r3, #28
 80071f2:	d422      	bmi.n	800723a <__swsetup_r+0x62>
 80071f4:	06da      	lsls	r2, r3, #27
 80071f6:	d407      	bmi.n	8007208 <__swsetup_r+0x30>
 80071f8:	2209      	movs	r2, #9
 80071fa:	602a      	str	r2, [r5, #0]
 80071fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007200:	81a3      	strh	r3, [r4, #12]
 8007202:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007206:	e033      	b.n	8007270 <__swsetup_r+0x98>
 8007208:	0758      	lsls	r0, r3, #29
 800720a:	d512      	bpl.n	8007232 <__swsetup_r+0x5a>
 800720c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800720e:	b141      	cbz	r1, 8007222 <__swsetup_r+0x4a>
 8007210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007214:	4299      	cmp	r1, r3
 8007216:	d002      	beq.n	800721e <__swsetup_r+0x46>
 8007218:	4628      	mov	r0, r5
 800721a:	f7ff fa6f 	bl	80066fc <_free_r>
 800721e:	2300      	movs	r3, #0
 8007220:	6363      	str	r3, [r4, #52]	@ 0x34
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007228:	81a3      	strh	r3, [r4, #12]
 800722a:	2300      	movs	r3, #0
 800722c:	6063      	str	r3, [r4, #4]
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	89a3      	ldrh	r3, [r4, #12]
 8007234:	f043 0308 	orr.w	r3, r3, #8
 8007238:	81a3      	strh	r3, [r4, #12]
 800723a:	6923      	ldr	r3, [r4, #16]
 800723c:	b94b      	cbnz	r3, 8007252 <__swsetup_r+0x7a>
 800723e:	89a3      	ldrh	r3, [r4, #12]
 8007240:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007248:	d003      	beq.n	8007252 <__swsetup_r+0x7a>
 800724a:	4621      	mov	r1, r4
 800724c:	4628      	mov	r0, r5
 800724e:	f000 f88e 	bl	800736e <__smakebuf_r>
 8007252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007256:	f013 0201 	ands.w	r2, r3, #1
 800725a:	d00a      	beq.n	8007272 <__swsetup_r+0x9a>
 800725c:	2200      	movs	r2, #0
 800725e:	60a2      	str	r2, [r4, #8]
 8007260:	6962      	ldr	r2, [r4, #20]
 8007262:	4252      	negs	r2, r2
 8007264:	61a2      	str	r2, [r4, #24]
 8007266:	6922      	ldr	r2, [r4, #16]
 8007268:	b942      	cbnz	r2, 800727c <__swsetup_r+0xa4>
 800726a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800726e:	d1c5      	bne.n	80071fc <__swsetup_r+0x24>
 8007270:	bd38      	pop	{r3, r4, r5, pc}
 8007272:	0799      	lsls	r1, r3, #30
 8007274:	bf58      	it	pl
 8007276:	6962      	ldrpl	r2, [r4, #20]
 8007278:	60a2      	str	r2, [r4, #8]
 800727a:	e7f4      	b.n	8007266 <__swsetup_r+0x8e>
 800727c:	2000      	movs	r0, #0
 800727e:	e7f7      	b.n	8007270 <__swsetup_r+0x98>
 8007280:	20000028 	.word	0x20000028

08007284 <memmove>:
 8007284:	4288      	cmp	r0, r1
 8007286:	b510      	push	{r4, lr}
 8007288:	eb01 0402 	add.w	r4, r1, r2
 800728c:	d902      	bls.n	8007294 <memmove+0x10>
 800728e:	4284      	cmp	r4, r0
 8007290:	4623      	mov	r3, r4
 8007292:	d807      	bhi.n	80072a4 <memmove+0x20>
 8007294:	1e43      	subs	r3, r0, #1
 8007296:	42a1      	cmp	r1, r4
 8007298:	d008      	beq.n	80072ac <memmove+0x28>
 800729a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800729e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072a2:	e7f8      	b.n	8007296 <memmove+0x12>
 80072a4:	4402      	add	r2, r0
 80072a6:	4601      	mov	r1, r0
 80072a8:	428a      	cmp	r2, r1
 80072aa:	d100      	bne.n	80072ae <memmove+0x2a>
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072b6:	e7f7      	b.n	80072a8 <memmove+0x24>

080072b8 <abort>:
 80072b8:	b508      	push	{r3, lr}
 80072ba:	2006      	movs	r0, #6
 80072bc:	f000 f8bc 	bl	8007438 <raise>
 80072c0:	2001      	movs	r0, #1
 80072c2:	f7f9 fd87 	bl	8000dd4 <_exit>

080072c6 <_realloc_r>:
 80072c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ca:	4680      	mov	r8, r0
 80072cc:	4615      	mov	r5, r2
 80072ce:	460c      	mov	r4, r1
 80072d0:	b921      	cbnz	r1, 80072dc <_realloc_r+0x16>
 80072d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072d6:	4611      	mov	r1, r2
 80072d8:	f7fe bea0 	b.w	800601c <_malloc_r>
 80072dc:	b92a      	cbnz	r2, 80072ea <_realloc_r+0x24>
 80072de:	f7ff fa0d 	bl	80066fc <_free_r>
 80072e2:	2400      	movs	r4, #0
 80072e4:	4620      	mov	r0, r4
 80072e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ea:	f000 f8e3 	bl	80074b4 <_malloc_usable_size_r>
 80072ee:	4285      	cmp	r5, r0
 80072f0:	4606      	mov	r6, r0
 80072f2:	d802      	bhi.n	80072fa <_realloc_r+0x34>
 80072f4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80072f8:	d8f4      	bhi.n	80072e4 <_realloc_r+0x1e>
 80072fa:	4629      	mov	r1, r5
 80072fc:	4640      	mov	r0, r8
 80072fe:	f7fe fe8d 	bl	800601c <_malloc_r>
 8007302:	4607      	mov	r7, r0
 8007304:	2800      	cmp	r0, #0
 8007306:	d0ec      	beq.n	80072e2 <_realloc_r+0x1c>
 8007308:	42b5      	cmp	r5, r6
 800730a:	462a      	mov	r2, r5
 800730c:	4621      	mov	r1, r4
 800730e:	bf28      	it	cs
 8007310:	4632      	movcs	r2, r6
 8007312:	f7ff f9c6 	bl	80066a2 <memcpy>
 8007316:	4621      	mov	r1, r4
 8007318:	4640      	mov	r0, r8
 800731a:	f7ff f9ef 	bl	80066fc <_free_r>
 800731e:	463c      	mov	r4, r7
 8007320:	e7e0      	b.n	80072e4 <_realloc_r+0x1e>

08007322 <__swhatbuf_r>:
 8007322:	b570      	push	{r4, r5, r6, lr}
 8007324:	460c      	mov	r4, r1
 8007326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732a:	2900      	cmp	r1, #0
 800732c:	b096      	sub	sp, #88	@ 0x58
 800732e:	4615      	mov	r5, r2
 8007330:	461e      	mov	r6, r3
 8007332:	da0d      	bge.n	8007350 <__swhatbuf_r+0x2e>
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800733a:	f04f 0100 	mov.w	r1, #0
 800733e:	bf14      	ite	ne
 8007340:	2340      	movne	r3, #64	@ 0x40
 8007342:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007346:	2000      	movs	r0, #0
 8007348:	6031      	str	r1, [r6, #0]
 800734a:	602b      	str	r3, [r5, #0]
 800734c:	b016      	add	sp, #88	@ 0x58
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	466a      	mov	r2, sp
 8007352:	f000 f879 	bl	8007448 <_fstat_r>
 8007356:	2800      	cmp	r0, #0
 8007358:	dbec      	blt.n	8007334 <__swhatbuf_r+0x12>
 800735a:	9901      	ldr	r1, [sp, #4]
 800735c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007360:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007364:	4259      	negs	r1, r3
 8007366:	4159      	adcs	r1, r3
 8007368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800736c:	e7eb      	b.n	8007346 <__swhatbuf_r+0x24>

0800736e <__smakebuf_r>:
 800736e:	898b      	ldrh	r3, [r1, #12]
 8007370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007372:	079d      	lsls	r5, r3, #30
 8007374:	4606      	mov	r6, r0
 8007376:	460c      	mov	r4, r1
 8007378:	d507      	bpl.n	800738a <__smakebuf_r+0x1c>
 800737a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800737e:	6023      	str	r3, [r4, #0]
 8007380:	6123      	str	r3, [r4, #16]
 8007382:	2301      	movs	r3, #1
 8007384:	6163      	str	r3, [r4, #20]
 8007386:	b003      	add	sp, #12
 8007388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800738a:	ab01      	add	r3, sp, #4
 800738c:	466a      	mov	r2, sp
 800738e:	f7ff ffc8 	bl	8007322 <__swhatbuf_r>
 8007392:	9f00      	ldr	r7, [sp, #0]
 8007394:	4605      	mov	r5, r0
 8007396:	4639      	mov	r1, r7
 8007398:	4630      	mov	r0, r6
 800739a:	f7fe fe3f 	bl	800601c <_malloc_r>
 800739e:	b948      	cbnz	r0, 80073b4 <__smakebuf_r+0x46>
 80073a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a4:	059a      	lsls	r2, r3, #22
 80073a6:	d4ee      	bmi.n	8007386 <__smakebuf_r+0x18>
 80073a8:	f023 0303 	bic.w	r3, r3, #3
 80073ac:	f043 0302 	orr.w	r3, r3, #2
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	e7e2      	b.n	800737a <__smakebuf_r+0xc>
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	6020      	str	r0, [r4, #0]
 80073b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073bc:	81a3      	strh	r3, [r4, #12]
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073c4:	b15b      	cbz	r3, 80073de <__smakebuf_r+0x70>
 80073c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ca:	4630      	mov	r0, r6
 80073cc:	f000 f84e 	bl	800746c <_isatty_r>
 80073d0:	b128      	cbz	r0, 80073de <__smakebuf_r+0x70>
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	f023 0303 	bic.w	r3, r3, #3
 80073d8:	f043 0301 	orr.w	r3, r3, #1
 80073dc:	81a3      	strh	r3, [r4, #12]
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	431d      	orrs	r5, r3
 80073e2:	81a5      	strh	r5, [r4, #12]
 80073e4:	e7cf      	b.n	8007386 <__smakebuf_r+0x18>

080073e6 <_raise_r>:
 80073e6:	291f      	cmp	r1, #31
 80073e8:	b538      	push	{r3, r4, r5, lr}
 80073ea:	4605      	mov	r5, r0
 80073ec:	460c      	mov	r4, r1
 80073ee:	d904      	bls.n	80073fa <_raise_r+0x14>
 80073f0:	2316      	movs	r3, #22
 80073f2:	6003      	str	r3, [r0, #0]
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073f8:	bd38      	pop	{r3, r4, r5, pc}
 80073fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80073fc:	b112      	cbz	r2, 8007404 <_raise_r+0x1e>
 80073fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007402:	b94b      	cbnz	r3, 8007418 <_raise_r+0x32>
 8007404:	4628      	mov	r0, r5
 8007406:	f000 f853 	bl	80074b0 <_getpid_r>
 800740a:	4622      	mov	r2, r4
 800740c:	4601      	mov	r1, r0
 800740e:	4628      	mov	r0, r5
 8007410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007414:	f000 b83a 	b.w	800748c <_kill_r>
 8007418:	2b01      	cmp	r3, #1
 800741a:	d00a      	beq.n	8007432 <_raise_r+0x4c>
 800741c:	1c59      	adds	r1, r3, #1
 800741e:	d103      	bne.n	8007428 <_raise_r+0x42>
 8007420:	2316      	movs	r3, #22
 8007422:	6003      	str	r3, [r0, #0]
 8007424:	2001      	movs	r0, #1
 8007426:	e7e7      	b.n	80073f8 <_raise_r+0x12>
 8007428:	2100      	movs	r1, #0
 800742a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800742e:	4620      	mov	r0, r4
 8007430:	4798      	blx	r3
 8007432:	2000      	movs	r0, #0
 8007434:	e7e0      	b.n	80073f8 <_raise_r+0x12>
	...

08007438 <raise>:
 8007438:	4b02      	ldr	r3, [pc, #8]	@ (8007444 <raise+0xc>)
 800743a:	4601      	mov	r1, r0
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	f7ff bfd2 	b.w	80073e6 <_raise_r>
 8007442:	bf00      	nop
 8007444:	20000028 	.word	0x20000028

08007448 <_fstat_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4d07      	ldr	r5, [pc, #28]	@ (8007468 <_fstat_r+0x20>)
 800744c:	2300      	movs	r3, #0
 800744e:	4604      	mov	r4, r0
 8007450:	4608      	mov	r0, r1
 8007452:	4611      	mov	r1, r2
 8007454:	602b      	str	r3, [r5, #0]
 8007456:	f7f9 fd0d 	bl	8000e74 <_fstat>
 800745a:	1c43      	adds	r3, r0, #1
 800745c:	d102      	bne.n	8007464 <_fstat_r+0x1c>
 800745e:	682b      	ldr	r3, [r5, #0]
 8007460:	b103      	cbz	r3, 8007464 <_fstat_r+0x1c>
 8007462:	6023      	str	r3, [r4, #0]
 8007464:	bd38      	pop	{r3, r4, r5, pc}
 8007466:	bf00      	nop
 8007468:	20004714 	.word	0x20004714

0800746c <_isatty_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4d06      	ldr	r5, [pc, #24]	@ (8007488 <_isatty_r+0x1c>)
 8007470:	2300      	movs	r3, #0
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	f7f9 fd0c 	bl	8000e94 <_isatty>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_isatty_r+0x1a>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	b103      	cbz	r3, 8007486 <_isatty_r+0x1a>
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	20004714 	.word	0x20004714

0800748c <_kill_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d07      	ldr	r5, [pc, #28]	@ (80074ac <_kill_r+0x20>)
 8007490:	2300      	movs	r3, #0
 8007492:	4604      	mov	r4, r0
 8007494:	4608      	mov	r0, r1
 8007496:	4611      	mov	r1, r2
 8007498:	602b      	str	r3, [r5, #0]
 800749a:	f7f9 fc8b 	bl	8000db4 <_kill>
 800749e:	1c43      	adds	r3, r0, #1
 80074a0:	d102      	bne.n	80074a8 <_kill_r+0x1c>
 80074a2:	682b      	ldr	r3, [r5, #0]
 80074a4:	b103      	cbz	r3, 80074a8 <_kill_r+0x1c>
 80074a6:	6023      	str	r3, [r4, #0]
 80074a8:	bd38      	pop	{r3, r4, r5, pc}
 80074aa:	bf00      	nop
 80074ac:	20004714 	.word	0x20004714

080074b0 <_getpid_r>:
 80074b0:	f7f9 bc78 	b.w	8000da4 <_getpid>

080074b4 <_malloc_usable_size_r>:
 80074b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b8:	1f18      	subs	r0, r3, #4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	bfbc      	itt	lt
 80074be:	580b      	ldrlt	r3, [r1, r0]
 80074c0:	18c0      	addlt	r0, r0, r3
 80074c2:	4770      	bx	lr

080074c4 <_init>:
 80074c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c6:	bf00      	nop
 80074c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ca:	bc08      	pop	{r3}
 80074cc:	469e      	mov	lr, r3
 80074ce:	4770      	bx	lr

080074d0 <_fini>:
 80074d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d2:	bf00      	nop
 80074d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d6:	bc08      	pop	{r3}
 80074d8:	469e      	mov	lr, r3
 80074da:	4770      	bx	lr
